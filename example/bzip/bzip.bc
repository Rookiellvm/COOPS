; ModuleID = 'Debug\AllBCfile.bc'
source_filename = "llvm-link"
target datalayout = "e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32"
target triple = "i686-pc-windows-msvc16.0.0"

%struct.spec_fd_t = type { i32, i32, i32, i8* }
%struct._iobuf = type { i8*, i32, i8*, i32, i32, i32, i32, i8* }
%struct.StackElem = type { i32, i32, i32 }

$"??_C@_0FP@CABMAMPD@?6?$CFs?3?5Compressed?5file?5ends?5unexpe@" = comdat any

$"??_C@_0CM@POIOIBDA@?$CFs?3?5Deleting?5output?5file?5?$CFs?0?5if?5@" = comdat any

$"??_C@_0DL@DLDEIDOB@?$CFs?3?5WARNING?3?5deletion?5of?5output?5@" = comdat any

$"??_C@_0GI@EEOGIJNN@?$CFs?3?5WARNING?3?5some?5files?5have?5not@" = comdat any

$"??_C@_0PD@COAGOICH@?6It?5is?5possible?5that?5the?5compres@" = comdat any

$"??_C@_0CE@HHFBEBNN@?7Input?5file?5?$DN?5?$CFs?0?5output?5file?5?$DN?5@" = comdat any

$"??_C@_0BF@HGNLIOJH@hbMakeCodeLengths?$CI1?$CJ?$AA@" = comdat any

$"??_C@_0BF@HEJNDAMO@hbMakeCodeLengths?$CI2?$CJ?$AA@" = comdat any

$"??_C@_0GM@FDPANDAG@?6?$CFs?3?5PANIC?5?9?9?5internal?5consisten@" = comdat any

$"??_C@_0JC@IBNBCLCJ@?6?$CFs?3?5Can?8t?5allocate?5enough?5memor@" = comdat any

$"??_C@_0BM@FDMAIAHH@setDecompressStructureSizes?$AA@" = comdat any

$"??_C@_0MO@HPEGJDIN@?6?$CFs?3?5Can?8t?5allocate?5enough?5memor@" = comdat any

$"??_C@_0EA@HNDFBPHF@?5?5?5?5?5?5?$CFd?5in?5block?0?5?$CFd?5after?5MTF?5@" = comdat any

$"??_C@_0BB@KGNNAFEG@sendMTFValues?$CI0?$CJ?$AA@" = comdat any

$"??_C@_0DL@FBIPBGKK@?5?5?5?5?5?5initial?5group?5?$CFd?0?5?$FL?$CFd?5?4?4?5?$CF@" = comdat any

$"??_C@_0CJ@LBIBLMKO@?5?5?5?5?5?5pass?5?$CFd?3?5size?5is?5?$CFd?0?5grp?5u@" = comdat any

$"??_C@_03JDANDILB@?$CFd?5?$AA@" = comdat any

$"??_C@_01EEMJAFIK@?6?$AA@" = comdat any

$"??_C@_0BB@KHBPGPHB@sendMTFValues?$CI1?$CJ?$AA@" = comdat any

$"??_C@_0BB@KFFJNBCI@sendMTFValues?$CI2?$CJ?$AA@" = comdat any

$"??_C@_0BB@KEJLLLBP@sendMTFValues?$CI3?$CJ?$AA@" = comdat any

$"??_C@_0BB@KBNEKNJK@sendMTFValues?$CI4?$CJ?$AA@" = comdat any

$"??_C@_0BK@INMLPPBK@?5?5?5?5?5?5bytes?3?5mapping?5?$CFd?0?5?$AA@" = comdat any

$"??_C@_0P@ILGKEMPB@selectors?5?$CFd?0?5?$AA@" = comdat any

$"??_C@_0BC@JJJGEDA@code?5lengths?5?$CFd?0?5?$AA@" = comdat any

$"??_C@_0BB@KABGMHKN@sendMTFValues?$CI5?$CJ?$AA@" = comdat any

$"??_C@_09EGPKCPJN@codes?5?$CFd?6?$AA@" = comdat any

$"??_C@_0GD@DNPAPOIP@?6?$CFs?3?5block?5overrun?5during?5decomp@" = comdat any

$"??_C@_0BO@OKPFPLKN@?5?5?5?5?5?5?5?5?5?5shell?5increment?5?$CFd?6?$AA@" = comdat any

$"??_C@_0BJ@IKCOPFHE@stack?5overflow?5in?5qSort3?$AA@" = comdat any

$"??_C@_0BN@FMNKNGG@?5?5?5?5?5?5?5?5sort?5initialise?5?4?4?4?6?$AA@" = comdat any

$"??_C@_0BI@GJAKMPEE@?5?5?5?5?5?5?5?5simpleSort?5?4?4?4?6?$AA@" = comdat any

$"??_C@_0BK@EIDLPDKI@?5?5?5?5?5?5?5?5simpleSort?5done?4?6?$AA@" = comdat any

$"??_C@_0BM@MNJOLIPF@?5?5?5?5?5?5?5?5bucket?5sorting?5?4?4?4?6?$AA@" = comdat any

$"??_C@_0DA@OFGJDDOF@?5?5?5?5?5?5?5?5qsort?5?$FL0x?$CFx?0?50x?$CFx?$FN?5?5?5don@" = comdat any

$"??_C@_06BFOGNJGB@sortIt?$AA@" = comdat any

$"??_C@_0CM@BLJANJDD@?5?5?5?5?5?5?5?5?$CFd?5pointers?0?5?$CFd?5sorted?0?5@" = comdat any

$"??_C@_0CG@LHABOPOK@?5?5?5?5?5?5?$CFd?5work?0?5?$CFd?5block?0?5ratio?5?$CF@" = comdat any

$"??_C@_0CI@BAMFFDEN@?5?5?5?5sorting?5aborted?$DL?5randomising@" = comdat any

$"??_C@_0CD@GFOAHPIL@?5?5?5?5?5?5?$CFd?5work?0?5?$CFd?5block?0?5ratio?5?$CF@" = comdat any

$"??_C@_0BL@LDLCMJGO@doReversibleTransformation?$AA@" = comdat any

$"??_C@_0BK@LDHEAIKH@getRLEpair?3?5ungetc?5failed?$AA@" = comdat any

$"??_C@_0DL@COPHMPBD@?5?5?5?5block?5?$CFd?3?5crc?5?$DN?50x?$CF8x?0?5combi@" = comdat any

$"??_C@_00CNPNBAHC@?$AA@" = comdat any

$"??_C@_01LKDEMHDF@s?$AA@" = comdat any

$"??_C@_0CF@OEHDEGJO@?5?5?5?5?$CFd?5block?$CFs?5needed?5randomisat@" = comdat any

$"??_C@_0CC@CFAJDODG@?5?5?5?5final?5combined?5CRC?5?$DN?50x?$CFx?6?5?5@" = comdat any

$"??_C@_0DJ@NACHODOJ@?$CF6?43f?31?0?5?$CF6?43f?5bits?1byte?0?5?$CF5?42f?$CF@" = comdat any

$"??_C@_0EB@PIENDKAN@?6?$CFs?3?5I?1O?5or?5other?5error?0?5bailing@" = comdat any

$"??_C@_05CDJMJPEC@?6?5?5?5?5?$AA@" = comdat any

$"??_C@_0P@DAOCLJBE@?$FL?$CFd?3?5huff?$CLmtf?5?$AA@" = comdat any

$"??_C@_06LOKMEELB@rt?$CLrld?$AA@" = comdat any

$"??_C@_0O@PHPJJCFF@?5?$HL0x?$CFx?0?50x?$CFx?$HN?$AA@" = comdat any

$"??_C@_02PBFOLPKM@?$FN?5?$AA@" = comdat any

$"??_C@_0DD@BPJILLIJ@combined?5CRCs?3?5stored?5?$DN?50x?$CFx?0?5co@" = comdat any

$"??_C@_0FH@ELAJDNDD@?6?$CFs?3?5Data?5integrity?5error?5when?5d@" = comdat any

$"??_C@_0FG@ENDAPJHF@?6?$CFs?3?5bad?5block?5header?5in?5the?5com@" = comdat any

$"??_C@_0DC@DKEHONPL@?6?$CFs?3?5bad?5magic?5number?5?$CIie?0?5not?5c@" = comdat any

$"??_C@_0DD@JELJMEBD@?6?$CFs?0?5block?5?$CFd?3?5bad?5header?5?$CInot?5?$DN@" = comdat any

$"??_C@_0BJ@EFKNBPIK@?5?5?5?5block?5?$FL?$CFd?3?5huff?$CLmtf?5?$AA@" = comdat any

$"??_C@_0DH@PBPGJFFK@?6?$CFs?0?5block?5?$CFd?3?5computed?5CRC?5does@" = comdat any

$"??_C@_03DJDALPN@ok?6?$AA@" = comdat any

$"??_C@_0DH@GEOOOFP@?5?5?5?5combined?5CRCs?3?5stored?5?$DN?50x?$CFx@" = comdat any

$"??_C@_0CN@PELOGPKG@?6?$CFs?3?5computed?5CRC?5does?5not?5match@" = comdat any

$"??_C@_0HA@OMFHFLIH@?6?$CFs?3?5error?5when?5reading?5backgrou@" = comdat any

$"??_C@_0FD@DPFPGMHI@?6?$CFs?3?5read?5past?5the?5end?5of?5compre@" = comdat any

$"??_C@_0CP@MAMNFBII@?6?$CFs?3?5Control?9C?5?$CIor?5similar?$CJ?5caug@" = comdat any

$"??_C@_0IM@OOGCOPJG@?6?$CFs?3?5Caught?5a?5SIGSEGV?5or?5SIGBUS?5@" = comdat any

$"??_C@_0HJ@CHPFEBGG@?6?$CFs?3?5Caught?5a?5SIGSEGV?5or?5SIGBUS?5@" = comdat any

$"??_C@_0L@HODMACKF@spec_init?6?$AA@" = comdat any

$"??_C@_0CE@CICPOJPD@spec_init?3?5Error?5mallocing?5memor@" = comdat any

$"??_C@_0BB@FOGGIPDD@Creating?5Chunks?6?$AA@" = comdat any

$"??_C@_0BD@LLLPCEOC@Creating?5Chunk?5?$CFd?6?$AA@" = comdat any

$"??_C@_0BE@GLOHHOFE@Filling?5input?5file?6?$AA@" = comdat any

$"??_C@_0BI@PNOIDAGN@Can?8t?5open?5file?5?$CFs?3?5?$CFs?6?$AA@" = comdat any

$"??_C@_0BL@JAKFMFOB@Error?5reading?5from?5?$CFs?3?5?$CFs?6?$AA@" = comdat any

$"??_C@_0BG@MFFNAFHA@Duplicating?5?$CFd?5bytes?6?$AA@" = comdat any

$"??_C@_0BJ@BAEOOLFB@spec_read?3?5?$CFd?0?5?$CFp?0?5?$CFd?5?$DN?5?$AA@" = comdat any

$"??_C@_0CC@PGADNMPC@spec_read?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD?$CB@" = comdat any

$"??_C@_04OEEBIOEI@EOF?6?$AA@" = comdat any

$"??_C@_03PMGGPEJJ@?$CFd?6?$AA@" = comdat any

$"??_C@_0BB@GPMEHCHC@spec_getc?3?5?$CFd?5?$DN?5?$AA@" = comdat any

$"??_C@_0BD@POGOMCNJ@spec_ungetc?3?5?$CFd?5?$DN?5?$AA@" = comdat any

$"??_C@_0BK@PBMPALNH@spec_ungetc?3?5pos?5?$CFd?5?$DM?$DN?50?6?$AA@" = comdat any

$"??_C@_0EI@JGFIDMH@spec_ungetc?3?5can?8t?5unget?5somethi@" = comdat any

$"??_C@_0BK@NBIONNGF@spec_write?3?5?$CFd?0?5?$CFp?0?5?$CFd?5?$DN?5?$AA@" = comdat any

$"??_C@_0CD@NANFEFEM@spec_write?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD@" = comdat any

$"??_C@_0BF@MPLILGCO@spec_putc?3?5?$CFd?0?5?$CFd?5?$DN?5?$AA@" = comdat any

$"??_C@_0P@IBHKFCCJ@input?4combined?$AA@" = comdat any

$"??_C@_0N@KOLOAFDN@input?4random?$AA@" = comdat any

$"??_C@_01FDFGLJHB@2?$AA@" = comdat any

$"??_C@_0BE@EEBELGKE@Loading?5Input?5Data?6?$AA@" = comdat any

$"??_C@_0BP@KDCDDFCD@Input?5data?5?$CFd?5bytes?5in?5length?6?$AA@" = comdat any

$"??_C@_0BP@KJFPKECC@main?3?5Error?5mallocing?5memory?$CB?6?$AA@" = comdat any

$"??_C@_0CC@KJFJJBAE@Compressing?5Input?5Data?0?5level?5?$CFd@" = comdat any

$"??_C@_0CE@PFHIOJOC@Compressed?5data?5?$CFd?5bytes?5in?5leng@" = comdat any

$"??_C@_0BE@JICHKDFP@Uncompressing?5Data?6?$AA@" = comdat any

$"??_C@_0CG@DJIKCILP@Uncompressed?5data?5?$CFd?5bytes?5in?5le@" = comdat any

$"??_C@_0CD@KACBMJDH@Tested?5?$CFdMB?5buffer?3?5Miscompared?$CB@" = comdat any

$"??_C@_0CG@PNDINMCI@Uncompressed?5data?5compared?5corre@" = comdat any

$"??_C@_0BJ@HBIMNPIC@Tested?5?$CFdMB?5buffer?3?5OK?$CB?6?$AA@" = comdat any

$"??_C@_0M@NPEDOHBA@?$CFf?5seconds?6?$AA@" = comdat any

@numFileNames = dso_local global i32 0, align 4
@numFilesProcessed = dso_local global i32 0, align 4
@crc32Table = dso_local global [256 x i32] [i32 0, i32 79764919, i32 159529838, i32 222504665, i32 319059676, i32 398814059, i32 445009330, i32 507990021, i32 638119352, i32 583659535, i32 797628118, i32 726387553, i32 890018660, i32 835552979, i32 1015980042, i32 944750013, i32 1276238704, i32 1221641927, i32 1167319070, i32 1095957929, i32 1595256236, i32 1540665371, i32 1452775106, i32 1381403509, i32 1780037320, i32 1859660671, i32 1671105958, i32 1733955601, i32 2031960084, i32 2111593891, i32 1889500026, i32 1952343757, i32 -1742489888, i32 -1662866601, i32 -1851683442, i32 -1788833735, i32 -1960329156, i32 -1880695413, i32 -2103051438, i32 -2040207643, i32 -1104454824, i32 -1159051537, i32 -1213636554, i32 -1284997759, i32 -1389417084, i32 -1444007885, i32 -1532160278, i32 -1603531939, i32 -734892656, i32 -789352409, i32 -575645954, i32 -646886583, i32 -952755380, i32 -1007220997, i32 -827056094, i32 -898286187, i32 -231047128, i32 -151282273, i32 -71779514, i32 -8804623, i32 -515967244, i32 -436212925, i32 -390279782, i32 -327299027, i32 881225847, i32 809987520, i32 1023691545, i32 969234094, i32 662832811, i32 591600412, i32 771767749, i32 717299826, i32 311336399, i32 374308984, i32 453813921, i32 533576470, i32 25881363, i32 88864420, i32 134795389, i32 214552010, i32 2023205639, i32 2086057648, i32 1897238633, i32 1976864222, i32 1804852699, i32 1867694188, i32 1645340341, i32 1724971778, i32 1587496639, i32 1516133128, i32 1461550545, i32 1406951526, i32 1302016099, i32 1230646740, i32 1142491917, i32 1087903418, i32 -1398421865, i32 -1469785312, i32 -1524105735, i32 -1578704818, i32 -1079922613, i32 -1151291908, i32 -1239184603, i32 -1293773166, i32 -1968362705, i32 -1905510760, i32 -2094067647, i32 -2014441994, i32 -1716953613, i32 -1654112188, i32 -1876203875, i32 -1796572374, i32 -525066777, i32 -462094256, i32 -382327159, i32 -302564546, i32 -206542021, i32 -143559028, i32 -97365931, i32 -17609246, i32 -960696225, i32 -1031934488, i32 -817968335, i32 -872425850, i32 -709327229, i32 -780559564, i32 -600130067, i32 -654598054, i32 1762451694, i32 1842216281, i32 1619975040, i32 1682949687, i32 2047383090, i32 2127137669, i32 1938468188, i32 2001449195, i32 1325665622, i32 1271206113, i32 1183200824, i32 1111960463, i32 1543535498, i32 1489069629, i32 1434599652, i32 1363369299, i32 622672798, i32 568075817, i32 748617968, i32 677256519, i32 907627842, i32 853037301, i32 1067152940, i32 995781531, i32 51762726, i32 131386257, i32 177728840, i32 240578815, i32 269590778, i32 349224269, i32 429104020, i32 491947555, i32 -248556018, i32 -168932423, i32 -122852000, i32 -60002089, i32 -500490030, i32 -420856475, i32 -341238852, i32 -278395381, i32 -685261898, i32 -739858943, i32 -559578920, i32 -630940305, i32 -1004286614, i32 -1058877219, i32 -845023740, i32 -916395085, i32 -1119974018, i32 -1174433591, i32 -1262701040, i32 -1333941337, i32 -1371866206, i32 -1426332139, i32 -1481064244, i32 -1552294533, i32 -1690935098, i32 -1611170447, i32 -1833673816, i32 -1770699233, i32 -2009983462, i32 -1930228819, i32 -2119160460, i32 -2056179517, i32 1569362073, i32 1498123566, i32 1409854455, i32 1355396672, i32 1317987909, i32 1246755826, i32 1192025387, i32 1137557660, i32 2072149281, i32 2135122070, i32 1912620623, i32 1992383480, i32 1753615357, i32 1816598090, i32 1627664531, i32 1707420964, i32 295390185, i32 358241886, i32 404320391, i32 483945776, i32 43990325, i32 106832002, i32 186451547, i32 266083308, i32 932423249, i32 861060070, i32 1041341759, i32 986742920, i32 613929101, i32 542559546, i32 756411363, i32 701822548, i32 -978770311, i32 -1050133554, i32 -869589737, i32 -924188512, i32 -693284699, i32 -764654318, i32 -550540341, i32 -605129092, i32 -475935807, i32 -413084042, i32 -366743377, i32 -287118056, i32 -257573603, i32 -194731862, i32 -114850189, i32 -35218492, i32 -1984365303, i32 -1921392450, i32 -2143631769, i32 -2063868976, i32 -1698919467, i32 -1635936670, i32 -1824608069, i32 -1744851700, i32 -1347415887, i32 -1418654458, i32 -1506661409, i32 -1561119128, i32 -1129027987, i32 -1200260134, i32 -1254728445, i32 -1309196108], align 4
@globalCrc = common dso_local global i32 0, align 4
@bsStream = common dso_local global i32 0, align 4
@bsLive = common dso_local global i32 0, align 4
@bsBuff = common dso_local global i32 0, align 4
@bytesOut = common dso_local global i32 0, align 4
@bytesIn = common dso_local global i32 0, align 4
@bsWriting = common dso_local global i8 0, align 1
@blockSize100k = common dso_local global i32 0, align 4
@block = common dso_local global i8* null, align 4
@quadrant = common dso_local global i16* null, align 4
@zptr = common dso_local global i32* null, align 4
@ftab = common dso_local global i32* null, align 4
@szptr = common dso_local global i16* null, align 4
@ll16 = common dso_local global i16* null, align 4
@ll4 = common dso_local global i8* null, align 4
@ll8 = common dso_local global i8* null, align 4
@tt = common dso_local global i32* null, align 4
@smallMode = common dso_local global i8 0, align 1
@nInUse = common dso_local global i32 0, align 4
@inUse = common dso_local global [256 x i8] zeroinitializer, align 1
@seqToUnseq = common dso_local global [256 x i8] zeroinitializer, align 1
@unseqToSeq = common dso_local global [256 x i8] zeroinitializer, align 1
@mtfFreq = common dso_local global [258 x i32] zeroinitializer, align 4
@last = common dso_local global i32 0, align 4
@nMTF = common dso_local global i32 0, align 4
@verbosity = common dso_local global i32 0, align 4
@len = common dso_local global [6 x [258 x i8]] zeroinitializer, align 1
@rfreq = common dso_local global [6 x [258 x i32]] zeroinitializer, align 4
@selector = common dso_local global [18002 x i8] zeroinitializer, align 1
@selectorMtf = common dso_local global [18002 x i8] zeroinitializer, align 1
@code = common dso_local global [6 x [258 x i32]] zeroinitializer, align 4
@origPtr = common dso_local global i32 0, align 4
@perm = common dso_local global [6 x [258 x i32]] zeroinitializer, align 4
@base = common dso_local global [6 x [258 x i32]] zeroinitializer, align 4
@limit = common dso_local global [6 x [258 x i32]] zeroinitializer, align 4
@minLens = common dso_local global [6 x i32] zeroinitializer, align 4
@unzftab = common dso_local global [256 x i32] zeroinitializer, align 4
@workDone = common dso_local global i32 0, align 4
@incs = dso_local global [14 x i32] [i32 1, i32 4, i32 13, i32 40, i32 121, i32 364, i32 1093, i32 3280, i32 9841, i32 29524, i32 88573, i32 265720, i32 797161, i32 2391484], align 4
@workLimit = common dso_local global i32 0, align 4
@firstAttempt = common dso_local global i8 0, align 1
@rNums = dso_local global [512 x i32] [i32 619, i32 720, i32 127, i32 481, i32 931, i32 816, i32 813, i32 233, i32 566, i32 247, i32 985, i32 724, i32 205, i32 454, i32 863, i32 491, i32 741, i32 242, i32 949, i32 214, i32 733, i32 859, i32 335, i32 708, i32 621, i32 574, i32 73, i32 654, i32 730, i32 472, i32 419, i32 436, i32 278, i32 496, i32 867, i32 210, i32 399, i32 680, i32 480, i32 51, i32 878, i32 465, i32 811, i32 169, i32 869, i32 675, i32 611, i32 697, i32 867, i32 561, i32 862, i32 687, i32 507, i32 283, i32 482, i32 129, i32 807, i32 591, i32 733, i32 623, i32 150, i32 238, i32 59, i32 379, i32 684, i32 877, i32 625, i32 169, i32 643, i32 105, i32 170, i32 607, i32 520, i32 932, i32 727, i32 476, i32 693, i32 425, i32 174, i32 647, i32 73, i32 122, i32 335, i32 530, i32 442, i32 853, i32 695, i32 249, i32 445, i32 515, i32 909, i32 545, i32 703, i32 919, i32 874, i32 474, i32 882, i32 500, i32 594, i32 612, i32 641, i32 801, i32 220, i32 162, i32 819, i32 984, i32 589, i32 513, i32 495, i32 799, i32 161, i32 604, i32 958, i32 533, i32 221, i32 400, i32 386, i32 867, i32 600, i32 782, i32 382, i32 596, i32 414, i32 171, i32 516, i32 375, i32 682, i32 485, i32 911, i32 276, i32 98, i32 553, i32 163, i32 354, i32 666, i32 933, i32 424, i32 341, i32 533, i32 870, i32 227, i32 730, i32 475, i32 186, i32 263, i32 647, i32 537, i32 686, i32 600, i32 224, i32 469, i32 68, i32 770, i32 919, i32 190, i32 373, i32 294, i32 822, i32 808, i32 206, i32 184, i32 943, i32 795, i32 384, i32 383, i32 461, i32 404, i32 758, i32 839, i32 887, i32 715, i32 67, i32 618, i32 276, i32 204, i32 918, i32 873, i32 777, i32 604, i32 560, i32 951, i32 160, i32 578, i32 722, i32 79, i32 804, i32 96, i32 409, i32 713, i32 940, i32 652, i32 934, i32 970, i32 447, i32 318, i32 353, i32 859, i32 672, i32 112, i32 785, i32 645, i32 863, i32 803, i32 350, i32 139, i32 93, i32 354, i32 99, i32 820, i32 908, i32 609, i32 772, i32 154, i32 274, i32 580, i32 184, i32 79, i32 626, i32 630, i32 742, i32 653, i32 282, i32 762, i32 623, i32 680, i32 81, i32 927, i32 626, i32 789, i32 125, i32 411, i32 521, i32 938, i32 300, i32 821, i32 78, i32 343, i32 175, i32 128, i32 250, i32 170, i32 774, i32 972, i32 275, i32 999, i32 639, i32 495, i32 78, i32 352, i32 126, i32 857, i32 956, i32 358, i32 619, i32 580, i32 124, i32 737, i32 594, i32 701, i32 612, i32 669, i32 112, i32 134, i32 694, i32 363, i32 992, i32 809, i32 743, i32 168, i32 974, i32 944, i32 375, i32 748, i32 52, i32 600, i32 747, i32 642, i32 182, i32 862, i32 81, i32 344, i32 805, i32 988, i32 739, i32 511, i32 655, i32 814, i32 334, i32 249, i32 515, i32 897, i32 955, i32 664, i32 981, i32 649, i32 113, i32 974, i32 459, i32 893, i32 228, i32 433, i32 837, i32 553, i32 268, i32 926, i32 240, i32 102, i32 654, i32 459, i32 51, i32 686, i32 754, i32 806, i32 760, i32 493, i32 403, i32 415, i32 394, i32 687, i32 700, i32 946, i32 670, i32 656, i32 610, i32 738, i32 392, i32 760, i32 799, i32 887, i32 653, i32 978, i32 321, i32 576, i32 617, i32 626, i32 502, i32 894, i32 679, i32 243, i32 440, i32 680, i32 879, i32 194, i32 572, i32 640, i32 724, i32 926, i32 56, i32 204, i32 700, i32 707, i32 151, i32 457, i32 449, i32 797, i32 195, i32 791, i32 558, i32 945, i32 679, i32 297, i32 59, i32 87, i32 824, i32 713, i32 663, i32 412, i32 693, i32 342, i32 606, i32 134, i32 108, i32 571, i32 364, i32 631, i32 212, i32 174, i32 643, i32 304, i32 329, i32 343, i32 97, i32 430, i32 751, i32 497, i32 314, i32 983, i32 374, i32 822, i32 928, i32 140, i32 206, i32 73, i32 263, i32 980, i32 736, i32 876, i32 478, i32 430, i32 305, i32 170, i32 514, i32 364, i32 692, i32 829, i32 82, i32 855, i32 953, i32 676, i32 246, i32 369, i32 970, i32 294, i32 750, i32 807, i32 827, i32 150, i32 790, i32 288, i32 923, i32 804, i32 378, i32 215, i32 828, i32 592, i32 281, i32 565, i32 555, i32 710, i32 82, i32 896, i32 831, i32 547, i32 261, i32 524, i32 462, i32 293, i32 465, i32 502, i32 56, i32 661, i32 821, i32 976, i32 991, i32 658, i32 869, i32 905, i32 758, i32 745, i32 193, i32 768, i32 550, i32 608, i32 933, i32 378, i32 286, i32 215, i32 979, i32 792, i32 961, i32 61, i32 688, i32 793, i32 644, i32 986, i32 403, i32 106, i32 366, i32 905, i32 644, i32 372, i32 567, i32 466, i32 434, i32 645, i32 210, i32 389, i32 550, i32 919, i32 135, i32 780, i32 773, i32 635, i32 389, i32 707, i32 100, i32 626, i32 958, i32 165, i32 504, i32 920, i32 176, i32 193, i32 713, i32 857, i32 265, i32 203, i32 50, i32 668, i32 108, i32 645, i32 990, i32 626, i32 197, i32 510, i32 357, i32 358, i32 850, i32 858, i32 364, i32 936, i32 638], align 4
@workFactor = common dso_local global i32 0, align 4
@blockRandomised = common dso_local global i8 0, align 1
@nBlocksRandomised = common dso_local global i32 0, align 4
@inName = common dso_local global [1024 x i8] zeroinitializer, align 1
@outName = common dso_local global [1024 x i8] zeroinitializer, align 1
@srcMode = common dso_local global i32 0, align 4
@opMode = common dso_local global i32 0, align 4
@progName = common dso_local global i8* null, align 4
@keepInputFiles = common dso_local global i8 0, align 1
@testFailsExist = common dso_local global i8 0, align 1
@longestFileName = common dso_local global i32 0, align 4
@progNameReally = common dso_local global [1024 x i8] zeroinitializer, align 1
@outputHandleJustInCase = common dso_local global i32 0, align 4
@"??_C@_0FP@CABMAMPD@?6?$CFs?3?5Compressed?5file?5ends?5unexpe@" = linkonce_odr dso_local unnamed_addr constant [95 x i8] c"\0A%s: Compressed file ends unexpectedly;\0A\09perhaps it is corrupted?  *Possible* reason follows.\0A\00", comdat, align 1
@"??_C@_0CM@POIOIBDA@?$CFs?3?5Deleting?5output?5file?5?$CFs?0?5if?5@" = linkonce_odr dso_local unnamed_addr constant [44 x i8] c"%s: Deleting output file %s, if it exists.\0A\00", comdat, align 1
@"??_C@_0DL@DLDEIDOB@?$CFs?3?5WARNING?3?5deletion?5of?5output?5@" = linkonce_odr dso_local unnamed_addr constant [59 x i8] c"%s: WARNING: deletion of output file (apparently) failed.\0A\00", comdat, align 1
@"??_C@_0GI@EEOGIJNN@?$CFs?3?5WARNING?3?5some?5files?5have?5not@" = linkonce_odr dso_local unnamed_addr constant [104 x i8] c"%s: WARNING: some files have not been processed:\0A\09%d specified on command line, %d not processed yet.\0A\0A\00", comdat, align 1
@"??_C@_0PD@COAGOICH@?6It?5is?5possible?5that?5the?5compres@" = linkonce_odr dso_local unnamed_addr constant [243 x i8] c"\0AIt is possible that the compressed file(s) have become corrupted.\0AYou can use the -tvv option to test integrity of such files.\0A\0AYou can use the `bzip2recover' program to *attempt* to recover\0Adata from undamaged sections of corrupted files.\0A\0A\00", comdat, align 1
@"??_C@_0CE@HHFBEBNN@?7Input?5file?5?$DN?5?$CFs?0?5output?5file?5?$DN?5@" = linkonce_odr dso_local unnamed_addr constant [36 x i8] c"\09Input file = %s, output file = %s\0A\00", comdat, align 1
@"??_C@_0BF@HGNLIOJH@hbMakeCodeLengths?$CI1?$CJ?$AA@" = linkonce_odr dso_local unnamed_addr constant [21 x i8] c"hbMakeCodeLengths(1)\00", comdat, align 1
@"??_C@_0BF@HEJNDAMO@hbMakeCodeLengths?$CI2?$CJ?$AA@" = linkonce_odr dso_local unnamed_addr constant [21 x i8] c"hbMakeCodeLengths(2)\00", comdat, align 1
@"??_C@_0GM@FDPANDAG@?6?$CFs?3?5PANIC?5?9?9?5internal?5consisten@" = linkonce_odr dso_local unnamed_addr constant [108 x i8] c"\0A%s: PANIC -- internal consistency error:\0A\09%s\0A\09This is a BUG.  Please report it to me at:\0A\09jseward@acm.org\0A\00", comdat, align 1
@"??_C@_0JC@IBNBCLCJ@?6?$CFs?3?5Can?8t?5allocate?5enough?5memor@" = linkonce_odr dso_local unnamed_addr constant [146 x i8] c"\0A%s: Can't allocate enough memory for compression.\0A\09Requested %d bytes for a block size of %d.\0A\09Try selecting a small block size (with flag -s).\0A\00", comdat, align 1
@"??_C@_0BM@FDMAIAHH@setDecompressStructureSizes?$AA@" = linkonce_odr dso_local unnamed_addr constant [28 x i8] c"setDecompressStructureSizes\00", comdat, align 1
@"??_C@_0MO@HPEGJDIN@?6?$CFs?3?5Can?8t?5allocate?5enough?5memor@" = linkonce_odr dso_local unnamed_addr constant [206 x i8] c"\0A%s: Can't allocate enough memory for decompression.\0A\09Requested %d bytes for a block size of %d.\0A\09Try selecting space-economic decompress (with flag -s)\0A\09and failing that, find a machine with more memory.\0A\00", comdat, align 1
@"??_C@_0EA@HNDFBPHF@?5?5?5?5?5?5?$CFd?5in?5block?0?5?$CFd?5after?5MTF?5@" = linkonce_odr dso_local unnamed_addr constant [64 x i8] c"      %d in block, %d after MTF & 1-2 coding, %d+2 syms in use\0A\00", comdat, align 1
@"??_C@_0BB@KGNNAFEG@sendMTFValues?$CI0?$CJ?$AA@" = linkonce_odr dso_local unnamed_addr constant [17 x i8] c"sendMTFValues(0)\00", comdat, align 1
@"??_C@_0DL@FBIPBGKK@?5?5?5?5?5?5initial?5group?5?$CFd?0?5?$FL?$CFd?5?4?4?5?$CF@" = linkonce_odr dso_local unnamed_addr constant [59 x i8] c"      initial group %d, [%d .. %d], has %d syms (%4.1f%%)\0A\00", comdat, align 1
@"??_C@_0CJ@LBIBLMKO@?5?5?5?5?5?5pass?5?$CFd?3?5size?5is?5?$CFd?0?5grp?5u@" = linkonce_odr dso_local unnamed_addr constant [41 x i8] c"      pass %d: size is %d, grp uses are \00", comdat, align 1
@"??_C@_03JDANDILB@?$CFd?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [4 x i8] c"%d \00", comdat, align 1
@"??_C@_01EEMJAFIK@?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"\0A\00", comdat, align 1
@"??_C@_0BB@KHBPGPHB@sendMTFValues?$CI1?$CJ?$AA@" = linkonce_odr dso_local unnamed_addr constant [17 x i8] c"sendMTFValues(1)\00", comdat, align 1
@"??_C@_0BB@KFFJNBCI@sendMTFValues?$CI2?$CJ?$AA@" = linkonce_odr dso_local unnamed_addr constant [17 x i8] c"sendMTFValues(2)\00", comdat, align 1
@"??_C@_0BB@KEJLLLBP@sendMTFValues?$CI3?$CJ?$AA@" = linkonce_odr dso_local unnamed_addr constant [17 x i8] c"sendMTFValues(3)\00", comdat, align 1
@"??_C@_0BB@KBNEKNJK@sendMTFValues?$CI4?$CJ?$AA@" = linkonce_odr dso_local unnamed_addr constant [17 x i8] c"sendMTFValues(4)\00", comdat, align 1
@"??_C@_0BK@INMLPPBK@?5?5?5?5?5?5bytes?3?5mapping?5?$CFd?0?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [26 x i8] c"      bytes: mapping %d, \00", comdat, align 1
@"??_C@_0P@ILGKEMPB@selectors?5?$CFd?0?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [15 x i8] c"selectors %d, \00", comdat, align 1
@"??_C@_0BC@JJJGEDA@code?5lengths?5?$CFd?0?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [18 x i8] c"code lengths %d, \00", comdat, align 1
@"??_C@_0BB@KABGMHKN@sendMTFValues?$CI5?$CJ?$AA@" = linkonce_odr dso_local unnamed_addr constant [17 x i8] c"sendMTFValues(5)\00", comdat, align 1
@"??_C@_09EGPKCPJN@codes?5?$CFd?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [10 x i8] c"codes %d\0A\00", comdat, align 1
@"??_C@_0GD@DNPAPOIP@?6?$CFs?3?5block?5overrun?5during?5decomp@" = linkonce_odr dso_local unnamed_addr constant [99 x i8] c"\0A%s: block overrun during decompression,\0A\09which probably means the compressed file\0A\09is corrupted.\0A\00", comdat, align 1
@"??_C@_0BO@OKPFPLKN@?5?5?5?5?5?5?5?5?5?5shell?5increment?5?$CFd?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [30 x i8] c"          shell increment %d\0A\00", comdat, align 1
@"??_C@_0BJ@IKCOPFHE@stack?5overflow?5in?5qSort3?$AA@" = linkonce_odr dso_local unnamed_addr constant [25 x i8] c"stack overflow in qSort3\00", comdat, align 1
@"??_C@_0BN@FMNKNGG@?5?5?5?5?5?5?5?5sort?5initialise?5?4?4?4?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [29 x i8] c"        sort initialise ...\0A\00", comdat, align 1
@"??_C@_0BI@GJAKMPEE@?5?5?5?5?5?5?5?5simpleSort?5?4?4?4?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [24 x i8] c"        simpleSort ...\0A\00", comdat, align 1
@"??_C@_0BK@EIDLPDKI@?5?5?5?5?5?5?5?5simpleSort?5done?4?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [26 x i8] c"        simpleSort done.\0A\00", comdat, align 1
@"??_C@_0BM@MNJOLIPF@?5?5?5?5?5?5?5?5bucket?5sorting?5?4?4?4?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [28 x i8] c"        bucket sorting ...\0A\00", comdat, align 1
@"??_C@_0DA@OFGJDDOF@?5?5?5?5?5?5?5?5qsort?5?$FL0x?$CFx?0?50x?$CFx?$FN?5?5?5don@" = linkonce_odr dso_local unnamed_addr constant [48 x i8] c"        qsort [0x%x, 0x%x]   done %d   this %d\0A\00", comdat, align 1
@"??_C@_06BFOGNJGB@sortIt?$AA@" = linkonce_odr dso_local unnamed_addr constant [7 x i8] c"sortIt\00", comdat, align 1
@"??_C@_0CM@BLJANJDD@?5?5?5?5?5?5?5?5?$CFd?5pointers?0?5?$CFd?5sorted?0?5@" = linkonce_odr dso_local unnamed_addr constant [44 x i8] c"        %d pointers, %d sorted, %d scanned\0A\00", comdat, align 1
@"??_C@_0CG@LHABOPOK@?5?5?5?5?5?5?$CFd?5work?0?5?$CFd?5block?0?5ratio?5?$CF@" = linkonce_odr dso_local unnamed_addr constant [38 x i8] c"      %d work, %d block, ratio %5.2f\0A\00", comdat, align 1
@"??_C@_0CI@BAMFFDEN@?5?5?5?5sorting?5aborted?$DL?5randomising@" = linkonce_odr dso_local unnamed_addr constant [40 x i8] c"    sorting aborted; randomising block\0A\00", comdat, align 1
@"??_C@_0CD@GFOAHPIL@?5?5?5?5?5?5?$CFd?5work?0?5?$CFd?5block?0?5ratio?5?$CF@" = linkonce_odr dso_local unnamed_addr constant [35 x i8] c"      %d work, %d block, ratio %f\0A\00", comdat, align 1
@"??_C@_0BL@LDLCMJGO@doReversibleTransformation?$AA@" = linkonce_odr dso_local unnamed_addr constant [27 x i8] c"doReversibleTransformation\00", comdat, align 1
@"??_C@_0BK@LDHEAIKH@getRLEpair?3?5ungetc?5failed?$AA@" = linkonce_odr dso_local unnamed_addr constant [26 x i8] c"getRLEpair: ungetc failed\00", comdat, align 1
@"??_C@_0DL@COPHMPBD@?5?5?5?5block?5?$CFd?3?5crc?5?$DN?50x?$CF8x?0?5combi@" = linkonce_odr dso_local unnamed_addr constant [59 x i8] c"    block %d: crc = 0x%8x, combined CRC = 0x%8x, size = %d\00", comdat, align 1
@"??_C@_00CNPNBAHC@?$AA@" = linkonce_odr dso_local unnamed_addr constant [1 x i8] zeroinitializer, comdat, align 1
@"??_C@_01LKDEMHDF@s?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"s\00", comdat, align 1
@"??_C@_0CF@OEHDEGJO@?5?5?5?5?$CFd?5block?$CFs?5needed?5randomisat@" = linkonce_odr dso_local unnamed_addr constant [37 x i8] c"    %d block%s needed randomisation\0A\00", comdat, align 1
@"??_C@_0CC@CFAJDODG@?5?5?5?5final?5combined?5CRC?5?$DN?50x?$CFx?6?5?5@" = linkonce_odr dso_local unnamed_addr constant [34 x i8] c"    final combined CRC = 0x%x\0A   \00", comdat, align 1
@"??_C@_0DJ@NACHODOJ@?$CF6?43f?31?0?5?$CF6?43f?5bits?1byte?0?5?$CF5?42f?$CF@" = linkonce_odr dso_local unnamed_addr constant [57 x i8] c"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %d in, %d out.\0A\00", comdat, align 1
@"??_C@_0EB@PIENDKAN@?6?$CFs?3?5I?1O?5or?5other?5error?0?5bailing@" = linkonce_odr dso_local unnamed_addr constant [65 x i8] c"\0A%s: I/O or other error, bailing out.  Possible reason follows.\0A\00", comdat, align 1
@"??_C@_05CDJMJPEC@?6?5?5?5?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [6 x i8] c"\0A    \00", comdat, align 1
@"??_C@_0P@DAOCLJBE@?$FL?$CFd?3?5huff?$CLmtf?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [15 x i8] c"[%d: huff+mtf \00", comdat, align 1
@"??_C@_06LOKMEELB@rt?$CLrld?$AA@" = linkonce_odr dso_local unnamed_addr constant [7 x i8] c"rt+rld\00", comdat, align 1
@"??_C@_0O@PHPJJCFF@?5?$HL0x?$CFx?0?50x?$CFx?$HN?$AA@" = linkonce_odr dso_local unnamed_addr constant [14 x i8] c" {0x%x, 0x%x}\00", comdat, align 1
@"??_C@_02PBFOLPKM@?$FN?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"] \00", comdat, align 1
@"??_C@_0DD@BPJILLIJ@combined?5CRCs?3?5stored?5?$DN?50x?$CFx?0?5co@" = linkonce_odr dso_local unnamed_addr constant [51 x i8] c"combined CRCs: stored = 0x%x, computed = 0x%x\0A    \00", comdat, align 1
@"??_C@_0FH@ELAJDNDD@?6?$CFs?3?5Data?5integrity?5error?5when?5d@" = linkonce_odr dso_local unnamed_addr constant [87 x i8] c"\0A%s: Data integrity error when decompressing.\0A\09Stored CRC = 0x%x, computed CRC = 0x%x\0A\00", comdat, align 1
@"??_C@_0FG@ENDAPJHF@?6?$CFs?3?5bad?5block?5header?5in?5the?5com@" = linkonce_odr dso_local unnamed_addr constant [86 x i8] c"\0A%s: bad block header in the compressed file,\0A\09which probably means it is corrupted.\0A\00", comdat, align 1
@"??_C@_0DC@DKEHONPL@?6?$CFs?3?5bad?5magic?5number?5?$CIie?0?5not?5c@" = linkonce_odr dso_local unnamed_addr constant [50 x i8] c"\0A%s: bad magic number (ie, not created by bzip2)\0A\00", comdat, align 1
@"??_C@_0DD@JELJMEBD@?6?$CFs?0?5block?5?$CFd?3?5bad?5header?5?$CInot?5?$DN@" = linkonce_odr dso_local unnamed_addr constant [51 x i8] c"\0A%s, block %d: bad header (not == 0x314159265359)\0A\00", comdat, align 1
@"??_C@_0BJ@EFKNBPIK@?5?5?5?5block?5?$FL?$CFd?3?5huff?$CLmtf?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [25 x i8] c"    block [%d: huff+mtf \00", comdat, align 1
@"??_C@_0DH@PBPGJFFK@?6?$CFs?0?5block?5?$CFd?3?5computed?5CRC?5does@" = linkonce_odr dso_local unnamed_addr constant [55 x i8] c"\0A%s, block %d: computed CRC does not match stored one\0A\00", comdat, align 1
@"??_C@_03DJDALPN@ok?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [4 x i8] c"ok\0A\00", comdat, align 1
@"??_C@_0DH@GEOOOFP@?5?5?5?5combined?5CRCs?3?5stored?5?$DN?50x?$CFx@" = linkonce_odr dso_local unnamed_addr constant [55 x i8] c"    combined CRCs: stored = 0x%x, computed = 0x%x\0A    \00", comdat, align 1
@"??_C@_0CN@PELOGPKG@?6?$CFs?3?5computed?5CRC?5does?5not?5match@" = linkonce_odr dso_local unnamed_addr constant [45 x i8] c"\0A%s: computed CRC does not match stored one\0A\00", comdat, align 1
@"??_C@_0HA@OMFHFLIH@?6?$CFs?3?5error?5when?5reading?5backgrou@" = linkonce_odr dso_local unnamed_addr constant [112 x i8] c"\0A%s: error when reading background model code lengths,\0A\09which probably means the compressed file is corrupted.\0A\00", comdat, align 1
@"??_C@_0FD@DPFPGMHI@?6?$CFs?3?5read?5past?5the?5end?5of?5compre@" = linkonce_odr dso_local unnamed_addr constant [83 x i8] c"\0A%s: read past the end of compressed data,\0A\09which probably means it is corrupted.\0A\00", comdat, align 1
@"??_C@_0CP@MAMNFBII@?6?$CFs?3?5Control?9C?5?$CIor?5similar?$CJ?5caug@" = linkonce_odr dso_local unnamed_addr constant [47 x i8] c"\0A%s: Control-C (or similar) caught, quitting.\0A\00", comdat, align 1
@"??_C@_0IM@OOGCOPJG@?6?$CFs?3?5Caught?5a?5SIGSEGV?5or?5SIGBUS?5@" = linkonce_odr dso_local unnamed_addr constant [140 x i8] c"\0A%s: Caught a SIGSEGV or SIGBUS whilst compressing,\0A\09which probably indicates a bug in bzip2.  Please\0A\09report it to me at: jseward@acm.org\0A\00", comdat, align 1
@"??_C@_0HJ@CHPFEBGG@?6?$CFs?3?5Caught?5a?5SIGSEGV?5or?5SIGBUS?5@" = linkonce_odr dso_local unnamed_addr constant [121 x i8] c"\0A%s: Caught a SIGSEGV or SIGBUS whilst decompressing,\0A\09which probably indicates that the compressed data\0A\09is corrupted.\0A\00", comdat, align 1
@dbglvl = dso_local global i32 4, align 4
@seedi = common dso_local global i32 0, align 4
@spec_fd = common dso_local global [3 x %struct.spec_fd_t] zeroinitializer, align 4
@"??_C@_0L@HODMACKF@spec_init?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [11 x i8] c"spec_init\0A\00", comdat, align 1
@"??_C@_0CE@CICPOJPD@spec_init?3?5Error?5mallocing?5memor@" = linkonce_odr dso_local unnamed_addr constant [36 x i8] c"spec_init: Error mallocing memory!\0A\00", comdat, align 1
@"??_C@_0BB@FOGGIPDD@Creating?5Chunks?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [17 x i8] c"Creating Chunks\0A\00", comdat, align 1
@"??_C@_0BD@LLLPCEOC@Creating?5Chunk?5?$CFd?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [19 x i8] c"Creating Chunk %d\0A\00", comdat, align 1
@"??_C@_0BE@GLOHHOFE@Filling?5input?5file?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [20 x i8] c"Filling input file\0A\00", comdat, align 1
@"??_C@_0BI@PNOIDAGN@Can?8t?5open?5file?5?$CFs?3?5?$CFs?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [24 x i8] c"Can't open file %s: %s\0A\00", comdat, align 1
@"??_C@_0BL@JAKFMFOB@Error?5reading?5from?5?$CFs?3?5?$CFs?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [27 x i8] c"Error reading from %s: %s\0A\00", comdat, align 1
@"??_C@_0BG@MFFNAFHA@Duplicating?5?$CFd?5bytes?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [22 x i8] c"Duplicating %d bytes\0A\00", comdat, align 1
@"??_C@_0BJ@BAEOOLFB@spec_read?3?5?$CFd?0?5?$CFp?0?5?$CFd?5?$DN?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [25 x i8] c"spec_read: %d, %p, %d = \00", comdat, align 1
@"??_C@_0CC@PGADNMPC@spec_read?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD?$CB@" = linkonce_odr dso_local unnamed_addr constant [34 x i8] c"spec_read: fd=%d, > MAX_SPEC_FD!\0A\00", comdat, align 1
@"??_C@_04OEEBIOEI@EOF?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [5 x i8] c"EOF\0A\00", comdat, align 1
@"??_C@_03PMGGPEJJ@?$CFd?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [4 x i8] c"%d\0A\00", comdat, align 1
@"??_C@_0BB@GPMEHCHC@spec_getc?3?5?$CFd?5?$DN?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [17 x i8] c"spec_getc: %d = \00", comdat, align 1
@"??_C@_0BD@POGOMCNJ@spec_ungetc?3?5?$CFd?5?$DN?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [19 x i8] c"spec_ungetc: %d = \00", comdat, align 1
@"??_C@_0BK@PBMPALNH@spec_ungetc?3?5pos?5?$CFd?5?$DM?$DN?50?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [26 x i8] c"spec_ungetc: pos %d <= 0\0A\00", comdat, align 1
@"??_C@_0EI@JGFIDMH@spec_ungetc?3?5can?8t?5unget?5somethi@" = linkonce_odr dso_local unnamed_addr constant [72 x i8] c"spec_ungetc: can't unget something that wasn't what was in the buffer!\0A\00", comdat, align 1
@"??_C@_0BK@NBIONNGF@spec_write?3?5?$CFd?0?5?$CFp?0?5?$CFd?5?$DN?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [26 x i8] c"spec_write: %d, %p, %d = \00", comdat, align 1
@"??_C@_0CD@NANFEFEM@spec_write?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD@" = linkonce_odr dso_local unnamed_addr constant [35 x i8] c"spec_write: fd=%d, > MAX_SPEC_FD!\0A\00", comdat, align 1
@"??_C@_0BF@MPLILGCO@spec_putc?3?5?$CFd?0?5?$CFd?5?$DN?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [21 x i8] c"spec_putc: %d, %d = \00", comdat, align 1
@"??_C@_0P@IBHKFCCJ@input?4combined?$AA@" = linkonce_odr dso_local unnamed_addr constant [15 x i8] c"input.combined\00", comdat, align 1
@"??_C@_0N@KOLOAFDN@input?4random?$AA@" = linkonce_odr dso_local unnamed_addr constant [13 x i8] c"input.random\00", comdat, align 1
@"??_C@_01FDFGLJHB@2?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"2\00", comdat, align 1
@"??_C@_0BE@EEBELGKE@Loading?5Input?5Data?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [20 x i8] c"Loading Input Data\0A\00", comdat, align 1
@"??_C@_0BP@KDCDDFCD@Input?5data?5?$CFd?5bytes?5in?5length?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [31 x i8] c"Input data %d bytes in length\0A\00", comdat, align 1
@"??_C@_0BP@KJFPKECC@main?3?5Error?5mallocing?5memory?$CB?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [31 x i8] c"main: Error mallocing memory!\0A\00", comdat, align 1
@"??_C@_0CC@KJFJJBAE@Compressing?5Input?5Data?0?5level?5?$CFd@" = linkonce_odr dso_local unnamed_addr constant [34 x i8] c"Compressing Input Data, level %d\0A\00", comdat, align 1
@"??_C@_0CE@PFHIOJOC@Compressed?5data?5?$CFd?5bytes?5in?5leng@" = linkonce_odr dso_local unnamed_addr constant [36 x i8] c"Compressed data %d bytes in length\0A\00", comdat, align 1
@"??_C@_0BE@JICHKDFP@Uncompressing?5Data?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [20 x i8] c"Uncompressing Data\0A\00", comdat, align 1
@"??_C@_0CG@DJIKCILP@Uncompressed?5data?5?$CFd?5bytes?5in?5le@" = linkonce_odr dso_local unnamed_addr constant [38 x i8] c"Uncompressed data %d bytes in length\0A\00", comdat, align 1
@"??_C@_0CD@KACBMJDH@Tested?5?$CFdMB?5buffer?3?5Miscompared?$CB@" = linkonce_odr dso_local unnamed_addr constant [35 x i8] c"Tested %dMB buffer: Miscompared!!\0A\00", comdat, align 1
@"??_C@_0CG@PNDINMCI@Uncompressed?5data?5compared?5corre@" = linkonce_odr dso_local unnamed_addr constant [38 x i8] c"Uncompressed data compared correctly\0A\00", comdat, align 1
@"??_C@_0BJ@HBIMNPIC@Tested?5?$CFdMB?5buffer?3?5OK?$CB?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [25 x i8] c"Tested %dMB buffer: OK!\0A\00", comdat, align 1
@"??_C@_0M@NPEDOHBA@?$CFf?5seconds?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [12 x i8] c"%f seconds\0A\00", comdat, align 1

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @initialiseCRC() #0 {
entry:
  store i32 -1, i32* @globalCrc, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local i32 @getFinalCRC() #0 {
entry:
  %0 = load i32, i32* @globalCrc, align 4
  %neg = xor i32 %0, -1
  ret i32 %neg
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local i32 @getGlobalCRC() #0 {
entry:
  %0 = load i32, i32* @globalCrc, align 4
  ret i32 %0
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @setGlobalCRC(i32 %newCrc) #0 {
entry:
  %newCrc.addr = alloca i32, align 4
  store i32 %newCrc, i32* %newCrc.addr, align 4
  %0 = load i32, i32* %newCrc.addr, align 4
  store i32 %0, i32* @globalCrc, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @bsSetStream(i32 %f, i8 zeroext %wr) #0 {
entry:
  %wr.addr = alloca i8, align 1
  %f.addr = alloca i32, align 4
  store i8 %wr, i8* %wr.addr, align 1
  store i32 %f, i32* %f.addr, align 4
  %0 = load i32, i32* %f.addr, align 4
  store i32 %0, i32* @bsStream, align 4
  store i32 0, i32* @bsLive, align 4
  store i32 0, i32* @bsBuff, align 4
  store i32 0, i32* @bytesOut, align 4
  store i32 0, i32* @bytesIn, align 4
  %1 = load i8, i8* %wr.addr, align 1
  store i8 %1, i8* @bsWriting, align 1
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @bsFinishedWithStream() #1 {
entry:
  %0 = load i8, i8* @bsWriting, align 1
  %tobool = icmp ne i8 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %1 = load i32, i32* @bsLive, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* @bsStream, align 4
  %3 = load i32, i32* @bsBuff, align 4
  %shr = lshr i32 %3, 24
  %conv = trunc i32 %shr to i8
  %call = call i32 @spec_putc(i8 zeroext %conv, i32 %2)
  %4 = load i32, i32* @bsBuff, align 4
  %shl = shl i32 %4, 8
  store i32 %shl, i32* @bsBuff, align 4
  %5 = load i32, i32* @bsLive, align 4
  %sub = sub nsw i32 %5, 8
  store i32 %sub, i32* @bsLive, align 4
  %6 = load i32, i32* @bytesOut, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* @bytesOut, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end

if.end:                                           ; preds = %while.end, %entry
  store i32 0, i32* @bsStream, align 4
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @bsR(i32 %n) #1 {
entry:
  %n.addr = alloca i32, align 4
  %v = alloca i32, align 4
  %zzi = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i32, i32* @bsLive, align 4
  %1 = load i32, i32* %n.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* @bsStream, align 4
  %call = call i32 @spec_getc(i32 %2)
  store i32 %call, i32* %zzi, align 4
  %3 = load i32, i32* %zzi, align 4
  %cmp1 = icmp eq i32 %3, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  call void @compressedStreamEOF()
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %4 = load i32, i32* @bsBuff, align 4
  %shl = shl i32 %4, 8
  %5 = load i32, i32* %zzi, align 4
  %and = and i32 %5, 255
  %or = or i32 %shl, %and
  store i32 %or, i32* @bsBuff, align 4
  %6 = load i32, i32* @bsLive, align 4
  %add = add nsw i32 %6, 8
  store i32 %add, i32* @bsLive, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* @bsBuff, align 4
  %8 = load i32, i32* @bsLive, align 4
  %9 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %8, %9
  %shr = lshr i32 %7, %sub
  %10 = load i32, i32* %n.addr, align 4
  %shl2 = shl i32 1, %10
  %sub3 = sub nsw i32 %shl2, 1
  %and4 = and i32 %shr, %sub3
  store i32 %and4, i32* %v, align 4
  %11 = load i32, i32* %n.addr, align 4
  %12 = load i32, i32* @bsLive, align 4
  %sub5 = sub nsw i32 %12, %11
  store i32 %sub5, i32* @bsLive, align 4
  %13 = load i32, i32* %v, align 4
  ret i32 %13
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @compressedStreamEOF() #1 {
entry:
  %0 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @"??_C@_0FP@CABMAMPD@?6?$CFs?3?5Compressed?5file?5ends?5unexpe@", i32 0, i32 0), i8* %0)
  %1 = load i8*, i8** @progName, align 4
  call void @perror(i8* %1)
  call void @showFileNames()
  call void @cadvise()
  call void @cleanUpAndFail(i32 2)
  ret void
}

declare dllimport %struct._iobuf* @__iob_func() #2

declare dllimport i32 @fprintf(%struct._iobuf*, i8*, ...) #2

declare dllimport void @perror(i8*) #2

; Function Attrs: noinline optnone sspstrong
define dso_local void @showFileNames() #1 {
entry:
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @"??_C@_0CE@HHFBEBNN@?7Input?5file?5?$DN?5?$CFs?0?5output?5file?5?$DN?5@", i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @inName, i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @outName, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @cadvise() #1 {
entry:
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([243 x i8], [243 x i8]* @"??_C@_0PD@COAGOICH@?6It?5is?5possible?5that?5the?5compres@", i32 0, i32 0))
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @cleanUpAndFail(i32 %ec) #1 {
entry:
  %ec.addr = alloca i32, align 4
  %retVal = alloca i32, align 4
  store i32 %ec, i32* %ec.addr, align 4
  %0 = load i32, i32* @srcMode, align 4
  %cmp = icmp eq i32 %0, 3
  br i1 %cmp, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @opMode, align 4
  %cmp1 = icmp ne i32 %1, 3
  br i1 %cmp1, label %if.then, label %if.end9

if.then:                                          ; preds = %land.lhs.true
  %2 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call2 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @"??_C@_0CM@POIOIBDA@?$CFs?3?5Deleting?5output?5file?5?$CFs?0?5if?5@", i32 0, i32 0), i8* %2, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @outName, i32 0, i32 0))
  %call3 = call i32 @remove(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @outName, i32 0, i32 0))
  store i32 %call3, i32* %retVal, align 4
  %3 = load i32, i32* %retVal, align 4
  %cmp4 = icmp ne i32 %3, 0
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  %4 = load i8*, i8** @progName, align 4
  %call6 = call %struct._iobuf* @__iob_func()
  %arrayidx7 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call6, i32 2
  %call8 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx7, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"??_C@_0DL@DLDEIDOB@?$CFs?3?5WARNING?3?5deletion?5of?5output?5@", i32 0, i32 0), i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %land.lhs.true, %entry
  %5 = load i32, i32* @numFileNames, align 4
  %cmp10 = icmp sgt i32 %5, 0
  br i1 %cmp10, label %land.lhs.true11, label %if.end17

land.lhs.true11:                                  ; preds = %if.end9
  %6 = load i32, i32* @numFilesProcessed, align 4
  %7 = load i32, i32* @numFileNames, align 4
  %cmp12 = icmp slt i32 %6, %7
  br i1 %cmp12, label %if.then13, label %if.end17

if.then13:                                        ; preds = %land.lhs.true11
  %8 = load i32, i32* @numFileNames, align 4
  %9 = load i32, i32* @numFilesProcessed, align 4
  %sub = sub nsw i32 %8, %9
  %10 = load i32, i32* @numFileNames, align 4
  %11 = load i8*, i8** @progName, align 4
  %call14 = call %struct._iobuf* @__iob_func()
  %arrayidx15 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call14, i32 2
  %call16 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx15, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @"??_C@_0GI@EEOGIJNN@?$CFs?3?5WARNING?3?5some?5files?5have?5not@", i32 0, i32 0), i8* %11, i32 %10, i32 %sub)
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %land.lhs.true11, %if.end9
  %12 = load i32, i32* %ec.addr, align 4
  call void @exit(i32 %12) #6
  unreachable

return:                                           ; No predecessors!
  ret void
}

declare dllimport i32 @remove(i8*) #2

; Function Attrs: noreturn
declare dllimport void @exit(i32) #3

; Function Attrs: noinline optnone sspstrong
define dso_local void @bsW(i32 %n, i32 %v) #1 {
entry:
  %v.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* @bsLive, align 4
  %cmp = icmp sge i32 %0, 8
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* @bsStream, align 4
  %2 = load i32, i32* @bsBuff, align 4
  %shr = lshr i32 %2, 24
  %conv = trunc i32 %shr to i8
  %call = call i32 @spec_putc(i8 zeroext %conv, i32 %1)
  %3 = load i32, i32* @bsBuff, align 4
  %shl = shl i32 %3, 8
  store i32 %shl, i32* @bsBuff, align 4
  %4 = load i32, i32* @bsLive, align 4
  %sub = sub nsw i32 %4, 8
  store i32 %sub, i32* @bsLive, align 4
  %5 = load i32, i32* @bytesOut, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* @bytesOut, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %6 = load i32, i32* %v.addr, align 4
  %7 = load i32, i32* @bsLive, align 4
  %sub1 = sub nsw i32 32, %7
  %8 = load i32, i32* %n.addr, align 4
  %sub2 = sub nsw i32 %sub1, %8
  %shl3 = shl i32 %6, %sub2
  %9 = load i32, i32* @bsBuff, align 4
  %or = or i32 %9, %shl3
  store i32 %or, i32* @bsBuff, align 4
  %10 = load i32, i32* %n.addr, align 4
  %11 = load i32, i32* @bsLive, align 4
  %add = add nsw i32 %11, %10
  store i32 %add, i32* @bsLive, align 4
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local zeroext i8 @bsGetUChar() #1 {
entry:
  %call = call i32 @bsR(i32 8)
  %conv = trunc i32 %call to i8
  ret i8 %conv
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @bsPutUChar(i8 zeroext %c) #1 {
entry:
  %c.addr = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  %0 = load i8, i8* %c.addr, align 1
  %conv = zext i8 %0 to i32
  call void @bsW(i32 8, i32 %conv)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @bsGetUInt32() #1 {
entry:
  %u = alloca i32, align 4
  store i32 0, i32* %u, align 4
  %0 = load i32, i32* %u, align 4
  %shl = shl i32 %0, 8
  %call = call i32 @bsR(i32 8)
  %or = or i32 %shl, %call
  store i32 %or, i32* %u, align 4
  %1 = load i32, i32* %u, align 4
  %shl1 = shl i32 %1, 8
  %call2 = call i32 @bsR(i32 8)
  %or3 = or i32 %shl1, %call2
  store i32 %or3, i32* %u, align 4
  %2 = load i32, i32* %u, align 4
  %shl4 = shl i32 %2, 8
  %call5 = call i32 @bsR(i32 8)
  %or6 = or i32 %shl4, %call5
  store i32 %or6, i32* %u, align 4
  %3 = load i32, i32* %u, align 4
  %shl7 = shl i32 %3, 8
  %call8 = call i32 @bsR(i32 8)
  %or9 = or i32 %shl7, %call8
  store i32 %or9, i32* %u, align 4
  %4 = load i32, i32* %u, align 4
  ret i32 %4
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @bsGetIntVS(i32 %numBits) #1 {
entry:
  %numBits.addr = alloca i32, align 4
  store i32 %numBits, i32* %numBits.addr, align 4
  %0 = load i32, i32* %numBits.addr, align 4
  %call = call i32 @bsR(i32 %0)
  ret i32 %call
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @bsGetInt32() #1 {
entry:
  %call = call i32 @bsGetUInt32()
  ret i32 %call
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @bsPutUInt32(i32 %u) #1 {
entry:
  %u.addr = alloca i32, align 4
  store i32 %u, i32* %u.addr, align 4
  %0 = load i32, i32* %u.addr, align 4
  %shr = lshr i32 %0, 24
  %and = and i32 %shr, 255
  call void @bsW(i32 8, i32 %and)
  %1 = load i32, i32* %u.addr, align 4
  %shr1 = lshr i32 %1, 16
  %and2 = and i32 %shr1, 255
  call void @bsW(i32 8, i32 %and2)
  %2 = load i32, i32* %u.addr, align 4
  %shr3 = lshr i32 %2, 8
  %and4 = and i32 %shr3, 255
  call void @bsW(i32 8, i32 %and4)
  %3 = load i32, i32* %u.addr, align 4
  %and5 = and i32 %3, 255
  call void @bsW(i32 8, i32 %and5)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @bsPutInt32(i32 %c) #1 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  call void @bsPutUInt32(i32 %0)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @bsPutIntVS(i32 %numBits, i32 %c) #1 {
entry:
  %c.addr = alloca i32, align 4
  %numBits.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32 %numBits, i32* %numBits.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %1 = load i32, i32* %numBits.addr, align 4
  call void @bsW(i32 %1, i32 %0)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @hbMakeCodeLengths(i8* %len, i32* %freq, i32 %alphaSize, i32 %maxLen) #1 {
entry:
  %maxLen.addr = alloca i32, align 4
  %alphaSize.addr = alloca i32, align 4
  %freq.addr = alloca i32*, align 4
  %len.addr = alloca i8*, align 4
  %nNodes = alloca i32, align 4
  %nHeap = alloca i32, align 4
  %n1 = alloca i32, align 4
  %n2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %tooLong = alloca i8, align 1
  %heap = alloca [260 x i32], align 4
  %weight = alloca [516 x i32], align 4
  %parent = alloca [516 x i32], align 4
  %zz = alloca i32, align 4
  %tmp = alloca i32, align 4
  %zz35 = alloca i32, align 4
  %yy = alloca i32, align 4
  %tmp36 = alloca i32, align 4
  %zz68 = alloca i32, align 4
  %yy69 = alloca i32, align 4
  %tmp70 = alloca i32, align 4
  %zz124 = alloca i32, align 4
  %tmp125 = alloca i32, align 4
  store i32 %maxLen, i32* %maxLen.addr, align 4
  store i32 %alphaSize, i32* %alphaSize.addr, align 4
  store i32* %freq, i32** %freq.addr, align 4
  store i8* %len, i8** %len.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %alphaSize.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %freq.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %cmp1 = icmp eq i32 %4, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %5 = load i32*, i32** %freq.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i32 %6
  %7 = load i32, i32* %arrayidx2, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %7, %cond.false ]
  %shl = shl i32 %cond, 8
  %8 = load i32, i32* %i, align 4
  %add = add nsw i32 %8, 1
  %arrayidx3 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %add
  store i32 %shl, i32* %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.body

while.body:                                       ; preds = %for.end175, %for.end
  %10 = load i32, i32* %alphaSize.addr, align 4
  store i32 %10, i32* %nNodes, align 4
  store i32 0, i32* %nHeap, align 4
  %arrayidx4 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 0
  store i32 0, i32* %arrayidx4, align 4
  %arrayidx5 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 0
  store i32 0, i32* %arrayidx5, align 4
  %arrayidx6 = getelementptr inbounds [516 x i32], [516 x i32]* %parent, i32 0, i32 0
  store i32 -2, i32* %arrayidx6, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc25, %while.body
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* %alphaSize.addr, align 4
  %cmp8 = icmp sle i32 %11, %12
  br i1 %cmp8, label %for.body9, label %for.end27

for.body9:                                        ; preds = %for.cond7
  %13 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [516 x i32], [516 x i32]* %parent, i32 0, i32 %13
  store i32 -1, i32* %arrayidx10, align 4
  %14 = load i32, i32* %nHeap, align 4
  %inc11 = add nsw i32 %14, 1
  store i32 %inc11, i32* %nHeap, align 4
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %nHeap, align 4
  %arrayidx12 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %16
  store i32 %15, i32* %arrayidx12, align 4
  %17 = load i32, i32* %nHeap, align 4
  store i32 %17, i32* %zz, align 4
  %18 = load i32, i32* %zz, align 4
  %arrayidx13 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %18
  %19 = load i32, i32* %arrayidx13, align 4
  store i32 %19, i32* %tmp, align 4
  br label %while.cond14

while.cond14:                                     ; preds = %while.body19, %for.body9
  %20 = load i32, i32* %tmp, align 4
  %arrayidx15 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %20
  %21 = load i32, i32* %arrayidx15, align 4
  %22 = load i32, i32* %zz, align 4
  %shr = ashr i32 %22, 1
  %arrayidx16 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %shr
  %23 = load i32, i32* %arrayidx16, align 4
  %arrayidx17 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %23
  %24 = load i32, i32* %arrayidx17, align 4
  %cmp18 = icmp slt i32 %21, %24
  br i1 %cmp18, label %while.body19, label %while.end

while.body19:                                     ; preds = %while.cond14
  %25 = load i32, i32* %zz, align 4
  %shr20 = ashr i32 %25, 1
  %arrayidx21 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %shr20
  %26 = load i32, i32* %arrayidx21, align 4
  %27 = load i32, i32* %zz, align 4
  %arrayidx22 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %27
  store i32 %26, i32* %arrayidx22, align 4
  %28 = load i32, i32* %zz, align 4
  %shr23 = ashr i32 %28, 1
  store i32 %shr23, i32* %zz, align 4
  br label %while.cond14

while.end:                                        ; preds = %while.cond14
  %29 = load i32, i32* %tmp, align 4
  %30 = load i32, i32* %zz, align 4
  %arrayidx24 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %30
  store i32 %29, i32* %arrayidx24, align 4
  br label %for.inc25

for.inc25:                                        ; preds = %while.end
  %31 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %31, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond7

for.end27:                                        ; preds = %for.cond7
  %32 = load i32, i32* %nHeap, align 4
  %cmp28 = icmp slt i32 %32, 260
  br i1 %cmp28, label %if.end, label %if.then

if.then:                                          ; preds = %for.end27
  call void @panic(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"??_C@_0BF@HGNLIOJH@hbMakeCodeLengths?$CI1?$CJ?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end27
  br label %while.cond29

while.cond29:                                     ; preds = %while.end138, %if.end
  %33 = load i32, i32* %nHeap, align 4
  %cmp30 = icmp sgt i32 %33, 1
  br i1 %cmp30, label %while.body31, label %while.end140

while.body31:                                     ; preds = %while.cond29
  %arrayidx32 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 1
  %34 = load i32, i32* %arrayidx32, align 4
  store i32 %34, i32* %n1, align 4
  %35 = load i32, i32* %nHeap, align 4
  %arrayidx33 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %35
  %36 = load i32, i32* %arrayidx33, align 4
  %arrayidx34 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 1
  store i32 %36, i32* %arrayidx34, align 4
  %37 = load i32, i32* %nHeap, align 4
  %dec = add nsw i32 %37, -1
  store i32 %dec, i32* %nHeap, align 4
  store i32 1, i32* %zz35, align 4
  %38 = load i32, i32* %zz35, align 4
  %arrayidx37 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %38
  %39 = load i32, i32* %arrayidx37, align 4
  store i32 %39, i32* %tmp36, align 4
  br label %while.body39

while.body39:                                     ; preds = %if.end59, %while.body31
  %40 = load i32, i32* %zz35, align 4
  %shl40 = shl i32 %40, 1
  store i32 %shl40, i32* %yy, align 4
  %41 = load i32, i32* %yy, align 4
  %42 = load i32, i32* %nHeap, align 4
  %cmp41 = icmp sgt i32 %41, %42
  br i1 %cmp41, label %if.then42, label %if.end43

if.then42:                                        ; preds = %while.body39
  br label %while.end62

if.end43:                                         ; preds = %while.body39
  %43 = load i32, i32* %yy, align 4
  %44 = load i32, i32* %nHeap, align 4
  %cmp44 = icmp slt i32 %43, %44
  br i1 %cmp44, label %land.lhs.true, label %if.end53

land.lhs.true:                                    ; preds = %if.end43
  %45 = load i32, i32* %yy, align 4
  %add45 = add nsw i32 %45, 1
  %arrayidx46 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %add45
  %46 = load i32, i32* %arrayidx46, align 4
  %arrayidx47 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %46
  %47 = load i32, i32* %arrayidx47, align 4
  %48 = load i32, i32* %yy, align 4
  %arrayidx48 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %48
  %49 = load i32, i32* %arrayidx48, align 4
  %arrayidx49 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %49
  %50 = load i32, i32* %arrayidx49, align 4
  %cmp50 = icmp slt i32 %47, %50
  br i1 %cmp50, label %if.then51, label %if.end53

if.then51:                                        ; preds = %land.lhs.true
  %51 = load i32, i32* %yy, align 4
  %inc52 = add nsw i32 %51, 1
  store i32 %inc52, i32* %yy, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %land.lhs.true, %if.end43
  %52 = load i32, i32* %tmp36, align 4
  %arrayidx54 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %52
  %53 = load i32, i32* %arrayidx54, align 4
  %54 = load i32, i32* %yy, align 4
  %arrayidx55 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %54
  %55 = load i32, i32* %arrayidx55, align 4
  %arrayidx56 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %55
  %56 = load i32, i32* %arrayidx56, align 4
  %cmp57 = icmp slt i32 %53, %56
  br i1 %cmp57, label %if.then58, label %if.end59

if.then58:                                        ; preds = %if.end53
  br label %while.end62

if.end59:                                         ; preds = %if.end53
  %57 = load i32, i32* %yy, align 4
  %arrayidx60 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %57
  %58 = load i32, i32* %arrayidx60, align 4
  %59 = load i32, i32* %zz35, align 4
  %arrayidx61 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %59
  store i32 %58, i32* %arrayidx61, align 4
  %60 = load i32, i32* %yy, align 4
  store i32 %60, i32* %zz35, align 4
  br label %while.body39

while.end62:                                      ; preds = %if.then58, %if.then42
  %61 = load i32, i32* %tmp36, align 4
  %62 = load i32, i32* %zz35, align 4
  %arrayidx63 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %62
  store i32 %61, i32* %arrayidx63, align 4
  %arrayidx64 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 1
  %63 = load i32, i32* %arrayidx64, align 4
  store i32 %63, i32* %n2, align 4
  %64 = load i32, i32* %nHeap, align 4
  %arrayidx65 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %64
  %65 = load i32, i32* %arrayidx65, align 4
  %arrayidx66 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 1
  store i32 %65, i32* %arrayidx66, align 4
  %66 = load i32, i32* %nHeap, align 4
  %dec67 = add nsw i32 %66, -1
  store i32 %dec67, i32* %nHeap, align 4
  store i32 1, i32* %zz68, align 4
  %67 = load i32, i32* %zz68, align 4
  %arrayidx71 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %67
  %68 = load i32, i32* %arrayidx71, align 4
  store i32 %68, i32* %tmp70, align 4
  br label %while.body73

while.body73:                                     ; preds = %if.end94, %while.end62
  %69 = load i32, i32* %zz68, align 4
  %shl74 = shl i32 %69, 1
  store i32 %shl74, i32* %yy69, align 4
  %70 = load i32, i32* %yy69, align 4
  %71 = load i32, i32* %nHeap, align 4
  %cmp75 = icmp sgt i32 %70, %71
  br i1 %cmp75, label %if.then76, label %if.end77

if.then76:                                        ; preds = %while.body73
  br label %while.end97

if.end77:                                         ; preds = %while.body73
  %72 = load i32, i32* %yy69, align 4
  %73 = load i32, i32* %nHeap, align 4
  %cmp78 = icmp slt i32 %72, %73
  br i1 %cmp78, label %land.lhs.true79, label %if.end88

land.lhs.true79:                                  ; preds = %if.end77
  %74 = load i32, i32* %yy69, align 4
  %add80 = add nsw i32 %74, 1
  %arrayidx81 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %add80
  %75 = load i32, i32* %arrayidx81, align 4
  %arrayidx82 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %75
  %76 = load i32, i32* %arrayidx82, align 4
  %77 = load i32, i32* %yy69, align 4
  %arrayidx83 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %77
  %78 = load i32, i32* %arrayidx83, align 4
  %arrayidx84 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %78
  %79 = load i32, i32* %arrayidx84, align 4
  %cmp85 = icmp slt i32 %76, %79
  br i1 %cmp85, label %if.then86, label %if.end88

if.then86:                                        ; preds = %land.lhs.true79
  %80 = load i32, i32* %yy69, align 4
  %inc87 = add nsw i32 %80, 1
  store i32 %inc87, i32* %yy69, align 4
  br label %if.end88

if.end88:                                         ; preds = %if.then86, %land.lhs.true79, %if.end77
  %81 = load i32, i32* %tmp70, align 4
  %arrayidx89 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %81
  %82 = load i32, i32* %arrayidx89, align 4
  %83 = load i32, i32* %yy69, align 4
  %arrayidx90 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %83
  %84 = load i32, i32* %arrayidx90, align 4
  %arrayidx91 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %84
  %85 = load i32, i32* %arrayidx91, align 4
  %cmp92 = icmp slt i32 %82, %85
  br i1 %cmp92, label %if.then93, label %if.end94

if.then93:                                        ; preds = %if.end88
  br label %while.end97

if.end94:                                         ; preds = %if.end88
  %86 = load i32, i32* %yy69, align 4
  %arrayidx95 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %86
  %87 = load i32, i32* %arrayidx95, align 4
  %88 = load i32, i32* %zz68, align 4
  %arrayidx96 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %88
  store i32 %87, i32* %arrayidx96, align 4
  %89 = load i32, i32* %yy69, align 4
  store i32 %89, i32* %zz68, align 4
  br label %while.body73

while.end97:                                      ; preds = %if.then93, %if.then76
  %90 = load i32, i32* %tmp70, align 4
  %91 = load i32, i32* %zz68, align 4
  %arrayidx98 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %91
  store i32 %90, i32* %arrayidx98, align 4
  %92 = load i32, i32* %nNodes, align 4
  %inc99 = add nsw i32 %92, 1
  store i32 %inc99, i32* %nNodes, align 4
  %93 = load i32, i32* %nNodes, align 4
  %94 = load i32, i32* %n2, align 4
  %arrayidx100 = getelementptr inbounds [516 x i32], [516 x i32]* %parent, i32 0, i32 %94
  store i32 %93, i32* %arrayidx100, align 4
  %95 = load i32, i32* %n1, align 4
  %arrayidx101 = getelementptr inbounds [516 x i32], [516 x i32]* %parent, i32 0, i32 %95
  store i32 %93, i32* %arrayidx101, align 4
  %96 = load i32, i32* %n1, align 4
  %arrayidx102 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %96
  %97 = load i32, i32* %arrayidx102, align 4
  %and = and i32 %97, -256
  %98 = load i32, i32* %n2, align 4
  %arrayidx103 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %98
  %99 = load i32, i32* %arrayidx103, align 4
  %and104 = and i32 %99, -256
  %add105 = add i32 %and, %and104
  %100 = load i32, i32* %n1, align 4
  %arrayidx106 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %100
  %101 = load i32, i32* %arrayidx106, align 4
  %and107 = and i32 %101, 255
  %102 = load i32, i32* %n2, align 4
  %arrayidx108 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %102
  %103 = load i32, i32* %arrayidx108, align 4
  %and109 = and i32 %103, 255
  %cmp110 = icmp sgt i32 %and107, %and109
  br i1 %cmp110, label %cond.true111, label %cond.false114

cond.true111:                                     ; preds = %while.end97
  %104 = load i32, i32* %n1, align 4
  %arrayidx112 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %104
  %105 = load i32, i32* %arrayidx112, align 4
  %and113 = and i32 %105, 255
  br label %cond.end117

cond.false114:                                    ; preds = %while.end97
  %106 = load i32, i32* %n2, align 4
  %arrayidx115 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %106
  %107 = load i32, i32* %arrayidx115, align 4
  %and116 = and i32 %107, 255
  br label %cond.end117

cond.end117:                                      ; preds = %cond.false114, %cond.true111
  %cond118 = phi i32 [ %and113, %cond.true111 ], [ %and116, %cond.false114 ]
  %add119 = add nsw i32 1, %cond118
  %or = or i32 %add105, %add119
  %108 = load i32, i32* %nNodes, align 4
  %arrayidx120 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %108
  store i32 %or, i32* %arrayidx120, align 4
  %109 = load i32, i32* %nNodes, align 4
  %arrayidx121 = getelementptr inbounds [516 x i32], [516 x i32]* %parent, i32 0, i32 %109
  store i32 -1, i32* %arrayidx121, align 4
  %110 = load i32, i32* %nHeap, align 4
  %inc122 = add nsw i32 %110, 1
  store i32 %inc122, i32* %nHeap, align 4
  %111 = load i32, i32* %nNodes, align 4
  %112 = load i32, i32* %nHeap, align 4
  %arrayidx123 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %112
  store i32 %111, i32* %arrayidx123, align 4
  %113 = load i32, i32* %nHeap, align 4
  store i32 %113, i32* %zz124, align 4
  %114 = load i32, i32* %zz124, align 4
  %arrayidx126 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %114
  %115 = load i32, i32* %arrayidx126, align 4
  store i32 %115, i32* %tmp125, align 4
  br label %while.cond127

while.cond127:                                    ; preds = %while.body133, %cond.end117
  %116 = load i32, i32* %tmp125, align 4
  %arrayidx128 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %116
  %117 = load i32, i32* %arrayidx128, align 4
  %118 = load i32, i32* %zz124, align 4
  %shr129 = ashr i32 %118, 1
  %arrayidx130 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %shr129
  %119 = load i32, i32* %arrayidx130, align 4
  %arrayidx131 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %119
  %120 = load i32, i32* %arrayidx131, align 4
  %cmp132 = icmp slt i32 %117, %120
  br i1 %cmp132, label %while.body133, label %while.end138

while.body133:                                    ; preds = %while.cond127
  %121 = load i32, i32* %zz124, align 4
  %shr134 = ashr i32 %121, 1
  %arrayidx135 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %shr134
  %122 = load i32, i32* %arrayidx135, align 4
  %123 = load i32, i32* %zz124, align 4
  %arrayidx136 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %123
  store i32 %122, i32* %arrayidx136, align 4
  %124 = load i32, i32* %zz124, align 4
  %shr137 = ashr i32 %124, 1
  store i32 %shr137, i32* %zz124, align 4
  br label %while.cond127

while.end138:                                     ; preds = %while.cond127
  %125 = load i32, i32* %tmp125, align 4
  %126 = load i32, i32* %zz124, align 4
  %arrayidx139 = getelementptr inbounds [260 x i32], [260 x i32]* %heap, i32 0, i32 %126
  store i32 %125, i32* %arrayidx139, align 4
  br label %while.cond29

while.end140:                                     ; preds = %while.cond29
  %127 = load i32, i32* %nNodes, align 4
  %cmp141 = icmp slt i32 %127, 516
  br i1 %cmp141, label %if.end143, label %if.then142

if.then142:                                       ; preds = %while.end140
  call void @panic(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"??_C@_0BF@HEJNDAMO@hbMakeCodeLengths?$CI2?$CJ?$AA@", i32 0, i32 0))
  br label %if.end143

if.end143:                                        ; preds = %if.then142, %while.end140
  store i8 0, i8* %tooLong, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond144

for.cond144:                                      ; preds = %for.inc159, %if.end143
  %128 = load i32, i32* %i, align 4
  %129 = load i32, i32* %alphaSize.addr, align 4
  %cmp145 = icmp sle i32 %128, %129
  br i1 %cmp145, label %for.body146, label %for.end161

for.body146:                                      ; preds = %for.cond144
  store i32 0, i32* %j, align 4
  %130 = load i32, i32* %i, align 4
  store i32 %130, i32* %k, align 4
  br label %while.cond147

while.cond147:                                    ; preds = %while.body150, %for.body146
  %131 = load i32, i32* %k, align 4
  %arrayidx148 = getelementptr inbounds [516 x i32], [516 x i32]* %parent, i32 0, i32 %131
  %132 = load i32, i32* %arrayidx148, align 4
  %cmp149 = icmp sge i32 %132, 0
  br i1 %cmp149, label %while.body150, label %while.end153

while.body150:                                    ; preds = %while.cond147
  %133 = load i32, i32* %k, align 4
  %arrayidx151 = getelementptr inbounds [516 x i32], [516 x i32]* %parent, i32 0, i32 %133
  %134 = load i32, i32* %arrayidx151, align 4
  store i32 %134, i32* %k, align 4
  %135 = load i32, i32* %j, align 4
  %inc152 = add nsw i32 %135, 1
  store i32 %inc152, i32* %j, align 4
  br label %while.cond147

while.end153:                                     ; preds = %while.cond147
  %136 = load i32, i32* %j, align 4
  %conv = trunc i32 %136 to i8
  %137 = load i8*, i8** %len.addr, align 4
  %138 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %138, 1
  %arrayidx154 = getelementptr inbounds i8, i8* %137, i32 %sub
  store i8 %conv, i8* %arrayidx154, align 1
  %139 = load i32, i32* %j, align 4
  %140 = load i32, i32* %maxLen.addr, align 4
  %cmp155 = icmp sgt i32 %139, %140
  br i1 %cmp155, label %if.then157, label %if.end158

if.then157:                                       ; preds = %while.end153
  store i8 1, i8* %tooLong, align 1
  br label %if.end158

if.end158:                                        ; preds = %if.then157, %while.end153
  br label %for.inc159

for.inc159:                                       ; preds = %if.end158
  %141 = load i32, i32* %i, align 4
  %inc160 = add nsw i32 %141, 1
  store i32 %inc160, i32* %i, align 4
  br label %for.cond144

for.end161:                                       ; preds = %for.cond144
  %142 = load i8, i8* %tooLong, align 1
  %tobool = icmp ne i8 %142, 0
  br i1 %tobool, label %if.end163, label %if.then162

if.then162:                                       ; preds = %for.end161
  br label %while.end176

if.end163:                                        ; preds = %for.end161
  store i32 1, i32* %i, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc173, %if.end163
  %143 = load i32, i32* %i, align 4
  %144 = load i32, i32* %alphaSize.addr, align 4
  %cmp165 = icmp slt i32 %143, %144
  br i1 %cmp165, label %for.body167, label %for.end175

for.body167:                                      ; preds = %for.cond164
  %145 = load i32, i32* %i, align 4
  %arrayidx168 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %145
  %146 = load i32, i32* %arrayidx168, align 4
  %shr169 = ashr i32 %146, 8
  store i32 %shr169, i32* %j, align 4
  %147 = load i32, i32* %j, align 4
  %div = sdiv i32 %147, 2
  %add170 = add nsw i32 1, %div
  store i32 %add170, i32* %j, align 4
  %148 = load i32, i32* %j, align 4
  %shl171 = shl i32 %148, 8
  %149 = load i32, i32* %i, align 4
  %arrayidx172 = getelementptr inbounds [516 x i32], [516 x i32]* %weight, i32 0, i32 %149
  store i32 %shl171, i32* %arrayidx172, align 4
  br label %for.inc173

for.inc173:                                       ; preds = %for.body167
  %150 = load i32, i32* %i, align 4
  %inc174 = add nsw i32 %150, 1
  store i32 %inc174, i32* %i, align 4
  br label %for.cond164

for.end175:                                       ; preds = %for.cond164
  br label %while.body

while.end176:                                     ; preds = %if.then162
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @panic(i8* %s) #1 {
entry:
  %s.addr = alloca i8*, align 4
  store i8* %s, i8** %s.addr, align 4
  %0 = load i8*, i8** %s.addr, align 4
  %1 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @"??_C@_0GM@FDPANDAG@?6?$CFs?3?5PANIC?5?9?9?5internal?5consisten@", i32 0, i32 0), i8* %1, i8* %0)
  call void @showFileNames()
  call void @cleanUpAndFail(i32 3)
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @hbAssignCodes(i32* %code, i8* %length, i32 %minLen, i32 %maxLen, i32 %alphaSize) #0 {
entry:
  %alphaSize.addr = alloca i32, align 4
  %maxLen.addr = alloca i32, align 4
  %minLen.addr = alloca i32, align 4
  %length.addr = alloca i8*, align 4
  %code.addr = alloca i32*, align 4
  %n = alloca i32, align 4
  %vec = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %alphaSize, i32* %alphaSize.addr, align 4
  store i32 %maxLen, i32* %maxLen.addr, align 4
  store i32 %minLen, i32* %minLen.addr, align 4
  store i8* %length, i8** %length.addr, align 4
  store i32* %code, i32** %code.addr, align 4
  store i32 0, i32* %vec, align 4
  %0 = load i32, i32* %minLen.addr, align 4
  store i32 %0, i32* %n, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %1 = load i32, i32* %n, align 4
  %2 = load i32, i32* %maxLen.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %alphaSize.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i8*, i8** %length.addr, align 4
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load i32, i32* %n, align 4
  %cmp4 = icmp eq i32 %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %9 = load i32, i32* %vec, align 4
  %10 = load i32*, i32** %code.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx6, align 4
  %12 = load i32, i32* %vec, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %vec, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %i, align 4
  %inc7 = add nsw i32 %13, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %14 = load i32, i32* %vec, align 4
  %shl = shl i32 %14, 1
  store i32 %shl, i32* %vec, align 4
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %15 = load i32, i32* %n, align 4
  %inc9 = add nsw i32 %15, 1
  store i32 %inc9, i32* %n, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @hbCreateDecodeTables(i32* %limit, i32* %base, i32* %perm, i8* %length, i32 %minLen, i32 %maxLen, i32 %alphaSize) #0 {
entry:
  %alphaSize.addr = alloca i32, align 4
  %maxLen.addr = alloca i32, align 4
  %minLen.addr = alloca i32, align 4
  %length.addr = alloca i8*, align 4
  %perm.addr = alloca i32*, align 4
  %base.addr = alloca i32*, align 4
  %limit.addr = alloca i32*, align 4
  %pp = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %vec = alloca i32, align 4
  store i32 %alphaSize, i32* %alphaSize.addr, align 4
  store i32 %maxLen, i32* %maxLen.addr, align 4
  store i32 %minLen, i32* %minLen.addr, align 4
  store i8* %length, i8** %length.addr, align 4
  store i32* %perm, i32** %perm.addr, align 4
  store i32* %base, i32** %base.addr, align 4
  store i32* %limit, i32** %limit.addr, align 4
  store i32 0, i32* %pp, align 4
  %0 = load i32, i32* %minLen.addr, align 4
  store i32 %0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %maxLen.addr, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %3 = load i32, i32* %j, align 4
  %4 = load i32, i32* %alphaSize.addr, align 4
  %cmp2 = icmp slt i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %5 = load i8*, i8** %length.addr, align 4
  %6 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds i8, i8* %5, i32 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %8 = load i32, i32* %i, align 4
  %cmp4 = icmp eq i32 %conv, %8
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body3
  %9 = load i32, i32* %j, align 4
  %10 = load i32*, i32** %perm.addr, align 4
  %11 = load i32, i32* %pp, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx6, align 4
  %12 = load i32, i32* %pp, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %pp, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %j, align 4
  %inc7 = add nsw i32 %13, 1
  store i32 %inc7, i32* %j, align 4
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4
  %inc9 = add nsw i32 %14, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc16, %for.end10
  %15 = load i32, i32* %i, align 4
  %cmp12 = icmp slt i32 %15, 23
  br i1 %cmp12, label %for.body14, label %for.end18

for.body14:                                       ; preds = %for.cond11
  %16 = load i32*, i32** %base.addr, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %16, i32 %17
  store i32 0, i32* %arrayidx15, align 4
  br label %for.inc16

for.inc16:                                        ; preds = %for.body14
  %18 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %18, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond11

for.end18:                                        ; preds = %for.cond11
  store i32 0, i32* %i, align 4
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc27, %for.end18
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %alphaSize.addr, align 4
  %cmp20 = icmp slt i32 %19, %20
  br i1 %cmp20, label %for.body22, label %for.end29

for.body22:                                       ; preds = %for.cond19
  %21 = load i32*, i32** %base.addr, align 4
  %22 = load i8*, i8** %length.addr, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %22, i32 %23
  %24 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %24 to i32
  %add = add nsw i32 %conv24, 1
  %arrayidx25 = getelementptr inbounds i32, i32* %21, i32 %add
  %25 = load i32, i32* %arrayidx25, align 4
  %inc26 = add nsw i32 %25, 1
  store i32 %inc26, i32* %arrayidx25, align 4
  br label %for.inc27

for.inc27:                                        ; preds = %for.body22
  %26 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %26, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond19

for.end29:                                        ; preds = %for.cond19
  store i32 1, i32* %i, align 4
  br label %for.cond30

for.cond30:                                       ; preds = %for.inc37, %for.end29
  %27 = load i32, i32* %i, align 4
  %cmp31 = icmp slt i32 %27, 23
  br i1 %cmp31, label %for.body33, label %for.end39

for.body33:                                       ; preds = %for.cond30
  %28 = load i32*, i32** %base.addr, align 4
  %29 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %29, 1
  %arrayidx34 = getelementptr inbounds i32, i32* %28, i32 %sub
  %30 = load i32, i32* %arrayidx34, align 4
  %31 = load i32*, i32** %base.addr, align 4
  %32 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds i32, i32* %31, i32 %32
  %33 = load i32, i32* %arrayidx35, align 4
  %add36 = add nsw i32 %33, %30
  store i32 %add36, i32* %arrayidx35, align 4
  br label %for.inc37

for.inc37:                                        ; preds = %for.body33
  %34 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %34, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond30

for.end39:                                        ; preds = %for.cond30
  store i32 0, i32* %i, align 4
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc45, %for.end39
  %35 = load i32, i32* %i, align 4
  %cmp41 = icmp slt i32 %35, 23
  br i1 %cmp41, label %for.body43, label %for.end47

for.body43:                                       ; preds = %for.cond40
  %36 = load i32*, i32** %limit.addr, align 4
  %37 = load i32, i32* %i, align 4
  %arrayidx44 = getelementptr inbounds i32, i32* %36, i32 %37
  store i32 0, i32* %arrayidx44, align 4
  br label %for.inc45

for.inc45:                                        ; preds = %for.body43
  %38 = load i32, i32* %i, align 4
  %inc46 = add nsw i32 %38, 1
  store i32 %inc46, i32* %i, align 4
  br label %for.cond40

for.end47:                                        ; preds = %for.cond40
  store i32 0, i32* %vec, align 4
  %39 = load i32, i32* %minLen.addr, align 4
  store i32 %39, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc59, %for.end47
  %40 = load i32, i32* %i, align 4
  %41 = load i32, i32* %maxLen.addr, align 4
  %cmp49 = icmp sle i32 %40, %41
  br i1 %cmp49, label %for.body51, label %for.end61

for.body51:                                       ; preds = %for.cond48
  %42 = load i32*, i32** %base.addr, align 4
  %43 = load i32, i32* %i, align 4
  %add52 = add nsw i32 %43, 1
  %arrayidx53 = getelementptr inbounds i32, i32* %42, i32 %add52
  %44 = load i32, i32* %arrayidx53, align 4
  %45 = load i32*, i32** %base.addr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %45, i32 %46
  %47 = load i32, i32* %arrayidx54, align 4
  %sub55 = sub nsw i32 %44, %47
  %48 = load i32, i32* %vec, align 4
  %add56 = add nsw i32 %48, %sub55
  store i32 %add56, i32* %vec, align 4
  %49 = load i32, i32* %vec, align 4
  %sub57 = sub nsw i32 %49, 1
  %50 = load i32*, i32** %limit.addr, align 4
  %51 = load i32, i32* %i, align 4
  %arrayidx58 = getelementptr inbounds i32, i32* %50, i32 %51
  store i32 %sub57, i32* %arrayidx58, align 4
  %52 = load i32, i32* %vec, align 4
  %shl = shl i32 %52, 1
  store i32 %shl, i32* %vec, align 4
  br label %for.inc59

for.inc59:                                        ; preds = %for.body51
  %53 = load i32, i32* %i, align 4
  %inc60 = add nsw i32 %53, 1
  store i32 %inc60, i32* %i, align 4
  br label %for.cond48

for.end61:                                        ; preds = %for.cond48
  %54 = load i32, i32* %minLen.addr, align 4
  %add62 = add nsw i32 %54, 1
  store i32 %add62, i32* %i, align 4
  br label %for.cond63

for.cond63:                                       ; preds = %for.inc74, %for.end61
  %55 = load i32, i32* %i, align 4
  %56 = load i32, i32* %maxLen.addr, align 4
  %cmp64 = icmp sle i32 %55, %56
  br i1 %cmp64, label %for.body66, label %for.end76

for.body66:                                       ; preds = %for.cond63
  %57 = load i32*, i32** %limit.addr, align 4
  %58 = load i32, i32* %i, align 4
  %sub67 = sub nsw i32 %58, 1
  %arrayidx68 = getelementptr inbounds i32, i32* %57, i32 %sub67
  %59 = load i32, i32* %arrayidx68, align 4
  %add69 = add nsw i32 %59, 1
  %shl70 = shl i32 %add69, 1
  %60 = load i32*, i32** %base.addr, align 4
  %61 = load i32, i32* %i, align 4
  %arrayidx71 = getelementptr inbounds i32, i32* %60, i32 %61
  %62 = load i32, i32* %arrayidx71, align 4
  %sub72 = sub nsw i32 %shl70, %62
  %63 = load i32*, i32** %base.addr, align 4
  %64 = load i32, i32* %i, align 4
  %arrayidx73 = getelementptr inbounds i32, i32* %63, i32 %64
  store i32 %sub72, i32* %arrayidx73, align 4
  br label %for.inc74

for.inc74:                                        ; preds = %for.body66
  %65 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %65, 1
  store i32 %inc75, i32* %i, align 4
  br label %for.cond63

for.end76:                                        ; preds = %for.cond63
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @allocateCompressStructures() #1 {
entry:
  %n = alloca i32, align 4
  %totalDraw = alloca i32, align 4
  %0 = load i32, i32* @blockSize100k, align 4
  %mul = mul nsw i32 100000, %0
  store i32 %mul, i32* %n, align 4
  %1 = load i32, i32* %n, align 4
  %add = add nsw i32 %1, 1
  %add1 = add nsw i32 %add, 20
  %mul2 = mul i32 %add1, 1
  %call = call noalias i8* @malloc(i32 %mul2) #5
  store i8* %call, i8** @block, align 4
  %2 = load i32, i32* %n, align 4
  %add3 = add nsw i32 %2, 20
  %mul4 = mul i32 %add3, 2
  %call5 = call noalias i8* @malloc(i32 %mul4) #5
  %3 = bitcast i8* %call5 to i16*
  store i16* %3, i16** @quadrant, align 4
  %4 = load i32, i32* %n, align 4
  %mul6 = mul i32 %4, 4
  %call7 = call noalias i8* @malloc(i32 %mul6) #5
  %5 = bitcast i8* %call7 to i32*
  store i32* %5, i32** @zptr, align 4
  %call8 = call noalias i8* @malloc(i32 262148) #5
  %6 = bitcast i8* %call8 to i32*
  store i32* %6, i32** @ftab, align 4
  %7 = load i8*, i8** @block, align 4
  %cmp = icmp eq i8* %7, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load i16*, i16** @quadrant, align 4
  %cmp9 = icmp eq i16* %8, null
  br i1 %cmp9, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %9 = load i32*, i32** @zptr, align 4
  %cmp11 = icmp eq i32* %9, null
  br i1 %cmp11, label %if.then, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false10
  %10 = load i32*, i32** @ftab, align 4
  %cmp13 = icmp eq i32* %10, null
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false12, %lor.lhs.false10, %lor.lhs.false, %entry
  %11 = load i32, i32* %n, align 4
  %add14 = add nsw i32 %11, 1
  %add15 = add nsw i32 %add14, 20
  %mul16 = mul i32 %add15, 1
  %12 = load i32, i32* %n, align 4
  %add17 = add nsw i32 %12, 20
  %mul18 = mul i32 %add17, 2
  %add19 = add i32 %mul16, %mul18
  %13 = load i32, i32* %n, align 4
  %mul20 = mul i32 %13, 4
  %add21 = add i32 %add19, %mul20
  %add22 = add i32 %add21, 262148
  store i32 %add22, i32* %totalDraw, align 4
  %14 = load i32, i32* %n, align 4
  %15 = load i32, i32* %totalDraw, align 4
  call void @compressOutOfMemory(i32 %15, i32 %14)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false12
  %16 = load i8*, i8** @block, align 4
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** @block, align 4
  %17 = load i32*, i32** @zptr, align 4
  %18 = bitcast i32* %17 to i16*
  store i16* %18, i16** @szptr, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare dllimport noalias i8* @malloc(i32) #4

; Function Attrs: noinline optnone sspstrong
define dso_local void @compressOutOfMemory(i32 %draw, i32 %blockSize) #1 {
entry:
  %blockSize.addr = alloca i32, align 4
  %draw.addr = alloca i32, align 4
  store i32 %blockSize, i32* %blockSize.addr, align 4
  store i32 %draw, i32* %draw.addr, align 4
  %0 = load i32, i32* %blockSize.addr, align 4
  %1 = load i32, i32* %draw.addr, align 4
  %2 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([146 x i8], [146 x i8]* @"??_C@_0JC@IBNBCLCJ@?6?$CFs?3?5Can?8t?5allocate?5enough?5memor@", i32 0, i32 0), i8* %2, i32 %1, i32 %0)
  call void @showFileNames()
  call void @cleanUpAndFail(i32 1)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @setDecompressStructureSizes(i32 %newSize100k) #1 {
entry:
  %newSize100k.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %totalDraw = alloca i32, align 4
  %n37 = alloca i32, align 4
  %totalDraw47 = alloca i32, align 4
  store i32 %newSize100k, i32* %newSize100k.addr, align 4
  %0 = load i32, i32* %newSize100k.addr, align 4
  %cmp = icmp sle i32 0, %0
  br i1 %cmp, label %land.lhs.true, label %if.then

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %newSize100k.addr, align 4
  %cmp1 = icmp sle i32 %1, 9
  br i1 %cmp1, label %land.lhs.true2, label %if.then

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32, i32* @blockSize100k, align 4
  %cmp3 = icmp sle i32 0, %2
  br i1 %cmp3, label %land.lhs.true4, label %if.then

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %3 = load i32, i32* @blockSize100k, align 4
  %cmp5 = icmp sle i32 %3, 9
  br i1 %cmp5, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true4, %land.lhs.true2, %land.lhs.true, %entry
  call void @panic(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"??_C@_0BM@FDMAIAHH@setDecompressStructureSizes?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true4
  %4 = load i32, i32* %newSize100k.addr, align 4
  %5 = load i32, i32* @blockSize100k, align 4
  %cmp6 = icmp eq i32 %4, %5
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  br label %if.end52

if.end8:                                          ; preds = %if.end
  %6 = load i32, i32* %newSize100k.addr, align 4
  store i32 %6, i32* @blockSize100k, align 4
  %7 = load i16*, i16** @ll16, align 4
  %cmp9 = icmp ne i16* %7, null
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end8
  %8 = load i16*, i16** @ll16, align 4
  %9 = bitcast i16* %8 to i8*
  call void @free(i8* %9) #5
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end8
  %10 = load i8*, i8** @ll4, align 4
  %cmp12 = icmp ne i8* %10, null
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  %11 = load i8*, i8** @ll4, align 4
  call void @free(i8* %11) #5
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end11
  %12 = load i8*, i8** @ll8, align 4
  %cmp15 = icmp ne i8* %12, null
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end14
  %13 = load i8*, i8** @ll8, align 4
  call void @free(i8* %13) #5
  br label %if.end17

if.end17:                                         ; preds = %if.then16, %if.end14
  %14 = load i32*, i32** @tt, align 4
  %cmp18 = icmp ne i32* %14, null
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  %15 = load i32*, i32** @tt, align 4
  %16 = bitcast i32* %15 to i8*
  call void @free(i8* %16) #5
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.end17
  %17 = load i32, i32* %newSize100k.addr, align 4
  %cmp21 = icmp eq i32 %17, 0
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end20
  br label %if.end52

if.end23:                                         ; preds = %if.end20
  %18 = load i8, i8* @smallMode, align 1
  %tobool = icmp ne i8 %18, 0
  br i1 %tobool, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.end23
  %19 = load i32, i32* %newSize100k.addr, align 4
  %mul = mul nsw i32 100000, %19
  store i32 %mul, i32* %n, align 4
  %20 = load i32, i32* %n, align 4
  %mul25 = mul i32 %20, 2
  %call = call noalias i8* @malloc(i32 %mul25) #5
  %21 = bitcast i8* %call to i16*
  store i16* %21, i16** @ll16, align 4
  %22 = load i32, i32* %n, align 4
  %add = add nsw i32 %22, 1
  %shr = ashr i32 %add, 1
  %mul26 = mul i32 %shr, 1
  %call27 = call noalias i8* @malloc(i32 %mul26) #5
  store i8* %call27, i8** @ll4, align 4
  %23 = load i8*, i8** @ll4, align 4
  %cmp28 = icmp eq i8* %23, null
  br i1 %cmp28, label %if.then30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then24
  %24 = load i16*, i16** @ll16, align 4
  %cmp29 = icmp eq i16* %24, null
  br i1 %cmp29, label %if.then30, label %if.end36

if.then30:                                        ; preds = %lor.lhs.false, %if.then24
  %25 = load i32, i32* %n, align 4
  %mul31 = mul i32 %25, 2
  %26 = load i32, i32* %n, align 4
  %add32 = add nsw i32 %26, 1
  %shr33 = ashr i32 %add32, 1
  %mul34 = mul i32 %shr33, 1
  %add35 = add i32 %mul31, %mul34
  store i32 %add35, i32* %totalDraw, align 4
  %27 = load i32, i32* %n, align 4
  %28 = load i32, i32* %totalDraw, align 4
  call void @uncompressOutOfMemory(i32 %28, i32 %27)
  br label %if.end36

if.end36:                                         ; preds = %if.then30, %lor.lhs.false
  br label %if.end52

if.else:                                          ; preds = %if.end23
  %29 = load i32, i32* %newSize100k.addr, align 4
  %mul38 = mul nsw i32 100000, %29
  store i32 %mul38, i32* %n37, align 4
  %30 = load i32, i32* %n37, align 4
  %mul39 = mul i32 %30, 1
  %call40 = call noalias i8* @malloc(i32 %mul39) #5
  store i8* %call40, i8** @ll8, align 4
  %31 = load i32, i32* %n37, align 4
  %mul41 = mul i32 %31, 4
  %call42 = call noalias i8* @malloc(i32 %mul41) #5
  %32 = bitcast i8* %call42 to i32*
  store i32* %32, i32** @tt, align 4
  %33 = load i8*, i8** @ll8, align 4
  %cmp43 = icmp eq i8* %33, null
  br i1 %cmp43, label %if.then46, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %if.else
  %34 = load i32*, i32** @tt, align 4
  %cmp45 = icmp eq i32* %34, null
  br i1 %cmp45, label %if.then46, label %if.end51

if.then46:                                        ; preds = %lor.lhs.false44, %if.else
  %35 = load i32, i32* %n37, align 4
  %mul48 = mul i32 %35, 1
  %36 = load i32, i32* %n37, align 4
  %mul49 = mul i32 %36, 4
  %add50 = add i32 %mul48, %mul49
  store i32 %add50, i32* %totalDraw47, align 4
  %37 = load i32, i32* %n37, align 4
  %38 = load i32, i32* %totalDraw47, align 4
  call void @uncompressOutOfMemory(i32 %38, i32 %37)
  br label %if.end51

if.end51:                                         ; preds = %if.then46, %lor.lhs.false44
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end36, %if.then22, %if.then7
  ret void
}

; Function Attrs: argmemonly nounwind
declare dllimport void @free(i8*) #4

; Function Attrs: noinline optnone sspstrong
define dso_local void @uncompressOutOfMemory(i32 %draw, i32 %blockSize) #1 {
entry:
  %blockSize.addr = alloca i32, align 4
  %draw.addr = alloca i32, align 4
  store i32 %blockSize, i32* %blockSize.addr, align 4
  store i32 %draw, i32* %draw.addr, align 4
  %0 = load i32, i32* %blockSize.addr, align 4
  %1 = load i32, i32* %draw.addr, align 4
  %2 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([206 x i8], [206 x i8]* @"??_C@_0MO@HPEGJDIN@?6?$CFs?3?5Can?8t?5allocate?5enough?5memor@", i32 0, i32 0), i8* %2, i32 %1, i32 %0)
  call void @showFileNames()
  call void @cleanUpAndFail(i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @makeMaps() #0 {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* @nInUse, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %conv = trunc i32 %3 to i8
  %4 = load i32, i32* @nInUse, align 4
  %arrayidx1 = getelementptr inbounds [256 x i8], [256 x i8]* @seqToUnseq, i32 0, i32 %4
  store i8 %conv, i8* %arrayidx1, align 1
  %5 = load i32, i32* @nInUse, align 4
  %conv2 = trunc i32 %5 to i8
  %6 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [256 x i8], [256 x i8]* @unseqToSeq, i32 0, i32 %6
  store i8 %conv2, i8* %arrayidx3, align 1
  %7 = load i32, i32* @nInUse, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* @nInUse, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc4 = add nsw i32 %8, 1
  store i32 %inc4, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @generateMTFValues() #0 {
entry:
  %yy = alloca [256 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca i8, align 1
  %tmp2 = alloca i8, align 1
  %zPend = alloca i32, align 4
  %wr = alloca i32, align 4
  %EOB = alloca i32, align 4
  %ll_i = alloca i8, align 1
  call void @makeMaps()
  %0 = load i32, i32* @nInUse, align 4
  %add = add nsw i32 %0, 1
  store i32 %add, i32* %EOB, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %EOB, align 4
  %cmp = icmp sle i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 %3
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %wr, align 4
  store i32 0, i32* %zPend, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc5, %for.end
  %5 = load i32, i32* %i, align 4
  %6 = load i32, i32* @nInUse, align 4
  %cmp2 = icmp slt i32 %5, %6
  br i1 %cmp2, label %for.body3, label %for.end7

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %i, align 4
  %conv = trunc i32 %7 to i8
  %8 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %8
  store i8 %conv, i8* %arrayidx4, align 1
  br label %for.inc5

for.inc5:                                         ; preds = %for.body3
  %9 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond1

for.end7:                                         ; preds = %for.cond1
  store i32 0, i32* %i, align 4
  br label %for.cond8

for.cond8:                                        ; preds = %for.inc53, %for.end7
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* @last, align 4
  %cmp9 = icmp sle i32 %10, %11
  br i1 %cmp9, label %for.body11, label %for.end55

for.body11:                                       ; preds = %for.cond8
  %12 = load i8*, i8** @block, align 4
  %13 = load i32*, i32** @zptr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32* %13, i32 %14
  %15 = load i32, i32* %arrayidx12, align 4
  %sub = sub nsw i32 %15, 1
  %arrayidx13 = getelementptr inbounds i8, i8* %12, i32 %sub
  %16 = load i8, i8* %arrayidx13, align 1
  %idxprom = zext i8 %16 to i32
  %arrayidx14 = getelementptr inbounds [256 x i8], [256 x i8]* @unseqToSeq, i32 0, i32 %idxprom
  %17 = load i8, i8* %arrayidx14, align 1
  store i8 %17, i8* %ll_i, align 1
  store i32 0, i32* %j, align 4
  %18 = load i32, i32* %j, align 4
  %arrayidx15 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %18
  %19 = load i8, i8* %arrayidx15, align 1
  store i8 %19, i8* %tmp, align 1
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body11
  %20 = load i8, i8* %ll_i, align 1
  %conv16 = zext i8 %20 to i32
  %21 = load i8, i8* %tmp, align 1
  %conv17 = zext i8 %21 to i32
  %cmp18 = icmp ne i32 %conv16, %conv17
  br i1 %cmp18, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i32, i32* %j, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %j, align 4
  %23 = load i8, i8* %tmp, align 1
  store i8 %23, i8* %tmp2, align 1
  %24 = load i32, i32* %j, align 4
  %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %24
  %25 = load i8, i8* %arrayidx21, align 1
  store i8 %25, i8* %tmp, align 1
  %26 = load i8, i8* %tmp2, align 1
  %27 = load i32, i32* %j, align 4
  %arrayidx22 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %27
  store i8 %26, i8* %arrayidx22, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %28 = load i8, i8* %tmp, align 1
  %arrayidx23 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 0
  store i8 %28, i8* %arrayidx23, align 1
  %29 = load i32, i32* %j, align 4
  %cmp24 = icmp eq i32 %29, 0
  br i1 %cmp24, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %30 = load i32, i32* %zPend, align 4
  %inc26 = add nsw i32 %30, 1
  store i32 %inc26, i32* %zPend, align 4
  br label %if.end52

if.else:                                          ; preds = %while.end
  %31 = load i32, i32* %zPend, align 4
  %cmp27 = icmp sgt i32 %31, 0
  br i1 %cmp27, label %if.then29, label %if.end44

if.then29:                                        ; preds = %if.else
  %32 = load i32, i32* %zPend, align 4
  %dec = add nsw i32 %32, -1
  store i32 %dec, i32* %zPend, align 4
  br label %while.body31

while.body31:                                     ; preds = %if.end, %if.then29
  %33 = load i32, i32* %zPend, align 4
  %rem = srem i32 %33, 2
  switch i32 %rem, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb35
  ]

sw.bb:                                            ; preds = %while.body31
  %34 = load i16*, i16** @szptr, align 4
  %35 = load i32, i32* %wr, align 4
  %arrayidx32 = getelementptr inbounds i16, i16* %34, i32 %35
  store i16 0, i16* %arrayidx32, align 2
  %36 = load i32, i32* %wr, align 4
  %inc33 = add nsw i32 %36, 1
  store i32 %inc33, i32* %wr, align 4
  %37 = load i32, i32* getelementptr inbounds ([258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 0), align 4
  %inc34 = add nsw i32 %37, 1
  store i32 %inc34, i32* getelementptr inbounds ([258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 0), align 4
  br label %sw.epilog

sw.bb35:                                          ; preds = %while.body31
  %38 = load i16*, i16** @szptr, align 4
  %39 = load i32, i32* %wr, align 4
  %arrayidx36 = getelementptr inbounds i16, i16* %38, i32 %39
  store i16 1, i16* %arrayidx36, align 2
  %40 = load i32, i32* %wr, align 4
  %inc37 = add nsw i32 %40, 1
  store i32 %inc37, i32* %wr, align 4
  %41 = load i32, i32* getelementptr inbounds ([258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 1), align 4
  %inc38 = add nsw i32 %41, 1
  store i32 %inc38, i32* getelementptr inbounds ([258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 1), align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb35, %sw.bb, %while.body31
  %42 = load i32, i32* %zPend, align 4
  %cmp39 = icmp slt i32 %42, 2
  br i1 %cmp39, label %if.then41, label %if.end

if.then41:                                        ; preds = %sw.epilog
  br label %while.end43

if.end:                                           ; preds = %sw.epilog
  %43 = load i32, i32* %zPend, align 4
  %sub42 = sub nsw i32 %43, 2
  %div = sdiv i32 %sub42, 2
  store i32 %div, i32* %zPend, align 4
  br label %while.body31

while.end43:                                      ; preds = %if.then41
  store i32 0, i32* %zPend, align 4
  br label %if.end44

if.end44:                                         ; preds = %while.end43, %if.else
  %44 = load i32, i32* %j, align 4
  %add45 = add nsw i32 %44, 1
  %conv46 = trunc i32 %add45 to i16
  %45 = load i16*, i16** @szptr, align 4
  %46 = load i32, i32* %wr, align 4
  %arrayidx47 = getelementptr inbounds i16, i16* %45, i32 %46
  store i16 %conv46, i16* %arrayidx47, align 2
  %47 = load i32, i32* %wr, align 4
  %inc48 = add nsw i32 %47, 1
  store i32 %inc48, i32* %wr, align 4
  %48 = load i32, i32* %j, align 4
  %add49 = add nsw i32 %48, 1
  %arrayidx50 = getelementptr inbounds [258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 %add49
  %49 = load i32, i32* %arrayidx50, align 4
  %inc51 = add nsw i32 %49, 1
  store i32 %inc51, i32* %arrayidx50, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.end44, %if.then
  br label %for.inc53

for.inc53:                                        ; preds = %if.end52
  %50 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %50, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond8

for.end55:                                        ; preds = %for.cond8
  %51 = load i32, i32* %zPend, align 4
  %cmp56 = icmp sgt i32 %51, 0
  br i1 %cmp56, label %if.then58, label %if.end79

if.then58:                                        ; preds = %for.end55
  %52 = load i32, i32* %zPend, align 4
  %dec59 = add nsw i32 %52, -1
  store i32 %dec59, i32* %zPend, align 4
  br label %while.body61

while.body61:                                     ; preds = %if.end75, %if.then58
  %53 = load i32, i32* %zPend, align 4
  %rem62 = srem i32 %53, 2
  switch i32 %rem62, label %sw.epilog71 [
    i32 0, label %sw.bb63
    i32 1, label %sw.bb67
  ]

sw.bb63:                                          ; preds = %while.body61
  %54 = load i16*, i16** @szptr, align 4
  %55 = load i32, i32* %wr, align 4
  %arrayidx64 = getelementptr inbounds i16, i16* %54, i32 %55
  store i16 0, i16* %arrayidx64, align 2
  %56 = load i32, i32* %wr, align 4
  %inc65 = add nsw i32 %56, 1
  store i32 %inc65, i32* %wr, align 4
  %57 = load i32, i32* getelementptr inbounds ([258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 0), align 4
  %inc66 = add nsw i32 %57, 1
  store i32 %inc66, i32* getelementptr inbounds ([258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 0), align 4
  br label %sw.epilog71

sw.bb67:                                          ; preds = %while.body61
  %58 = load i16*, i16** @szptr, align 4
  %59 = load i32, i32* %wr, align 4
  %arrayidx68 = getelementptr inbounds i16, i16* %58, i32 %59
  store i16 1, i16* %arrayidx68, align 2
  %60 = load i32, i32* %wr, align 4
  %inc69 = add nsw i32 %60, 1
  store i32 %inc69, i32* %wr, align 4
  %61 = load i32, i32* getelementptr inbounds ([258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 1), align 4
  %inc70 = add nsw i32 %61, 1
  store i32 %inc70, i32* getelementptr inbounds ([258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 1), align 4
  br label %sw.epilog71

sw.epilog71:                                      ; preds = %sw.bb67, %sw.bb63, %while.body61
  %62 = load i32, i32* %zPend, align 4
  %cmp72 = icmp slt i32 %62, 2
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %sw.epilog71
  br label %while.end78

if.end75:                                         ; preds = %sw.epilog71
  %63 = load i32, i32* %zPend, align 4
  %sub76 = sub nsw i32 %63, 2
  %div77 = sdiv i32 %sub76, 2
  store i32 %div77, i32* %zPend, align 4
  br label %while.body61

while.end78:                                      ; preds = %if.then74
  br label %if.end79

if.end79:                                         ; preds = %while.end78, %for.end55
  %64 = load i32, i32* %EOB, align 4
  %conv80 = trunc i32 %64 to i16
  %65 = load i16*, i16** @szptr, align 4
  %66 = load i32, i32* %wr, align 4
  %arrayidx81 = getelementptr inbounds i16, i16* %65, i32 %66
  store i16 %conv80, i16* %arrayidx81, align 2
  %67 = load i32, i32* %wr, align 4
  %inc82 = add nsw i32 %67, 1
  store i32 %inc82, i32* %wr, align 4
  %68 = load i32, i32* %EOB, align 4
  %arrayidx83 = getelementptr inbounds [258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 %68
  %69 = load i32, i32* %arrayidx83, align 4
  %inc84 = add nsw i32 %69, 1
  store i32 %inc84, i32* %arrayidx83, align 4
  %70 = load i32, i32* %wr, align 4
  store i32 %70, i32* @nMTF, align 4
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @sendMTFValues() #1 {
entry:
  %v = alloca i32, align 4
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gs = alloca i32, align 4
  %ge = alloca i32, align 4
  %totc = alloca i32, align 4
  %bt = alloca i32, align 4
  %bc = alloca i32, align 4
  %iter = alloca i32, align 4
  %nSelectors = alloca i32, align 4
  %alphaSize = alloca i32, align 4
  %minLen = alloca i32, align 4
  %maxLen = alloca i32, align 4
  %selCtr = alloca i32, align 4
  %nGroups = alloca i32, align 4
  %nBytes = alloca i32, align 4
  %cost = alloca [6 x i16], align 2
  %fave = alloca [6 x i32], align 4
  %nPart = alloca i32, align 4
  %remF = alloca i32, align 4
  %tFreq = alloca i32, align 4
  %aFreq = alloca i32, align 4
  %cost0 = alloca i16, align 2
  %cost1 = alloca i16, align 2
  %cost2 = alloca i16, align 2
  %cost3 = alloca i16, align 2
  %cost4 = alloca i16, align 2
  %cost5 = alloca i16, align 2
  %icv = alloca i16, align 2
  %icv183 = alloca i16, align 2
  %pos = alloca [6 x i8], align 1
  %ll_i = alloca i8, align 1
  %tmp2 = alloca i8, align 1
  %tmp = alloca i8, align 1
  %inUse16 = alloca [16 x i8], align 1
  %curr = alloca i32, align 4
  %0 = load i32, i32* @verbosity, align 4
  %cmp = icmp sge i32 %0, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @nInUse, align 4
  %2 = load i32, i32* @nMTF, align 4
  %3 = load i32, i32* @last, align 4
  %add = add nsw i32 %3, 1
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @"??_C@_0EA@HNDFBPHF@?5?5?5?5?5?5?$CFd?5in?5block?0?5?$CFd?5after?5MTF?5@", i32 0, i32 0), i32 %add, i32 %2, i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* @nInUse, align 4
  %add2 = add nsw i32 %4, 2
  store i32 %add2, i32* %alphaSize, align 4
  store i32 0, i32* %t, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %if.end
  %5 = load i32, i32* %t, align 4
  %cmp3 = icmp slt i32 %5, 6
  br i1 %cmp3, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %v, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %v, align 4
  %7 = load i32, i32* %alphaSize, align 4
  %cmp5 = icmp slt i32 %6, %7
  br i1 %cmp5, label %for.body6, label %for.end

for.body6:                                        ; preds = %for.cond4
  %8 = load i32, i32* %t, align 4
  %arrayidx7 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %8
  %9 = load i32, i32* %v, align 4
  %arrayidx8 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx7, i32 0, i32 %9
  store i8 15, i8* %arrayidx8, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body6
  %10 = load i32, i32* %v, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %v, align 4
  br label %for.cond4

for.end:                                          ; preds = %for.cond4
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %11 = load i32, i32* %t, align 4
  %inc10 = add nsw i32 %11, 1
  store i32 %inc10, i32* %t, align 4
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  %12 = load i32, i32* @nMTF, align 4
  %cmp12 = icmp sle i32 %12, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.end11
  call void @panic(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"??_C@_0BB@KGNNAFEG@sendMTFValues?$CI0?$CJ?$AA@", i32 0, i32 0))
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %for.end11
  %13 = load i32, i32* @nMTF, align 4
  %cmp15 = icmp slt i32 %13, 200
  br i1 %cmp15, label %if.then16, label %if.else

if.then16:                                        ; preds = %if.end14
  store i32 2, i32* %nGroups, align 4
  br label %if.end21

if.else:                                          ; preds = %if.end14
  %14 = load i32, i32* @nMTF, align 4
  %cmp17 = icmp slt i32 %14, 800
  br i1 %cmp17, label %if.then18, label %if.else19

if.then18:                                        ; preds = %if.else
  store i32 4, i32* %nGroups, align 4
  br label %if.end20

if.else19:                                        ; preds = %if.else
  store i32 6, i32* %nGroups, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.else19, %if.then18
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then16
  %15 = load i32, i32* %nGroups, align 4
  store i32 %15, i32* %nPart, align 4
  %16 = load i32, i32* @nMTF, align 4
  store i32 %16, i32* %remF, align 4
  store i32 0, i32* %gs, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end72, %if.end21
  %17 = load i32, i32* %nPart, align 4
  %cmp22 = icmp sgt i32 %17, 0
  br i1 %cmp22, label %while.body, label %while.end76

while.body:                                       ; preds = %while.cond
  %18 = load i32, i32* %remF, align 4
  %19 = load i32, i32* %nPart, align 4
  %div = sdiv i32 %18, %19
  store i32 %div, i32* %tFreq, align 4
  %20 = load i32, i32* %gs, align 4
  %sub = sub nsw i32 %20, 1
  store i32 %sub, i32* %ge, align 4
  store i32 0, i32* %aFreq, align 4
  br label %while.cond23

while.cond23:                                     ; preds = %while.body27, %while.body
  %21 = load i32, i32* %aFreq, align 4
  %22 = load i32, i32* %tFreq, align 4
  %cmp24 = icmp slt i32 %21, %22
  br i1 %cmp24, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond23
  %23 = load i32, i32* %ge, align 4
  %24 = load i32, i32* %alphaSize, align 4
  %sub25 = sub nsw i32 %24, 1
  %cmp26 = icmp slt i32 %23, %sub25
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond23
  %25 = phi i1 [ false, %while.cond23 ], [ %cmp26, %land.rhs ]
  br i1 %25, label %while.body27, label %while.end

while.body27:                                     ; preds = %land.end
  %26 = load i32, i32* %ge, align 4
  %inc28 = add nsw i32 %26, 1
  store i32 %inc28, i32* %ge, align 4
  %27 = load i32, i32* %ge, align 4
  %arrayidx29 = getelementptr inbounds [258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 %27
  %28 = load i32, i32* %arrayidx29, align 4
  %29 = load i32, i32* %aFreq, align 4
  %add30 = add nsw i32 %29, %28
  store i32 %add30, i32* %aFreq, align 4
  br label %while.cond23

while.end:                                        ; preds = %land.end
  %30 = load i32, i32* %ge, align 4
  %31 = load i32, i32* %gs, align 4
  %cmp31 = icmp sgt i32 %30, %31
  br i1 %cmp31, label %land.lhs.true, label %if.end41

land.lhs.true:                                    ; preds = %while.end
  %32 = load i32, i32* %nPart, align 4
  %33 = load i32, i32* %nGroups, align 4
  %cmp32 = icmp ne i32 %32, %33
  br i1 %cmp32, label %land.lhs.true33, label %if.end41

land.lhs.true33:                                  ; preds = %land.lhs.true
  %34 = load i32, i32* %nPart, align 4
  %cmp34 = icmp ne i32 %34, 1
  br i1 %cmp34, label %land.lhs.true35, label %if.end41

land.lhs.true35:                                  ; preds = %land.lhs.true33
  %35 = load i32, i32* %nGroups, align 4
  %36 = load i32, i32* %nPart, align 4
  %sub36 = sub nsw i32 %35, %36
  %rem = srem i32 %sub36, 2
  %cmp37 = icmp eq i32 %rem, 1
  br i1 %cmp37, label %if.then38, label %if.end41

if.then38:                                        ; preds = %land.lhs.true35
  %37 = load i32, i32* %ge, align 4
  %arrayidx39 = getelementptr inbounds [258 x i32], [258 x i32]* @mtfFreq, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx39, align 4
  %39 = load i32, i32* %aFreq, align 4
  %sub40 = sub nsw i32 %39, %38
  store i32 %sub40, i32* %aFreq, align 4
  %40 = load i32, i32* %ge, align 4
  %dec = add nsw i32 %40, -1
  store i32 %dec, i32* %ge, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true33, %land.lhs.true, %while.end
  %41 = load i32, i32* @verbosity, align 4
  %cmp42 = icmp sge i32 %41, 3
  br i1 %cmp42, label %if.then43, label %if.end51

if.then43:                                        ; preds = %if.end41
  %42 = load i32, i32* %aFreq, align 4
  %conv = sitofp i32 %42 to float
  %conv44 = fpext float %conv to double
  %mul = fmul double 1.000000e+02, %conv44
  %43 = load i32, i32* @nMTF, align 4
  %conv45 = sitofp i32 %43 to float
  %conv46 = fpext float %conv45 to double
  %div47 = fdiv double %mul, %conv46
  %44 = load i32, i32* %aFreq, align 4
  %45 = load i32, i32* %ge, align 4
  %46 = load i32, i32* %gs, align 4
  %47 = load i32, i32* %nPart, align 4
  %call48 = call %struct._iobuf* @__iob_func()
  %arrayidx49 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call48, i32 2
  %call50 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx49, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"??_C@_0DL@FBIPBGKK@?5?5?5?5?5?5initial?5group?5?$CFd?0?5?$FL?$CFd?5?4?4?5?$CF@", i32 0, i32 0), i32 %47, i32 %46, i32 %45, i32 %44, double %div47)
  br label %if.end51

if.end51:                                         ; preds = %if.then43, %if.end41
  store i32 0, i32* %v, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc70, %if.end51
  %48 = load i32, i32* %v, align 4
  %49 = load i32, i32* %alphaSize, align 4
  %cmp53 = icmp slt i32 %48, %49
  br i1 %cmp53, label %for.body55, label %for.end72

for.body55:                                       ; preds = %for.cond52
  %50 = load i32, i32* %v, align 4
  %51 = load i32, i32* %gs, align 4
  %cmp56 = icmp sge i32 %50, %51
  br i1 %cmp56, label %land.lhs.true58, label %if.else65

land.lhs.true58:                                  ; preds = %for.body55
  %52 = load i32, i32* %v, align 4
  %53 = load i32, i32* %ge, align 4
  %cmp59 = icmp sle i32 %52, %53
  br i1 %cmp59, label %if.then61, label %if.else65

if.then61:                                        ; preds = %land.lhs.true58
  %54 = load i32, i32* %nPart, align 4
  %sub62 = sub nsw i32 %54, 1
  %arrayidx63 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %sub62
  %55 = load i32, i32* %v, align 4
  %arrayidx64 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx63, i32 0, i32 %55
  store i8 0, i8* %arrayidx64, align 1
  br label %if.end69

if.else65:                                        ; preds = %land.lhs.true58, %for.body55
  %56 = load i32, i32* %nPart, align 4
  %sub66 = sub nsw i32 %56, 1
  %arrayidx67 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %sub66
  %57 = load i32, i32* %v, align 4
  %arrayidx68 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx67, i32 0, i32 %57
  store i8 15, i8* %arrayidx68, align 1
  br label %if.end69

if.end69:                                         ; preds = %if.else65, %if.then61
  br label %for.inc70

for.inc70:                                        ; preds = %if.end69
  %58 = load i32, i32* %v, align 4
  %inc71 = add nsw i32 %58, 1
  store i32 %inc71, i32* %v, align 4
  br label %for.cond52

for.end72:                                        ; preds = %for.cond52
  %59 = load i32, i32* %nPart, align 4
  %dec73 = add nsw i32 %59, -1
  store i32 %dec73, i32* %nPart, align 4
  %60 = load i32, i32* %ge, align 4
  %add74 = add nsw i32 %60, 1
  store i32 %add74, i32* %gs, align 4
  %61 = load i32, i32* %aFreq, align 4
  %62 = load i32, i32* %remF, align 4
  %sub75 = sub nsw i32 %62, %61
  store i32 %sub75, i32* %remF, align 4
  br label %while.cond

while.end76:                                      ; preds = %while.cond
  store i32 0, i32* %iter, align 4
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc273, %while.end76
  %63 = load i32, i32* %iter, align 4
  %cmp78 = icmp slt i32 %63, 4
  br i1 %cmp78, label %for.body80, label %for.end275

for.body80:                                       ; preds = %for.cond77
  store i32 0, i32* %t, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc86, %for.body80
  %64 = load i32, i32* %t, align 4
  %65 = load i32, i32* %nGroups, align 4
  %cmp82 = icmp slt i32 %64, %65
  br i1 %cmp82, label %for.body84, label %for.end88

for.body84:                                       ; preds = %for.cond81
  %66 = load i32, i32* %t, align 4
  %arrayidx85 = getelementptr inbounds [6 x i32], [6 x i32]* %fave, i32 0, i32 %66
  store i32 0, i32* %arrayidx85, align 4
  br label %for.inc86

for.inc86:                                        ; preds = %for.body84
  %67 = load i32, i32* %t, align 4
  %inc87 = add nsw i32 %67, 1
  store i32 %inc87, i32* %t, align 4
  br label %for.cond81

for.end88:                                        ; preds = %for.cond81
  store i32 0, i32* %t, align 4
  br label %for.cond89

for.cond89:                                       ; preds = %for.inc102, %for.end88
  %68 = load i32, i32* %t, align 4
  %69 = load i32, i32* %nGroups, align 4
  %cmp90 = icmp slt i32 %68, %69
  br i1 %cmp90, label %for.body92, label %for.end104

for.body92:                                       ; preds = %for.cond89
  store i32 0, i32* %v, align 4
  br label %for.cond93

for.cond93:                                       ; preds = %for.inc99, %for.body92
  %70 = load i32, i32* %v, align 4
  %71 = load i32, i32* %alphaSize, align 4
  %cmp94 = icmp slt i32 %70, %71
  br i1 %cmp94, label %for.body96, label %for.end101

for.body96:                                       ; preds = %for.cond93
  %72 = load i32, i32* %t, align 4
  %arrayidx97 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @rfreq, i32 0, i32 %72
  %73 = load i32, i32* %v, align 4
  %arrayidx98 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx97, i32 0, i32 %73
  store i32 0, i32* %arrayidx98, align 4
  br label %for.inc99

for.inc99:                                        ; preds = %for.body96
  %74 = load i32, i32* %v, align 4
  %inc100 = add nsw i32 %74, 1
  store i32 %inc100, i32* %v, align 4
  br label %for.cond93

for.end101:                                       ; preds = %for.cond93
  br label %for.inc102

for.inc102:                                       ; preds = %for.end101
  %75 = load i32, i32* %t, align 4
  %inc103 = add nsw i32 %75, 1
  store i32 %inc103, i32* %t, align 4
  br label %for.cond89

for.end104:                                       ; preds = %for.cond89
  store i32 0, i32* %nSelectors, align 4
  store i32 0, i32* %totc, align 4
  store i32 0, i32* %gs, align 4
  br label %while.body106

while.body106:                                    ; preds = %for.end236, %for.end104
  %76 = load i32, i32* %gs, align 4
  %77 = load i32, i32* @nMTF, align 4
  %cmp107 = icmp sge i32 %76, %77
  br i1 %cmp107, label %if.then109, label %if.end110

if.then109:                                       ; preds = %while.body106
  br label %while.end238

if.end110:                                        ; preds = %while.body106
  %78 = load i32, i32* %gs, align 4
  %add111 = add nsw i32 %78, 50
  %sub112 = sub nsw i32 %add111, 1
  store i32 %sub112, i32* %ge, align 4
  %79 = load i32, i32* %ge, align 4
  %80 = load i32, i32* @nMTF, align 4
  %cmp113 = icmp sge i32 %79, %80
  br i1 %cmp113, label %if.then115, label %if.end117

if.then115:                                       ; preds = %if.end110
  %81 = load i32, i32* @nMTF, align 4
  %sub116 = sub nsw i32 %81, 1
  store i32 %sub116, i32* %ge, align 4
  br label %if.end117

if.end117:                                        ; preds = %if.then115, %if.end110
  store i32 0, i32* %t, align 4
  br label %for.cond118

for.cond118:                                      ; preds = %for.inc123, %if.end117
  %82 = load i32, i32* %t, align 4
  %83 = load i32, i32* %nGroups, align 4
  %cmp119 = icmp slt i32 %82, %83
  br i1 %cmp119, label %for.body121, label %for.end125

for.body121:                                      ; preds = %for.cond118
  %84 = load i32, i32* %t, align 4
  %arrayidx122 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 %84
  store i16 0, i16* %arrayidx122, align 2
  br label %for.inc123

for.inc123:                                       ; preds = %for.body121
  %85 = load i32, i32* %t, align 4
  %inc124 = add nsw i32 %85, 1
  store i32 %inc124, i32* %t, align 4
  br label %for.cond118

for.end125:                                       ; preds = %for.cond118
  %86 = load i32, i32* %nGroups, align 4
  %cmp126 = icmp eq i32 %86, 6
  br i1 %cmp126, label %if.then128, label %if.else178

if.then128:                                       ; preds = %for.end125
  store i16 0, i16* %cost5, align 2
  store i16 0, i16* %cost4, align 2
  store i16 0, i16* %cost3, align 2
  store i16 0, i16* %cost2, align 2
  store i16 0, i16* %cost1, align 2
  store i16 0, i16* %cost0, align 2
  %87 = load i32, i32* %gs, align 4
  store i32 %87, i32* %i, align 4
  br label %for.cond129

for.cond129:                                      ; preds = %for.inc169, %if.then128
  %88 = load i32, i32* %i, align 4
  %89 = load i32, i32* %ge, align 4
  %cmp130 = icmp sle i32 %88, %89
  br i1 %cmp130, label %for.body132, label %for.end171

for.body132:                                      ; preds = %for.cond129
  %90 = load i16*, i16** @szptr, align 4
  %91 = load i32, i32* %i, align 4
  %arrayidx133 = getelementptr inbounds i16, i16* %90, i32 %91
  %92 = load i16, i16* %arrayidx133, align 2
  store i16 %92, i16* %icv, align 2
  %93 = load i16, i16* %icv, align 2
  %idxprom = zext i16 %93 to i32
  %arrayidx134 = getelementptr inbounds [258 x i8], [258 x i8]* getelementptr inbounds ([6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 0), i32 0, i32 %idxprom
  %94 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %94 to i32
  %95 = load i16, i16* %cost0, align 2
  %conv136 = zext i16 %95 to i32
  %add137 = add nsw i32 %conv136, %conv135
  %conv138 = trunc i32 %add137 to i16
  store i16 %conv138, i16* %cost0, align 2
  %96 = load i16, i16* %icv, align 2
  %idxprom139 = zext i16 %96 to i32
  %arrayidx140 = getelementptr inbounds [258 x i8], [258 x i8]* getelementptr inbounds ([6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 1), i32 0, i32 %idxprom139
  %97 = load i8, i8* %arrayidx140, align 1
  %conv141 = zext i8 %97 to i32
  %98 = load i16, i16* %cost1, align 2
  %conv142 = zext i16 %98 to i32
  %add143 = add nsw i32 %conv142, %conv141
  %conv144 = trunc i32 %add143 to i16
  store i16 %conv144, i16* %cost1, align 2
  %99 = load i16, i16* %icv, align 2
  %idxprom145 = zext i16 %99 to i32
  %arrayidx146 = getelementptr inbounds [258 x i8], [258 x i8]* getelementptr inbounds ([6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 2), i32 0, i32 %idxprom145
  %100 = load i8, i8* %arrayidx146, align 1
  %conv147 = zext i8 %100 to i32
  %101 = load i16, i16* %cost2, align 2
  %conv148 = zext i16 %101 to i32
  %add149 = add nsw i32 %conv148, %conv147
  %conv150 = trunc i32 %add149 to i16
  store i16 %conv150, i16* %cost2, align 2
  %102 = load i16, i16* %icv, align 2
  %idxprom151 = zext i16 %102 to i32
  %arrayidx152 = getelementptr inbounds [258 x i8], [258 x i8]* getelementptr inbounds ([6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 3), i32 0, i32 %idxprom151
  %103 = load i8, i8* %arrayidx152, align 1
  %conv153 = zext i8 %103 to i32
  %104 = load i16, i16* %cost3, align 2
  %conv154 = zext i16 %104 to i32
  %add155 = add nsw i32 %conv154, %conv153
  %conv156 = trunc i32 %add155 to i16
  store i16 %conv156, i16* %cost3, align 2
  %105 = load i16, i16* %icv, align 2
  %idxprom157 = zext i16 %105 to i32
  %arrayidx158 = getelementptr inbounds [258 x i8], [258 x i8]* getelementptr inbounds ([6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 4), i32 0, i32 %idxprom157
  %106 = load i8, i8* %arrayidx158, align 1
  %conv159 = zext i8 %106 to i32
  %107 = load i16, i16* %cost4, align 2
  %conv160 = zext i16 %107 to i32
  %add161 = add nsw i32 %conv160, %conv159
  %conv162 = trunc i32 %add161 to i16
  store i16 %conv162, i16* %cost4, align 2
  %108 = load i16, i16* %icv, align 2
  %idxprom163 = zext i16 %108 to i32
  %arrayidx164 = getelementptr inbounds [258 x i8], [258 x i8]* getelementptr inbounds ([6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 5), i32 0, i32 %idxprom163
  %109 = load i8, i8* %arrayidx164, align 1
  %conv165 = zext i8 %109 to i32
  %110 = load i16, i16* %cost5, align 2
  %conv166 = zext i16 %110 to i32
  %add167 = add nsw i32 %conv166, %conv165
  %conv168 = trunc i32 %add167 to i16
  store i16 %conv168, i16* %cost5, align 2
  br label %for.inc169

for.inc169:                                       ; preds = %for.body132
  %111 = load i32, i32* %i, align 4
  %inc170 = add nsw i32 %111, 1
  store i32 %inc170, i32* %i, align 4
  br label %for.cond129

for.end171:                                       ; preds = %for.cond129
  %112 = load i16, i16* %cost0, align 2
  %arrayidx172 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 0
  store i16 %112, i16* %arrayidx172, align 2
  %113 = load i16, i16* %cost1, align 2
  %arrayidx173 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 1
  store i16 %113, i16* %arrayidx173, align 2
  %114 = load i16, i16* %cost2, align 2
  %arrayidx174 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 2
  store i16 %114, i16* %arrayidx174, align 2
  %115 = load i16, i16* %cost3, align 2
  %arrayidx175 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 3
  store i16 %115, i16* %arrayidx175, align 2
  %116 = load i16, i16* %cost4, align 2
  %arrayidx176 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 4
  store i16 %116, i16* %arrayidx176, align 2
  %117 = load i16, i16* %cost5, align 2
  %arrayidx177 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 5
  store i16 %117, i16* %arrayidx177, align 2
  br label %if.end203

if.else178:                                       ; preds = %for.end125
  %118 = load i32, i32* %gs, align 4
  store i32 %118, i32* %i, align 4
  br label %for.cond179

for.cond179:                                      ; preds = %for.inc200, %if.else178
  %119 = load i32, i32* %i, align 4
  %120 = load i32, i32* %ge, align 4
  %cmp180 = icmp sle i32 %119, %120
  br i1 %cmp180, label %for.body182, label %for.end202

for.body182:                                      ; preds = %for.cond179
  %121 = load i16*, i16** @szptr, align 4
  %122 = load i32, i32* %i, align 4
  %arrayidx184 = getelementptr inbounds i16, i16* %121, i32 %122
  %123 = load i16, i16* %arrayidx184, align 2
  store i16 %123, i16* %icv183, align 2
  store i32 0, i32* %t, align 4
  br label %for.cond185

for.cond185:                                      ; preds = %for.inc197, %for.body182
  %124 = load i32, i32* %t, align 4
  %125 = load i32, i32* %nGroups, align 4
  %cmp186 = icmp slt i32 %124, %125
  br i1 %cmp186, label %for.body188, label %for.end199

for.body188:                                      ; preds = %for.cond185
  %126 = load i32, i32* %t, align 4
  %arrayidx189 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %126
  %127 = load i16, i16* %icv183, align 2
  %idxprom190 = zext i16 %127 to i32
  %arrayidx191 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx189, i32 0, i32 %idxprom190
  %128 = load i8, i8* %arrayidx191, align 1
  %conv192 = zext i8 %128 to i32
  %129 = load i32, i32* %t, align 4
  %arrayidx193 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 %129
  %130 = load i16, i16* %arrayidx193, align 2
  %conv194 = zext i16 %130 to i32
  %add195 = add nsw i32 %conv194, %conv192
  %conv196 = trunc i32 %add195 to i16
  store i16 %conv196, i16* %arrayidx193, align 2
  br label %for.inc197

for.inc197:                                       ; preds = %for.body188
  %131 = load i32, i32* %t, align 4
  %inc198 = add nsw i32 %131, 1
  store i32 %inc198, i32* %t, align 4
  br label %for.cond185

for.end199:                                       ; preds = %for.cond185
  br label %for.inc200

for.inc200:                                       ; preds = %for.end199
  %132 = load i32, i32* %i, align 4
  %inc201 = add nsw i32 %132, 1
  store i32 %inc201, i32* %i, align 4
  br label %for.cond179

for.end202:                                       ; preds = %for.cond179
  br label %if.end203

if.end203:                                        ; preds = %for.end202, %for.end171
  store i32 999999999, i32* %bc, align 4
  store i32 -1, i32* %bt, align 4
  store i32 0, i32* %t, align 4
  br label %for.cond204

for.cond204:                                      ; preds = %for.inc216, %if.end203
  %133 = load i32, i32* %t, align 4
  %134 = load i32, i32* %nGroups, align 4
  %cmp205 = icmp slt i32 %133, %134
  br i1 %cmp205, label %for.body207, label %for.end218

for.body207:                                      ; preds = %for.cond204
  %135 = load i32, i32* %t, align 4
  %arrayidx208 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 %135
  %136 = load i16, i16* %arrayidx208, align 2
  %conv209 = zext i16 %136 to i32
  %137 = load i32, i32* %bc, align 4
  %cmp210 = icmp slt i32 %conv209, %137
  br i1 %cmp210, label %if.then212, label %if.end215

if.then212:                                       ; preds = %for.body207
  %138 = load i32, i32* %t, align 4
  %arrayidx213 = getelementptr inbounds [6 x i16], [6 x i16]* %cost, i32 0, i32 %138
  %139 = load i16, i16* %arrayidx213, align 2
  %conv214 = zext i16 %139 to i32
  store i32 %conv214, i32* %bc, align 4
  %140 = load i32, i32* %t, align 4
  store i32 %140, i32* %bt, align 4
  br label %if.end215

if.end215:                                        ; preds = %if.then212, %for.body207
  br label %for.inc216

for.inc216:                                       ; preds = %if.end215
  %141 = load i32, i32* %t, align 4
  %inc217 = add nsw i32 %141, 1
  store i32 %inc217, i32* %t, align 4
  br label %for.cond204

for.end218:                                       ; preds = %for.cond204
  %142 = load i32, i32* %bc, align 4
  %143 = load i32, i32* %totc, align 4
  %add219 = add nsw i32 %143, %142
  store i32 %add219, i32* %totc, align 4
  %144 = load i32, i32* %bt, align 4
  %arrayidx220 = getelementptr inbounds [6 x i32], [6 x i32]* %fave, i32 0, i32 %144
  %145 = load i32, i32* %arrayidx220, align 4
  %inc221 = add nsw i32 %145, 1
  store i32 %inc221, i32* %arrayidx220, align 4
  %146 = load i32, i32* %bt, align 4
  %conv222 = trunc i32 %146 to i8
  %147 = load i32, i32* %nSelectors, align 4
  %arrayidx223 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selector, i32 0, i32 %147
  store i8 %conv222, i8* %arrayidx223, align 1
  %148 = load i32, i32* %nSelectors, align 4
  %inc224 = add nsw i32 %148, 1
  store i32 %inc224, i32* %nSelectors, align 4
  %149 = load i32, i32* %gs, align 4
  store i32 %149, i32* %i, align 4
  br label %for.cond225

for.cond225:                                      ; preds = %for.inc234, %for.end218
  %150 = load i32, i32* %i, align 4
  %151 = load i32, i32* %ge, align 4
  %cmp226 = icmp sle i32 %150, %151
  br i1 %cmp226, label %for.body228, label %for.end236

for.body228:                                      ; preds = %for.cond225
  %152 = load i32, i32* %bt, align 4
  %arrayidx229 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @rfreq, i32 0, i32 %152
  %153 = load i16*, i16** @szptr, align 4
  %154 = load i32, i32* %i, align 4
  %arrayidx230 = getelementptr inbounds i16, i16* %153, i32 %154
  %155 = load i16, i16* %arrayidx230, align 2
  %idxprom231 = zext i16 %155 to i32
  %arrayidx232 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx229, i32 0, i32 %idxprom231
  %156 = load i32, i32* %arrayidx232, align 4
  %inc233 = add nsw i32 %156, 1
  store i32 %inc233, i32* %arrayidx232, align 4
  br label %for.inc234

for.inc234:                                       ; preds = %for.body228
  %157 = load i32, i32* %i, align 4
  %inc235 = add nsw i32 %157, 1
  store i32 %inc235, i32* %i, align 4
  br label %for.cond225

for.end236:                                       ; preds = %for.cond225
  %158 = load i32, i32* %ge, align 4
  %add237 = add nsw i32 %158, 1
  store i32 %add237, i32* %gs, align 4
  br label %while.body106

while.end238:                                     ; preds = %if.then109
  %159 = load i32, i32* @verbosity, align 4
  %cmp239 = icmp sge i32 %159, 3
  br i1 %cmp239, label %if.then241, label %if.end261

if.then241:                                       ; preds = %while.end238
  %160 = load i32, i32* %totc, align 4
  %div242 = sdiv i32 %160, 8
  %161 = load i32, i32* %iter, align 4
  %add243 = add nsw i32 %161, 1
  %call244 = call %struct._iobuf* @__iob_func()
  %arrayidx245 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call244, i32 2
  %call246 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx245, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @"??_C@_0CJ@LBIBLMKO@?5?5?5?5?5?5pass?5?$CFd?3?5size?5is?5?$CFd?0?5grp?5u@", i32 0, i32 0), i32 %add243, i32 %div242)
  store i32 0, i32* %t, align 4
  br label %for.cond247

for.cond247:                                      ; preds = %for.inc255, %if.then241
  %162 = load i32, i32* %t, align 4
  %163 = load i32, i32* %nGroups, align 4
  %cmp248 = icmp slt i32 %162, %163
  br i1 %cmp248, label %for.body250, label %for.end257

for.body250:                                      ; preds = %for.cond247
  %164 = load i32, i32* %t, align 4
  %arrayidx251 = getelementptr inbounds [6 x i32], [6 x i32]* %fave, i32 0, i32 %164
  %165 = load i32, i32* %arrayidx251, align 4
  %call252 = call %struct._iobuf* @__iob_func()
  %arrayidx253 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call252, i32 2
  %call254 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx253, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03JDANDILB@?$CFd?5?$AA@", i32 0, i32 0), i32 %165)
  br label %for.inc255

for.inc255:                                       ; preds = %for.body250
  %166 = load i32, i32* %t, align 4
  %inc256 = add nsw i32 %166, 1
  store i32 %inc256, i32* %t, align 4
  br label %for.cond247

for.end257:                                       ; preds = %for.cond247
  %call258 = call %struct._iobuf* @__iob_func()
  %arrayidx259 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call258, i32 2
  %call260 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx259, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %if.end261

if.end261:                                        ; preds = %for.end257, %while.end238
  store i32 0, i32* %t, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc270, %if.end261
  %167 = load i32, i32* %t, align 4
  %168 = load i32, i32* %nGroups, align 4
  %cmp263 = icmp slt i32 %167, %168
  br i1 %cmp263, label %for.body265, label %for.end272

for.body265:                                      ; preds = %for.cond262
  %169 = load i32, i32* %alphaSize, align 4
  %170 = load i32, i32* %t, align 4
  %arrayidx266 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @rfreq, i32 0, i32 %170
  %arrayidx267 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx266, i32 0, i32 0
  %171 = load i32, i32* %t, align 4
  %arrayidx268 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %171
  %arrayidx269 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx268, i32 0, i32 0
  call void @hbMakeCodeLengths(i8* %arrayidx269, i32* %arrayidx267, i32 %169, i32 20)
  br label %for.inc270

for.inc270:                                       ; preds = %for.body265
  %172 = load i32, i32* %t, align 4
  %inc271 = add nsw i32 %172, 1
  store i32 %inc271, i32* %t, align 4
  br label %for.cond262

for.end272:                                       ; preds = %for.cond262
  br label %for.inc273

for.inc273:                                       ; preds = %for.end272
  %173 = load i32, i32* %iter, align 4
  %inc274 = add nsw i32 %173, 1
  store i32 %inc274, i32* %iter, align 4
  br label %for.cond77

for.end275:                                       ; preds = %for.cond77
  %174 = load i32, i32* %nGroups, align 4
  %cmp276 = icmp slt i32 %174, 8
  br i1 %cmp276, label %if.end279, label %if.then278

if.then278:                                       ; preds = %for.end275
  call void @panic(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"??_C@_0BB@KHBPGPHB@sendMTFValues?$CI1?$CJ?$AA@", i32 0, i32 0))
  br label %if.end279

if.end279:                                        ; preds = %if.then278, %for.end275
  %175 = load i32, i32* %nSelectors, align 4
  %cmp280 = icmp slt i32 %175, 32768
  br i1 %cmp280, label %land.lhs.true282, label %if.then285

land.lhs.true282:                                 ; preds = %if.end279
  %176 = load i32, i32* %nSelectors, align 4
  %cmp283 = icmp sle i32 %176, 18002
  br i1 %cmp283, label %if.end286, label %if.then285

if.then285:                                       ; preds = %land.lhs.true282, %if.end279
  call void @panic(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"??_C@_0BB@KFFJNBCI@sendMTFValues?$CI2?$CJ?$AA@", i32 0, i32 0))
  br label %if.end286

if.end286:                                        ; preds = %if.then285, %land.lhs.true282
  store i32 0, i32* %i, align 4
  br label %for.cond287

for.cond287:                                      ; preds = %for.inc293, %if.end286
  %177 = load i32, i32* %i, align 4
  %178 = load i32, i32* %nGroups, align 4
  %cmp288 = icmp slt i32 %177, %178
  br i1 %cmp288, label %for.body290, label %for.end295

for.body290:                                      ; preds = %for.cond287
  %179 = load i32, i32* %i, align 4
  %conv291 = trunc i32 %179 to i8
  %180 = load i32, i32* %i, align 4
  %arrayidx292 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 %180
  store i8 %conv291, i8* %arrayidx292, align 1
  br label %for.inc293

for.inc293:                                       ; preds = %for.body290
  %181 = load i32, i32* %i, align 4
  %inc294 = add nsw i32 %181, 1
  store i32 %inc294, i32* %i, align 4
  br label %for.cond287

for.end295:                                       ; preds = %for.cond287
  store i32 0, i32* %i, align 4
  br label %for.cond296

for.cond296:                                      ; preds = %for.inc315, %for.end295
  %182 = load i32, i32* %i, align 4
  %183 = load i32, i32* %nSelectors, align 4
  %cmp297 = icmp slt i32 %182, %183
  br i1 %cmp297, label %for.body299, label %for.end317

for.body299:                                      ; preds = %for.cond296
  %184 = load i32, i32* %i, align 4
  %arrayidx300 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selector, i32 0, i32 %184
  %185 = load i8, i8* %arrayidx300, align 1
  store i8 %185, i8* %ll_i, align 1
  store i32 0, i32* %j, align 4
  %186 = load i32, i32* %j, align 4
  %arrayidx301 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 %186
  %187 = load i8, i8* %arrayidx301, align 1
  store i8 %187, i8* %tmp, align 1
  br label %while.cond302

while.cond302:                                    ; preds = %while.body307, %for.body299
  %188 = load i8, i8* %ll_i, align 1
  %conv303 = zext i8 %188 to i32
  %189 = load i8, i8* %tmp, align 1
  %conv304 = zext i8 %189 to i32
  %cmp305 = icmp ne i32 %conv303, %conv304
  br i1 %cmp305, label %while.body307, label %while.end311

while.body307:                                    ; preds = %while.cond302
  %190 = load i32, i32* %j, align 4
  %inc308 = add nsw i32 %190, 1
  store i32 %inc308, i32* %j, align 4
  %191 = load i8, i8* %tmp, align 1
  store i8 %191, i8* %tmp2, align 1
  %192 = load i32, i32* %j, align 4
  %arrayidx309 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 %192
  %193 = load i8, i8* %arrayidx309, align 1
  store i8 %193, i8* %tmp, align 1
  %194 = load i8, i8* %tmp2, align 1
  %195 = load i32, i32* %j, align 4
  %arrayidx310 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 %195
  store i8 %194, i8* %arrayidx310, align 1
  br label %while.cond302

while.end311:                                     ; preds = %while.cond302
  %196 = load i8, i8* %tmp, align 1
  %arrayidx312 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 0
  store i8 %196, i8* %arrayidx312, align 1
  %197 = load i32, i32* %j, align 4
  %conv313 = trunc i32 %197 to i8
  %198 = load i32, i32* %i, align 4
  %arrayidx314 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selectorMtf, i32 0, i32 %198
  store i8 %conv313, i8* %arrayidx314, align 1
  br label %for.inc315

for.inc315:                                       ; preds = %while.end311
  %199 = load i32, i32* %i, align 4
  %inc316 = add nsw i32 %199, 1
  store i32 %inc316, i32* %i, align 4
  br label %for.cond296

for.end317:                                       ; preds = %for.cond296
  store i32 0, i32* %t, align 4
  br label %for.cond318

for.cond318:                                      ; preds = %for.inc361, %for.end317
  %200 = load i32, i32* %t, align 4
  %201 = load i32, i32* %nGroups, align 4
  %cmp319 = icmp slt i32 %200, %201
  br i1 %cmp319, label %for.body321, label %for.end363

for.body321:                                      ; preds = %for.cond318
  store i32 32, i32* %minLen, align 4
  store i32 0, i32* %maxLen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond322

for.cond322:                                      ; preds = %for.inc346, %for.body321
  %202 = load i32, i32* %i, align 4
  %203 = load i32, i32* %alphaSize, align 4
  %cmp323 = icmp slt i32 %202, %203
  br i1 %cmp323, label %for.body325, label %for.end348

for.body325:                                      ; preds = %for.cond322
  %204 = load i32, i32* %t, align 4
  %arrayidx326 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %204
  %205 = load i32, i32* %i, align 4
  %arrayidx327 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx326, i32 0, i32 %205
  %206 = load i8, i8* %arrayidx327, align 1
  %conv328 = zext i8 %206 to i32
  %207 = load i32, i32* %maxLen, align 4
  %cmp329 = icmp sgt i32 %conv328, %207
  br i1 %cmp329, label %if.then331, label %if.end335

if.then331:                                       ; preds = %for.body325
  %208 = load i32, i32* %t, align 4
  %arrayidx332 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %208
  %209 = load i32, i32* %i, align 4
  %arrayidx333 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx332, i32 0, i32 %209
  %210 = load i8, i8* %arrayidx333, align 1
  %conv334 = zext i8 %210 to i32
  store i32 %conv334, i32* %maxLen, align 4
  br label %if.end335

if.end335:                                        ; preds = %if.then331, %for.body325
  %211 = load i32, i32* %t, align 4
  %arrayidx336 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %211
  %212 = load i32, i32* %i, align 4
  %arrayidx337 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx336, i32 0, i32 %212
  %213 = load i8, i8* %arrayidx337, align 1
  %conv338 = zext i8 %213 to i32
  %214 = load i32, i32* %minLen, align 4
  %cmp339 = icmp slt i32 %conv338, %214
  br i1 %cmp339, label %if.then341, label %if.end345

if.then341:                                       ; preds = %if.end335
  %215 = load i32, i32* %t, align 4
  %arrayidx342 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %215
  %216 = load i32, i32* %i, align 4
  %arrayidx343 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx342, i32 0, i32 %216
  %217 = load i8, i8* %arrayidx343, align 1
  %conv344 = zext i8 %217 to i32
  store i32 %conv344, i32* %minLen, align 4
  br label %if.end345

if.end345:                                        ; preds = %if.then341, %if.end335
  br label %for.inc346

for.inc346:                                       ; preds = %if.end345
  %218 = load i32, i32* %i, align 4
  %inc347 = add nsw i32 %218, 1
  store i32 %inc347, i32* %i, align 4
  br label %for.cond322

for.end348:                                       ; preds = %for.cond322
  %219 = load i32, i32* %maxLen, align 4
  %cmp349 = icmp sgt i32 %219, 20
  br i1 %cmp349, label %if.then351, label %if.end352

if.then351:                                       ; preds = %for.end348
  call void @panic(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"??_C@_0BB@KEJLLLBP@sendMTFValues?$CI3?$CJ?$AA@", i32 0, i32 0))
  br label %if.end352

if.end352:                                        ; preds = %if.then351, %for.end348
  %220 = load i32, i32* %minLen, align 4
  %cmp353 = icmp slt i32 %220, 1
  br i1 %cmp353, label %if.then355, label %if.end356

if.then355:                                       ; preds = %if.end352
  call void @panic(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"??_C@_0BB@KBNEKNJK@sendMTFValues?$CI4?$CJ?$AA@", i32 0, i32 0))
  br label %if.end356

if.end356:                                        ; preds = %if.then355, %if.end352
  %221 = load i32, i32* %alphaSize, align 4
  %222 = load i32, i32* %maxLen, align 4
  %223 = load i32, i32* %minLen, align 4
  %224 = load i32, i32* %t, align 4
  %arrayidx357 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %224
  %arrayidx358 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx357, i32 0, i32 0
  %225 = load i32, i32* %t, align 4
  %arrayidx359 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @code, i32 0, i32 %225
  %arrayidx360 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx359, i32 0, i32 0
  call void @hbAssignCodes(i32* %arrayidx360, i8* %arrayidx358, i32 %223, i32 %222, i32 %221)
  br label %for.inc361

for.inc361:                                       ; preds = %if.end356
  %226 = load i32, i32* %t, align 4
  %inc362 = add nsw i32 %226, 1
  store i32 %inc362, i32* %t, align 4
  br label %for.cond318

for.end363:                                       ; preds = %for.cond318
  store i32 0, i32* %i, align 4
  br label %for.cond364

for.cond364:                                      ; preds = %for.inc382, %for.end363
  %227 = load i32, i32* %i, align 4
  %cmp365 = icmp slt i32 %227, 16
  br i1 %cmp365, label %for.body367, label %for.end384

for.body367:                                      ; preds = %for.cond364
  %228 = load i32, i32* %i, align 4
  %arrayidx368 = getelementptr inbounds [16 x i8], [16 x i8]* %inUse16, i32 0, i32 %228
  store i8 0, i8* %arrayidx368, align 1
  store i32 0, i32* %j, align 4
  br label %for.cond369

for.cond369:                                      ; preds = %for.inc379, %for.body367
  %229 = load i32, i32* %j, align 4
  %cmp370 = icmp slt i32 %229, 16
  br i1 %cmp370, label %for.body372, label %for.end381

for.body372:                                      ; preds = %for.cond369
  %230 = load i32, i32* %i, align 4
  %mul373 = mul nsw i32 %230, 16
  %231 = load i32, i32* %j, align 4
  %add374 = add nsw i32 %mul373, %231
  %arrayidx375 = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %add374
  %232 = load i8, i8* %arrayidx375, align 1
  %tobool = icmp ne i8 %232, 0
  br i1 %tobool, label %if.then376, label %if.end378

if.then376:                                       ; preds = %for.body372
  %233 = load i32, i32* %i, align 4
  %arrayidx377 = getelementptr inbounds [16 x i8], [16 x i8]* %inUse16, i32 0, i32 %233
  store i8 1, i8* %arrayidx377, align 1
  br label %if.end378

if.end378:                                        ; preds = %if.then376, %for.body372
  br label %for.inc379

for.inc379:                                       ; preds = %if.end378
  %234 = load i32, i32* %j, align 4
  %inc380 = add nsw i32 %234, 1
  store i32 %inc380, i32* %j, align 4
  br label %for.cond369

for.end381:                                       ; preds = %for.cond369
  br label %for.inc382

for.inc382:                                       ; preds = %for.end381
  %235 = load i32, i32* %i, align 4
  %inc383 = add nsw i32 %235, 1
  store i32 %inc383, i32* %i, align 4
  br label %for.cond364

for.end384:                                       ; preds = %for.cond364
  %236 = load i32, i32* @bytesOut, align 4
  store i32 %236, i32* %nBytes, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond385

for.cond385:                                      ; preds = %for.inc394, %for.end384
  %237 = load i32, i32* %i, align 4
  %cmp386 = icmp slt i32 %237, 16
  br i1 %cmp386, label %for.body388, label %for.end396

for.body388:                                      ; preds = %for.cond385
  %238 = load i32, i32* %i, align 4
  %arrayidx389 = getelementptr inbounds [16 x i8], [16 x i8]* %inUse16, i32 0, i32 %238
  %239 = load i8, i8* %arrayidx389, align 1
  %tobool390 = icmp ne i8 %239, 0
  br i1 %tobool390, label %if.then391, label %if.else392

if.then391:                                       ; preds = %for.body388
  call void @bsW(i32 1, i32 1)
  br label %if.end393

if.else392:                                       ; preds = %for.body388
  call void @bsW(i32 1, i32 0)
  br label %if.end393

if.end393:                                        ; preds = %if.else392, %if.then391
  br label %for.inc394

for.inc394:                                       ; preds = %if.end393
  %240 = load i32, i32* %i, align 4
  %inc395 = add nsw i32 %240, 1
  store i32 %inc395, i32* %i, align 4
  br label %for.cond385

for.end396:                                       ; preds = %for.cond385
  store i32 0, i32* %i, align 4
  br label %for.cond397

for.cond397:                                      ; preds = %for.inc419, %for.end396
  %241 = load i32, i32* %i, align 4
  %cmp398 = icmp slt i32 %241, 16
  br i1 %cmp398, label %for.body400, label %for.end421

for.body400:                                      ; preds = %for.cond397
  %242 = load i32, i32* %i, align 4
  %arrayidx401 = getelementptr inbounds [16 x i8], [16 x i8]* %inUse16, i32 0, i32 %242
  %243 = load i8, i8* %arrayidx401, align 1
  %tobool402 = icmp ne i8 %243, 0
  br i1 %tobool402, label %if.then403, label %if.end418

if.then403:                                       ; preds = %for.body400
  store i32 0, i32* %j, align 4
  br label %for.cond404

for.cond404:                                      ; preds = %for.inc415, %if.then403
  %244 = load i32, i32* %j, align 4
  %cmp405 = icmp slt i32 %244, 16
  br i1 %cmp405, label %for.body407, label %for.end417

for.body407:                                      ; preds = %for.cond404
  %245 = load i32, i32* %i, align 4
  %mul408 = mul nsw i32 %245, 16
  %246 = load i32, i32* %j, align 4
  %add409 = add nsw i32 %mul408, %246
  %arrayidx410 = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %add409
  %247 = load i8, i8* %arrayidx410, align 1
  %tobool411 = icmp ne i8 %247, 0
  br i1 %tobool411, label %if.then412, label %if.else413

if.then412:                                       ; preds = %for.body407
  call void @bsW(i32 1, i32 1)
  br label %if.end414

if.else413:                                       ; preds = %for.body407
  call void @bsW(i32 1, i32 0)
  br label %if.end414

if.end414:                                        ; preds = %if.else413, %if.then412
  br label %for.inc415

for.inc415:                                       ; preds = %if.end414
  %248 = load i32, i32* %j, align 4
  %inc416 = add nsw i32 %248, 1
  store i32 %inc416, i32* %j, align 4
  br label %for.cond404

for.end417:                                       ; preds = %for.cond404
  br label %if.end418

if.end418:                                        ; preds = %for.end417, %for.body400
  br label %for.inc419

for.inc419:                                       ; preds = %if.end418
  %249 = load i32, i32* %i, align 4
  %inc420 = add nsw i32 %249, 1
  store i32 %inc420, i32* %i, align 4
  br label %for.cond397

for.end421:                                       ; preds = %for.cond397
  %250 = load i32, i32* @verbosity, align 4
  %cmp422 = icmp sge i32 %250, 3
  br i1 %cmp422, label %if.then424, label %if.end429

if.then424:                                       ; preds = %for.end421
  %251 = load i32, i32* @bytesOut, align 4
  %252 = load i32, i32* %nBytes, align 4
  %sub425 = sub i32 %251, %252
  %call426 = call %struct._iobuf* @__iob_func()
  %arrayidx427 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call426, i32 2
  %call428 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx427, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"??_C@_0BK@INMLPPBK@?5?5?5?5?5?5bytes?3?5mapping?5?$CFd?0?5?$AA@", i32 0, i32 0), i32 %sub425)
  br label %if.end429

if.end429:                                        ; preds = %if.then424, %for.end421
  %253 = load i32, i32* @bytesOut, align 4
  store i32 %253, i32* %nBytes, align 4
  %254 = load i32, i32* %nGroups, align 4
  call void @bsW(i32 3, i32 %254)
  %255 = load i32, i32* %nSelectors, align 4
  call void @bsW(i32 15, i32 %255)
  store i32 0, i32* %i, align 4
  br label %for.cond430

for.cond430:                                      ; preds = %for.inc443, %if.end429
  %256 = load i32, i32* %i, align 4
  %257 = load i32, i32* %nSelectors, align 4
  %cmp431 = icmp slt i32 %256, %257
  br i1 %cmp431, label %for.body433, label %for.end445

for.body433:                                      ; preds = %for.cond430
  store i32 0, i32* %j, align 4
  br label %for.cond434

for.cond434:                                      ; preds = %for.inc440, %for.body433
  %258 = load i32, i32* %j, align 4
  %259 = load i32, i32* %i, align 4
  %arrayidx435 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selectorMtf, i32 0, i32 %259
  %260 = load i8, i8* %arrayidx435, align 1
  %conv436 = zext i8 %260 to i32
  %cmp437 = icmp slt i32 %258, %conv436
  br i1 %cmp437, label %for.body439, label %for.end442

for.body439:                                      ; preds = %for.cond434
  call void @bsW(i32 1, i32 1)
  br label %for.inc440

for.inc440:                                       ; preds = %for.body439
  %261 = load i32, i32* %j, align 4
  %inc441 = add nsw i32 %261, 1
  store i32 %inc441, i32* %j, align 4
  br label %for.cond434

for.end442:                                       ; preds = %for.cond434
  call void @bsW(i32 1, i32 0)
  br label %for.inc443

for.inc443:                                       ; preds = %for.end442
  %262 = load i32, i32* %i, align 4
  %inc444 = add nsw i32 %262, 1
  store i32 %inc444, i32* %i, align 4
  br label %for.cond430

for.end445:                                       ; preds = %for.cond430
  %263 = load i32, i32* @verbosity, align 4
  %cmp446 = icmp sge i32 %263, 3
  br i1 %cmp446, label %if.then448, label %if.end453

if.then448:                                       ; preds = %for.end445
  %264 = load i32, i32* @bytesOut, align 4
  %265 = load i32, i32* %nBytes, align 4
  %sub449 = sub i32 %264, %265
  %call450 = call %struct._iobuf* @__iob_func()
  %arrayidx451 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call450, i32 2
  %call452 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx451, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"??_C@_0P@ILGKEMPB@selectors?5?$CFd?0?5?$AA@", i32 0, i32 0), i32 %sub449)
  br label %if.end453

if.end453:                                        ; preds = %if.then448, %for.end445
  %266 = load i32, i32* @bytesOut, align 4
  store i32 %266, i32* %nBytes, align 4
  store i32 0, i32* %t, align 4
  br label %for.cond454

for.cond454:                                      ; preds = %for.inc486, %if.end453
  %267 = load i32, i32* %t, align 4
  %268 = load i32, i32* %nGroups, align 4
  %cmp455 = icmp slt i32 %267, %268
  br i1 %cmp455, label %for.body457, label %for.end488

for.body457:                                      ; preds = %for.cond454
  %269 = load i32, i32* %t, align 4
  %arrayidx458 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %269
  %arrayidx459 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx458, i32 0, i32 0
  %270 = load i8, i8* %arrayidx459, align 1
  %conv460 = zext i8 %270 to i32
  store i32 %conv460, i32* %curr, align 4
  %271 = load i32, i32* %curr, align 4
  call void @bsW(i32 5, i32 %271)
  store i32 0, i32* %i, align 4
  br label %for.cond461

for.cond461:                                      ; preds = %for.inc483, %for.body457
  %272 = load i32, i32* %i, align 4
  %273 = load i32, i32* %alphaSize, align 4
  %cmp462 = icmp slt i32 %272, %273
  br i1 %cmp462, label %for.body464, label %for.end485

for.body464:                                      ; preds = %for.cond461
  br label %while.cond465

while.cond465:                                    ; preds = %while.body471, %for.body464
  %274 = load i32, i32* %curr, align 4
  %275 = load i32, i32* %t, align 4
  %arrayidx466 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %275
  %276 = load i32, i32* %i, align 4
  %arrayidx467 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx466, i32 0, i32 %276
  %277 = load i8, i8* %arrayidx467, align 1
  %conv468 = zext i8 %277 to i32
  %cmp469 = icmp slt i32 %274, %conv468
  br i1 %cmp469, label %while.body471, label %while.end473

while.body471:                                    ; preds = %while.cond465
  call void @bsW(i32 2, i32 2)
  %278 = load i32, i32* %curr, align 4
  %inc472 = add nsw i32 %278, 1
  store i32 %inc472, i32* %curr, align 4
  br label %while.cond465

while.end473:                                     ; preds = %while.cond465
  br label %while.cond474

while.cond474:                                    ; preds = %while.body480, %while.end473
  %279 = load i32, i32* %curr, align 4
  %280 = load i32, i32* %t, align 4
  %arrayidx475 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %280
  %281 = load i32, i32* %i, align 4
  %arrayidx476 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx475, i32 0, i32 %281
  %282 = load i8, i8* %arrayidx476, align 1
  %conv477 = zext i8 %282 to i32
  %cmp478 = icmp sgt i32 %279, %conv477
  br i1 %cmp478, label %while.body480, label %while.end482

while.body480:                                    ; preds = %while.cond474
  call void @bsW(i32 2, i32 3)
  %283 = load i32, i32* %curr, align 4
  %dec481 = add nsw i32 %283, -1
  store i32 %dec481, i32* %curr, align 4
  br label %while.cond474

while.end482:                                     ; preds = %while.cond474
  call void @bsW(i32 1, i32 0)
  br label %for.inc483

for.inc483:                                       ; preds = %while.end482
  %284 = load i32, i32* %i, align 4
  %inc484 = add nsw i32 %284, 1
  store i32 %inc484, i32* %i, align 4
  br label %for.cond461

for.end485:                                       ; preds = %for.cond461
  br label %for.inc486

for.inc486:                                       ; preds = %for.end485
  %285 = load i32, i32* %t, align 4
  %inc487 = add nsw i32 %285, 1
  store i32 %inc487, i32* %t, align 4
  br label %for.cond454

for.end488:                                       ; preds = %for.cond454
  %286 = load i32, i32* @verbosity, align 4
  %cmp489 = icmp sge i32 %286, 3
  br i1 %cmp489, label %if.then491, label %if.end496

if.then491:                                       ; preds = %for.end488
  %287 = load i32, i32* @bytesOut, align 4
  %288 = load i32, i32* %nBytes, align 4
  %sub492 = sub i32 %287, %288
  %call493 = call %struct._iobuf* @__iob_func()
  %arrayidx494 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call493, i32 2
  %call495 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx494, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"??_C@_0BC@JJJGEDA@code?5lengths?5?$CFd?0?5?$AA@", i32 0, i32 0), i32 %sub492)
  br label %if.end496

if.end496:                                        ; preds = %if.then491, %for.end488
  %289 = load i32, i32* @bytesOut, align 4
  store i32 %289, i32* %nBytes, align 4
  store i32 0, i32* %selCtr, align 4
  store i32 0, i32* %gs, align 4
  br label %while.body498

while.body498:                                    ; preds = %for.end529, %if.end496
  %290 = load i32, i32* %gs, align 4
  %291 = load i32, i32* @nMTF, align 4
  %cmp499 = icmp sge i32 %290, %291
  br i1 %cmp499, label %if.then501, label %if.end502

if.then501:                                       ; preds = %while.body498
  br label %while.end532

if.end502:                                        ; preds = %while.body498
  %292 = load i32, i32* %gs, align 4
  %add503 = add nsw i32 %292, 50
  %sub504 = sub nsw i32 %add503, 1
  store i32 %sub504, i32* %ge, align 4
  %293 = load i32, i32* %ge, align 4
  %294 = load i32, i32* @nMTF, align 4
  %cmp505 = icmp sge i32 %293, %294
  br i1 %cmp505, label %if.then507, label %if.end509

if.then507:                                       ; preds = %if.end502
  %295 = load i32, i32* @nMTF, align 4
  %sub508 = sub nsw i32 %295, 1
  store i32 %sub508, i32* %ge, align 4
  br label %if.end509

if.end509:                                        ; preds = %if.then507, %if.end502
  %296 = load i32, i32* %gs, align 4
  store i32 %296, i32* %i, align 4
  br label %for.cond510

for.cond510:                                      ; preds = %for.inc527, %if.end509
  %297 = load i32, i32* %i, align 4
  %298 = load i32, i32* %ge, align 4
  %cmp511 = icmp sle i32 %297, %298
  br i1 %cmp511, label %for.body513, label %for.end529

for.body513:                                      ; preds = %for.cond510
  %299 = load i32, i32* %selCtr, align 4
  %arrayidx514 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selector, i32 0, i32 %299
  %300 = load i8, i8* %arrayidx514, align 1
  %idxprom515 = zext i8 %300 to i32
  %arrayidx516 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @code, i32 0, i32 %idxprom515
  %301 = load i16*, i16** @szptr, align 4
  %302 = load i32, i32* %i, align 4
  %arrayidx517 = getelementptr inbounds i16, i16* %301, i32 %302
  %303 = load i16, i16* %arrayidx517, align 2
  %idxprom518 = zext i16 %303 to i32
  %arrayidx519 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx516, i32 0, i32 %idxprom518
  %304 = load i32, i32* %arrayidx519, align 4
  %305 = load i32, i32* %selCtr, align 4
  %arrayidx520 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selector, i32 0, i32 %305
  %306 = load i8, i8* %arrayidx520, align 1
  %idxprom521 = zext i8 %306 to i32
  %arrayidx522 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %idxprom521
  %307 = load i16*, i16** @szptr, align 4
  %308 = load i32, i32* %i, align 4
  %arrayidx523 = getelementptr inbounds i16, i16* %307, i32 %308
  %309 = load i16, i16* %arrayidx523, align 2
  %idxprom524 = zext i16 %309 to i32
  %arrayidx525 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx522, i32 0, i32 %idxprom524
  %310 = load i8, i8* %arrayidx525, align 1
  %conv526 = zext i8 %310 to i32
  call void @bsW(i32 %conv526, i32 %304)
  br label %for.inc527

for.inc527:                                       ; preds = %for.body513
  %311 = load i32, i32* %i, align 4
  %inc528 = add nsw i32 %311, 1
  store i32 %inc528, i32* %i, align 4
  br label %for.cond510

for.end529:                                       ; preds = %for.cond510
  %312 = load i32, i32* %ge, align 4
  %add530 = add nsw i32 %312, 1
  store i32 %add530, i32* %gs, align 4
  %313 = load i32, i32* %selCtr, align 4
  %inc531 = add nsw i32 %313, 1
  store i32 %inc531, i32* %selCtr, align 4
  br label %while.body498

while.end532:                                     ; preds = %if.then501
  %314 = load i32, i32* %selCtr, align 4
  %315 = load i32, i32* %nSelectors, align 4
  %cmp533 = icmp eq i32 %314, %315
  br i1 %cmp533, label %if.end536, label %if.then535

if.then535:                                       ; preds = %while.end532
  call void @panic(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"??_C@_0BB@KABGMHKN@sendMTFValues?$CI5?$CJ?$AA@", i32 0, i32 0))
  br label %if.end536

if.end536:                                        ; preds = %if.then535, %while.end532
  %316 = load i32, i32* @verbosity, align 4
  %cmp537 = icmp sge i32 %316, 3
  br i1 %cmp537, label %if.then539, label %if.end544

if.then539:                                       ; preds = %if.end536
  %317 = load i32, i32* @bytesOut, align 4
  %318 = load i32, i32* %nBytes, align 4
  %sub540 = sub i32 %317, %318
  %call541 = call %struct._iobuf* @__iob_func()
  %arrayidx542 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call541, i32 2
  %call543 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx542, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"??_C@_09EGPKCPJN@codes?5?$CFd?6?$AA@", i32 0, i32 0), i32 %sub540)
  br label %if.end544

if.end544:                                        ; preds = %if.then539, %if.end536
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @moveToFrontCodeAndSend() #1 {
entry:
  %0 = load i32, i32* @origPtr, align 4
  call void @bsPutIntVS(i32 24, i32 %0)
  call void @generateMTFValues()
  call void @sendMTFValues()
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @recvDecodingTables() #1 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %t = alloca i32, align 4
  %nGroups = alloca i32, align 4
  %nSelectors = alloca i32, align 4
  %alphaSize = alloca i32, align 4
  %minLen = alloca i32, align 4
  %maxLen = alloca i32, align 4
  %inUse16 = alloca [16 x i8], align 1
  %pos = alloca [6 x i8], align 1
  %tmp = alloca i8, align 1
  %v = alloca i8, align 1
  %curr = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @bsR(i32 1)
  %cmp1 = icmp eq i32 %call, 1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [16 x i8], [16 x i8]* %inUse16, i32 0, i32 %1
  store i8 1, i8* %arrayidx, align 1
  br label %if.end

if.else:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [16 x i8], [16 x i8]* %inUse16, i32 0, i32 %2
  store i8 0, i8* %arrayidx2, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc7, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %4, 256
  br i1 %cmp4, label %for.body5, label %for.end9

for.body5:                                        ; preds = %for.cond3
  %5 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %5
  store i8 0, i8* %arrayidx6, align 1
  br label %for.inc7

for.inc7:                                         ; preds = %for.body5
  %6 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %6, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond3

for.end9:                                         ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc27, %for.end9
  %7 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %7, 16
  br i1 %cmp11, label %for.body12, label %for.end29

for.body12:                                       ; preds = %for.cond10
  %8 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds [16 x i8], [16 x i8]* %inUse16, i32 0, i32 %8
  %9 = load i8, i8* %arrayidx13, align 1
  %tobool = icmp ne i8 %9, 0
  br i1 %tobool, label %if.then14, label %if.end26

if.then14:                                        ; preds = %for.body12
  store i32 0, i32* %j, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc23, %if.then14
  %10 = load i32, i32* %j, align 4
  %cmp16 = icmp slt i32 %10, 16
  br i1 %cmp16, label %for.body17, label %for.end25

for.body17:                                       ; preds = %for.cond15
  %call18 = call i32 @bsR(i32 1)
  %cmp19 = icmp eq i32 %call18, 1
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %for.body17
  %11 = load i32, i32* %i, align 4
  %mul = mul nsw i32 %11, 16
  %12 = load i32, i32* %j, align 4
  %add = add nsw i32 %mul, %12
  %arrayidx21 = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %add
  store i8 1, i8* %arrayidx21, align 1
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %for.body17
  br label %for.inc23

for.inc23:                                        ; preds = %if.end22
  %13 = load i32, i32* %j, align 4
  %inc24 = add nsw i32 %13, 1
  store i32 %inc24, i32* %j, align 4
  br label %for.cond15

for.end25:                                        ; preds = %for.cond15
  br label %if.end26

if.end26:                                         ; preds = %for.end25, %for.body12
  br label %for.inc27

for.inc27:                                        ; preds = %if.end26
  %14 = load i32, i32* %i, align 4
  %inc28 = add nsw i32 %14, 1
  store i32 %inc28, i32* %i, align 4
  br label %for.cond10

for.end29:                                        ; preds = %for.cond10
  call void @makeMaps()
  %15 = load i32, i32* @nInUse, align 4
  %add30 = add nsw i32 %15, 2
  store i32 %add30, i32* %alphaSize, align 4
  %call31 = call i32 @bsR(i32 3)
  store i32 %call31, i32* %nGroups, align 4
  %call32 = call i32 @bsR(i32 15)
  store i32 %call32, i32* %nSelectors, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond33

for.cond33:                                       ; preds = %for.inc40, %for.end29
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* %nSelectors, align 4
  %cmp34 = icmp slt i32 %16, %17
  br i1 %cmp34, label %for.body35, label %for.end42

for.body35:                                       ; preds = %for.cond33
  store i32 0, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body35
  %call36 = call i32 @bsR(i32 1)
  %cmp37 = icmp eq i32 %call36, 1
  br i1 %cmp37, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i32, i32* %j, align 4
  %inc38 = add nsw i32 %18, 1
  store i32 %inc38, i32* %j, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %19 = load i32, i32* %j, align 4
  %conv = trunc i32 %19 to i8
  %20 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selectorMtf, i32 0, i32 %20
  store i8 %conv, i8* %arrayidx39, align 1
  br label %for.inc40

for.inc40:                                        ; preds = %while.end
  %21 = load i32, i32* %i, align 4
  %inc41 = add nsw i32 %21, 1
  store i32 %inc41, i32* %i, align 4
  br label %for.cond33

for.end42:                                        ; preds = %for.cond33
  store i8 0, i8* %v, align 1
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc49, %for.end42
  %22 = load i8, i8* %v, align 1
  %conv44 = zext i8 %22 to i32
  %23 = load i32, i32* %nGroups, align 4
  %cmp45 = icmp slt i32 %conv44, %23
  br i1 %cmp45, label %for.body47, label %for.end51

for.body47:                                       ; preds = %for.cond43
  %24 = load i8, i8* %v, align 1
  %25 = load i8, i8* %v, align 1
  %idxprom = zext i8 %25 to i32
  %arrayidx48 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 %idxprom
  store i8 %24, i8* %arrayidx48, align 1
  br label %for.inc49

for.inc49:                                        ; preds = %for.body47
  %26 = load i8, i8* %v, align 1
  %inc50 = add i8 %26, 1
  store i8 %inc50, i8* %v, align 1
  br label %for.cond43

for.end51:                                        ; preds = %for.cond43
  store i32 0, i32* %i, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc71, %for.end51
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %nSelectors, align 4
  %cmp53 = icmp slt i32 %27, %28
  br i1 %cmp53, label %for.body55, label %for.end73

for.body55:                                       ; preds = %for.cond52
  %29 = load i32, i32* %i, align 4
  %arrayidx56 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selectorMtf, i32 0, i32 %29
  %30 = load i8, i8* %arrayidx56, align 1
  store i8 %30, i8* %v, align 1
  %31 = load i8, i8* %v, align 1
  %idxprom57 = zext i8 %31 to i32
  %arrayidx58 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 %idxprom57
  %32 = load i8, i8* %arrayidx58, align 1
  store i8 %32, i8* %tmp, align 1
  br label %while.cond59

while.cond59:                                     ; preds = %while.body63, %for.body55
  %33 = load i8, i8* %v, align 1
  %conv60 = zext i8 %33 to i32
  %cmp61 = icmp sgt i32 %conv60, 0
  br i1 %cmp61, label %while.body63, label %while.end68

while.body63:                                     ; preds = %while.cond59
  %34 = load i8, i8* %v, align 1
  %conv64 = zext i8 %34 to i32
  %sub = sub nsw i32 %conv64, 1
  %arrayidx65 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 %sub
  %35 = load i8, i8* %arrayidx65, align 1
  %36 = load i8, i8* %v, align 1
  %idxprom66 = zext i8 %36 to i32
  %arrayidx67 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 %idxprom66
  store i8 %35, i8* %arrayidx67, align 1
  %37 = load i8, i8* %v, align 1
  %dec = add i8 %37, -1
  store i8 %dec, i8* %v, align 1
  br label %while.cond59

while.end68:                                      ; preds = %while.cond59
  %38 = load i8, i8* %tmp, align 1
  %arrayidx69 = getelementptr inbounds [6 x i8], [6 x i8]* %pos, i32 0, i32 0
  store i8 %38, i8* %arrayidx69, align 1
  %39 = load i8, i8* %tmp, align 1
  %40 = load i32, i32* %i, align 4
  %arrayidx70 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selector, i32 0, i32 %40
  store i8 %39, i8* %arrayidx70, align 1
  br label %for.inc71

for.inc71:                                        ; preds = %while.end68
  %41 = load i32, i32* %i, align 4
  %inc72 = add nsw i32 %41, 1
  store i32 %inc72, i32* %i, align 4
  br label %for.cond52

for.end73:                                        ; preds = %for.cond52
  store i32 0, i32* %t, align 4
  br label %for.cond74

for.cond74:                                       ; preds = %for.inc103, %for.end73
  %42 = load i32, i32* %t, align 4
  %43 = load i32, i32* %nGroups, align 4
  %cmp75 = icmp slt i32 %42, %43
  br i1 %cmp75, label %for.body77, label %for.end105

for.body77:                                       ; preds = %for.cond74
  %call78 = call i32 @bsR(i32 5)
  store i32 %call78, i32* %curr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond79

for.cond79:                                       ; preds = %for.inc100, %for.body77
  %44 = load i32, i32* %i, align 4
  %45 = load i32, i32* %alphaSize, align 4
  %cmp80 = icmp slt i32 %44, %45
  br i1 %cmp80, label %for.body82, label %for.end102

for.body82:                                       ; preds = %for.cond79
  br label %while.cond83

while.cond83:                                     ; preds = %if.end95, %for.body82
  %call84 = call i32 @bsR(i32 1)
  %cmp85 = icmp eq i32 %call84, 1
  br i1 %cmp85, label %while.body87, label %while.end96

while.body87:                                     ; preds = %while.cond83
  %call88 = call i32 @bsR(i32 1)
  %cmp89 = icmp eq i32 %call88, 0
  br i1 %cmp89, label %if.then91, label %if.else93

if.then91:                                        ; preds = %while.body87
  %46 = load i32, i32* %curr, align 4
  %inc92 = add nsw i32 %46, 1
  store i32 %inc92, i32* %curr, align 4
  br label %if.end95

if.else93:                                        ; preds = %while.body87
  %47 = load i32, i32* %curr, align 4
  %dec94 = add nsw i32 %47, -1
  store i32 %dec94, i32* %curr, align 4
  br label %if.end95

if.end95:                                         ; preds = %if.else93, %if.then91
  br label %while.cond83

while.end96:                                      ; preds = %while.cond83
  %48 = load i32, i32* %curr, align 4
  %conv97 = trunc i32 %48 to i8
  %49 = load i32, i32* %t, align 4
  %arrayidx98 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %49
  %50 = load i32, i32* %i, align 4
  %arrayidx99 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx98, i32 0, i32 %50
  store i8 %conv97, i8* %arrayidx99, align 1
  br label %for.inc100

for.inc100:                                       ; preds = %while.end96
  %51 = load i32, i32* %i, align 4
  %inc101 = add nsw i32 %51, 1
  store i32 %inc101, i32* %i, align 4
  br label %for.cond79

for.end102:                                       ; preds = %for.cond79
  br label %for.inc103

for.inc103:                                       ; preds = %for.end102
  %52 = load i32, i32* %t, align 4
  %inc104 = add nsw i32 %52, 1
  store i32 %inc104, i32* %t, align 4
  br label %for.cond74

for.end105:                                       ; preds = %for.cond74
  store i32 0, i32* %t, align 4
  br label %for.cond106

for.cond106:                                      ; preds = %for.inc146, %for.end105
  %53 = load i32, i32* %t, align 4
  %54 = load i32, i32* %nGroups, align 4
  %cmp107 = icmp slt i32 %53, %54
  br i1 %cmp107, label %for.body109, label %for.end148

for.body109:                                      ; preds = %for.cond106
  store i32 32, i32* %minLen, align 4
  store i32 0, i32* %maxLen, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond110

for.cond110:                                      ; preds = %for.inc134, %for.body109
  %55 = load i32, i32* %i, align 4
  %56 = load i32, i32* %alphaSize, align 4
  %cmp111 = icmp slt i32 %55, %56
  br i1 %cmp111, label %for.body113, label %for.end136

for.body113:                                      ; preds = %for.cond110
  %57 = load i32, i32* %t, align 4
  %arrayidx114 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %57
  %58 = load i32, i32* %i, align 4
  %arrayidx115 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx114, i32 0, i32 %58
  %59 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %59 to i32
  %60 = load i32, i32* %maxLen, align 4
  %cmp117 = icmp sgt i32 %conv116, %60
  br i1 %cmp117, label %if.then119, label %if.end123

if.then119:                                       ; preds = %for.body113
  %61 = load i32, i32* %t, align 4
  %arrayidx120 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %61
  %62 = load i32, i32* %i, align 4
  %arrayidx121 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx120, i32 0, i32 %62
  %63 = load i8, i8* %arrayidx121, align 1
  %conv122 = zext i8 %63 to i32
  store i32 %conv122, i32* %maxLen, align 4
  br label %if.end123

if.end123:                                        ; preds = %if.then119, %for.body113
  %64 = load i32, i32* %t, align 4
  %arrayidx124 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %64
  %65 = load i32, i32* %i, align 4
  %arrayidx125 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx124, i32 0, i32 %65
  %66 = load i8, i8* %arrayidx125, align 1
  %conv126 = zext i8 %66 to i32
  %67 = load i32, i32* %minLen, align 4
  %cmp127 = icmp slt i32 %conv126, %67
  br i1 %cmp127, label %if.then129, label %if.end133

if.then129:                                       ; preds = %if.end123
  %68 = load i32, i32* %t, align 4
  %arrayidx130 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %68
  %69 = load i32, i32* %i, align 4
  %arrayidx131 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx130, i32 0, i32 %69
  %70 = load i8, i8* %arrayidx131, align 1
  %conv132 = zext i8 %70 to i32
  store i32 %conv132, i32* %minLen, align 4
  br label %if.end133

if.end133:                                        ; preds = %if.then129, %if.end123
  br label %for.inc134

for.inc134:                                       ; preds = %if.end133
  %71 = load i32, i32* %i, align 4
  %inc135 = add nsw i32 %71, 1
  store i32 %inc135, i32* %i, align 4
  br label %for.cond110

for.end136:                                       ; preds = %for.cond110
  %72 = load i32, i32* %alphaSize, align 4
  %73 = load i32, i32* %maxLen, align 4
  %74 = load i32, i32* %minLen, align 4
  %75 = load i32, i32* %t, align 4
  %arrayidx137 = getelementptr inbounds [6 x [258 x i8]], [6 x [258 x i8]]* @len, i32 0, i32 %75
  %arrayidx138 = getelementptr inbounds [258 x i8], [258 x i8]* %arrayidx137, i32 0, i32 0
  %76 = load i32, i32* %t, align 4
  %arrayidx139 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @perm, i32 0, i32 %76
  %arrayidx140 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx139, i32 0, i32 0
  %77 = load i32, i32* %t, align 4
  %arrayidx141 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @base, i32 0, i32 %77
  %arrayidx142 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx141, i32 0, i32 0
  %78 = load i32, i32* %t, align 4
  %arrayidx143 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @limit, i32 0, i32 %78
  %arrayidx144 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx143, i32 0, i32 0
  call void @hbCreateDecodeTables(i32* %arrayidx144, i32* %arrayidx142, i32* %arrayidx140, i8* %arrayidx138, i32 %74, i32 %73, i32 %72)
  %79 = load i32, i32* %minLen, align 4
  %80 = load i32, i32* %t, align 4
  %arrayidx145 = getelementptr inbounds [6 x i32], [6 x i32]* @minLens, i32 0, i32 %80
  store i32 %79, i32* %arrayidx145, align 4
  br label %for.inc146

for.inc146:                                       ; preds = %for.end136
  %81 = load i32, i32* %t, align 4
  %inc147 = add nsw i32 %81, 1
  store i32 %inc147, i32* %t, align 4
  br label %for.cond106

for.end148:                                       ; preds = %for.cond106
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @getAndMoveToFrontDecode() #1 {
entry:
  %yy = alloca [256 x i8], align 1
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nextSym = alloca i32, align 4
  %limitLast = alloca i32, align 4
  %EOB = alloca i32, align 4
  %groupNo = alloca i32, align 4
  %groupPos = alloca i32, align 4
  %zt = alloca i32, align 4
  %zn = alloca i32, align 4
  %zvec = alloca i32, align 4
  %zj = alloca i32, align 4
  %zzi = alloca i32, align 4
  %ch = alloca i8, align 1
  %s = alloca i32, align 4
  %N = alloca i32, align 4
  %zt64 = alloca i32, align 4
  %zn65 = alloca i32, align 4
  %zvec66 = alloca i32, align 4
  %zj67 = alloca i32, align 4
  %zzi89 = alloca i32, align 4
  %tmp = alloca i8, align 1
  %zt204 = alloca i32, align 4
  %zn205 = alloca i32, align 4
  %zvec206 = alloca i32, align 4
  %zj207 = alloca i32, align 4
  %zzi229 = alloca i32, align 4
  %0 = load i32, i32* @blockSize100k, align 4
  %mul = mul nsw i32 100000, %0
  store i32 %mul, i32* %limitLast, align 4
  %call = call i32 @bsGetIntVS(i32 24)
  store i32 %call, i32* @origPtr, align 4
  call void @recvDecodingTables()
  %1 = load i32, i32* @nInUse, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %EOB, align 4
  store i32 -1, i32* %groupNo, align 4
  store i32 0, i32* %groupPos, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %2, 255
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @unzftab, i32 0, i32 %3
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc5, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp2 = icmp sle i32 %5, 255
  br i1 %cmp2, label %for.body3, label %for.end7

for.body3:                                        ; preds = %for.cond1
  %6 = load i32, i32* %i, align 4
  %conv = trunc i32 %6 to i8
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %7
  store i8 %conv, i8* %arrayidx4, align 1
  br label %for.inc5

for.inc5:                                         ; preds = %for.body3
  %8 = load i32, i32* %i, align 4
  %inc6 = add nsw i32 %8, 1
  store i32 %inc6, i32* %i, align 4
  br label %for.cond1

for.end7:                                         ; preds = %for.cond1
  store i32 -1, i32* @last, align 4
  %9 = load i32, i32* %groupPos, align 4
  %cmp8 = icmp eq i32 %9, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.end7
  %10 = load i32, i32* %groupNo, align 4
  %inc10 = add nsw i32 %10, 1
  store i32 %inc10, i32* %groupNo, align 4
  store i32 50, i32* %groupPos, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end7
  %11 = load i32, i32* %groupPos, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %groupPos, align 4
  %12 = load i32, i32* %groupNo, align 4
  %arrayidx11 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selector, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %13 to i32
  store i32 %conv12, i32* %zt, align 4
  %14 = load i32, i32* %zt, align 4
  %arrayidx13 = getelementptr inbounds [6 x i32], [6 x i32]* @minLens, i32 0, i32 %14
  %15 = load i32, i32* %arrayidx13, align 4
  store i32 %15, i32* %zn, align 4
  %16 = load i32, i32* %zn, align 4
  %call14 = call i32 @bsR(i32 %16)
  store i32 %call14, i32* %zvec, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end, %if.end
  %17 = load i32, i32* %zvec, align 4
  %18 = load i32, i32* %zt, align 4
  %arrayidx15 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @limit, i32 0, i32 %18
  %19 = load i32, i32* %zn, align 4
  %arrayidx16 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx15, i32 0, i32 %19
  %20 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp sgt i32 %17, %20
  br i1 %cmp17, label %while.body, label %while.end34

while.body:                                       ; preds = %while.cond
  %21 = load i32, i32* %zn, align 4
  %inc19 = add nsw i32 %21, 1
  store i32 %inc19, i32* %zn, align 4
  br label %while.cond20

while.cond20:                                     ; preds = %if.end28, %while.body
  %22 = load i32, i32* @bsLive, align 4
  %cmp21 = icmp slt i32 %22, 1
  br i1 %cmp21, label %while.body23, label %while.end

while.body23:                                     ; preds = %while.cond20
  %23 = load i32, i32* @bsStream, align 4
  %call24 = call i32 @spec_getc(i32 %23)
  store i32 %call24, i32* %zzi, align 4
  %24 = load i32, i32* %zzi, align 4
  %cmp25 = icmp eq i32 %24, -1
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %while.body23
  call void @compressedStreamEOF()
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %while.body23
  %25 = load i32, i32* @bsBuff, align 4
  %shl = shl i32 %25, 8
  %26 = load i32, i32* %zzi, align 4
  %and = and i32 %26, 255
  %or = or i32 %shl, %and
  store i32 %or, i32* @bsBuff, align 4
  %27 = load i32, i32* @bsLive, align 4
  %add29 = add nsw i32 %27, 8
  store i32 %add29, i32* @bsLive, align 4
  br label %while.cond20

while.end:                                        ; preds = %while.cond20
  %28 = load i32, i32* @bsBuff, align 4
  %29 = load i32, i32* @bsLive, align 4
  %sub = sub nsw i32 %29, 1
  %shr = lshr i32 %28, %sub
  %and30 = and i32 %shr, 1
  store i32 %and30, i32* %zj, align 4
  %30 = load i32, i32* @bsLive, align 4
  %dec31 = add nsw i32 %30, -1
  store i32 %dec31, i32* @bsLive, align 4
  %31 = load i32, i32* %zvec, align 4
  %shl32 = shl i32 %31, 1
  %32 = load i32, i32* %zj, align 4
  %or33 = or i32 %shl32, %32
  store i32 %or33, i32* %zvec, align 4
  br label %while.cond

while.end34:                                      ; preds = %while.cond
  %33 = load i32, i32* %zt, align 4
  %arrayidx35 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @perm, i32 0, i32 %33
  %34 = load i32, i32* %zvec, align 4
  %35 = load i32, i32* %zt, align 4
  %arrayidx36 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @base, i32 0, i32 %35
  %36 = load i32, i32* %zn, align 4
  %arrayidx37 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx36, i32 0, i32 %36
  %37 = load i32, i32* %arrayidx37, align 4
  %sub38 = sub nsw i32 %34, %37
  %arrayidx39 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx35, i32 0, i32 %sub38
  %38 = load i32, i32* %arrayidx39, align 4
  store i32 %38, i32* %nextSym, align 4
  br label %while.body41

while.body41:                                     ; preds = %while.end246, %if.end145, %while.end34
  %39 = load i32, i32* %nextSym, align 4
  %40 = load i32, i32* %EOB, align 4
  %cmp42 = icmp eq i32 %39, %40
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %while.body41
  br label %while.end252

if.end45:                                         ; preds = %while.body41
  %41 = load i32, i32* %nextSym, align 4
  %cmp46 = icmp eq i32 %41, 0
  br i1 %cmp46, label %if.then50, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end45
  %42 = load i32, i32* %nextSym, align 4
  %cmp48 = icmp eq i32 %42, 1
  br i1 %cmp48, label %if.then50, label %if.else146

if.then50:                                        ; preds = %lor.lhs.false, %if.end45
  store i32 -1, i32* %s, align 4
  store i32 1, i32* %N, align 4
  br label %do.body

do.body:                                          ; preds = %lor.end, %if.then50
  %43 = load i32, i32* %nextSym, align 4
  %cmp51 = icmp eq i32 %43, 0
  br i1 %cmp51, label %if.then53, label %if.else

if.then53:                                        ; preds = %do.body
  %44 = load i32, i32* %s, align 4
  %45 = load i32, i32* %N, align 4
  %mul54 = mul nsw i32 1, %45
  %add55 = add nsw i32 %44, %mul54
  store i32 %add55, i32* %s, align 4
  br label %if.end62

if.else:                                          ; preds = %do.body
  %46 = load i32, i32* %nextSym, align 4
  %cmp56 = icmp eq i32 %46, 1
  br i1 %cmp56, label %if.then58, label %if.end61

if.then58:                                        ; preds = %if.else
  %47 = load i32, i32* %s, align 4
  %48 = load i32, i32* %N, align 4
  %mul59 = mul nsw i32 2, %48
  %add60 = add nsw i32 %47, %mul59
  store i32 %add60, i32* %s, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %if.else
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then53
  %49 = load i32, i32* %N, align 4
  %mul63 = mul nsw i32 %49, 2
  store i32 %mul63, i32* %N, align 4
  %50 = load i32, i32* %groupPos, align 4
  %cmp68 = icmp eq i32 %50, 0
  br i1 %cmp68, label %if.then70, label %if.end72

if.then70:                                        ; preds = %if.end62
  %51 = load i32, i32* %groupNo, align 4
  %inc71 = add nsw i32 %51, 1
  store i32 %inc71, i32* %groupNo, align 4
  store i32 50, i32* %groupPos, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %if.end62
  %52 = load i32, i32* %groupPos, align 4
  %dec73 = add nsw i32 %52, -1
  store i32 %dec73, i32* %groupPos, align 4
  %53 = load i32, i32* %groupNo, align 4
  %arrayidx74 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selector, i32 0, i32 %53
  %54 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %54 to i32
  store i32 %conv75, i32* %zt64, align 4
  %55 = load i32, i32* %zt64, align 4
  %arrayidx76 = getelementptr inbounds [6 x i32], [6 x i32]* @minLens, i32 0, i32 %55
  %56 = load i32, i32* %arrayidx76, align 4
  store i32 %56, i32* %zn65, align 4
  %57 = load i32, i32* %zn65, align 4
  %call77 = call i32 @bsR(i32 %57)
  store i32 %call77, i32* %zvec66, align 4
  br label %while.cond78

while.cond78:                                     ; preds = %while.end99, %if.end72
  %58 = load i32, i32* %zvec66, align 4
  %59 = load i32, i32* %zt64, align 4
  %arrayidx79 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @limit, i32 0, i32 %59
  %60 = load i32, i32* %zn65, align 4
  %arrayidx80 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx79, i32 0, i32 %60
  %61 = load i32, i32* %arrayidx80, align 4
  %cmp81 = icmp sgt i32 %58, %61
  br i1 %cmp81, label %while.body83, label %while.end106

while.body83:                                     ; preds = %while.cond78
  %62 = load i32, i32* %zn65, align 4
  %inc84 = add nsw i32 %62, 1
  store i32 %inc84, i32* %zn65, align 4
  br label %while.cond85

while.cond85:                                     ; preds = %if.end94, %while.body83
  %63 = load i32, i32* @bsLive, align 4
  %cmp86 = icmp slt i32 %63, 1
  br i1 %cmp86, label %while.body88, label %while.end99

while.body88:                                     ; preds = %while.cond85
  %64 = load i32, i32* @bsStream, align 4
  %call90 = call i32 @spec_getc(i32 %64)
  store i32 %call90, i32* %zzi89, align 4
  %65 = load i32, i32* %zzi89, align 4
  %cmp91 = icmp eq i32 %65, -1
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %while.body88
  call void @compressedStreamEOF()
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %while.body88
  %66 = load i32, i32* @bsBuff, align 4
  %shl95 = shl i32 %66, 8
  %67 = load i32, i32* %zzi89, align 4
  %and96 = and i32 %67, 255
  %or97 = or i32 %shl95, %and96
  store i32 %or97, i32* @bsBuff, align 4
  %68 = load i32, i32* @bsLive, align 4
  %add98 = add nsw i32 %68, 8
  store i32 %add98, i32* @bsLive, align 4
  br label %while.cond85

while.end99:                                      ; preds = %while.cond85
  %69 = load i32, i32* @bsBuff, align 4
  %70 = load i32, i32* @bsLive, align 4
  %sub100 = sub nsw i32 %70, 1
  %shr101 = lshr i32 %69, %sub100
  %and102 = and i32 %shr101, 1
  store i32 %and102, i32* %zj67, align 4
  %71 = load i32, i32* @bsLive, align 4
  %dec103 = add nsw i32 %71, -1
  store i32 %dec103, i32* @bsLive, align 4
  %72 = load i32, i32* %zvec66, align 4
  %shl104 = shl i32 %72, 1
  %73 = load i32, i32* %zj67, align 4
  %or105 = or i32 %shl104, %73
  store i32 %or105, i32* %zvec66, align 4
  br label %while.cond78

while.end106:                                     ; preds = %while.cond78
  %74 = load i32, i32* %zt64, align 4
  %arrayidx107 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @perm, i32 0, i32 %74
  %75 = load i32, i32* %zvec66, align 4
  %76 = load i32, i32* %zt64, align 4
  %arrayidx108 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @base, i32 0, i32 %76
  %77 = load i32, i32* %zn65, align 4
  %arrayidx109 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx108, i32 0, i32 %77
  %78 = load i32, i32* %arrayidx109, align 4
  %sub110 = sub nsw i32 %75, %78
  %arrayidx111 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx107, i32 0, i32 %sub110
  %79 = load i32, i32* %arrayidx111, align 4
  store i32 %79, i32* %nextSym, align 4
  br label %do.cond

do.cond:                                          ; preds = %while.end106
  %80 = load i32, i32* %nextSym, align 4
  %cmp112 = icmp eq i32 %80, 0
  br i1 %cmp112, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.cond
  %81 = load i32, i32* %nextSym, align 4
  %cmp114 = icmp eq i32 %81, 1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.cond
  %82 = phi i1 [ true, %do.cond ], [ %cmp114, %lor.rhs ]
  br i1 %82, label %do.body, label %do.end

do.end:                                           ; preds = %lor.end
  %83 = load i32, i32* %s, align 4
  %inc116 = add nsw i32 %83, 1
  store i32 %inc116, i32* %s, align 4
  %arrayidx117 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 0
  %84 = load i8, i8* %arrayidx117, align 1
  %idxprom = zext i8 %84 to i32
  %arrayidx118 = getelementptr inbounds [256 x i8], [256 x i8]* @seqToUnseq, i32 0, i32 %idxprom
  %85 = load i8, i8* %arrayidx118, align 1
  store i8 %85, i8* %ch, align 1
  %86 = load i32, i32* %s, align 4
  %87 = load i8, i8* %ch, align 1
  %idxprom119 = zext i8 %87 to i32
  %arrayidx120 = getelementptr inbounds [256 x i32], [256 x i32]* @unzftab, i32 0, i32 %idxprom119
  %88 = load i32, i32* %arrayidx120, align 4
  %add121 = add nsw i32 %88, %86
  store i32 %add121, i32* %arrayidx120, align 4
  %89 = load i8, i8* @smallMode, align 1
  %tobool = icmp ne i8 %89, 0
  br i1 %tobool, label %if.then122, label %if.else132

if.then122:                                       ; preds = %do.end
  br label %while.cond123

while.cond123:                                    ; preds = %while.body126, %if.then122
  %90 = load i32, i32* %s, align 4
  %cmp124 = icmp sgt i32 %90, 0
  br i1 %cmp124, label %while.body126, label %while.end131

while.body126:                                    ; preds = %while.cond123
  %91 = load i32, i32* @last, align 4
  %inc127 = add nsw i32 %91, 1
  store i32 %inc127, i32* @last, align 4
  %92 = load i8, i8* %ch, align 1
  %conv128 = zext i8 %92 to i16
  %93 = load i16*, i16** @ll16, align 4
  %94 = load i32, i32* @last, align 4
  %arrayidx129 = getelementptr inbounds i16, i16* %93, i32 %94
  store i16 %conv128, i16* %arrayidx129, align 2
  %95 = load i32, i32* %s, align 4
  %dec130 = add nsw i32 %95, -1
  store i32 %dec130, i32* %s, align 4
  br label %while.cond123

while.end131:                                     ; preds = %while.cond123
  br label %if.end141

if.else132:                                       ; preds = %do.end
  br label %while.cond133

while.cond133:                                    ; preds = %while.body136, %if.else132
  %96 = load i32, i32* %s, align 4
  %cmp134 = icmp sgt i32 %96, 0
  br i1 %cmp134, label %while.body136, label %while.end140

while.body136:                                    ; preds = %while.cond133
  %97 = load i32, i32* @last, align 4
  %inc137 = add nsw i32 %97, 1
  store i32 %inc137, i32* @last, align 4
  %98 = load i8, i8* %ch, align 1
  %99 = load i8*, i8** @ll8, align 4
  %100 = load i32, i32* @last, align 4
  %arrayidx138 = getelementptr inbounds i8, i8* %99, i32 %100
  store i8 %98, i8* %arrayidx138, align 1
  %101 = load i32, i32* %s, align 4
  %dec139 = add nsw i32 %101, -1
  store i32 %dec139, i32* %s, align 4
  br label %while.cond133

while.end140:                                     ; preds = %while.cond133
  br label %if.end141

if.end141:                                        ; preds = %while.end140, %while.end131
  %102 = load i32, i32* @last, align 4
  %103 = load i32, i32* %limitLast, align 4
  %cmp142 = icmp sge i32 %102, %103
  br i1 %cmp142, label %if.then144, label %if.end145

if.then144:                                       ; preds = %if.end141
  call void @blockOverrun()
  br label %if.end145

if.end145:                                        ; preds = %if.then144, %if.end141
  br label %while.body41

if.else146:                                       ; preds = %lor.lhs.false
  %104 = load i32, i32* @last, align 4
  %inc147 = add nsw i32 %104, 1
  store i32 %inc147, i32* @last, align 4
  %105 = load i32, i32* @last, align 4
  %106 = load i32, i32* %limitLast, align 4
  %cmp148 = icmp sge i32 %105, %106
  br i1 %cmp148, label %if.then150, label %if.end151

if.then150:                                       ; preds = %if.else146
  call void @blockOverrun()
  br label %if.end151

if.end151:                                        ; preds = %if.then150, %if.else146
  %107 = load i32, i32* %nextSym, align 4
  %sub152 = sub nsw i32 %107, 1
  %arrayidx153 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub152
  %108 = load i8, i8* %arrayidx153, align 1
  store i8 %108, i8* %tmp, align 1
  %109 = load i8, i8* %tmp, align 1
  %idxprom154 = zext i8 %109 to i32
  %arrayidx155 = getelementptr inbounds [256 x i8], [256 x i8]* @seqToUnseq, i32 0, i32 %idxprom154
  %110 = load i8, i8* %arrayidx155, align 1
  %idxprom156 = zext i8 %110 to i32
  %arrayidx157 = getelementptr inbounds [256 x i32], [256 x i32]* @unzftab, i32 0, i32 %idxprom156
  %111 = load i32, i32* %arrayidx157, align 4
  %inc158 = add nsw i32 %111, 1
  store i32 %inc158, i32* %arrayidx157, align 4
  %112 = load i8, i8* @smallMode, align 1
  %tobool159 = icmp ne i8 %112, 0
  br i1 %tobool159, label %if.then160, label %if.else165

if.then160:                                       ; preds = %if.end151
  %113 = load i8, i8* %tmp, align 1
  %idxprom161 = zext i8 %113 to i32
  %arrayidx162 = getelementptr inbounds [256 x i8], [256 x i8]* @seqToUnseq, i32 0, i32 %idxprom161
  %114 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %114 to i16
  %115 = load i16*, i16** @ll16, align 4
  %116 = load i32, i32* @last, align 4
  %arrayidx164 = getelementptr inbounds i16, i16* %115, i32 %116
  store i16 %conv163, i16* %arrayidx164, align 2
  br label %if.end169

if.else165:                                       ; preds = %if.end151
  %117 = load i8, i8* %tmp, align 1
  %idxprom166 = zext i8 %117 to i32
  %arrayidx167 = getelementptr inbounds [256 x i8], [256 x i8]* @seqToUnseq, i32 0, i32 %idxprom166
  %118 = load i8, i8* %arrayidx167, align 1
  %119 = load i8*, i8** @ll8, align 4
  %120 = load i32, i32* @last, align 4
  %arrayidx168 = getelementptr inbounds i8, i8* %119, i32 %120
  store i8 %118, i8* %arrayidx168, align 1
  br label %if.end169

if.end169:                                        ; preds = %if.else165, %if.then160
  %121 = load i32, i32* %nextSym, align 4
  %sub170 = sub nsw i32 %121, 1
  store i32 %sub170, i32* %j, align 4
  br label %for.cond171

for.cond171:                                      ; preds = %for.inc190, %if.end169
  %122 = load i32, i32* %j, align 4
  %cmp172 = icmp sgt i32 %122, 3
  br i1 %cmp172, label %for.body174, label %for.end192

for.body174:                                      ; preds = %for.cond171
  %123 = load i32, i32* %j, align 4
  %sub175 = sub nsw i32 %123, 1
  %arrayidx176 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub175
  %124 = load i8, i8* %arrayidx176, align 1
  %125 = load i32, i32* %j, align 4
  %arrayidx177 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %125
  store i8 %124, i8* %arrayidx177, align 1
  %126 = load i32, i32* %j, align 4
  %sub178 = sub nsw i32 %126, 2
  %arrayidx179 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub178
  %127 = load i8, i8* %arrayidx179, align 1
  %128 = load i32, i32* %j, align 4
  %sub180 = sub nsw i32 %128, 1
  %arrayidx181 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub180
  store i8 %127, i8* %arrayidx181, align 1
  %129 = load i32, i32* %j, align 4
  %sub182 = sub nsw i32 %129, 3
  %arrayidx183 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub182
  %130 = load i8, i8* %arrayidx183, align 1
  %131 = load i32, i32* %j, align 4
  %sub184 = sub nsw i32 %131, 2
  %arrayidx185 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub184
  store i8 %130, i8* %arrayidx185, align 1
  %132 = load i32, i32* %j, align 4
  %sub186 = sub nsw i32 %132, 4
  %arrayidx187 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub186
  %133 = load i8, i8* %arrayidx187, align 1
  %134 = load i32, i32* %j, align 4
  %sub188 = sub nsw i32 %134, 3
  %arrayidx189 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub188
  store i8 %133, i8* %arrayidx189, align 1
  br label %for.inc190

for.inc190:                                       ; preds = %for.body174
  %135 = load i32, i32* %j, align 4
  %sub191 = sub nsw i32 %135, 4
  store i32 %sub191, i32* %j, align 4
  br label %for.cond171

for.end192:                                       ; preds = %for.cond171
  br label %for.cond193

for.cond193:                                      ; preds = %for.inc200, %for.end192
  %136 = load i32, i32* %j, align 4
  %cmp194 = icmp sgt i32 %136, 0
  br i1 %cmp194, label %for.body196, label %for.end202

for.body196:                                      ; preds = %for.cond193
  %137 = load i32, i32* %j, align 4
  %sub197 = sub nsw i32 %137, 1
  %arrayidx198 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %sub197
  %138 = load i8, i8* %arrayidx198, align 1
  %139 = load i32, i32* %j, align 4
  %arrayidx199 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 %139
  store i8 %138, i8* %arrayidx199, align 1
  br label %for.inc200

for.inc200:                                       ; preds = %for.body196
  %140 = load i32, i32* %j, align 4
  %dec201 = add nsw i32 %140, -1
  store i32 %dec201, i32* %j, align 4
  br label %for.cond193

for.end202:                                       ; preds = %for.cond193
  %141 = load i8, i8* %tmp, align 1
  %arrayidx203 = getelementptr inbounds [256 x i8], [256 x i8]* %yy, i32 0, i32 0
  store i8 %141, i8* %arrayidx203, align 1
  %142 = load i32, i32* %groupPos, align 4
  %cmp208 = icmp eq i32 %142, 0
  br i1 %cmp208, label %if.then210, label %if.end212

if.then210:                                       ; preds = %for.end202
  %143 = load i32, i32* %groupNo, align 4
  %inc211 = add nsw i32 %143, 1
  store i32 %inc211, i32* %groupNo, align 4
  store i32 50, i32* %groupPos, align 4
  br label %if.end212

if.end212:                                        ; preds = %if.then210, %for.end202
  %144 = load i32, i32* %groupPos, align 4
  %dec213 = add nsw i32 %144, -1
  store i32 %dec213, i32* %groupPos, align 4
  %145 = load i32, i32* %groupNo, align 4
  %arrayidx214 = getelementptr inbounds [18002 x i8], [18002 x i8]* @selector, i32 0, i32 %145
  %146 = load i8, i8* %arrayidx214, align 1
  %conv215 = zext i8 %146 to i32
  store i32 %conv215, i32* %zt204, align 4
  %147 = load i32, i32* %zt204, align 4
  %arrayidx216 = getelementptr inbounds [6 x i32], [6 x i32]* @minLens, i32 0, i32 %147
  %148 = load i32, i32* %arrayidx216, align 4
  store i32 %148, i32* %zn205, align 4
  %149 = load i32, i32* %zn205, align 4
  %call217 = call i32 @bsR(i32 %149)
  store i32 %call217, i32* %zvec206, align 4
  br label %while.cond218

while.cond218:                                    ; preds = %while.end239, %if.end212
  %150 = load i32, i32* %zvec206, align 4
  %151 = load i32, i32* %zt204, align 4
  %arrayidx219 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @limit, i32 0, i32 %151
  %152 = load i32, i32* %zn205, align 4
  %arrayidx220 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx219, i32 0, i32 %152
  %153 = load i32, i32* %arrayidx220, align 4
  %cmp221 = icmp sgt i32 %150, %153
  br i1 %cmp221, label %while.body223, label %while.end246

while.body223:                                    ; preds = %while.cond218
  %154 = load i32, i32* %zn205, align 4
  %inc224 = add nsw i32 %154, 1
  store i32 %inc224, i32* %zn205, align 4
  br label %while.cond225

while.cond225:                                    ; preds = %if.end234, %while.body223
  %155 = load i32, i32* @bsLive, align 4
  %cmp226 = icmp slt i32 %155, 1
  br i1 %cmp226, label %while.body228, label %while.end239

while.body228:                                    ; preds = %while.cond225
  %156 = load i32, i32* @bsStream, align 4
  %call230 = call i32 @spec_getc(i32 %156)
  store i32 %call230, i32* %zzi229, align 4
  %157 = load i32, i32* %zzi229, align 4
  %cmp231 = icmp eq i32 %157, -1
  br i1 %cmp231, label %if.then233, label %if.end234

if.then233:                                       ; preds = %while.body228
  call void @compressedStreamEOF()
  br label %if.end234

if.end234:                                        ; preds = %if.then233, %while.body228
  %158 = load i32, i32* @bsBuff, align 4
  %shl235 = shl i32 %158, 8
  %159 = load i32, i32* %zzi229, align 4
  %and236 = and i32 %159, 255
  %or237 = or i32 %shl235, %and236
  store i32 %or237, i32* @bsBuff, align 4
  %160 = load i32, i32* @bsLive, align 4
  %add238 = add nsw i32 %160, 8
  store i32 %add238, i32* @bsLive, align 4
  br label %while.cond225

while.end239:                                     ; preds = %while.cond225
  %161 = load i32, i32* @bsBuff, align 4
  %162 = load i32, i32* @bsLive, align 4
  %sub240 = sub nsw i32 %162, 1
  %shr241 = lshr i32 %161, %sub240
  %and242 = and i32 %shr241, 1
  store i32 %and242, i32* %zj207, align 4
  %163 = load i32, i32* @bsLive, align 4
  %dec243 = add nsw i32 %163, -1
  store i32 %dec243, i32* @bsLive, align 4
  %164 = load i32, i32* %zvec206, align 4
  %shl244 = shl i32 %164, 1
  %165 = load i32, i32* %zj207, align 4
  %or245 = or i32 %shl244, %165
  store i32 %or245, i32* %zvec206, align 4
  br label %while.cond218

while.end246:                                     ; preds = %while.cond218
  %166 = load i32, i32* %zt204, align 4
  %arrayidx247 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @perm, i32 0, i32 %166
  %167 = load i32, i32* %zvec206, align 4
  %168 = load i32, i32* %zt204, align 4
  %arrayidx248 = getelementptr inbounds [6 x [258 x i32]], [6 x [258 x i32]]* @base, i32 0, i32 %168
  %169 = load i32, i32* %zn205, align 4
  %arrayidx249 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx248, i32 0, i32 %169
  %170 = load i32, i32* %arrayidx249, align 4
  %sub250 = sub nsw i32 %167, %170
  %arrayidx251 = getelementptr inbounds [258 x i32], [258 x i32]* %arrayidx247, i32 0, i32 %sub250
  %171 = load i32, i32* %arrayidx251, align 4
  store i32 %171, i32* %nextSym, align 4
  br label %while.body41

while.end252:                                     ; preds = %if.then44
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @blockOverrun() #1 {
entry:
  %0 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @"??_C@_0GD@DNPAPOIP@?6?$CFs?3?5block?5overrun?5during?5decomp@", i32 0, i32 0), i8* %0)
  call void @showFileNames()
  call void @cadvise()
  call void @cleanUpAndFail(i32 2)
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local zeroext i8 @fullGtU(i32 %i1, i32 %i2) #0 {
entry:
  %retval = alloca i8, align 1
  %i2.addr = alloca i32, align 4
  %i1.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  %s1 = alloca i16, align 2
  %s2 = alloca i16, align 2
  store i32 %i2, i32* %i2.addr, align 4
  store i32 %i1, i32* %i1.addr, align 4
  %0 = load i8*, i8** @block, align 4
  %1 = load i32, i32* %i1.addr, align 4
  %arrayidx = getelementptr inbounds i8, i8* %0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  store i8 %2, i8* %c1, align 1
  %3 = load i8*, i8** @block, align 4
  %4 = load i32, i32* %i2.addr, align 4
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i32 %4
  %5 = load i8, i8* %arrayidx1, align 1
  store i8 %5, i8* %c2, align 1
  %6 = load i8, i8* %c1, align 1
  %conv = zext i8 %6 to i32
  %7 = load i8, i8* %c2, align 1
  %conv2 = zext i8 %7 to i32
  %cmp = icmp ne i32 %conv, %conv2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i8, i8* %c1, align 1
  %conv4 = zext i8 %8 to i32
  %9 = load i8, i8* %c2, align 1
  %conv5 = zext i8 %9 to i32
  %cmp6 = icmp sgt i32 %conv4, %conv5
  %conv7 = zext i1 %cmp6 to i32
  %conv8 = trunc i32 %conv7 to i8
  store i8 %conv8, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %10 = load i32, i32* %i1.addr, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i1.addr, align 4
  %11 = load i32, i32* %i2.addr, align 4
  %inc9 = add nsw i32 %11, 1
  store i32 %inc9, i32* %i2.addr, align 4
  %12 = load i8*, i8** @block, align 4
  %13 = load i32, i32* %i1.addr, align 4
  %arrayidx10 = getelementptr inbounds i8, i8* %12, i32 %13
  %14 = load i8, i8* %arrayidx10, align 1
  store i8 %14, i8* %c1, align 1
  %15 = load i8*, i8** @block, align 4
  %16 = load i32, i32* %i2.addr, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx11, align 1
  store i8 %17, i8* %c2, align 1
  %18 = load i8, i8* %c1, align 1
  %conv12 = zext i8 %18 to i32
  %19 = load i8, i8* %c2, align 1
  %conv13 = zext i8 %19 to i32
  %cmp14 = icmp ne i32 %conv12, %conv13
  br i1 %cmp14, label %if.then16, label %if.end22

if.then16:                                        ; preds = %if.end
  %20 = load i8, i8* %c1, align 1
  %conv17 = zext i8 %20 to i32
  %21 = load i8, i8* %c2, align 1
  %conv18 = zext i8 %21 to i32
  %cmp19 = icmp sgt i32 %conv17, %conv18
  %conv20 = zext i1 %cmp19 to i32
  %conv21 = trunc i32 %conv20 to i8
  store i8 %conv21, i8* %retval, align 1
  br label %return

if.end22:                                         ; preds = %if.end
  %22 = load i32, i32* %i1.addr, align 4
  %inc23 = add nsw i32 %22, 1
  store i32 %inc23, i32* %i1.addr, align 4
  %23 = load i32, i32* %i2.addr, align 4
  %inc24 = add nsw i32 %23, 1
  store i32 %inc24, i32* %i2.addr, align 4
  %24 = load i8*, i8** @block, align 4
  %25 = load i32, i32* %i1.addr, align 4
  %arrayidx25 = getelementptr inbounds i8, i8* %24, i32 %25
  %26 = load i8, i8* %arrayidx25, align 1
  store i8 %26, i8* %c1, align 1
  %27 = load i8*, i8** @block, align 4
  %28 = load i32, i32* %i2.addr, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %27, i32 %28
  %29 = load i8, i8* %arrayidx26, align 1
  store i8 %29, i8* %c2, align 1
  %30 = load i8, i8* %c1, align 1
  %conv27 = zext i8 %30 to i32
  %31 = load i8, i8* %c2, align 1
  %conv28 = zext i8 %31 to i32
  %cmp29 = icmp ne i32 %conv27, %conv28
  br i1 %cmp29, label %if.then31, label %if.end37

if.then31:                                        ; preds = %if.end22
  %32 = load i8, i8* %c1, align 1
  %conv32 = zext i8 %32 to i32
  %33 = load i8, i8* %c2, align 1
  %conv33 = zext i8 %33 to i32
  %cmp34 = icmp sgt i32 %conv32, %conv33
  %conv35 = zext i1 %cmp34 to i32
  %conv36 = trunc i32 %conv35 to i8
  store i8 %conv36, i8* %retval, align 1
  br label %return

if.end37:                                         ; preds = %if.end22
  %34 = load i32, i32* %i1.addr, align 4
  %inc38 = add nsw i32 %34, 1
  store i32 %inc38, i32* %i1.addr, align 4
  %35 = load i32, i32* %i2.addr, align 4
  %inc39 = add nsw i32 %35, 1
  store i32 %inc39, i32* %i2.addr, align 4
  %36 = load i8*, i8** @block, align 4
  %37 = load i32, i32* %i1.addr, align 4
  %arrayidx40 = getelementptr inbounds i8, i8* %36, i32 %37
  %38 = load i8, i8* %arrayidx40, align 1
  store i8 %38, i8* %c1, align 1
  %39 = load i8*, i8** @block, align 4
  %40 = load i32, i32* %i2.addr, align 4
  %arrayidx41 = getelementptr inbounds i8, i8* %39, i32 %40
  %41 = load i8, i8* %arrayidx41, align 1
  store i8 %41, i8* %c2, align 1
  %42 = load i8, i8* %c1, align 1
  %conv42 = zext i8 %42 to i32
  %43 = load i8, i8* %c2, align 1
  %conv43 = zext i8 %43 to i32
  %cmp44 = icmp ne i32 %conv42, %conv43
  br i1 %cmp44, label %if.then46, label %if.end52

if.then46:                                        ; preds = %if.end37
  %44 = load i8, i8* %c1, align 1
  %conv47 = zext i8 %44 to i32
  %45 = load i8, i8* %c2, align 1
  %conv48 = zext i8 %45 to i32
  %cmp49 = icmp sgt i32 %conv47, %conv48
  %conv50 = zext i1 %cmp49 to i32
  %conv51 = trunc i32 %conv50 to i8
  store i8 %conv51, i8* %retval, align 1
  br label %return

if.end52:                                         ; preds = %if.end37
  %46 = load i32, i32* %i1.addr, align 4
  %inc53 = add nsw i32 %46, 1
  store i32 %inc53, i32* %i1.addr, align 4
  %47 = load i32, i32* %i2.addr, align 4
  %inc54 = add nsw i32 %47, 1
  store i32 %inc54, i32* %i2.addr, align 4
  %48 = load i8*, i8** @block, align 4
  %49 = load i32, i32* %i1.addr, align 4
  %arrayidx55 = getelementptr inbounds i8, i8* %48, i32 %49
  %50 = load i8, i8* %arrayidx55, align 1
  store i8 %50, i8* %c1, align 1
  %51 = load i8*, i8** @block, align 4
  %52 = load i32, i32* %i2.addr, align 4
  %arrayidx56 = getelementptr inbounds i8, i8* %51, i32 %52
  %53 = load i8, i8* %arrayidx56, align 1
  store i8 %53, i8* %c2, align 1
  %54 = load i8, i8* %c1, align 1
  %conv57 = zext i8 %54 to i32
  %55 = load i8, i8* %c2, align 1
  %conv58 = zext i8 %55 to i32
  %cmp59 = icmp ne i32 %conv57, %conv58
  br i1 %cmp59, label %if.then61, label %if.end67

if.then61:                                        ; preds = %if.end52
  %56 = load i8, i8* %c1, align 1
  %conv62 = zext i8 %56 to i32
  %57 = load i8, i8* %c2, align 1
  %conv63 = zext i8 %57 to i32
  %cmp64 = icmp sgt i32 %conv62, %conv63
  %conv65 = zext i1 %cmp64 to i32
  %conv66 = trunc i32 %conv65 to i8
  store i8 %conv66, i8* %retval, align 1
  br label %return

if.end67:                                         ; preds = %if.end52
  %58 = load i32, i32* %i1.addr, align 4
  %inc68 = add nsw i32 %58, 1
  store i32 %inc68, i32* %i1.addr, align 4
  %59 = load i32, i32* %i2.addr, align 4
  %inc69 = add nsw i32 %59, 1
  store i32 %inc69, i32* %i2.addr, align 4
  %60 = load i8*, i8** @block, align 4
  %61 = load i32, i32* %i1.addr, align 4
  %arrayidx70 = getelementptr inbounds i8, i8* %60, i32 %61
  %62 = load i8, i8* %arrayidx70, align 1
  store i8 %62, i8* %c1, align 1
  %63 = load i8*, i8** @block, align 4
  %64 = load i32, i32* %i2.addr, align 4
  %arrayidx71 = getelementptr inbounds i8, i8* %63, i32 %64
  %65 = load i8, i8* %arrayidx71, align 1
  store i8 %65, i8* %c2, align 1
  %66 = load i8, i8* %c1, align 1
  %conv72 = zext i8 %66 to i32
  %67 = load i8, i8* %c2, align 1
  %conv73 = zext i8 %67 to i32
  %cmp74 = icmp ne i32 %conv72, %conv73
  br i1 %cmp74, label %if.then76, label %if.end82

if.then76:                                        ; preds = %if.end67
  %68 = load i8, i8* %c1, align 1
  %conv77 = zext i8 %68 to i32
  %69 = load i8, i8* %c2, align 1
  %conv78 = zext i8 %69 to i32
  %cmp79 = icmp sgt i32 %conv77, %conv78
  %conv80 = zext i1 %cmp79 to i32
  %conv81 = trunc i32 %conv80 to i8
  store i8 %conv81, i8* %retval, align 1
  br label %return

if.end82:                                         ; preds = %if.end67
  %70 = load i32, i32* %i1.addr, align 4
  %inc83 = add nsw i32 %70, 1
  store i32 %inc83, i32* %i1.addr, align 4
  %71 = load i32, i32* %i2.addr, align 4
  %inc84 = add nsw i32 %71, 1
  store i32 %inc84, i32* %i2.addr, align 4
  %72 = load i32, i32* @last, align 4
  %add = add nsw i32 %72, 1
  store i32 %add, i32* %k, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end82
  %73 = load i8*, i8** @block, align 4
  %74 = load i32, i32* %i1.addr, align 4
  %arrayidx85 = getelementptr inbounds i8, i8* %73, i32 %74
  %75 = load i8, i8* %arrayidx85, align 1
  store i8 %75, i8* %c1, align 1
  %76 = load i8*, i8** @block, align 4
  %77 = load i32, i32* %i2.addr, align 4
  %arrayidx86 = getelementptr inbounds i8, i8* %76, i32 %77
  %78 = load i8, i8* %arrayidx86, align 1
  store i8 %78, i8* %c2, align 1
  %79 = load i8, i8* %c1, align 1
  %conv87 = zext i8 %79 to i32
  %80 = load i8, i8* %c2, align 1
  %conv88 = zext i8 %80 to i32
  %cmp89 = icmp ne i32 %conv87, %conv88
  br i1 %cmp89, label %if.then91, label %if.end97

if.then91:                                        ; preds = %do.body
  %81 = load i8, i8* %c1, align 1
  %conv92 = zext i8 %81 to i32
  %82 = load i8, i8* %c2, align 1
  %conv93 = zext i8 %82 to i32
  %cmp94 = icmp sgt i32 %conv92, %conv93
  %conv95 = zext i1 %cmp94 to i32
  %conv96 = trunc i32 %conv95 to i8
  store i8 %conv96, i8* %retval, align 1
  br label %return

if.end97:                                         ; preds = %do.body
  %83 = load i16*, i16** @quadrant, align 4
  %84 = load i32, i32* %i1.addr, align 4
  %arrayidx98 = getelementptr inbounds i16, i16* %83, i32 %84
  %85 = load i16, i16* %arrayidx98, align 2
  store i16 %85, i16* %s1, align 2
  %86 = load i16*, i16** @quadrant, align 4
  %87 = load i32, i32* %i2.addr, align 4
  %arrayidx99 = getelementptr inbounds i16, i16* %86, i32 %87
  %88 = load i16, i16* %arrayidx99, align 2
  store i16 %88, i16* %s2, align 2
  %89 = load i16, i16* %s1, align 2
  %conv100 = zext i16 %89 to i32
  %90 = load i16, i16* %s2, align 2
  %conv101 = zext i16 %90 to i32
  %cmp102 = icmp ne i32 %conv100, %conv101
  br i1 %cmp102, label %if.then104, label %if.end110

if.then104:                                       ; preds = %if.end97
  %91 = load i16, i16* %s1, align 2
  %conv105 = zext i16 %91 to i32
  %92 = load i16, i16* %s2, align 2
  %conv106 = zext i16 %92 to i32
  %cmp107 = icmp sgt i32 %conv105, %conv106
  %conv108 = zext i1 %cmp107 to i32
  %conv109 = trunc i32 %conv108 to i8
  store i8 %conv109, i8* %retval, align 1
  br label %return

if.end110:                                        ; preds = %if.end97
  %93 = load i32, i32* %i1.addr, align 4
  %inc111 = add nsw i32 %93, 1
  store i32 %inc111, i32* %i1.addr, align 4
  %94 = load i32, i32* %i2.addr, align 4
  %inc112 = add nsw i32 %94, 1
  store i32 %inc112, i32* %i2.addr, align 4
  %95 = load i8*, i8** @block, align 4
  %96 = load i32, i32* %i1.addr, align 4
  %arrayidx113 = getelementptr inbounds i8, i8* %95, i32 %96
  %97 = load i8, i8* %arrayidx113, align 1
  store i8 %97, i8* %c1, align 1
  %98 = load i8*, i8** @block, align 4
  %99 = load i32, i32* %i2.addr, align 4
  %arrayidx114 = getelementptr inbounds i8, i8* %98, i32 %99
  %100 = load i8, i8* %arrayidx114, align 1
  store i8 %100, i8* %c2, align 1
  %101 = load i8, i8* %c1, align 1
  %conv115 = zext i8 %101 to i32
  %102 = load i8, i8* %c2, align 1
  %conv116 = zext i8 %102 to i32
  %cmp117 = icmp ne i32 %conv115, %conv116
  br i1 %cmp117, label %if.then119, label %if.end125

if.then119:                                       ; preds = %if.end110
  %103 = load i8, i8* %c1, align 1
  %conv120 = zext i8 %103 to i32
  %104 = load i8, i8* %c2, align 1
  %conv121 = zext i8 %104 to i32
  %cmp122 = icmp sgt i32 %conv120, %conv121
  %conv123 = zext i1 %cmp122 to i32
  %conv124 = trunc i32 %conv123 to i8
  store i8 %conv124, i8* %retval, align 1
  br label %return

if.end125:                                        ; preds = %if.end110
  %105 = load i16*, i16** @quadrant, align 4
  %106 = load i32, i32* %i1.addr, align 4
  %arrayidx126 = getelementptr inbounds i16, i16* %105, i32 %106
  %107 = load i16, i16* %arrayidx126, align 2
  store i16 %107, i16* %s1, align 2
  %108 = load i16*, i16** @quadrant, align 4
  %109 = load i32, i32* %i2.addr, align 4
  %arrayidx127 = getelementptr inbounds i16, i16* %108, i32 %109
  %110 = load i16, i16* %arrayidx127, align 2
  store i16 %110, i16* %s2, align 2
  %111 = load i16, i16* %s1, align 2
  %conv128 = zext i16 %111 to i32
  %112 = load i16, i16* %s2, align 2
  %conv129 = zext i16 %112 to i32
  %cmp130 = icmp ne i32 %conv128, %conv129
  br i1 %cmp130, label %if.then132, label %if.end138

if.then132:                                       ; preds = %if.end125
  %113 = load i16, i16* %s1, align 2
  %conv133 = zext i16 %113 to i32
  %114 = load i16, i16* %s2, align 2
  %conv134 = zext i16 %114 to i32
  %cmp135 = icmp sgt i32 %conv133, %conv134
  %conv136 = zext i1 %cmp135 to i32
  %conv137 = trunc i32 %conv136 to i8
  store i8 %conv137, i8* %retval, align 1
  br label %return

if.end138:                                        ; preds = %if.end125
  %115 = load i32, i32* %i1.addr, align 4
  %inc139 = add nsw i32 %115, 1
  store i32 %inc139, i32* %i1.addr, align 4
  %116 = load i32, i32* %i2.addr, align 4
  %inc140 = add nsw i32 %116, 1
  store i32 %inc140, i32* %i2.addr, align 4
  %117 = load i8*, i8** @block, align 4
  %118 = load i32, i32* %i1.addr, align 4
  %arrayidx141 = getelementptr inbounds i8, i8* %117, i32 %118
  %119 = load i8, i8* %arrayidx141, align 1
  store i8 %119, i8* %c1, align 1
  %120 = load i8*, i8** @block, align 4
  %121 = load i32, i32* %i2.addr, align 4
  %arrayidx142 = getelementptr inbounds i8, i8* %120, i32 %121
  %122 = load i8, i8* %arrayidx142, align 1
  store i8 %122, i8* %c2, align 1
  %123 = load i8, i8* %c1, align 1
  %conv143 = zext i8 %123 to i32
  %124 = load i8, i8* %c2, align 1
  %conv144 = zext i8 %124 to i32
  %cmp145 = icmp ne i32 %conv143, %conv144
  br i1 %cmp145, label %if.then147, label %if.end153

if.then147:                                       ; preds = %if.end138
  %125 = load i8, i8* %c1, align 1
  %conv148 = zext i8 %125 to i32
  %126 = load i8, i8* %c2, align 1
  %conv149 = zext i8 %126 to i32
  %cmp150 = icmp sgt i32 %conv148, %conv149
  %conv151 = zext i1 %cmp150 to i32
  %conv152 = trunc i32 %conv151 to i8
  store i8 %conv152, i8* %retval, align 1
  br label %return

if.end153:                                        ; preds = %if.end138
  %127 = load i16*, i16** @quadrant, align 4
  %128 = load i32, i32* %i1.addr, align 4
  %arrayidx154 = getelementptr inbounds i16, i16* %127, i32 %128
  %129 = load i16, i16* %arrayidx154, align 2
  store i16 %129, i16* %s1, align 2
  %130 = load i16*, i16** @quadrant, align 4
  %131 = load i32, i32* %i2.addr, align 4
  %arrayidx155 = getelementptr inbounds i16, i16* %130, i32 %131
  %132 = load i16, i16* %arrayidx155, align 2
  store i16 %132, i16* %s2, align 2
  %133 = load i16, i16* %s1, align 2
  %conv156 = zext i16 %133 to i32
  %134 = load i16, i16* %s2, align 2
  %conv157 = zext i16 %134 to i32
  %cmp158 = icmp ne i32 %conv156, %conv157
  br i1 %cmp158, label %if.then160, label %if.end166

if.then160:                                       ; preds = %if.end153
  %135 = load i16, i16* %s1, align 2
  %conv161 = zext i16 %135 to i32
  %136 = load i16, i16* %s2, align 2
  %conv162 = zext i16 %136 to i32
  %cmp163 = icmp sgt i32 %conv161, %conv162
  %conv164 = zext i1 %cmp163 to i32
  %conv165 = trunc i32 %conv164 to i8
  store i8 %conv165, i8* %retval, align 1
  br label %return

if.end166:                                        ; preds = %if.end153
  %137 = load i32, i32* %i1.addr, align 4
  %inc167 = add nsw i32 %137, 1
  store i32 %inc167, i32* %i1.addr, align 4
  %138 = load i32, i32* %i2.addr, align 4
  %inc168 = add nsw i32 %138, 1
  store i32 %inc168, i32* %i2.addr, align 4
  %139 = load i8*, i8** @block, align 4
  %140 = load i32, i32* %i1.addr, align 4
  %arrayidx169 = getelementptr inbounds i8, i8* %139, i32 %140
  %141 = load i8, i8* %arrayidx169, align 1
  store i8 %141, i8* %c1, align 1
  %142 = load i8*, i8** @block, align 4
  %143 = load i32, i32* %i2.addr, align 4
  %arrayidx170 = getelementptr inbounds i8, i8* %142, i32 %143
  %144 = load i8, i8* %arrayidx170, align 1
  store i8 %144, i8* %c2, align 1
  %145 = load i8, i8* %c1, align 1
  %conv171 = zext i8 %145 to i32
  %146 = load i8, i8* %c2, align 1
  %conv172 = zext i8 %146 to i32
  %cmp173 = icmp ne i32 %conv171, %conv172
  br i1 %cmp173, label %if.then175, label %if.end181

if.then175:                                       ; preds = %if.end166
  %147 = load i8, i8* %c1, align 1
  %conv176 = zext i8 %147 to i32
  %148 = load i8, i8* %c2, align 1
  %conv177 = zext i8 %148 to i32
  %cmp178 = icmp sgt i32 %conv176, %conv177
  %conv179 = zext i1 %cmp178 to i32
  %conv180 = trunc i32 %conv179 to i8
  store i8 %conv180, i8* %retval, align 1
  br label %return

if.end181:                                        ; preds = %if.end166
  %149 = load i16*, i16** @quadrant, align 4
  %150 = load i32, i32* %i1.addr, align 4
  %arrayidx182 = getelementptr inbounds i16, i16* %149, i32 %150
  %151 = load i16, i16* %arrayidx182, align 2
  store i16 %151, i16* %s1, align 2
  %152 = load i16*, i16** @quadrant, align 4
  %153 = load i32, i32* %i2.addr, align 4
  %arrayidx183 = getelementptr inbounds i16, i16* %152, i32 %153
  %154 = load i16, i16* %arrayidx183, align 2
  store i16 %154, i16* %s2, align 2
  %155 = load i16, i16* %s1, align 2
  %conv184 = zext i16 %155 to i32
  %156 = load i16, i16* %s2, align 2
  %conv185 = zext i16 %156 to i32
  %cmp186 = icmp ne i32 %conv184, %conv185
  br i1 %cmp186, label %if.then188, label %if.end194

if.then188:                                       ; preds = %if.end181
  %157 = load i16, i16* %s1, align 2
  %conv189 = zext i16 %157 to i32
  %158 = load i16, i16* %s2, align 2
  %conv190 = zext i16 %158 to i32
  %cmp191 = icmp sgt i32 %conv189, %conv190
  %conv192 = zext i1 %cmp191 to i32
  %conv193 = trunc i32 %conv192 to i8
  store i8 %conv193, i8* %retval, align 1
  br label %return

if.end194:                                        ; preds = %if.end181
  %159 = load i32, i32* %i1.addr, align 4
  %inc195 = add nsw i32 %159, 1
  store i32 %inc195, i32* %i1.addr, align 4
  %160 = load i32, i32* %i2.addr, align 4
  %inc196 = add nsw i32 %160, 1
  store i32 %inc196, i32* %i2.addr, align 4
  %161 = load i32, i32* %i1.addr, align 4
  %162 = load i32, i32* @last, align 4
  %cmp197 = icmp sgt i32 %161, %162
  br i1 %cmp197, label %if.then199, label %if.end200

if.then199:                                       ; preds = %if.end194
  %163 = load i32, i32* @last, align 4
  %164 = load i32, i32* %i1.addr, align 4
  %sub = sub nsw i32 %164, %163
  store i32 %sub, i32* %i1.addr, align 4
  %165 = load i32, i32* %i1.addr, align 4
  %dec = add nsw i32 %165, -1
  store i32 %dec, i32* %i1.addr, align 4
  br label %if.end200

if.end200:                                        ; preds = %if.then199, %if.end194
  %166 = load i32, i32* %i2.addr, align 4
  %167 = load i32, i32* @last, align 4
  %cmp201 = icmp sgt i32 %166, %167
  br i1 %cmp201, label %if.then203, label %if.end206

if.then203:                                       ; preds = %if.end200
  %168 = load i32, i32* @last, align 4
  %169 = load i32, i32* %i2.addr, align 4
  %sub204 = sub nsw i32 %169, %168
  store i32 %sub204, i32* %i2.addr, align 4
  %170 = load i32, i32* %i2.addr, align 4
  %dec205 = add nsw i32 %170, -1
  store i32 %dec205, i32* %i2.addr, align 4
  br label %if.end206

if.end206:                                        ; preds = %if.then203, %if.end200
  %171 = load i32, i32* %k, align 4
  %sub207 = sub nsw i32 %171, 4
  store i32 %sub207, i32* %k, align 4
  %172 = load i32, i32* @workDone, align 4
  %inc208 = add nsw i32 %172, 1
  store i32 %inc208, i32* @workDone, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end206
  %173 = load i32, i32* %k, align 4
  %cmp209 = icmp sge i32 %173, 0
  br i1 %cmp209, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i8 0, i8* %retval, align 1
  br label %return

return:                                           ; preds = %do.end, %if.then188, %if.then175, %if.then160, %if.then147, %if.then132, %if.then119, %if.then104, %if.then91, %if.then76, %if.then61, %if.then46, %if.then31, %if.then16, %if.then
  %174 = load i8, i8* %retval, align 1
  ret i8 %174
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @simpleSort(i32 %lo, i32 %hi, i32 %d) #1 {
entry:
  %d.addr = alloca i32, align 4
  %hi.addr = alloca i32, align 4
  %lo.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %h = alloca i32, align 4
  %bigN = alloca i32, align 4
  %hp = alloca i32, align 4
  %v = alloca i32, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %hi, i32* %hi.addr, align 4
  store i32 %lo, i32* %lo.addr, align 4
  %0 = load i32, i32* %hi.addr, align 4
  %1 = load i32, i32* %lo.addr, align 4
  %sub = sub nsw i32 %0, %1
  %add = add nsw i32 %sub, 1
  store i32 %add, i32* %bigN, align 4
  %2 = load i32, i32* %bigN, align 4
  %cmp = icmp slt i32 %2, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end

if.end:                                           ; preds = %entry
  store i32 0, i32* %hp, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %3 = load i32, i32* %hp, align 4
  %arrayidx = getelementptr inbounds [14 x i32], [14 x i32]* @incs, i32 0, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %5 = load i32, i32* %bigN, align 4
  %cmp1 = icmp slt i32 %4, %5
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32, i32* %hp, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %hp, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %hp, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %hp, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %8 = load i32, i32* %hp, align 4
  %cmp2 = icmp sge i32 %8, 0
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %hp, align 4
  %arrayidx3 = getelementptr inbounds [14 x i32], [14 x i32]* @incs, i32 0, i32 %9
  %10 = load i32, i32* %arrayidx3, align 4
  store i32 %10, i32* %h, align 4
  %11 = load i32, i32* @verbosity, align 4
  %cmp4 = icmp sge i32 %11, 5
  br i1 %cmp4, label %if.then5, label %if.end8

if.then5:                                         ; preds = %for.body
  %12 = load i32, i32* %h, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx6 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call7 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx6, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"??_C@_0BO@OKPFPLKN@?5?5?5?5?5?5?5?5?5?5shell?5increment?5?$CFd?6?$AA@", i32 0, i32 0), i32 %12)
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %for.body
  %13 = load i32, i32* %lo.addr, align 4
  %14 = load i32, i32* %h, align 4
  %add9 = add nsw i32 %13, %14
  store i32 %add9, i32* %i, align 4
  br label %while.body11

while.body11:                                     ; preds = %if.end86, %if.end8
  %15 = load i32, i32* %i, align 4
  %16 = load i32, i32* %hi.addr, align 4
  %cmp12 = icmp sgt i32 %15, %16
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %while.body11
  br label %while.end87

if.end14:                                         ; preds = %while.body11
  %17 = load i32*, i32** @zptr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx15, align 4
  store i32 %19, i32* %v, align 4
  %20 = load i32, i32* %i, align 4
  store i32 %20, i32* %j, align 4
  br label %while.cond16

while.cond16:                                     ; preds = %if.end31, %if.end14
  %21 = load i32, i32* %v, align 4
  %22 = load i32, i32* %d.addr, align 4
  %add17 = add nsw i32 %21, %22
  %23 = load i32*, i32** @zptr, align 4
  %24 = load i32, i32* %j, align 4
  %25 = load i32, i32* %h, align 4
  %sub18 = sub nsw i32 %24, %25
  %arrayidx19 = getelementptr inbounds i32, i32* %23, i32 %sub18
  %26 = load i32, i32* %arrayidx19, align 4
  %27 = load i32, i32* %d.addr, align 4
  %add20 = add nsw i32 %26, %27
  %call21 = call zeroext i8 @fullGtU(i32 %add20, i32 %add17)
  %tobool = icmp ne i8 %call21, 0
  br i1 %tobool, label %while.body22, label %while.end32

while.body22:                                     ; preds = %while.cond16
  %28 = load i32*, i32** @zptr, align 4
  %29 = load i32, i32* %j, align 4
  %30 = load i32, i32* %h, align 4
  %sub23 = sub nsw i32 %29, %30
  %arrayidx24 = getelementptr inbounds i32, i32* %28, i32 %sub23
  %31 = load i32, i32* %arrayidx24, align 4
  %32 = load i32*, i32** @zptr, align 4
  %33 = load i32, i32* %j, align 4
  %arrayidx25 = getelementptr inbounds i32, i32* %32, i32 %33
  store i32 %31, i32* %arrayidx25, align 4
  %34 = load i32, i32* %j, align 4
  %35 = load i32, i32* %h, align 4
  %sub26 = sub nsw i32 %34, %35
  store i32 %sub26, i32* %j, align 4
  %36 = load i32, i32* %j, align 4
  %37 = load i32, i32* %lo.addr, align 4
  %38 = load i32, i32* %h, align 4
  %add27 = add nsw i32 %37, %38
  %sub28 = sub nsw i32 %add27, 1
  %cmp29 = icmp sle i32 %36, %sub28
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %while.body22
  br label %while.end32

if.end31:                                         ; preds = %while.body22
  br label %while.cond16

while.end32:                                      ; preds = %if.then30, %while.cond16
  %39 = load i32, i32* %v, align 4
  %40 = load i32*, i32** @zptr, align 4
  %41 = load i32, i32* %j, align 4
  %arrayidx33 = getelementptr inbounds i32, i32* %40, i32 %41
  store i32 %39, i32* %arrayidx33, align 4
  %42 = load i32, i32* %i, align 4
  %inc34 = add nsw i32 %42, 1
  store i32 %inc34, i32* %i, align 4
  %43 = load i32, i32* %i, align 4
  %44 = load i32, i32* %hi.addr, align 4
  %cmp35 = icmp sgt i32 %43, %44
  br i1 %cmp35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %while.end32
  br label %while.end87

if.end37:                                         ; preds = %while.end32
  %45 = load i32*, i32** @zptr, align 4
  %46 = load i32, i32* %i, align 4
  %arrayidx38 = getelementptr inbounds i32, i32* %45, i32 %46
  %47 = load i32, i32* %arrayidx38, align 4
  store i32 %47, i32* %v, align 4
  %48 = load i32, i32* %i, align 4
  store i32 %48, i32* %j, align 4
  br label %while.cond39

while.cond39:                                     ; preds = %if.end55, %if.end37
  %49 = load i32, i32* %v, align 4
  %50 = load i32, i32* %d.addr, align 4
  %add40 = add nsw i32 %49, %50
  %51 = load i32*, i32** @zptr, align 4
  %52 = load i32, i32* %j, align 4
  %53 = load i32, i32* %h, align 4
  %sub41 = sub nsw i32 %52, %53
  %arrayidx42 = getelementptr inbounds i32, i32* %51, i32 %sub41
  %54 = load i32, i32* %arrayidx42, align 4
  %55 = load i32, i32* %d.addr, align 4
  %add43 = add nsw i32 %54, %55
  %call44 = call zeroext i8 @fullGtU(i32 %add43, i32 %add40)
  %tobool45 = icmp ne i8 %call44, 0
  br i1 %tobool45, label %while.body46, label %while.end56

while.body46:                                     ; preds = %while.cond39
  %56 = load i32*, i32** @zptr, align 4
  %57 = load i32, i32* %j, align 4
  %58 = load i32, i32* %h, align 4
  %sub47 = sub nsw i32 %57, %58
  %arrayidx48 = getelementptr inbounds i32, i32* %56, i32 %sub47
  %59 = load i32, i32* %arrayidx48, align 4
  %60 = load i32*, i32** @zptr, align 4
  %61 = load i32, i32* %j, align 4
  %arrayidx49 = getelementptr inbounds i32, i32* %60, i32 %61
  store i32 %59, i32* %arrayidx49, align 4
  %62 = load i32, i32* %j, align 4
  %63 = load i32, i32* %h, align 4
  %sub50 = sub nsw i32 %62, %63
  store i32 %sub50, i32* %j, align 4
  %64 = load i32, i32* %j, align 4
  %65 = load i32, i32* %lo.addr, align 4
  %66 = load i32, i32* %h, align 4
  %add51 = add nsw i32 %65, %66
  %sub52 = sub nsw i32 %add51, 1
  %cmp53 = icmp sle i32 %64, %sub52
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %while.body46
  br label %while.end56

if.end55:                                         ; preds = %while.body46
  br label %while.cond39

while.end56:                                      ; preds = %if.then54, %while.cond39
  %67 = load i32, i32* %v, align 4
  %68 = load i32*, i32** @zptr, align 4
  %69 = load i32, i32* %j, align 4
  %arrayidx57 = getelementptr inbounds i32, i32* %68, i32 %69
  store i32 %67, i32* %arrayidx57, align 4
  %70 = load i32, i32* %i, align 4
  %inc58 = add nsw i32 %70, 1
  store i32 %inc58, i32* %i, align 4
  %71 = load i32, i32* %i, align 4
  %72 = load i32, i32* %hi.addr, align 4
  %cmp59 = icmp sgt i32 %71, %72
  br i1 %cmp59, label %if.then60, label %if.end61

if.then60:                                        ; preds = %while.end56
  br label %while.end87

if.end61:                                         ; preds = %while.end56
  %73 = load i32*, i32** @zptr, align 4
  %74 = load i32, i32* %i, align 4
  %arrayidx62 = getelementptr inbounds i32, i32* %73, i32 %74
  %75 = load i32, i32* %arrayidx62, align 4
  store i32 %75, i32* %v, align 4
  %76 = load i32, i32* %i, align 4
  store i32 %76, i32* %j, align 4
  br label %while.cond63

while.cond63:                                     ; preds = %if.end79, %if.end61
  %77 = load i32, i32* %v, align 4
  %78 = load i32, i32* %d.addr, align 4
  %add64 = add nsw i32 %77, %78
  %79 = load i32*, i32** @zptr, align 4
  %80 = load i32, i32* %j, align 4
  %81 = load i32, i32* %h, align 4
  %sub65 = sub nsw i32 %80, %81
  %arrayidx66 = getelementptr inbounds i32, i32* %79, i32 %sub65
  %82 = load i32, i32* %arrayidx66, align 4
  %83 = load i32, i32* %d.addr, align 4
  %add67 = add nsw i32 %82, %83
  %call68 = call zeroext i8 @fullGtU(i32 %add67, i32 %add64)
  %tobool69 = icmp ne i8 %call68, 0
  br i1 %tobool69, label %while.body70, label %while.end80

while.body70:                                     ; preds = %while.cond63
  %84 = load i32*, i32** @zptr, align 4
  %85 = load i32, i32* %j, align 4
  %86 = load i32, i32* %h, align 4
  %sub71 = sub nsw i32 %85, %86
  %arrayidx72 = getelementptr inbounds i32, i32* %84, i32 %sub71
  %87 = load i32, i32* %arrayidx72, align 4
  %88 = load i32*, i32** @zptr, align 4
  %89 = load i32, i32* %j, align 4
  %arrayidx73 = getelementptr inbounds i32, i32* %88, i32 %89
  store i32 %87, i32* %arrayidx73, align 4
  %90 = load i32, i32* %j, align 4
  %91 = load i32, i32* %h, align 4
  %sub74 = sub nsw i32 %90, %91
  store i32 %sub74, i32* %j, align 4
  %92 = load i32, i32* %j, align 4
  %93 = load i32, i32* %lo.addr, align 4
  %94 = load i32, i32* %h, align 4
  %add75 = add nsw i32 %93, %94
  %sub76 = sub nsw i32 %add75, 1
  %cmp77 = icmp sle i32 %92, %sub76
  br i1 %cmp77, label %if.then78, label %if.end79

if.then78:                                        ; preds = %while.body70
  br label %while.end80

if.end79:                                         ; preds = %while.body70
  br label %while.cond63

while.end80:                                      ; preds = %if.then78, %while.cond63
  %95 = load i32, i32* %v, align 4
  %96 = load i32*, i32** @zptr, align 4
  %97 = load i32, i32* %j, align 4
  %arrayidx81 = getelementptr inbounds i32, i32* %96, i32 %97
  store i32 %95, i32* %arrayidx81, align 4
  %98 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %98, 1
  store i32 %inc82, i32* %i, align 4
  %99 = load i32, i32* @workDone, align 4
  %100 = load i32, i32* @workLimit, align 4
  %cmp83 = icmp sgt i32 %99, %100
  br i1 %cmp83, label %land.lhs.true, label %if.end86

land.lhs.true:                                    ; preds = %while.end80
  %101 = load i8, i8* @firstAttempt, align 1
  %conv = zext i8 %101 to i32
  %tobool84 = icmp ne i32 %conv, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %land.lhs.true
  br label %for.end

if.end86:                                         ; preds = %land.lhs.true, %while.end80
  br label %while.body11

while.end87:                                      ; preds = %if.then60, %if.then36, %if.then13
  br label %for.inc

for.inc:                                          ; preds = %while.end87
  %102 = load i32, i32* %hp, align 4
  %dec88 = add nsw i32 %102, -1
  store i32 %dec88, i32* %hp, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then85, %for.cond, %if.then
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @vswap(i32 %p1, i32 %p2, i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  %p2.addr = alloca i32, align 4
  %p1.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 %p2, i32* %p2.addr, align 4
  store i32 %p1, i32* %p1.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32*, i32** @zptr, align 4
  %2 = load i32, i32* %p1.addr, align 4
  %arrayidx = getelementptr inbounds i32, i32* %1, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %tmp, align 4
  %4 = load i32*, i32** @zptr, align 4
  %5 = load i32, i32* %p2.addr, align 4
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx1, align 4
  %7 = load i32*, i32** @zptr, align 4
  %8 = load i32, i32* %p1.addr, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %arrayidx2, align 4
  %9 = load i32, i32* %tmp, align 4
  %10 = load i32*, i32** @zptr, align 4
  %11 = load i32, i32* %p2.addr, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %9, i32* %arrayidx3, align 4
  %12 = load i32, i32* %p1.addr, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %p1.addr, align 4
  %13 = load i32, i32* %p2.addr, align 4
  %inc4 = add nsw i32 %13, 1
  store i32 %inc4, i32* %p2.addr, align 4
  %14 = load i32, i32* %n.addr, align 4
  %dec = add nsw i32 %14, -1
  store i32 %dec, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local zeroext i8 @med3(i8 zeroext %a, i8 zeroext %b, i8 zeroext %c) #0 {
entry:
  %c.addr = alloca i8, align 1
  %b.addr = alloca i8, align 1
  %a.addr = alloca i8, align 1
  %t = alloca i8, align 1
  store i8 %c, i8* %c.addr, align 1
  store i8 %b, i8* %b.addr, align 1
  store i8 %a, i8* %a.addr, align 1
  %0 = load i8, i8* %a.addr, align 1
  %conv = zext i8 %0 to i32
  %1 = load i8, i8* %b.addr, align 1
  %conv1 = zext i8 %1 to i32
  %cmp = icmp sgt i32 %conv, %conv1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8, i8* %a.addr, align 1
  store i8 %2, i8* %t, align 1
  %3 = load i8, i8* %b.addr, align 1
  store i8 %3, i8* %a.addr, align 1
  %4 = load i8, i8* %t, align 1
  store i8 %4, i8* %b.addr, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8, i8* %b.addr, align 1
  %conv3 = zext i8 %5 to i32
  %6 = load i8, i8* %c.addr, align 1
  %conv4 = zext i8 %6 to i32
  %cmp5 = icmp sgt i32 %conv3, %conv4
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  %7 = load i8, i8* %b.addr, align 1
  store i8 %7, i8* %t, align 1
  %8 = load i8, i8* %c.addr, align 1
  store i8 %8, i8* %b.addr, align 1
  %9 = load i8, i8* %t, align 1
  store i8 %9, i8* %c.addr, align 1
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  %10 = load i8, i8* %a.addr, align 1
  %conv9 = zext i8 %10 to i32
  %11 = load i8, i8* %b.addr, align 1
  %conv10 = zext i8 %11 to i32
  %cmp11 = icmp sgt i32 %conv9, %conv10
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end8
  %12 = load i8, i8* %a.addr, align 1
  store i8 %12, i8* %b.addr, align 1
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end8
  %13 = load i8, i8* %b.addr, align 1
  ret i8 %13
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @qSort3(i32 %loSt, i32 %hiSt, i32 %dSt) #1 {
entry:
  %dSt.addr = alloca i32, align 4
  %hiSt.addr = alloca i32, align 4
  %loSt.addr = alloca i32, align 4
  %unLo = alloca i32, align 4
  %unHi = alloca i32, align 4
  %ltLo = alloca i32, align 4
  %gtHi = alloca i32, align 4
  %med = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %sp = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %d = alloca i32, align 4
  %stack = alloca [1000 x %struct.StackElem], align 4
  %tmp = alloca i32, align 4
  %tmp69 = alloca i32, align 4
  %tmp87 = alloca i32, align 4
  store i32 %dSt, i32* %dSt.addr, align 4
  store i32 %hiSt, i32* %hiSt.addr, align 4
  store i32 %loSt, i32* %loSt.addr, align 4
  store i32 0, i32* %sp, align 4
  %0 = load i32, i32* %loSt.addr, align 4
  %1 = load i32, i32* %sp, align 4
  %arrayidx = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %1
  %ll = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx, i32 0, i32 0
  store i32 %0, i32* %ll, align 4
  %2 = load i32, i32* %hiSt.addr, align 4
  %3 = load i32, i32* %sp, align 4
  %arrayidx1 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %3
  %hh = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx1, i32 0, i32 1
  store i32 %2, i32* %hh, align 4
  %4 = load i32, i32* %dSt.addr, align 4
  %5 = load i32, i32* %sp, align 4
  %arrayidx2 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %5
  %dd = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx2, i32 0, i32 2
  store i32 %4, i32* %dd, align 4
  %6 = load i32, i32* %sp, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %sp, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end122, %if.then97, %if.end15, %entry
  %7 = load i32, i32* %sp, align 4
  %cmp = icmp sgt i32 %7, 0
  br i1 %cmp, label %while.body, label %while.end156

while.body:                                       ; preds = %while.cond
  %8 = load i32, i32* %sp, align 4
  %cmp3 = icmp sge i32 %8, 1000
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  call void @panic(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"??_C@_0BJ@IKCOPFHE@stack?5overflow?5in?5qSort3?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %9 = load i32, i32* %sp, align 4
  %dec = add nsw i32 %9, -1
  store i32 %dec, i32* %sp, align 4
  %10 = load i32, i32* %sp, align 4
  %arrayidx4 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %10
  %ll5 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx4, i32 0, i32 0
  %11 = load i32, i32* %ll5, align 4
  store i32 %11, i32* %lo, align 4
  %12 = load i32, i32* %sp, align 4
  %arrayidx6 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %12
  %hh7 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx6, i32 0, i32 1
  %13 = load i32, i32* %hh7, align 4
  store i32 %13, i32* %hi, align 4
  %14 = load i32, i32* %sp, align 4
  %arrayidx8 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %14
  %dd9 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx8, i32 0, i32 2
  %15 = load i32, i32* %dd9, align 4
  store i32 %15, i32* %d, align 4
  %16 = load i32, i32* %hi, align 4
  %17 = load i32, i32* %lo, align 4
  %sub = sub nsw i32 %16, %17
  %cmp10 = icmp slt i32 %sub, 20
  br i1 %cmp10, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %18 = load i32, i32* %d, align 4
  %cmp11 = icmp sgt i32 %18, 10
  br i1 %cmp11, label %if.then12, label %if.end16

if.then12:                                        ; preds = %lor.lhs.false, %if.end
  %19 = load i32, i32* %d, align 4
  %20 = load i32, i32* %hi, align 4
  %21 = load i32, i32* %lo, align 4
  call void @simpleSort(i32 %21, i32 %20, i32 %19)
  %22 = load i32, i32* @workDone, align 4
  %23 = load i32, i32* @workLimit, align 4
  %cmp13 = icmp sgt i32 %22, %23
  br i1 %cmp13, label %land.lhs.true, label %if.end15

land.lhs.true:                                    ; preds = %if.then12
  %24 = load i8, i8* @firstAttempt, align 1
  %conv = zext i8 %24 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %if.then14, label %if.end15

if.then14:                                        ; preds = %land.lhs.true
  br label %while.end156

if.end15:                                         ; preds = %land.lhs.true, %if.then12
  br label %while.cond

if.end16:                                         ; preds = %lor.lhs.false
  %25 = load i8*, i8** @block, align 4
  %26 = load i32*, i32** @zptr, align 4
  %27 = load i32, i32* %lo, align 4
  %28 = load i32, i32* %hi, align 4
  %add = add nsw i32 %27, %28
  %shr = ashr i32 %add, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %26, i32 %shr
  %29 = load i32, i32* %arrayidx17, align 4
  %30 = load i32, i32* %d, align 4
  %add18 = add nsw i32 %29, %30
  %arrayidx19 = getelementptr inbounds i8, i8* %25, i32 %add18
  %31 = load i8, i8* %arrayidx19, align 1
  %32 = load i8*, i8** @block, align 4
  %33 = load i32*, i32** @zptr, align 4
  %34 = load i32, i32* %hi, align 4
  %arrayidx20 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx20, align 4
  %36 = load i32, i32* %d, align 4
  %add21 = add nsw i32 %35, %36
  %arrayidx22 = getelementptr inbounds i8, i8* %32, i32 %add21
  %37 = load i8, i8* %arrayidx22, align 1
  %38 = load i8*, i8** @block, align 4
  %39 = load i32*, i32** @zptr, align 4
  %40 = load i32, i32* %lo, align 4
  %arrayidx23 = getelementptr inbounds i32, i32* %39, i32 %40
  %41 = load i32, i32* %arrayidx23, align 4
  %42 = load i32, i32* %d, align 4
  %add24 = add nsw i32 %41, %42
  %arrayidx25 = getelementptr inbounds i8, i8* %38, i32 %add24
  %43 = load i8, i8* %arrayidx25, align 1
  %call = call zeroext i8 @med3(i8 zeroext %43, i8 zeroext %37, i8 zeroext %31)
  %conv26 = zext i8 %call to i32
  store i32 %conv26, i32* %med, align 4
  %44 = load i32, i32* %lo, align 4
  store i32 %44, i32* %ltLo, align 4
  store i32 %44, i32* %unLo, align 4
  %45 = load i32, i32* %hi, align 4
  store i32 %45, i32* %gtHi, align 4
  store i32 %45, i32* %unHi, align 4
  br label %while.body28

while.body28:                                     ; preds = %if.end86, %if.end16
  br label %while.body30

while.body30:                                     ; preds = %if.end53, %if.then42, %while.body28
  %46 = load i32, i32* %unLo, align 4
  %47 = load i32, i32* %unHi, align 4
  %cmp31 = icmp sgt i32 %46, %47
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %while.body30
  br label %while.end

if.end34:                                         ; preds = %while.body30
  %48 = load i8*, i8** @block, align 4
  %49 = load i32*, i32** @zptr, align 4
  %50 = load i32, i32* %unLo, align 4
  %arrayidx35 = getelementptr inbounds i32, i32* %49, i32 %50
  %51 = load i32, i32* %arrayidx35, align 4
  %52 = load i32, i32* %d, align 4
  %add36 = add nsw i32 %51, %52
  %arrayidx37 = getelementptr inbounds i8, i8* %48, i32 %add36
  %53 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %53 to i32
  %54 = load i32, i32* %med, align 4
  %sub39 = sub nsw i32 %conv38, %54
  store i32 %sub39, i32* %n, align 4
  %55 = load i32, i32* %n, align 4
  %cmp40 = icmp eq i32 %55, 0
  br i1 %cmp40, label %if.then42, label %if.end49

if.then42:                                        ; preds = %if.end34
  %56 = load i32*, i32** @zptr, align 4
  %57 = load i32, i32* %unLo, align 4
  %arrayidx43 = getelementptr inbounds i32, i32* %56, i32 %57
  %58 = load i32, i32* %arrayidx43, align 4
  store i32 %58, i32* %tmp, align 4
  %59 = load i32*, i32** @zptr, align 4
  %60 = load i32, i32* %ltLo, align 4
  %arrayidx44 = getelementptr inbounds i32, i32* %59, i32 %60
  %61 = load i32, i32* %arrayidx44, align 4
  %62 = load i32*, i32** @zptr, align 4
  %63 = load i32, i32* %unLo, align 4
  %arrayidx45 = getelementptr inbounds i32, i32* %62, i32 %63
  store i32 %61, i32* %arrayidx45, align 4
  %64 = load i32, i32* %tmp, align 4
  %65 = load i32*, i32** @zptr, align 4
  %66 = load i32, i32* %ltLo, align 4
  %arrayidx46 = getelementptr inbounds i32, i32* %65, i32 %66
  store i32 %64, i32* %arrayidx46, align 4
  %67 = load i32, i32* %ltLo, align 4
  %inc47 = add nsw i32 %67, 1
  store i32 %inc47, i32* %ltLo, align 4
  %68 = load i32, i32* %unLo, align 4
  %inc48 = add nsw i32 %68, 1
  store i32 %inc48, i32* %unLo, align 4
  br label %while.body30

if.end49:                                         ; preds = %if.end34
  %69 = load i32, i32* %n, align 4
  %cmp50 = icmp sgt i32 %69, 0
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.end49
  br label %while.end

if.end53:                                         ; preds = %if.end49
  %70 = load i32, i32* %unLo, align 4
  %inc54 = add nsw i32 %70, 1
  store i32 %inc54, i32* %unLo, align 4
  br label %while.body30

while.end:                                        ; preds = %if.then52, %if.then33
  br label %while.body56

while.body56:                                     ; preds = %if.end80, %if.then68, %while.end
  %71 = load i32, i32* %unLo, align 4
  %72 = load i32, i32* %unHi, align 4
  %cmp57 = icmp sgt i32 %71, %72
  br i1 %cmp57, label %if.then59, label %if.end60

if.then59:                                        ; preds = %while.body56
  br label %while.end82

if.end60:                                         ; preds = %while.body56
  %73 = load i8*, i8** @block, align 4
  %74 = load i32*, i32** @zptr, align 4
  %75 = load i32, i32* %unHi, align 4
  %arrayidx61 = getelementptr inbounds i32, i32* %74, i32 %75
  %76 = load i32, i32* %arrayidx61, align 4
  %77 = load i32, i32* %d, align 4
  %add62 = add nsw i32 %76, %77
  %arrayidx63 = getelementptr inbounds i8, i8* %73, i32 %add62
  %78 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %78 to i32
  %79 = load i32, i32* %med, align 4
  %sub65 = sub nsw i32 %conv64, %79
  store i32 %sub65, i32* %n, align 4
  %80 = load i32, i32* %n, align 4
  %cmp66 = icmp eq i32 %80, 0
  br i1 %cmp66, label %if.then68, label %if.end76

if.then68:                                        ; preds = %if.end60
  %81 = load i32*, i32** @zptr, align 4
  %82 = load i32, i32* %unHi, align 4
  %arrayidx70 = getelementptr inbounds i32, i32* %81, i32 %82
  %83 = load i32, i32* %arrayidx70, align 4
  store i32 %83, i32* %tmp69, align 4
  %84 = load i32*, i32** @zptr, align 4
  %85 = load i32, i32* %gtHi, align 4
  %arrayidx71 = getelementptr inbounds i32, i32* %84, i32 %85
  %86 = load i32, i32* %arrayidx71, align 4
  %87 = load i32*, i32** @zptr, align 4
  %88 = load i32, i32* %unHi, align 4
  %arrayidx72 = getelementptr inbounds i32, i32* %87, i32 %88
  store i32 %86, i32* %arrayidx72, align 4
  %89 = load i32, i32* %tmp69, align 4
  %90 = load i32*, i32** @zptr, align 4
  %91 = load i32, i32* %gtHi, align 4
  %arrayidx73 = getelementptr inbounds i32, i32* %90, i32 %91
  store i32 %89, i32* %arrayidx73, align 4
  %92 = load i32, i32* %gtHi, align 4
  %dec74 = add nsw i32 %92, -1
  store i32 %dec74, i32* %gtHi, align 4
  %93 = load i32, i32* %unHi, align 4
  %dec75 = add nsw i32 %93, -1
  store i32 %dec75, i32* %unHi, align 4
  br label %while.body56

if.end76:                                         ; preds = %if.end60
  %94 = load i32, i32* %n, align 4
  %cmp77 = icmp slt i32 %94, 0
  br i1 %cmp77, label %if.then79, label %if.end80

if.then79:                                        ; preds = %if.end76
  br label %while.end82

if.end80:                                         ; preds = %if.end76
  %95 = load i32, i32* %unHi, align 4
  %dec81 = add nsw i32 %95, -1
  store i32 %dec81, i32* %unHi, align 4
  br label %while.body56

while.end82:                                      ; preds = %if.then79, %if.then59
  %96 = load i32, i32* %unLo, align 4
  %97 = load i32, i32* %unHi, align 4
  %cmp83 = icmp sgt i32 %96, %97
  br i1 %cmp83, label %if.then85, label %if.end86

if.then85:                                        ; preds = %while.end82
  br label %while.end94

if.end86:                                         ; preds = %while.end82
  %98 = load i32*, i32** @zptr, align 4
  %99 = load i32, i32* %unLo, align 4
  %arrayidx88 = getelementptr inbounds i32, i32* %98, i32 %99
  %100 = load i32, i32* %arrayidx88, align 4
  store i32 %100, i32* %tmp87, align 4
  %101 = load i32*, i32** @zptr, align 4
  %102 = load i32, i32* %unHi, align 4
  %arrayidx89 = getelementptr inbounds i32, i32* %101, i32 %102
  %103 = load i32, i32* %arrayidx89, align 4
  %104 = load i32*, i32** @zptr, align 4
  %105 = load i32, i32* %unLo, align 4
  %arrayidx90 = getelementptr inbounds i32, i32* %104, i32 %105
  store i32 %103, i32* %arrayidx90, align 4
  %106 = load i32, i32* %tmp87, align 4
  %107 = load i32*, i32** @zptr, align 4
  %108 = load i32, i32* %unHi, align 4
  %arrayidx91 = getelementptr inbounds i32, i32* %107, i32 %108
  store i32 %106, i32* %arrayidx91, align 4
  %109 = load i32, i32* %unLo, align 4
  %inc92 = add nsw i32 %109, 1
  store i32 %inc92, i32* %unLo, align 4
  %110 = load i32, i32* %unHi, align 4
  %dec93 = add nsw i32 %110, -1
  store i32 %dec93, i32* %unHi, align 4
  br label %while.body28

while.end94:                                      ; preds = %if.then85
  %111 = load i32, i32* %gtHi, align 4
  %112 = load i32, i32* %ltLo, align 4
  %cmp95 = icmp slt i32 %111, %112
  br i1 %cmp95, label %if.then97, label %if.end106

if.then97:                                        ; preds = %while.end94
  %113 = load i32, i32* %lo, align 4
  %114 = load i32, i32* %sp, align 4
  %arrayidx98 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %114
  %ll99 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx98, i32 0, i32 0
  store i32 %113, i32* %ll99, align 4
  %115 = load i32, i32* %hi, align 4
  %116 = load i32, i32* %sp, align 4
  %arrayidx100 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %116
  %hh101 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx100, i32 0, i32 1
  store i32 %115, i32* %hh101, align 4
  %117 = load i32, i32* %d, align 4
  %add102 = add nsw i32 %117, 1
  %118 = load i32, i32* %sp, align 4
  %arrayidx103 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %118
  %dd104 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx103, i32 0, i32 2
  store i32 %add102, i32* %dd104, align 4
  %119 = load i32, i32* %sp, align 4
  %inc105 = add nsw i32 %119, 1
  store i32 %inc105, i32* %sp, align 4
  br label %while.cond

if.end106:                                        ; preds = %while.end94
  %120 = load i32, i32* %ltLo, align 4
  %121 = load i32, i32* %lo, align 4
  %sub107 = sub nsw i32 %120, %121
  %122 = load i32, i32* %unLo, align 4
  %123 = load i32, i32* %ltLo, align 4
  %sub108 = sub nsw i32 %122, %123
  %cmp109 = icmp slt i32 %sub107, %sub108
  br i1 %cmp109, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end106
  %124 = load i32, i32* %ltLo, align 4
  %125 = load i32, i32* %lo, align 4
  %sub111 = sub nsw i32 %124, %125
  br label %cond.end

cond.false:                                       ; preds = %if.end106
  %126 = load i32, i32* %unLo, align 4
  %127 = load i32, i32* %ltLo, align 4
  %sub112 = sub nsw i32 %126, %127
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub111, %cond.true ], [ %sub112, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %128 = load i32, i32* %n, align 4
  %129 = load i32, i32* %unLo, align 4
  %130 = load i32, i32* %n, align 4
  %sub113 = sub nsw i32 %129, %130
  %131 = load i32, i32* %lo, align 4
  call void @vswap(i32 %131, i32 %sub113, i32 %128)
  %132 = load i32, i32* %hi, align 4
  %133 = load i32, i32* %gtHi, align 4
  %sub114 = sub nsw i32 %132, %133
  %134 = load i32, i32* %gtHi, align 4
  %135 = load i32, i32* %unHi, align 4
  %sub115 = sub nsw i32 %134, %135
  %cmp116 = icmp slt i32 %sub114, %sub115
  br i1 %cmp116, label %cond.true118, label %cond.false120

cond.true118:                                     ; preds = %cond.end
  %136 = load i32, i32* %hi, align 4
  %137 = load i32, i32* %gtHi, align 4
  %sub119 = sub nsw i32 %136, %137
  br label %cond.end122

cond.false120:                                    ; preds = %cond.end
  %138 = load i32, i32* %gtHi, align 4
  %139 = load i32, i32* %unHi, align 4
  %sub121 = sub nsw i32 %138, %139
  br label %cond.end122

cond.end122:                                      ; preds = %cond.false120, %cond.true118
  %cond123 = phi i32 [ %sub119, %cond.true118 ], [ %sub121, %cond.false120 ]
  store i32 %cond123, i32* %m, align 4
  %140 = load i32, i32* %m, align 4
  %141 = load i32, i32* %hi, align 4
  %142 = load i32, i32* %m, align 4
  %sub124 = sub nsw i32 %141, %142
  %add125 = add nsw i32 %sub124, 1
  %143 = load i32, i32* %unLo, align 4
  call void @vswap(i32 %143, i32 %add125, i32 %140)
  %144 = load i32, i32* %lo, align 4
  %145 = load i32, i32* %unLo, align 4
  %add126 = add nsw i32 %144, %145
  %146 = load i32, i32* %ltLo, align 4
  %sub127 = sub nsw i32 %add126, %146
  %sub128 = sub nsw i32 %sub127, 1
  store i32 %sub128, i32* %n, align 4
  %147 = load i32, i32* %hi, align 4
  %148 = load i32, i32* %gtHi, align 4
  %149 = load i32, i32* %unHi, align 4
  %sub129 = sub nsw i32 %148, %149
  %sub130 = sub nsw i32 %147, %sub129
  %add131 = add nsw i32 %sub130, 1
  store i32 %add131, i32* %m, align 4
  %150 = load i32, i32* %lo, align 4
  %151 = load i32, i32* %sp, align 4
  %arrayidx132 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %151
  %ll133 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx132, i32 0, i32 0
  store i32 %150, i32* %ll133, align 4
  %152 = load i32, i32* %n, align 4
  %153 = load i32, i32* %sp, align 4
  %arrayidx134 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %153
  %hh135 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx134, i32 0, i32 1
  store i32 %152, i32* %hh135, align 4
  %154 = load i32, i32* %d, align 4
  %155 = load i32, i32* %sp, align 4
  %arrayidx136 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %155
  %dd137 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx136, i32 0, i32 2
  store i32 %154, i32* %dd137, align 4
  %156 = load i32, i32* %sp, align 4
  %inc138 = add nsw i32 %156, 1
  store i32 %inc138, i32* %sp, align 4
  %157 = load i32, i32* %n, align 4
  %add139 = add nsw i32 %157, 1
  %158 = load i32, i32* %sp, align 4
  %arrayidx140 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %158
  %ll141 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx140, i32 0, i32 0
  store i32 %add139, i32* %ll141, align 4
  %159 = load i32, i32* %m, align 4
  %sub142 = sub nsw i32 %159, 1
  %160 = load i32, i32* %sp, align 4
  %arrayidx143 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %160
  %hh144 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx143, i32 0, i32 1
  store i32 %sub142, i32* %hh144, align 4
  %161 = load i32, i32* %d, align 4
  %add145 = add nsw i32 %161, 1
  %162 = load i32, i32* %sp, align 4
  %arrayidx146 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %162
  %dd147 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx146, i32 0, i32 2
  store i32 %add145, i32* %dd147, align 4
  %163 = load i32, i32* %sp, align 4
  %inc148 = add nsw i32 %163, 1
  store i32 %inc148, i32* %sp, align 4
  %164 = load i32, i32* %m, align 4
  %165 = load i32, i32* %sp, align 4
  %arrayidx149 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %165
  %ll150 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx149, i32 0, i32 0
  store i32 %164, i32* %ll150, align 4
  %166 = load i32, i32* %hi, align 4
  %167 = load i32, i32* %sp, align 4
  %arrayidx151 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %167
  %hh152 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx151, i32 0, i32 1
  store i32 %166, i32* %hh152, align 4
  %168 = load i32, i32* %d, align 4
  %169 = load i32, i32* %sp, align 4
  %arrayidx153 = getelementptr inbounds [1000 x %struct.StackElem], [1000 x %struct.StackElem]* %stack, i32 0, i32 %169
  %dd154 = getelementptr inbounds %struct.StackElem, %struct.StackElem* %arrayidx153, i32 0, i32 2
  store i32 %168, i32* %dd154, align 4
  %170 = load i32, i32* %sp, align 4
  %inc155 = add nsw i32 %170, 1
  store i32 %inc155, i32* %sp, align 4
  br label %while.cond

while.end156:                                     ; preds = %if.then14, %while.cond
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @sortIt() #1 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ss = alloca i32, align 4
  %sb = alloca i32, align 4
  %runningOrder = alloca [256 x i32], align 4
  %copy = alloca [256 x i32], align 4
  %bigDone = alloca [256 x i8], align 1
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  %numQSorted = alloca i32, align 4
  %vv = alloca i32, align 4
  %h = alloca i32, align 4
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %bbStart = alloca i32, align 4
  %bbSize = alloca i32, align 4
  %shifts = alloca i32, align 4
  %a2update = alloca i32, align 4
  %qVal = alloca i16, align 2
  %0 = load i32, i32* @verbosity, align 4
  %cmp = icmp sge i32 %0, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"??_C@_0BN@FMNKNGG@?5?5?5?5?5?5?5?5sort?5initialise?5?4?4?4?6?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp2 = icmp slt i32 %1, 20
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** @block, align 4
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* @last, align 4
  %add = add nsw i32 %4, 1
  %rem = srem i32 %3, %add
  %arrayidx3 = getelementptr inbounds i8, i8* %2, i32 %rem
  %5 = load i8, i8* %arrayidx3, align 1
  %6 = load i8*, i8** @block, align 4
  %7 = load i32, i32* @last, align 4
  %8 = load i32, i32* %i, align 4
  %add4 = add nsw i32 %7, %8
  %add5 = add nsw i32 %add4, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %6, i32 %add5
  store i8 %5, i8* %arrayidx6, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc12, %for.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* @last, align 4
  %add8 = add nsw i32 %11, 20
  %cmp9 = icmp sle i32 %10, %add8
  br i1 %cmp9, label %for.body10, label %for.end14

for.body10:                                       ; preds = %for.cond7
  %12 = load i16*, i16** @quadrant, align 4
  %13 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i16, i16* %12, i32 %13
  store i16 0, i16* %arrayidx11, align 2
  br label %for.inc12

for.inc12:                                        ; preds = %for.body10
  %14 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %14, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond7

for.end14:                                        ; preds = %for.cond7
  %15 = load i8*, i8** @block, align 4
  %16 = load i32, i32* @last, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %15, i32 %16
  %17 = load i8, i8* %arrayidx15, align 1
  %18 = load i8*, i8** @block, align 4
  %arrayidx16 = getelementptr inbounds i8, i8* %18, i32 -1
  store i8 %17, i8* %arrayidx16, align 1
  %19 = load i32, i32* @last, align 4
  %cmp17 = icmp slt i32 %19, 4000
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %for.end14
  %20 = load i32, i32* @verbosity, align 4
  %cmp19 = icmp sge i32 %20, 4
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %if.then18
  %call21 = call %struct._iobuf* @__iob_func()
  %arrayidx22 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call21, i32 2
  %call23 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx22, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"??_C@_0BI@GJAKMPEE@?5?5?5?5?5?5?5?5simpleSort?5?4?4?4?6?$AA@", i32 0, i32 0))
  br label %if.end24

if.end24:                                         ; preds = %if.then20, %if.then18
  store i32 0, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc29, %if.end24
  %21 = load i32, i32* %i, align 4
  %22 = load i32, i32* @last, align 4
  %cmp26 = icmp sle i32 %21, %22
  br i1 %cmp26, label %for.body27, label %for.end31

for.body27:                                       ; preds = %for.cond25
  %23 = load i32, i32* %i, align 4
  %24 = load i32*, i32** @zptr, align 4
  %25 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds i32, i32* %24, i32 %25
  store i32 %23, i32* %arrayidx28, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body27
  %26 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %26, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond25

for.end31:                                        ; preds = %for.cond25
  store i8 0, i8* @firstAttempt, align 1
  store i32 0, i32* @workLimit, align 4
  store i32 0, i32* @workDone, align 4
  %27 = load i32, i32* @last, align 4
  call void @simpleSort(i32 0, i32 %27, i32 0)
  %28 = load i32, i32* @verbosity, align 4
  %cmp32 = icmp sge i32 %28, 4
  br i1 %cmp32, label %if.then33, label %if.end37

if.then33:                                        ; preds = %for.end31
  %call34 = call %struct._iobuf* @__iob_func()
  %arrayidx35 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call34, i32 2
  %call36 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx35, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"??_C@_0BK@EIDLPDKI@?5?5?5?5?5?5?5?5simpleSort?5done?4?6?$AA@", i32 0, i32 0))
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %for.end31
  br label %if.end317

if.else:                                          ; preds = %for.end14
  store i32 0, i32* %numQSorted, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc42, %if.else
  %29 = load i32, i32* %i, align 4
  %cmp39 = icmp sle i32 %29, 255
  br i1 %cmp39, label %for.body40, label %for.end44

for.body40:                                       ; preds = %for.cond38
  %30 = load i32, i32* %i, align 4
  %arrayidx41 = getelementptr inbounds [256 x i8], [256 x i8]* %bigDone, i32 0, i32 %30
  store i8 0, i8* %arrayidx41, align 1
  br label %for.inc42

for.inc42:                                        ; preds = %for.body40
  %31 = load i32, i32* %i, align 4
  %inc43 = add nsw i32 %31, 1
  store i32 %inc43, i32* %i, align 4
  br label %for.cond38

for.end44:                                        ; preds = %for.cond38
  %32 = load i32, i32* @verbosity, align 4
  %cmp45 = icmp sge i32 %32, 4
  br i1 %cmp45, label %if.then46, label %if.end50

if.then46:                                        ; preds = %for.end44
  %call47 = call %struct._iobuf* @__iob_func()
  %arrayidx48 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call47, i32 2
  %call49 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx48, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"??_C@_0BM@MNJOLIPF@?5?5?5?5?5?5?5?5bucket?5sorting?5?4?4?4?6?$AA@", i32 0, i32 0))
  br label %if.end50

if.end50:                                         ; preds = %if.then46, %for.end44
  store i32 0, i32* %i, align 4
  br label %for.cond51

for.cond51:                                       ; preds = %for.inc55, %if.end50
  %33 = load i32, i32* %i, align 4
  %cmp52 = icmp sle i32 %33, 65536
  br i1 %cmp52, label %for.body53, label %for.end57

for.body53:                                       ; preds = %for.cond51
  %34 = load i32*, i32** @ftab, align 4
  %35 = load i32, i32* %i, align 4
  %arrayidx54 = getelementptr inbounds i32, i32* %34, i32 %35
  store i32 0, i32* %arrayidx54, align 4
  br label %for.inc55

for.inc55:                                        ; preds = %for.body53
  %36 = load i32, i32* %i, align 4
  %inc56 = add nsw i32 %36, 1
  store i32 %inc56, i32* %i, align 4
  br label %for.cond51

for.end57:                                        ; preds = %for.cond51
  %37 = load i8*, i8** @block, align 4
  %arrayidx58 = getelementptr inbounds i8, i8* %37, i32 -1
  %38 = load i8, i8* %arrayidx58, align 1
  store i8 %38, i8* %c1, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond59

for.cond59:                                       ; preds = %for.inc67, %for.end57
  %39 = load i32, i32* %i, align 4
  %40 = load i32, i32* @last, align 4
  %cmp60 = icmp sle i32 %39, %40
  br i1 %cmp60, label %for.body61, label %for.end69

for.body61:                                       ; preds = %for.cond59
  %41 = load i8*, i8** @block, align 4
  %42 = load i32, i32* %i, align 4
  %arrayidx62 = getelementptr inbounds i8, i8* %41, i32 %42
  %43 = load i8, i8* %arrayidx62, align 1
  store i8 %43, i8* %c2, align 1
  %44 = load i32*, i32** @ftab, align 4
  %45 = load i8, i8* %c1, align 1
  %conv = zext i8 %45 to i32
  %shl = shl i32 %conv, 8
  %46 = load i8, i8* %c2, align 1
  %conv63 = zext i8 %46 to i32
  %add64 = add nsw i32 %shl, %conv63
  %arrayidx65 = getelementptr inbounds i32, i32* %44, i32 %add64
  %47 = load i32, i32* %arrayidx65, align 4
  %inc66 = add nsw i32 %47, 1
  store i32 %inc66, i32* %arrayidx65, align 4
  %48 = load i8, i8* %c2, align 1
  store i8 %48, i8* %c1, align 1
  br label %for.inc67

for.inc67:                                        ; preds = %for.body61
  %49 = load i32, i32* %i, align 4
  %inc68 = add nsw i32 %49, 1
  store i32 %inc68, i32* %i, align 4
  br label %for.cond59

for.end69:                                        ; preds = %for.cond59
  store i32 1, i32* %i, align 4
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc77, %for.end69
  %50 = load i32, i32* %i, align 4
  %cmp71 = icmp sle i32 %50, 65536
  br i1 %cmp71, label %for.body73, label %for.end79

for.body73:                                       ; preds = %for.cond70
  %51 = load i32*, i32** @ftab, align 4
  %52 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %52, 1
  %arrayidx74 = getelementptr inbounds i32, i32* %51, i32 %sub
  %53 = load i32, i32* %arrayidx74, align 4
  %54 = load i32*, i32** @ftab, align 4
  %55 = load i32, i32* %i, align 4
  %arrayidx75 = getelementptr inbounds i32, i32* %54, i32 %55
  %56 = load i32, i32* %arrayidx75, align 4
  %add76 = add nsw i32 %56, %53
  store i32 %add76, i32* %arrayidx75, align 4
  br label %for.inc77

for.inc77:                                        ; preds = %for.body73
  %57 = load i32, i32* %i, align 4
  %inc78 = add nsw i32 %57, 1
  store i32 %inc78, i32* %i, align 4
  br label %for.cond70

for.end79:                                        ; preds = %for.cond70
  %58 = load i8*, i8** @block, align 4
  %arrayidx80 = getelementptr inbounds i8, i8* %58, i32 0
  %59 = load i8, i8* %arrayidx80, align 1
  store i8 %59, i8* %c1, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc94, %for.end79
  %60 = load i32, i32* %i, align 4
  %61 = load i32, i32* @last, align 4
  %cmp82 = icmp slt i32 %60, %61
  br i1 %cmp82, label %for.body84, label %for.end96

for.body84:                                       ; preds = %for.cond81
  %62 = load i8*, i8** @block, align 4
  %63 = load i32, i32* %i, align 4
  %add85 = add nsw i32 %63, 1
  %arrayidx86 = getelementptr inbounds i8, i8* %62, i32 %add85
  %64 = load i8, i8* %arrayidx86, align 1
  store i8 %64, i8* %c2, align 1
  %65 = load i8, i8* %c1, align 1
  %conv87 = zext i8 %65 to i32
  %shl88 = shl i32 %conv87, 8
  %66 = load i8, i8* %c2, align 1
  %conv89 = zext i8 %66 to i32
  %add90 = add nsw i32 %shl88, %conv89
  store i32 %add90, i32* %j, align 4
  %67 = load i8, i8* %c2, align 1
  store i8 %67, i8* %c1, align 1
  %68 = load i32*, i32** @ftab, align 4
  %69 = load i32, i32* %j, align 4
  %arrayidx91 = getelementptr inbounds i32, i32* %68, i32 %69
  %70 = load i32, i32* %arrayidx91, align 4
  %dec = add nsw i32 %70, -1
  store i32 %dec, i32* %arrayidx91, align 4
  %71 = load i32, i32* %i, align 4
  %72 = load i32*, i32** @zptr, align 4
  %73 = load i32*, i32** @ftab, align 4
  %74 = load i32, i32* %j, align 4
  %arrayidx92 = getelementptr inbounds i32, i32* %73, i32 %74
  %75 = load i32, i32* %arrayidx92, align 4
  %arrayidx93 = getelementptr inbounds i32, i32* %72, i32 %75
  store i32 %71, i32* %arrayidx93, align 4
  br label %for.inc94

for.inc94:                                        ; preds = %for.body84
  %76 = load i32, i32* %i, align 4
  %inc95 = add nsw i32 %76, 1
  store i32 %inc95, i32* %i, align 4
  br label %for.cond81

for.end96:                                        ; preds = %for.cond81
  %77 = load i8*, i8** @block, align 4
  %78 = load i32, i32* @last, align 4
  %arrayidx97 = getelementptr inbounds i8, i8* %77, i32 %78
  %79 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %79 to i32
  %shl99 = shl i32 %conv98, 8
  %80 = load i8*, i8** @block, align 4
  %arrayidx100 = getelementptr inbounds i8, i8* %80, i32 0
  %81 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %81 to i32
  %add102 = add nsw i32 %shl99, %conv101
  store i32 %add102, i32* %j, align 4
  %82 = load i32*, i32** @ftab, align 4
  %83 = load i32, i32* %j, align 4
  %arrayidx103 = getelementptr inbounds i32, i32* %82, i32 %83
  %84 = load i32, i32* %arrayidx103, align 4
  %dec104 = add nsw i32 %84, -1
  store i32 %dec104, i32* %arrayidx103, align 4
  %85 = load i32, i32* @last, align 4
  %86 = load i32*, i32** @zptr, align 4
  %87 = load i32*, i32** @ftab, align 4
  %88 = load i32, i32* %j, align 4
  %arrayidx105 = getelementptr inbounds i32, i32* %87, i32 %88
  %89 = load i32, i32* %arrayidx105, align 4
  %arrayidx106 = getelementptr inbounds i32, i32* %86, i32 %89
  store i32 %85, i32* %arrayidx106, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond107

for.cond107:                                      ; preds = %for.inc112, %for.end96
  %90 = load i32, i32* %i, align 4
  %cmp108 = icmp sle i32 %90, 255
  br i1 %cmp108, label %for.body110, label %for.end114

for.body110:                                      ; preds = %for.cond107
  %91 = load i32, i32* %i, align 4
  %92 = load i32, i32* %i, align 4
  %arrayidx111 = getelementptr inbounds [256 x i32], [256 x i32]* %runningOrder, i32 0, i32 %92
  store i32 %91, i32* %arrayidx111, align 4
  br label %for.inc112

for.inc112:                                       ; preds = %for.body110
  %93 = load i32, i32* %i, align 4
  %inc113 = add nsw i32 %93, 1
  store i32 %inc113, i32* %i, align 4
  br label %for.cond107

for.end114:                                       ; preds = %for.cond107
  store i32 1, i32* %h, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end114
  %94 = load i32, i32* %h, align 4
  %mul = mul nsw i32 3, %94
  %add115 = add nsw i32 %mul, 1
  store i32 %add115, i32* %h, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %95 = load i32, i32* %h, align 4
  %cmp116 = icmp sle i32 %95, 256
  br i1 %cmp116, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body118

do.body118:                                       ; preds = %do.cond155, %do.end
  %96 = load i32, i32* %h, align 4
  %div = sdiv i32 %96, 3
  store i32 %div, i32* %h, align 4
  %97 = load i32, i32* %h, align 4
  store i32 %97, i32* %i, align 4
  br label %for.cond119

for.cond119:                                      ; preds = %for.inc152, %do.body118
  %98 = load i32, i32* %i, align 4
  %cmp120 = icmp sle i32 %98, 255
  br i1 %cmp120, label %for.body122, label %for.end154

for.body122:                                      ; preds = %for.cond119
  %99 = load i32, i32* %i, align 4
  %arrayidx123 = getelementptr inbounds [256 x i32], [256 x i32]* %runningOrder, i32 0, i32 %99
  %100 = load i32, i32* %arrayidx123, align 4
  store i32 %100, i32* %vv, align 4
  %101 = load i32, i32* %i, align 4
  store i32 %101, i32* %j, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end150, %for.body122
  %102 = load i32*, i32** @ftab, align 4
  %103 = load i32, i32* %j, align 4
  %104 = load i32, i32* %h, align 4
  %sub124 = sub nsw i32 %103, %104
  %arrayidx125 = getelementptr inbounds [256 x i32], [256 x i32]* %runningOrder, i32 0, i32 %sub124
  %105 = load i32, i32* %arrayidx125, align 4
  %add126 = add nsw i32 %105, 1
  %shl127 = shl i32 %add126, 8
  %arrayidx128 = getelementptr inbounds i32, i32* %102, i32 %shl127
  %106 = load i32, i32* %arrayidx128, align 4
  %107 = load i32*, i32** @ftab, align 4
  %108 = load i32, i32* %j, align 4
  %109 = load i32, i32* %h, align 4
  %sub129 = sub nsw i32 %108, %109
  %arrayidx130 = getelementptr inbounds [256 x i32], [256 x i32]* %runningOrder, i32 0, i32 %sub129
  %110 = load i32, i32* %arrayidx130, align 4
  %shl131 = shl i32 %110, 8
  %arrayidx132 = getelementptr inbounds i32, i32* %107, i32 %shl131
  %111 = load i32, i32* %arrayidx132, align 4
  %sub133 = sub nsw i32 %106, %111
  %112 = load i32*, i32** @ftab, align 4
  %113 = load i32, i32* %vv, align 4
  %add134 = add nsw i32 %113, 1
  %shl135 = shl i32 %add134, 8
  %arrayidx136 = getelementptr inbounds i32, i32* %112, i32 %shl135
  %114 = load i32, i32* %arrayidx136, align 4
  %115 = load i32*, i32** @ftab, align 4
  %116 = load i32, i32* %vv, align 4
  %shl137 = shl i32 %116, 8
  %arrayidx138 = getelementptr inbounds i32, i32* %115, i32 %shl137
  %117 = load i32, i32* %arrayidx138, align 4
  %sub139 = sub nsw i32 %114, %117
  %cmp140 = icmp sgt i32 %sub133, %sub139
  br i1 %cmp140, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %118 = load i32, i32* %j, align 4
  %119 = load i32, i32* %h, align 4
  %sub142 = sub nsw i32 %118, %119
  %arrayidx143 = getelementptr inbounds [256 x i32], [256 x i32]* %runningOrder, i32 0, i32 %sub142
  %120 = load i32, i32* %arrayidx143, align 4
  %121 = load i32, i32* %j, align 4
  %arrayidx144 = getelementptr inbounds [256 x i32], [256 x i32]* %runningOrder, i32 0, i32 %121
  store i32 %120, i32* %arrayidx144, align 4
  %122 = load i32, i32* %j, align 4
  %123 = load i32, i32* %h, align 4
  %sub145 = sub nsw i32 %122, %123
  store i32 %sub145, i32* %j, align 4
  %124 = load i32, i32* %j, align 4
  %125 = load i32, i32* %h, align 4
  %sub146 = sub nsw i32 %125, 1
  %cmp147 = icmp sle i32 %124, %sub146
  br i1 %cmp147, label %if.then149, label %if.end150

if.then149:                                       ; preds = %while.body
  br label %zero

if.end150:                                        ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %zero

zero:                                             ; preds = %while.end, %if.then149
  %126 = load i32, i32* %vv, align 4
  %127 = load i32, i32* %j, align 4
  %arrayidx151 = getelementptr inbounds [256 x i32], [256 x i32]* %runningOrder, i32 0, i32 %127
  store i32 %126, i32* %arrayidx151, align 4
  br label %for.inc152

for.inc152:                                       ; preds = %zero
  %128 = load i32, i32* %i, align 4
  %inc153 = add nsw i32 %128, 1
  store i32 %inc153, i32* %i, align 4
  br label %for.cond119

for.end154:                                       ; preds = %for.cond119
  br label %do.cond155

do.cond155:                                       ; preds = %for.end154
  %129 = load i32, i32* %h, align 4
  %cmp156 = icmp ne i32 %129, 1
  br i1 %cmp156, label %do.body118, label %do.end158

do.end158:                                        ; preds = %do.cond155
  store i32 0, i32* %i, align 4
  br label %for.cond159

for.cond159:                                      ; preds = %for.inc304, %do.end158
  %130 = load i32, i32* %i, align 4
  %cmp160 = icmp sle i32 %130, 255
  br i1 %cmp160, label %for.body162, label %for.end306

for.body162:                                      ; preds = %for.cond159
  %131 = load i32, i32* %i, align 4
  %arrayidx163 = getelementptr inbounds [256 x i32], [256 x i32]* %runningOrder, i32 0, i32 %131
  %132 = load i32, i32* %arrayidx163, align 4
  store i32 %132, i32* %ss, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond164

for.cond164:                                      ; preds = %for.inc202, %for.body162
  %133 = load i32, i32* %j, align 4
  %cmp165 = icmp sle i32 %133, 255
  br i1 %cmp165, label %for.body167, label %for.end204

for.body167:                                      ; preds = %for.cond164
  %134 = load i32, i32* %ss, align 4
  %shl168 = shl i32 %134, 8
  %135 = load i32, i32* %j, align 4
  %add169 = add nsw i32 %shl168, %135
  store i32 %add169, i32* %sb, align 4
  %136 = load i32*, i32** @ftab, align 4
  %137 = load i32, i32* %sb, align 4
  %arrayidx170 = getelementptr inbounds i32, i32* %136, i32 %137
  %138 = load i32, i32* %arrayidx170, align 4
  %and = and i32 %138, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end201, label %if.then171

if.then171:                                       ; preds = %for.body167
  %139 = load i32*, i32** @ftab, align 4
  %140 = load i32, i32* %sb, align 4
  %arrayidx172 = getelementptr inbounds i32, i32* %139, i32 %140
  %141 = load i32, i32* %arrayidx172, align 4
  %and173 = and i32 %141, -2097153
  store i32 %and173, i32* %lo, align 4
  %142 = load i32*, i32** @ftab, align 4
  %143 = load i32, i32* %sb, align 4
  %add174 = add nsw i32 %143, 1
  %arrayidx175 = getelementptr inbounds i32, i32* %142, i32 %add174
  %144 = load i32, i32* %arrayidx175, align 4
  %and176 = and i32 %144, -2097153
  %sub177 = sub nsw i32 %and176, 1
  store i32 %sub177, i32* %hi, align 4
  %145 = load i32, i32* %hi, align 4
  %146 = load i32, i32* %lo, align 4
  %cmp178 = icmp sgt i32 %145, %146
  br i1 %cmp178, label %if.then180, label %if.end199

if.then180:                                       ; preds = %if.then171
  %147 = load i32, i32* @verbosity, align 4
  %cmp181 = icmp sge i32 %147, 4
  br i1 %cmp181, label %if.then183, label %if.end189

if.then183:                                       ; preds = %if.then180
  %148 = load i32, i32* %hi, align 4
  %149 = load i32, i32* %lo, align 4
  %sub184 = sub nsw i32 %148, %149
  %add185 = add nsw i32 %sub184, 1
  %150 = load i32, i32* %numQSorted, align 4
  %151 = load i32, i32* %j, align 4
  %152 = load i32, i32* %ss, align 4
  %call186 = call %struct._iobuf* @__iob_func()
  %arrayidx187 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call186, i32 2
  %call188 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx187, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @"??_C@_0DA@OFGJDDOF@?5?5?5?5?5?5?5?5qsort?5?$FL0x?$CFx?0?50x?$CFx?$FN?5?5?5don@", i32 0, i32 0), i32 %152, i32 %151, i32 %150, i32 %add185)
  br label %if.end189

if.end189:                                        ; preds = %if.then183, %if.then180
  %153 = load i32, i32* %hi, align 4
  %154 = load i32, i32* %lo, align 4
  call void @qSort3(i32 %154, i32 %153, i32 2)
  %155 = load i32, i32* %hi, align 4
  %156 = load i32, i32* %lo, align 4
  %sub190 = sub nsw i32 %155, %156
  %add191 = add nsw i32 %sub190, 1
  %157 = load i32, i32* %numQSorted, align 4
  %add192 = add nsw i32 %157, %add191
  store i32 %add192, i32* %numQSorted, align 4
  %158 = load i32, i32* @workDone, align 4
  %159 = load i32, i32* @workLimit, align 4
  %cmp193 = icmp sgt i32 %158, %159
  br i1 %cmp193, label %land.lhs.true, label %if.end198

land.lhs.true:                                    ; preds = %if.end189
  %160 = load i8, i8* @firstAttempt, align 1
  %conv195 = zext i8 %160 to i32
  %tobool196 = icmp ne i32 %conv195, 0
  br i1 %tobool196, label %if.then197, label %if.end198

if.then197:                                       ; preds = %land.lhs.true
  br label %if.end317

if.end198:                                        ; preds = %land.lhs.true, %if.end189
  br label %if.end199

if.end199:                                        ; preds = %if.end198, %if.then171
  %161 = load i32*, i32** @ftab, align 4
  %162 = load i32, i32* %sb, align 4
  %arrayidx200 = getelementptr inbounds i32, i32* %161, i32 %162
  %163 = load i32, i32* %arrayidx200, align 4
  %or = or i32 %163, 2097152
  store i32 %or, i32* %arrayidx200, align 4
  br label %if.end201

if.end201:                                        ; preds = %if.end199, %for.body167
  br label %for.inc202

for.inc202:                                       ; preds = %if.end201
  %164 = load i32, i32* %j, align 4
  %inc203 = add nsw i32 %164, 1
  store i32 %inc203, i32* %j, align 4
  br label %for.cond164

for.end204:                                       ; preds = %for.cond164
  %165 = load i32, i32* %ss, align 4
  %arrayidx205 = getelementptr inbounds [256 x i8], [256 x i8]* %bigDone, i32 0, i32 %165
  store i8 1, i8* %arrayidx205, align 1
  %166 = load i32, i32* %i, align 4
  %cmp206 = icmp slt i32 %166, 255
  br i1 %cmp206, label %if.then208, label %if.end248

if.then208:                                       ; preds = %for.end204
  %167 = load i32*, i32** @ftab, align 4
  %168 = load i32, i32* %ss, align 4
  %shl209 = shl i32 %168, 8
  %arrayidx210 = getelementptr inbounds i32, i32* %167, i32 %shl209
  %169 = load i32, i32* %arrayidx210, align 4
  %and211 = and i32 %169, -2097153
  store i32 %and211, i32* %bbStart, align 4
  %170 = load i32*, i32** @ftab, align 4
  %171 = load i32, i32* %ss, align 4
  %add212 = add nsw i32 %171, 1
  %shl213 = shl i32 %add212, 8
  %arrayidx214 = getelementptr inbounds i32, i32* %170, i32 %shl213
  %172 = load i32, i32* %arrayidx214, align 4
  %and215 = and i32 %172, -2097153
  %173 = load i32, i32* %bbStart, align 4
  %sub216 = sub nsw i32 %and215, %173
  store i32 %sub216, i32* %bbSize, align 4
  store i32 0, i32* %shifts, align 4
  br label %while.cond217

while.cond217:                                    ; preds = %while.body220, %if.then208
  %174 = load i32, i32* %bbSize, align 4
  %175 = load i32, i32* %shifts, align 4
  %shr = ashr i32 %174, %175
  %cmp218 = icmp sgt i32 %shr, 65534
  br i1 %cmp218, label %while.body220, label %while.end222

while.body220:                                    ; preds = %while.cond217
  %176 = load i32, i32* %shifts, align 4
  %inc221 = add nsw i32 %176, 1
  store i32 %inc221, i32* %shifts, align 4
  br label %while.cond217

while.end222:                                     ; preds = %while.cond217
  store i32 0, i32* %j, align 4
  br label %for.cond223

for.cond223:                                      ; preds = %for.inc239, %while.end222
  %177 = load i32, i32* %j, align 4
  %178 = load i32, i32* %bbSize, align 4
  %cmp224 = icmp slt i32 %177, %178
  br i1 %cmp224, label %for.body226, label %for.end241

for.body226:                                      ; preds = %for.cond223
  %179 = load i32*, i32** @zptr, align 4
  %180 = load i32, i32* %bbStart, align 4
  %181 = load i32, i32* %j, align 4
  %add227 = add nsw i32 %180, %181
  %arrayidx228 = getelementptr inbounds i32, i32* %179, i32 %add227
  %182 = load i32, i32* %arrayidx228, align 4
  store i32 %182, i32* %a2update, align 4
  %183 = load i32, i32* %j, align 4
  %184 = load i32, i32* %shifts, align 4
  %shr229 = ashr i32 %183, %184
  %conv230 = trunc i32 %shr229 to i16
  store i16 %conv230, i16* %qVal, align 2
  %185 = load i16, i16* %qVal, align 2
  %186 = load i16*, i16** @quadrant, align 4
  %187 = load i32, i32* %a2update, align 4
  %arrayidx231 = getelementptr inbounds i16, i16* %186, i32 %187
  store i16 %185, i16* %arrayidx231, align 2
  %188 = load i32, i32* %a2update, align 4
  %cmp232 = icmp slt i32 %188, 20
  br i1 %cmp232, label %if.then234, label %if.end238

if.then234:                                       ; preds = %for.body226
  %189 = load i16, i16* %qVal, align 2
  %190 = load i16*, i16** @quadrant, align 4
  %191 = load i32, i32* %a2update, align 4
  %192 = load i32, i32* @last, align 4
  %add235 = add nsw i32 %191, %192
  %add236 = add nsw i32 %add235, 1
  %arrayidx237 = getelementptr inbounds i16, i16* %190, i32 %add236
  store i16 %189, i16* %arrayidx237, align 2
  br label %if.end238

if.end238:                                        ; preds = %if.then234, %for.body226
  br label %for.inc239

for.inc239:                                       ; preds = %if.end238
  %193 = load i32, i32* %j, align 4
  %inc240 = add nsw i32 %193, 1
  store i32 %inc240, i32* %j, align 4
  br label %for.cond223

for.end241:                                       ; preds = %for.cond223
  %194 = load i32, i32* %bbSize, align 4
  %sub242 = sub nsw i32 %194, 1
  %195 = load i32, i32* %shifts, align 4
  %shr243 = ashr i32 %sub242, %195
  %cmp244 = icmp sle i32 %shr243, 65535
  br i1 %cmp244, label %if.end247, label %if.then246

if.then246:                                       ; preds = %for.end241
  call void @panic(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06BFOGNJGB@sortIt?$AA@", i32 0, i32 0))
  br label %if.end247

if.end247:                                        ; preds = %if.then246, %for.end241
  br label %if.end248

if.end248:                                        ; preds = %if.end247, %for.end204
  store i32 0, i32* %j, align 4
  br label %for.cond249

for.cond249:                                      ; preds = %for.inc258, %if.end248
  %196 = load i32, i32* %j, align 4
  %cmp250 = icmp sle i32 %196, 255
  br i1 %cmp250, label %for.body252, label %for.end260

for.body252:                                      ; preds = %for.cond249
  %197 = load i32*, i32** @ftab, align 4
  %198 = load i32, i32* %j, align 4
  %shl253 = shl i32 %198, 8
  %199 = load i32, i32* %ss, align 4
  %add254 = add nsw i32 %shl253, %199
  %arrayidx255 = getelementptr inbounds i32, i32* %197, i32 %add254
  %200 = load i32, i32* %arrayidx255, align 4
  %and256 = and i32 %200, -2097153
  %201 = load i32, i32* %j, align 4
  %arrayidx257 = getelementptr inbounds [256 x i32], [256 x i32]* %copy, i32 0, i32 %201
  store i32 %and256, i32* %arrayidx257, align 4
  br label %for.inc258

for.inc258:                                       ; preds = %for.body252
  %202 = load i32, i32* %j, align 4
  %inc259 = add nsw i32 %202, 1
  store i32 %inc259, i32* %j, align 4
  br label %for.cond249

for.end260:                                       ; preds = %for.cond249
  %203 = load i32*, i32** @ftab, align 4
  %204 = load i32, i32* %ss, align 4
  %shl261 = shl i32 %204, 8
  %arrayidx262 = getelementptr inbounds i32, i32* %203, i32 %shl261
  %205 = load i32, i32* %arrayidx262, align 4
  %and263 = and i32 %205, -2097153
  store i32 %and263, i32* %j, align 4
  br label %for.cond264

for.cond264:                                      ; preds = %for.inc290, %for.end260
  %206 = load i32, i32* %j, align 4
  %207 = load i32*, i32** @ftab, align 4
  %208 = load i32, i32* %ss, align 4
  %add265 = add nsw i32 %208, 1
  %shl266 = shl i32 %add265, 8
  %arrayidx267 = getelementptr inbounds i32, i32* %207, i32 %shl266
  %209 = load i32, i32* %arrayidx267, align 4
  %and268 = and i32 %209, -2097153
  %cmp269 = icmp slt i32 %206, %and268
  br i1 %cmp269, label %for.body271, label %for.end292

for.body271:                                      ; preds = %for.cond264
  %210 = load i8*, i8** @block, align 4
  %211 = load i32*, i32** @zptr, align 4
  %212 = load i32, i32* %j, align 4
  %arrayidx272 = getelementptr inbounds i32, i32* %211, i32 %212
  %213 = load i32, i32* %arrayidx272, align 4
  %sub273 = sub nsw i32 %213, 1
  %arrayidx274 = getelementptr inbounds i8, i8* %210, i32 %sub273
  %214 = load i8, i8* %arrayidx274, align 1
  store i8 %214, i8* %c1, align 1
  %215 = load i8, i8* %c1, align 1
  %idxprom = zext i8 %215 to i32
  %arrayidx275 = getelementptr inbounds [256 x i8], [256 x i8]* %bigDone, i32 0, i32 %idxprom
  %216 = load i8, i8* %arrayidx275, align 1
  %tobool276 = icmp ne i8 %216, 0
  br i1 %tobool276, label %if.end289, label %if.then277

if.then277:                                       ; preds = %for.body271
  %217 = load i32*, i32** @zptr, align 4
  %218 = load i32, i32* %j, align 4
  %arrayidx278 = getelementptr inbounds i32, i32* %217, i32 %218
  %219 = load i32, i32* %arrayidx278, align 4
  %cmp279 = icmp eq i32 %219, 0
  br i1 %cmp279, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then277
  %220 = load i32, i32* @last, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then277
  %221 = load i32*, i32** @zptr, align 4
  %222 = load i32, i32* %j, align 4
  %arrayidx281 = getelementptr inbounds i32, i32* %221, i32 %222
  %223 = load i32, i32* %arrayidx281, align 4
  %sub282 = sub nsw i32 %223, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %220, %cond.true ], [ %sub282, %cond.false ]
  %224 = load i32*, i32** @zptr, align 4
  %225 = load i8, i8* %c1, align 1
  %idxprom283 = zext i8 %225 to i32
  %arrayidx284 = getelementptr inbounds [256 x i32], [256 x i32]* %copy, i32 0, i32 %idxprom283
  %226 = load i32, i32* %arrayidx284, align 4
  %arrayidx285 = getelementptr inbounds i32, i32* %224, i32 %226
  store i32 %cond, i32* %arrayidx285, align 4
  %227 = load i8, i8* %c1, align 1
  %idxprom286 = zext i8 %227 to i32
  %arrayidx287 = getelementptr inbounds [256 x i32], [256 x i32]* %copy, i32 0, i32 %idxprom286
  %228 = load i32, i32* %arrayidx287, align 4
  %inc288 = add nsw i32 %228, 1
  store i32 %inc288, i32* %arrayidx287, align 4
  br label %if.end289

if.end289:                                        ; preds = %cond.end, %for.body271
  br label %for.inc290

for.inc290:                                       ; preds = %if.end289
  %229 = load i32, i32* %j, align 4
  %inc291 = add nsw i32 %229, 1
  store i32 %inc291, i32* %j, align 4
  br label %for.cond264

for.end292:                                       ; preds = %for.cond264
  store i32 0, i32* %j, align 4
  br label %for.cond293

for.cond293:                                      ; preds = %for.inc301, %for.end292
  %230 = load i32, i32* %j, align 4
  %cmp294 = icmp sle i32 %230, 255
  br i1 %cmp294, label %for.body296, label %for.end303

for.body296:                                      ; preds = %for.cond293
  %231 = load i32*, i32** @ftab, align 4
  %232 = load i32, i32* %j, align 4
  %shl297 = shl i32 %232, 8
  %233 = load i32, i32* %ss, align 4
  %add298 = add nsw i32 %shl297, %233
  %arrayidx299 = getelementptr inbounds i32, i32* %231, i32 %add298
  %234 = load i32, i32* %arrayidx299, align 4
  %or300 = or i32 %234, 2097152
  store i32 %or300, i32* %arrayidx299, align 4
  br label %for.inc301

for.inc301:                                       ; preds = %for.body296
  %235 = load i32, i32* %j, align 4
  %inc302 = add nsw i32 %235, 1
  store i32 %inc302, i32* %j, align 4
  br label %for.cond293

for.end303:                                       ; preds = %for.cond293
  br label %for.inc304

for.inc304:                                       ; preds = %for.end303
  %236 = load i32, i32* %i, align 4
  %inc305 = add nsw i32 %236, 1
  store i32 %inc305, i32* %i, align 4
  br label %for.cond159

for.end306:                                       ; preds = %for.cond159
  %237 = load i32, i32* @verbosity, align 4
  %cmp307 = icmp sge i32 %237, 4
  br i1 %cmp307, label %if.then309, label %if.end316

if.then309:                                       ; preds = %for.end306
  %238 = load i32, i32* @last, align 4
  %add310 = add nsw i32 %238, 1
  %239 = load i32, i32* %numQSorted, align 4
  %sub311 = sub nsw i32 %add310, %239
  %240 = load i32, i32* %numQSorted, align 4
  %241 = load i32, i32* @last, align 4
  %add312 = add nsw i32 %241, 1
  %call313 = call %struct._iobuf* @__iob_func()
  %arrayidx314 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call313, i32 2
  %call315 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx314, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @"??_C@_0CM@BLJANJDD@?5?5?5?5?5?5?5?5?$CFd?5pointers?0?5?$CFd?5sorted?0?5@", i32 0, i32 0), i32 %add312, i32 %240, i32 %sub311)
  br label %if.end316

if.end316:                                        ; preds = %if.then309, %for.end306
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %if.then197, %if.end37
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @randomiseBlock() #0 {
entry:
  %i = alloca i32, align 4
  %rNToGo = alloca i32, align 4
  %rTPos = alloca i32, align 4
  store i32 0, i32* %rNToGo, align 4
  store i32 0, i32* %rTPos, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc15, %for.end
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* @last, align 4
  %cmp2 = icmp sle i32 %3, %4
  br i1 %cmp2, label %for.body3, label %for.end17

for.body3:                                        ; preds = %for.cond1
  %5 = load i32, i32* %rNToGo, align 4
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %if.then, label %if.end9

if.then:                                          ; preds = %for.body3
  %6 = load i32, i32* %rTPos, align 4
  %arrayidx5 = getelementptr inbounds [512 x i32], [512 x i32]* @rNums, i32 0, i32 %6
  %7 = load i32, i32* %arrayidx5, align 4
  store i32 %7, i32* %rNToGo, align 4
  %8 = load i32, i32* %rTPos, align 4
  %inc6 = add nsw i32 %8, 1
  store i32 %inc6, i32* %rTPos, align 4
  %9 = load i32, i32* %rTPos, align 4
  %cmp7 = icmp eq i32 %9, 512
  br i1 %cmp7, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then
  store i32 0, i32* %rTPos, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %for.body3
  %10 = load i32, i32* %rNToGo, align 4
  %dec = add nsw i32 %10, -1
  store i32 %dec, i32* %rNToGo, align 4
  %11 = load i32, i32* %rNToGo, align 4
  %cmp10 = icmp eq i32 %11, 1
  %12 = zext i1 %cmp10 to i64
  %cond = select i1 %cmp10, i32 1, i32 0
  %13 = load i8*, i8** @block, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx11, align 1
  %conv = zext i8 %15 to i32
  %xor = xor i32 %conv, %cond
  %conv12 = trunc i32 %xor to i8
  store i8 %conv12, i8* %arrayidx11, align 1
  %16 = load i8*, i8** @block, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %16, i32 %17
  %18 = load i8, i8* %arrayidx13, align 1
  %idxprom = zext i8 %18 to i32
  %arrayidx14 = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %idxprom
  store i8 1, i8* %arrayidx14, align 1
  br label %for.inc15

for.inc15:                                        ; preds = %if.end9
  %19 = load i32, i32* %i, align 4
  %inc16 = add nsw i32 %19, 1
  store i32 %inc16, i32* %i, align 4
  br label %for.cond1

for.end17:                                        ; preds = %for.cond1
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @doReversibleTransformation() #1 {
entry:
  %i = alloca i32, align 4
  %0 = load i32, i32* @verbosity, align 4
  %cmp = icmp sge i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @workFactor, align 4
  %2 = load i32, i32* @last, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* @workLimit, align 4
  store i32 0, i32* @workDone, align 4
  store i8 0, i8* @blockRandomised, align 1
  store i8 1, i8* @firstAttempt, align 1
  call void @sortIt()
  %3 = load i32, i32* @verbosity, align 4
  %cmp2 = icmp sge i32 %3, 3
  br i1 %cmp2, label %if.then3, label %if.end9

if.then3:                                         ; preds = %if.end
  %4 = load i32, i32* @workDone, align 4
  %conv = sitofp i32 %4 to float
  %5 = load i32, i32* @last, align 4
  %conv4 = sitofp i32 %5 to float
  %div = fdiv float %conv, %conv4
  %conv5 = fpext float %div to double
  %6 = load i32, i32* @last, align 4
  %7 = load i32, i32* @workDone, align 4
  %call6 = call %struct._iobuf* @__iob_func()
  %arrayidx7 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call6, i32 2
  %call8 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx7, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"??_C@_0CG@LHABOPOK@?5?5?5?5?5?5?$CFd?5work?0?5?$CFd?5block?0?5ratio?5?$CF@", i32 0, i32 0), i32 %7, i32 %6, double %conv5)
  br label %if.end9

if.end9:                                          ; preds = %if.then3, %if.end
  %8 = load i32, i32* @workDone, align 4
  %9 = load i32, i32* @workLimit, align 4
  %cmp10 = icmp sgt i32 %8, %9
  br i1 %cmp10, label %land.lhs.true, label %if.end32

land.lhs.true:                                    ; preds = %if.end9
  %10 = load i8, i8* @firstAttempt, align 1
  %conv12 = zext i8 %10 to i32
  %tobool = icmp ne i32 %conv12, 0
  br i1 %tobool, label %if.then13, label %if.end32

if.then13:                                        ; preds = %land.lhs.true
  %11 = load i32, i32* @verbosity, align 4
  %cmp14 = icmp sge i32 %11, 2
  br i1 %cmp14, label %if.then16, label %if.end20

if.then16:                                        ; preds = %if.then13
  %call17 = call %struct._iobuf* @__iob_func()
  %arrayidx18 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call17, i32 2
  %call19 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx18, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"??_C@_0CI@BAMFFDEN@?5?5?5?5sorting?5aborted?$DL?5randomising@", i32 0, i32 0))
  br label %if.end20

if.end20:                                         ; preds = %if.then16, %if.then13
  call void @randomiseBlock()
  store i32 0, i32* @workDone, align 4
  store i32 0, i32* @workLimit, align 4
  store i8 1, i8* @blockRandomised, align 1
  store i8 0, i8* @firstAttempt, align 1
  call void @sortIt()
  %12 = load i32, i32* @verbosity, align 4
  %cmp21 = icmp sge i32 %12, 3
  br i1 %cmp21, label %if.then23, label %if.end31

if.then23:                                        ; preds = %if.end20
  %13 = load i32, i32* @workDone, align 4
  %conv24 = sitofp i32 %13 to float
  %14 = load i32, i32* @last, align 4
  %conv25 = sitofp i32 %14 to float
  %div26 = fdiv float %conv24, %conv25
  %conv27 = fpext float %div26 to double
  %15 = load i32, i32* @last, align 4
  %16 = load i32, i32* @workDone, align 4
  %call28 = call %struct._iobuf* @__iob_func()
  %arrayidx29 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call28, i32 2
  %call30 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx29, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"??_C@_0CD@GFOAHPIL@?5?5?5?5?5?5?$CFd?5work?0?5?$CFd?5block?0?5ratio?5?$CF@", i32 0, i32 0), i32 %16, i32 %15, double %conv27)
  br label %if.end31

if.end31:                                         ; preds = %if.then23, %if.end20
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %land.lhs.true, %if.end9
  store i32 -1, i32* @origPtr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end32
  %17 = load i32, i32* %i, align 4
  %18 = load i32, i32* @last, align 4
  %cmp33 = icmp sle i32 %17, %18
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i32*, i32** @zptr, align 4
  %20 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds i32, i32* %19, i32 %20
  %21 = load i32, i32* %arrayidx35, align 4
  %cmp36 = icmp eq i32 %21, 0
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %for.body
  %22 = load i32, i32* %i, align 4
  store i32 %22, i32* @origPtr, align 4
  br label %for.end

if.end39:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end39
  %23 = load i32, i32* %i, align 4
  %inc = add nsw i32 %23, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then38, %for.cond
  %24 = load i32, i32* @origPtr, align 4
  %cmp40 = icmp eq i32 %24, -1
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %for.end
  call void @panic(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"??_C@_0BL@LDLCMJGO@doReversibleTransformation?$AA@", i32 0, i32 0))
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %for.end
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local i32 @indexIntoF(i32 %indx, i32* %cftab) #0 {
entry:
  %cftab.addr = alloca i32*, align 4
  %indx.addr = alloca i32, align 4
  %nb = alloca i32, align 4
  %na = alloca i32, align 4
  %mid = alloca i32, align 4
  store i32* %cftab, i32** %cftab.addr, align 4
  store i32 %indx, i32* %indx.addr, align 4
  store i32 0, i32* %nb, align 4
  store i32 256, i32* %na, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32, i32* %nb, align 4
  %1 = load i32, i32* %na, align 4
  %add = add nsw i32 %0, %1
  %shr = ashr i32 %add, 1
  store i32 %shr, i32* %mid, align 4
  %2 = load i32, i32* %indx.addr, align 4
  %3 = load i32*, i32** %cftab.addr, align 4
  %4 = load i32, i32* %mid, align 4
  %arrayidx = getelementptr inbounds i32, i32* %3, i32 %4
  %5 = load i32, i32* %arrayidx, align 4
  %cmp = icmp sge i32 %2, %5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %6 = load i32, i32* %mid, align 4
  store i32 %6, i32* %nb, align 4
  br label %if.end

if.else:                                          ; preds = %do.body
  %7 = load i32, i32* %mid, align 4
  store i32 %7, i32* %na, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %8 = load i32, i32* %na, align 4
  %9 = load i32, i32* %nb, align 4
  %sub = sub nsw i32 %8, %9
  %cmp1 = icmp ne i32 %sub, 1
  br i1 %cmp1, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %10 = load i32, i32* %nb, align 4
  ret i32 %10
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @undoReversibleTransformation_small(i32 %dst) #1 {
entry:
  %dst.addr = alloca i32, align 4
  %cftab = alloca [257 x i32], align 4
  %cftabAlso = alloca [257 x i32], align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tPos = alloca i32, align 4
  %ch = alloca i8, align 1
  %retVal = alloca i32, align 4
  %i2 = alloca i32, align 4
  %count = alloca i32, align 4
  %chPrev = alloca i32, align 4
  %ch2 = alloca i32, align 4
  %localCrc = alloca i32, align 4
  %rNToGo = alloca i32, align 4
  %rTPos = alloca i32, align 4
  %j2 = alloca i32, align 4
  %z = alloca i8, align 1
  store i32 %dst, i32* %dst.addr, align 4
  %arrayidx = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 0
  store i32 0, i32* %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %1, 1
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @unzftab, i32 0, i32 %sub
  %2 = load i32, i32* %arrayidx1, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %3
  store i32 %2, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp4 = icmp sle i32 %5, 256
  br i1 %cmp4, label %for.body5, label %for.end11

for.body5:                                        ; preds = %for.cond3
  %6 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %6, 1
  %arrayidx7 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %sub6
  %7 = load i32, i32* %arrayidx7, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx8, align 4
  %add = add nsw i32 %9, %7
  store i32 %add, i32* %arrayidx8, align 4
  br label %for.inc9

for.inc9:                                         ; preds = %for.body5
  %10 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %10, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc17, %for.end11
  %11 = load i32, i32* %i, align 4
  %cmp13 = icmp sle i32 %11, 256
  br i1 %cmp13, label %for.body14, label %for.end19

for.body14:                                       ; preds = %for.cond12
  %12 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %12
  %13 = load i32, i32* %arrayidx15, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx16 = getelementptr inbounds [257 x i32], [257 x i32]* %cftabAlso, i32 0, i32 %14
  store i32 %13, i32* %arrayidx16, align 4
  br label %for.inc17

for.inc17:                                        ; preds = %for.body14
  %15 = load i32, i32* %i, align 4
  %inc18 = add nsw i32 %15, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond12

for.end19:                                        ; preds = %for.cond12
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc53, %for.end19
  %16 = load i32, i32* %i, align 4
  %17 = load i32, i32* @last, align 4
  %cmp21 = icmp sle i32 %16, %17
  br i1 %cmp21, label %for.body22, label %for.end55

for.body22:                                       ; preds = %for.cond20
  %18 = load i16*, i16** @ll16, align 4
  %19 = load i32, i32* %i, align 4
  %arrayidx23 = getelementptr inbounds i16, i16* %18, i32 %19
  %20 = load i16, i16* %arrayidx23, align 2
  %conv = trunc i16 %20 to i8
  store i8 %conv, i8* %ch, align 1
  %21 = load i8, i8* %ch, align 1
  %idxprom = zext i8 %21 to i32
  %arrayidx24 = getelementptr inbounds [257 x i32], [257 x i32]* %cftabAlso, i32 0, i32 %idxprom
  %22 = load i32, i32* %arrayidx24, align 4
  %and = and i32 %22, 65535
  %conv25 = trunc i32 %and to i16
  %23 = load i16*, i16** @ll16, align 4
  %24 = load i32, i32* %i, align 4
  %arrayidx26 = getelementptr inbounds i16, i16* %23, i32 %24
  store i16 %conv25, i16* %arrayidx26, align 2
  %25 = load i32, i32* %i, align 4
  %and27 = and i32 %25, 1
  %cmp28 = icmp eq i32 %and27, 0
  br i1 %cmp28, label %if.then, label %if.else

if.then:                                          ; preds = %for.body22
  %26 = load i8*, i8** @ll4, align 4
  %27 = load i32, i32* %i, align 4
  %shr = ashr i32 %27, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %26, i32 %shr
  %28 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %28 to i32
  %and32 = and i32 %conv31, 240
  %29 = load i8, i8* %ch, align 1
  %idxprom33 = zext i8 %29 to i32
  %arrayidx34 = getelementptr inbounds [257 x i32], [257 x i32]* %cftabAlso, i32 0, i32 %idxprom33
  %30 = load i32, i32* %arrayidx34, align 4
  %shr35 = ashr i32 %30, 16
  %or = or i32 %and32, %shr35
  %conv36 = trunc i32 %or to i8
  %31 = load i8*, i8** @ll4, align 4
  %32 = load i32, i32* %i, align 4
  %shr37 = ashr i32 %32, 1
  %arrayidx38 = getelementptr inbounds i8, i8* %31, i32 %shr37
  store i8 %conv36, i8* %arrayidx38, align 1
  br label %if.end

if.else:                                          ; preds = %for.body22
  %33 = load i8*, i8** @ll4, align 4
  %34 = load i32, i32* %i, align 4
  %shr39 = ashr i32 %34, 1
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i32 %shr39
  %35 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %35 to i32
  %and42 = and i32 %conv41, 15
  %36 = load i8, i8* %ch, align 1
  %idxprom43 = zext i8 %36 to i32
  %arrayidx44 = getelementptr inbounds [257 x i32], [257 x i32]* %cftabAlso, i32 0, i32 %idxprom43
  %37 = load i32, i32* %arrayidx44, align 4
  %shr45 = ashr i32 %37, 16
  %shl = shl i32 %shr45, 4
  %or46 = or i32 %and42, %shl
  %conv47 = trunc i32 %or46 to i8
  %38 = load i8*, i8** @ll4, align 4
  %39 = load i32, i32* %i, align 4
  %shr48 = ashr i32 %39, 1
  %arrayidx49 = getelementptr inbounds i8, i8* %38, i32 %shr48
  store i8 %conv47, i8* %arrayidx49, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %40 = load i8, i8* %ch, align 1
  %idxprom50 = zext i8 %40 to i32
  %arrayidx51 = getelementptr inbounds [257 x i32], [257 x i32]* %cftabAlso, i32 0, i32 %idxprom50
  %41 = load i32, i32* %arrayidx51, align 4
  %inc52 = add nsw i32 %41, 1
  store i32 %inc52, i32* %arrayidx51, align 4
  br label %for.inc53

for.inc53:                                        ; preds = %if.end
  %42 = load i32, i32* %i, align 4
  %inc54 = add nsw i32 %42, 1
  store i32 %inc54, i32* %i, align 4
  br label %for.cond20

for.end55:                                        ; preds = %for.cond20
  %43 = load i32, i32* @origPtr, align 4
  store i32 %43, i32* %i, align 4
  %44 = load i16*, i16** @ll16, align 4
  %45 = load i32, i32* %i, align 4
  %arrayidx56 = getelementptr inbounds i16, i16* %44, i32 %45
  %46 = load i16, i16* %arrayidx56, align 2
  %conv57 = zext i16 %46 to i32
  %47 = load i8*, i8** @ll4, align 4
  %48 = load i32, i32* %i, align 4
  %shr58 = ashr i32 %48, 1
  %arrayidx59 = getelementptr inbounds i8, i8* %47, i32 %shr58
  %49 = load i8, i8* %arrayidx59, align 1
  %conv60 = zext i8 %49 to i32
  %50 = load i32, i32* %i, align 4
  %shl61 = shl i32 %50, 2
  %and62 = and i32 %shl61, 4
  %shr63 = lshr i32 %conv60, %and62
  %and64 = and i32 %shr63, 15
  %shl65 = shl i32 %and64, 16
  %or66 = or i32 %conv57, %shl65
  store i32 %or66, i32* %j, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.end55
  %51 = load i16*, i16** @ll16, align 4
  %52 = load i32, i32* %j, align 4
  %arrayidx67 = getelementptr inbounds i16, i16* %51, i32 %52
  %53 = load i16, i16* %arrayidx67, align 2
  %conv68 = zext i16 %53 to i32
  %54 = load i8*, i8** @ll4, align 4
  %55 = load i32, i32* %j, align 4
  %shr69 = ashr i32 %55, 1
  %arrayidx70 = getelementptr inbounds i8, i8* %54, i32 %shr69
  %56 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %56 to i32
  %57 = load i32, i32* %j, align 4
  %shl72 = shl i32 %57, 2
  %and73 = and i32 %shl72, 4
  %shr74 = lshr i32 %conv71, %and73
  %and75 = and i32 %shr74, 15
  %shl76 = shl i32 %and75, 16
  %or77 = or i32 %conv68, %shl76
  store i32 %or77, i32* %tmp, align 4
  %58 = load i32, i32* %i, align 4
  %and78 = and i32 %58, 65535
  %conv79 = trunc i32 %and78 to i16
  %59 = load i16*, i16** @ll16, align 4
  %60 = load i32, i32* %j, align 4
  %arrayidx80 = getelementptr inbounds i16, i16* %59, i32 %60
  store i16 %conv79, i16* %arrayidx80, align 2
  %61 = load i32, i32* %j, align 4
  %and81 = and i32 %61, 1
  %cmp82 = icmp eq i32 %and81, 0
  br i1 %cmp82, label %if.then84, label %if.else94

if.then84:                                        ; preds = %do.body
  %62 = load i8*, i8** @ll4, align 4
  %63 = load i32, i32* %j, align 4
  %shr85 = ashr i32 %63, 1
  %arrayidx86 = getelementptr inbounds i8, i8* %62, i32 %shr85
  %64 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %64 to i32
  %and88 = and i32 %conv87, 240
  %65 = load i32, i32* %i, align 4
  %shr89 = ashr i32 %65, 16
  %or90 = or i32 %and88, %shr89
  %conv91 = trunc i32 %or90 to i8
  %66 = load i8*, i8** @ll4, align 4
  %67 = load i32, i32* %j, align 4
  %shr92 = ashr i32 %67, 1
  %arrayidx93 = getelementptr inbounds i8, i8* %66, i32 %shr92
  store i8 %conv91, i8* %arrayidx93, align 1
  br label %if.end105

if.else94:                                        ; preds = %do.body
  %68 = load i8*, i8** @ll4, align 4
  %69 = load i32, i32* %j, align 4
  %shr95 = ashr i32 %69, 1
  %arrayidx96 = getelementptr inbounds i8, i8* %68, i32 %shr95
  %70 = load i8, i8* %arrayidx96, align 1
  %conv97 = zext i8 %70 to i32
  %and98 = and i32 %conv97, 15
  %71 = load i32, i32* %i, align 4
  %shr99 = ashr i32 %71, 16
  %shl100 = shl i32 %shr99, 4
  %or101 = or i32 %and98, %shl100
  %conv102 = trunc i32 %or101 to i8
  %72 = load i8*, i8** @ll4, align 4
  %73 = load i32, i32* %j, align 4
  %shr103 = ashr i32 %73, 1
  %arrayidx104 = getelementptr inbounds i8, i8* %72, i32 %shr103
  store i8 %conv102, i8* %arrayidx104, align 1
  br label %if.end105

if.end105:                                        ; preds = %if.else94, %if.then84
  %74 = load i32, i32* %j, align 4
  store i32 %74, i32* %i, align 4
  %75 = load i32, i32* %tmp, align 4
  store i32 %75, i32* %j, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end105
  %76 = load i32, i32* %i, align 4
  %77 = load i32, i32* @origPtr, align 4
  %cmp106 = icmp ne i32 %76, %77
  br i1 %cmp106, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %78 = load i32, i32* @origPtr, align 4
  store i32 %78, i32* %tPos, align 4
  store i32 0, i32* %count, align 4
  store i32 0, i32* %i2, align 4
  store i32 256, i32* %ch2, align 4
  %call = call i32 @getGlobalCRC()
  store i32 %call, i32* %localCrc, align 4
  store i32 0, i32* %rNToGo, align 4
  store i32 0, i32* %rTPos, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end213, %do.end
  %79 = load i32, i32* %i2, align 4
  %80 = load i32, i32* @last, align 4
  %cmp108 = icmp sle i32 %79, %80
  br i1 %cmp108, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %81 = load i32, i32* %ch2, align 4
  store i32 %81, i32* %chPrev, align 4
  %arraydecay = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 0
  %82 = load i32, i32* %tPos, align 4
  %call110 = call i32 @indexIntoF(i32 %82, i32* %arraydecay)
  store i32 %call110, i32* %ch2, align 4
  %83 = load i16*, i16** @ll16, align 4
  %84 = load i32, i32* %tPos, align 4
  %arrayidx111 = getelementptr inbounds i16, i16* %83, i32 %84
  %85 = load i16, i16* %arrayidx111, align 2
  %conv112 = zext i16 %85 to i32
  %86 = load i8*, i8** @ll4, align 4
  %87 = load i32, i32* %tPos, align 4
  %shr113 = ashr i32 %87, 1
  %arrayidx114 = getelementptr inbounds i8, i8* %86, i32 %shr113
  %88 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %88 to i32
  %89 = load i32, i32* %tPos, align 4
  %shl116 = shl i32 %89, 2
  %and117 = and i32 %shl116, 4
  %shr118 = lshr i32 %conv115, %and117
  %and119 = and i32 %shr118, 15
  %shl120 = shl i32 %and119, 16
  %or121 = or i32 %conv112, %shl120
  store i32 %or121, i32* %tPos, align 4
  %90 = load i8, i8* @blockRandomised, align 1
  %tobool = icmp ne i8 %90, 0
  br i1 %tobool, label %if.then122, label %if.end135

if.then122:                                       ; preds = %while.body
  %91 = load i32, i32* %rNToGo, align 4
  %cmp123 = icmp eq i32 %91, 0
  br i1 %cmp123, label %if.then125, label %if.end132

if.then125:                                       ; preds = %if.then122
  %92 = load i32, i32* %rTPos, align 4
  %arrayidx126 = getelementptr inbounds [512 x i32], [512 x i32]* @rNums, i32 0, i32 %92
  %93 = load i32, i32* %arrayidx126, align 4
  store i32 %93, i32* %rNToGo, align 4
  %94 = load i32, i32* %rTPos, align 4
  %inc127 = add nsw i32 %94, 1
  store i32 %inc127, i32* %rTPos, align 4
  %95 = load i32, i32* %rTPos, align 4
  %cmp128 = icmp eq i32 %95, 512
  br i1 %cmp128, label %if.then130, label %if.end131

if.then130:                                       ; preds = %if.then125
  store i32 0, i32* %rTPos, align 4
  br label %if.end131

if.end131:                                        ; preds = %if.then130, %if.then125
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.then122
  %96 = load i32, i32* %rNToGo, align 4
  %dec = add nsw i32 %96, -1
  store i32 %dec, i32* %rNToGo, align 4
  %97 = load i32, i32* %rNToGo, align 4
  %cmp133 = icmp eq i32 %97, 1
  %98 = zext i1 %cmp133 to i64
  %cond = select i1 %cmp133, i32 1, i32 0
  %99 = load i32, i32* %ch2, align 4
  %xor = xor i32 %99, %cond
  store i32 %xor, i32* %ch2, align 4
  br label %if.end135

if.end135:                                        ; preds = %if.end132, %while.body
  %100 = load i32, i32* %i2, align 4
  %inc136 = add nsw i32 %100, 1
  store i32 %inc136, i32* %i2, align 4
  %101 = load i32, i32* %dst.addr, align 4
  %tobool137 = icmp ne i32 %101, 0
  br i1 %tobool137, label %if.then138, label %if.end141

if.then138:                                       ; preds = %if.end135
  %102 = load i32, i32* %dst.addr, align 4
  %103 = load i32, i32* %ch2, align 4
  %conv139 = trunc i32 %103 to i8
  %call140 = call i32 @spec_putc(i8 zeroext %conv139, i32 %102)
  store i32 %call140, i32* %retVal, align 4
  br label %if.end141

if.end141:                                        ; preds = %if.then138, %if.end135
  %104 = load i32, i32* %localCrc, align 4
  %shl142 = shl i32 %104, 8
  %105 = load i32, i32* %localCrc, align 4
  %shr143 = lshr i32 %105, 24
  %106 = load i32, i32* %ch2, align 4
  %conv144 = trunc i32 %106 to i8
  %conv145 = zext i8 %conv144 to i32
  %xor146 = xor i32 %shr143, %conv145
  %arrayidx147 = getelementptr inbounds [256 x i32], [256 x i32]* @crc32Table, i32 0, i32 %xor146
  %107 = load i32, i32* %arrayidx147, align 4
  %xor148 = xor i32 %shl142, %107
  store i32 %xor148, i32* %localCrc, align 4
  %108 = load i32, i32* %ch2, align 4
  %109 = load i32, i32* %chPrev, align 4
  %cmp149 = icmp ne i32 %108, %109
  br i1 %cmp149, label %if.then151, label %if.else152

if.then151:                                       ; preds = %if.end141
  store i32 1, i32* %count, align 4
  br label %if.end213

if.else152:                                       ; preds = %if.end141
  %110 = load i32, i32* %count, align 4
  %inc153 = add nsw i32 %110, 1
  store i32 %inc153, i32* %count, align 4
  %111 = load i32, i32* %count, align 4
  %cmp154 = icmp sge i32 %111, 4
  br i1 %cmp154, label %if.then156, label %if.end212

if.then156:                                       ; preds = %if.else152
  %arraydecay157 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 0
  %112 = load i32, i32* %tPos, align 4
  %call158 = call i32 @indexIntoF(i32 %112, i32* %arraydecay157)
  %conv159 = trunc i32 %call158 to i8
  store i8 %conv159, i8* %z, align 1
  %113 = load i16*, i16** @ll16, align 4
  %114 = load i32, i32* %tPos, align 4
  %arrayidx160 = getelementptr inbounds i16, i16* %113, i32 %114
  %115 = load i16, i16* %arrayidx160, align 2
  %conv161 = zext i16 %115 to i32
  %116 = load i8*, i8** @ll4, align 4
  %117 = load i32, i32* %tPos, align 4
  %shr162 = ashr i32 %117, 1
  %arrayidx163 = getelementptr inbounds i8, i8* %116, i32 %shr162
  %118 = load i8, i8* %arrayidx163, align 1
  %conv164 = zext i8 %118 to i32
  %119 = load i32, i32* %tPos, align 4
  %shl165 = shl i32 %119, 2
  %and166 = and i32 %shl165, 4
  %shr167 = lshr i32 %conv164, %and166
  %and168 = and i32 %shr167, 15
  %shl169 = shl i32 %and168, 16
  %or170 = or i32 %conv161, %shl169
  store i32 %or170, i32* %tPos, align 4
  %120 = load i8, i8* @blockRandomised, align 1
  %tobool171 = icmp ne i8 %120, 0
  br i1 %tobool171, label %if.then172, label %if.end190

if.then172:                                       ; preds = %if.then156
  %121 = load i32, i32* %rNToGo, align 4
  %cmp173 = icmp eq i32 %121, 0
  br i1 %cmp173, label %if.then175, label %if.end182

if.then175:                                       ; preds = %if.then172
  %122 = load i32, i32* %rTPos, align 4
  %arrayidx176 = getelementptr inbounds [512 x i32], [512 x i32]* @rNums, i32 0, i32 %122
  %123 = load i32, i32* %arrayidx176, align 4
  store i32 %123, i32* %rNToGo, align 4
  %124 = load i32, i32* %rTPos, align 4
  %inc177 = add nsw i32 %124, 1
  store i32 %inc177, i32* %rTPos, align 4
  %125 = load i32, i32* %rTPos, align 4
  %cmp178 = icmp eq i32 %125, 512
  br i1 %cmp178, label %if.then180, label %if.end181

if.then180:                                       ; preds = %if.then175
  store i32 0, i32* %rTPos, align 4
  br label %if.end181

if.end181:                                        ; preds = %if.then180, %if.then175
  br label %if.end182

if.end182:                                        ; preds = %if.end181, %if.then172
  %126 = load i32, i32* %rNToGo, align 4
  %dec183 = add nsw i32 %126, -1
  store i32 %dec183, i32* %rNToGo, align 4
  %127 = load i32, i32* %rNToGo, align 4
  %cmp184 = icmp eq i32 %127, 1
  %128 = zext i1 %cmp184 to i64
  %cond186 = select i1 %cmp184, i32 1, i32 0
  %129 = load i8, i8* %z, align 1
  %conv187 = zext i8 %129 to i32
  %xor188 = xor i32 %conv187, %cond186
  %conv189 = trunc i32 %xor188 to i8
  store i8 %conv189, i8* %z, align 1
  br label %if.end190

if.end190:                                        ; preds = %if.end182, %if.then156
  store i32 0, i32* %j2, align 4
  br label %for.cond191

for.cond191:                                      ; preds = %for.inc208, %if.end190
  %130 = load i32, i32* %j2, align 4
  %131 = load i8, i8* %z, align 1
  %conv192 = zext i8 %131 to i32
  %cmp193 = icmp slt i32 %130, %conv192
  br i1 %cmp193, label %for.body195, label %for.end210

for.body195:                                      ; preds = %for.cond191
  %132 = load i32, i32* %dst.addr, align 4
  %tobool196 = icmp ne i32 %132, 0
  br i1 %tobool196, label %if.then197, label %if.end200

if.then197:                                       ; preds = %for.body195
  %133 = load i32, i32* %dst.addr, align 4
  %134 = load i32, i32* %ch2, align 4
  %conv198 = trunc i32 %134 to i8
  %call199 = call i32 @spec_putc(i8 zeroext %conv198, i32 %133)
  store i32 %call199, i32* %retVal, align 4
  br label %if.end200

if.end200:                                        ; preds = %if.then197, %for.body195
  %135 = load i32, i32* %localCrc, align 4
  %shl201 = shl i32 %135, 8
  %136 = load i32, i32* %localCrc, align 4
  %shr202 = lshr i32 %136, 24
  %137 = load i32, i32* %ch2, align 4
  %conv203 = trunc i32 %137 to i8
  %conv204 = zext i8 %conv203 to i32
  %xor205 = xor i32 %shr202, %conv204
  %arrayidx206 = getelementptr inbounds [256 x i32], [256 x i32]* @crc32Table, i32 0, i32 %xor205
  %138 = load i32, i32* %arrayidx206, align 4
  %xor207 = xor i32 %shl201, %138
  store i32 %xor207, i32* %localCrc, align 4
  br label %for.inc208

for.inc208:                                       ; preds = %if.end200
  %139 = load i32, i32* %j2, align 4
  %inc209 = add nsw i32 %139, 1
  store i32 %inc209, i32* %j2, align 4
  br label %for.cond191

for.end210:                                       ; preds = %for.cond191
  %140 = load i32, i32* %i2, align 4
  %inc211 = add nsw i32 %140, 1
  store i32 %inc211, i32* %i2, align 4
  store i32 0, i32* %count, align 4
  br label %if.end212

if.end212:                                        ; preds = %for.end210, %if.else152
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %if.then151
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %141 = load i32, i32* %localCrc, align 4
  call void @setGlobalCRC(i32 %141)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @undoReversibleTransformation_fast(i32 %dst) #1 {
entry:
  %dst.addr = alloca i32, align 4
  %cftab = alloca [257 x i32], align 4
  %i = alloca i32, align 4
  %tPos = alloca i32, align 4
  %ch = alloca i8, align 1
  %retVal = alloca i32, align 4
  %i2 = alloca i32, align 4
  %count = alloca i32, align 4
  %chPrev = alloca i32, align 4
  %ch2 = alloca i32, align 4
  %localCrc = alloca i32, align 4
  %rNToGo = alloca i32, align 4
  %rTPos = alloca i32, align 4
  %j2 = alloca i32, align 4
  %z = alloca i8, align 1
  %j2119 = alloca i32, align 4
  %z120 = alloca i8, align 1
  store i32 %dst, i32* %dst.addr, align 4
  %arrayidx = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 0
  store i32 0, i32* %arrayidx, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp sle i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %1, 1
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @unzftab, i32 0, i32 %sub
  %2 = load i32, i32* %arrayidx1, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %3
  store i32 %2, i32* %arrayidx2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %i, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %5 = load i32, i32* %i, align 4
  %cmp4 = icmp sle i32 %5, 256
  br i1 %cmp4, label %for.body5, label %for.end11

for.body5:                                        ; preds = %for.cond3
  %6 = load i32, i32* %i, align 4
  %sub6 = sub nsw i32 %6, 1
  %arrayidx7 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %sub6
  %7 = load i32, i32* %arrayidx7, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %8
  %9 = load i32, i32* %arrayidx8, align 4
  %add = add nsw i32 %9, %7
  store i32 %add, i32* %arrayidx8, align 4
  br label %for.inc9

for.inc9:                                         ; preds = %for.body5
  %10 = load i32, i32* %i, align 4
  %inc10 = add nsw i32 %10, 1
  store i32 %inc10, i32* %i, align 4
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  store i32 0, i32* %i, align 4
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc21, %for.end11
  %11 = load i32, i32* %i, align 4
  %12 = load i32, i32* @last, align 4
  %cmp13 = icmp sle i32 %11, %12
  br i1 %cmp13, label %for.body14, label %for.end23

for.body14:                                       ; preds = %for.cond12
  %13 = load i8*, i8** @ll8, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i32 %14
  %15 = load i8, i8* %arrayidx15, align 1
  store i8 %15, i8* %ch, align 1
  %16 = load i32, i32* %i, align 4
  %17 = load i32*, i32** @tt, align 4
  %18 = load i8, i8* %ch, align 1
  %idxprom = zext i8 %18 to i32
  %arrayidx16 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %idxprom
  %19 = load i32, i32* %arrayidx16, align 4
  %arrayidx17 = getelementptr inbounds i32, i32* %17, i32 %19
  store i32 %16, i32* %arrayidx17, align 4
  %20 = load i8, i8* %ch, align 1
  %idxprom18 = zext i8 %20 to i32
  %arrayidx19 = getelementptr inbounds [257 x i32], [257 x i32]* %cftab, i32 0, i32 %idxprom18
  %21 = load i32, i32* %arrayidx19, align 4
  %inc20 = add nsw i32 %21, 1
  store i32 %inc20, i32* %arrayidx19, align 4
  br label %for.inc21

for.inc21:                                        ; preds = %for.body14
  %22 = load i32, i32* %i, align 4
  %inc22 = add nsw i32 %22, 1
  store i32 %inc22, i32* %i, align 4
  br label %for.cond12

for.end23:                                        ; preds = %for.cond12
  %23 = load i32*, i32** @tt, align 4
  %24 = load i32, i32* @origPtr, align 4
  %arrayidx24 = getelementptr inbounds i32, i32* %23, i32 %24
  %25 = load i32, i32* %arrayidx24, align 4
  store i32 %25, i32* %tPos, align 4
  store i32 0, i32* %count, align 4
  store i32 0, i32* %i2, align 4
  store i32 256, i32* %ch2, align 4
  %call = call i32 @getGlobalCRC()
  store i32 %call, i32* %localCrc, align 4
  %26 = load i8, i8* @blockRandomised, align 1
  %tobool = icmp ne i8 %26, 0
  br i1 %tobool, label %if.then, label %if.else93

if.then:                                          ; preds = %for.end23
  store i32 0, i32* %rNToGo, align 4
  store i32 0, i32* %rTPos, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end92, %if.then
  %27 = load i32, i32* %i2, align 4
  %28 = load i32, i32* @last, align 4
  %cmp25 = icmp sle i32 %27, %28
  br i1 %cmp25, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %29 = load i32, i32* %ch2, align 4
  store i32 %29, i32* %chPrev, align 4
  %30 = load i8*, i8** @ll8, align 4
  %31 = load i32, i32* %tPos, align 4
  %arrayidx26 = getelementptr inbounds i8, i8* %30, i32 %31
  %32 = load i8, i8* %arrayidx26, align 1
  %conv = zext i8 %32 to i32
  store i32 %conv, i32* %ch2, align 4
  %33 = load i32*, i32** @tt, align 4
  %34 = load i32, i32* %tPos, align 4
  %arrayidx27 = getelementptr inbounds i32, i32* %33, i32 %34
  %35 = load i32, i32* %arrayidx27, align 4
  store i32 %35, i32* %tPos, align 4
  %36 = load i32, i32* %rNToGo, align 4
  %cmp28 = icmp eq i32 %36, 0
  br i1 %cmp28, label %if.then30, label %if.end36

if.then30:                                        ; preds = %while.body
  %37 = load i32, i32* %rTPos, align 4
  %arrayidx31 = getelementptr inbounds [512 x i32], [512 x i32]* @rNums, i32 0, i32 %37
  %38 = load i32, i32* %arrayidx31, align 4
  store i32 %38, i32* %rNToGo, align 4
  %39 = load i32, i32* %rTPos, align 4
  %inc32 = add nsw i32 %39, 1
  store i32 %inc32, i32* %rTPos, align 4
  %40 = load i32, i32* %rTPos, align 4
  %cmp33 = icmp eq i32 %40, 512
  br i1 %cmp33, label %if.then35, label %if.end

if.then35:                                        ; preds = %if.then30
  store i32 0, i32* %rTPos, align 4
  br label %if.end

if.end:                                           ; preds = %if.then35, %if.then30
  br label %if.end36

if.end36:                                         ; preds = %if.end, %while.body
  %41 = load i32, i32* %rNToGo, align 4
  %dec = add nsw i32 %41, -1
  store i32 %dec, i32* %rNToGo, align 4
  %42 = load i32, i32* %rNToGo, align 4
  %cmp37 = icmp eq i32 %42, 1
  %43 = zext i1 %cmp37 to i64
  %cond = select i1 %cmp37, i32 1, i32 0
  %44 = load i32, i32* %ch2, align 4
  %xor = xor i32 %44, %cond
  store i32 %xor, i32* %ch2, align 4
  %45 = load i32, i32* %i2, align 4
  %inc39 = add nsw i32 %45, 1
  store i32 %inc39, i32* %i2, align 4
  %46 = load i32, i32* %dst.addr, align 4
  %47 = load i32, i32* %ch2, align 4
  %conv40 = trunc i32 %47 to i8
  %call41 = call i32 @spec_putc(i8 zeroext %conv40, i32 %46)
  store i32 %call41, i32* %retVal, align 4
  %48 = load i32, i32* %localCrc, align 4
  %shl = shl i32 %48, 8
  %49 = load i32, i32* %localCrc, align 4
  %shr = lshr i32 %49, 24
  %50 = load i32, i32* %ch2, align 4
  %conv42 = trunc i32 %50 to i8
  %conv43 = zext i8 %conv42 to i32
  %xor44 = xor i32 %shr, %conv43
  %arrayidx45 = getelementptr inbounds [256 x i32], [256 x i32]* @crc32Table, i32 0, i32 %xor44
  %51 = load i32, i32* %arrayidx45, align 4
  %xor46 = xor i32 %shl, %51
  store i32 %xor46, i32* %localCrc, align 4
  %52 = load i32, i32* %ch2, align 4
  %53 = load i32, i32* %chPrev, align 4
  %cmp47 = icmp ne i32 %52, %53
  br i1 %cmp47, label %if.then49, label %if.else

if.then49:                                        ; preds = %if.end36
  store i32 1, i32* %count, align 4
  br label %if.end92

if.else:                                          ; preds = %if.end36
  %54 = load i32, i32* %count, align 4
  %inc50 = add nsw i32 %54, 1
  store i32 %inc50, i32* %count, align 4
  %55 = load i32, i32* %count, align 4
  %cmp51 = icmp sge i32 %55, 4
  br i1 %cmp51, label %if.then53, label %if.end91

if.then53:                                        ; preds = %if.else
  %56 = load i8*, i8** @ll8, align 4
  %57 = load i32, i32* %tPos, align 4
  %arrayidx54 = getelementptr inbounds i8, i8* %56, i32 %57
  %58 = load i8, i8* %arrayidx54, align 1
  store i8 %58, i8* %z, align 1
  %59 = load i32*, i32** @tt, align 4
  %60 = load i32, i32* %tPos, align 4
  %arrayidx55 = getelementptr inbounds i32, i32* %59, i32 %60
  %61 = load i32, i32* %arrayidx55, align 4
  store i32 %61, i32* %tPos, align 4
  %62 = load i32, i32* %rNToGo, align 4
  %cmp56 = icmp eq i32 %62, 0
  br i1 %cmp56, label %if.then58, label %if.end65

if.then58:                                        ; preds = %if.then53
  %63 = load i32, i32* %rTPos, align 4
  %arrayidx59 = getelementptr inbounds [512 x i32], [512 x i32]* @rNums, i32 0, i32 %63
  %64 = load i32, i32* %arrayidx59, align 4
  store i32 %64, i32* %rNToGo, align 4
  %65 = load i32, i32* %rTPos, align 4
  %inc60 = add nsw i32 %65, 1
  store i32 %inc60, i32* %rTPos, align 4
  %66 = load i32, i32* %rTPos, align 4
  %cmp61 = icmp eq i32 %66, 512
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.then58
  store i32 0, i32* %rTPos, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %if.then58
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then53
  %67 = load i32, i32* %rNToGo, align 4
  %dec66 = add nsw i32 %67, -1
  store i32 %dec66, i32* %rNToGo, align 4
  %68 = load i32, i32* %rNToGo, align 4
  %cmp67 = icmp eq i32 %68, 1
  %69 = zext i1 %cmp67 to i64
  %cond69 = select i1 %cmp67, i32 1, i32 0
  %70 = load i8, i8* %z, align 1
  %conv70 = zext i8 %70 to i32
  %xor71 = xor i32 %conv70, %cond69
  %conv72 = trunc i32 %xor71 to i8
  store i8 %conv72, i8* %z, align 1
  store i32 0, i32* %j2, align 4
  br label %for.cond73

for.cond73:                                       ; preds = %for.inc87, %if.end65
  %71 = load i32, i32* %j2, align 4
  %72 = load i8, i8* %z, align 1
  %conv74 = zext i8 %72 to i32
  %cmp75 = icmp slt i32 %71, %conv74
  br i1 %cmp75, label %for.body77, label %for.end89

for.body77:                                       ; preds = %for.cond73
  %73 = load i32, i32* %dst.addr, align 4
  %74 = load i32, i32* %ch2, align 4
  %conv78 = trunc i32 %74 to i8
  %call79 = call i32 @spec_putc(i8 zeroext %conv78, i32 %73)
  store i32 %call79, i32* %retVal, align 4
  %75 = load i32, i32* %localCrc, align 4
  %shl80 = shl i32 %75, 8
  %76 = load i32, i32* %localCrc, align 4
  %shr81 = lshr i32 %76, 24
  %77 = load i32, i32* %ch2, align 4
  %conv82 = trunc i32 %77 to i8
  %conv83 = zext i8 %conv82 to i32
  %xor84 = xor i32 %shr81, %conv83
  %arrayidx85 = getelementptr inbounds [256 x i32], [256 x i32]* @crc32Table, i32 0, i32 %xor84
  %78 = load i32, i32* %arrayidx85, align 4
  %xor86 = xor i32 %shl80, %78
  store i32 %xor86, i32* %localCrc, align 4
  br label %for.inc87

for.inc87:                                        ; preds = %for.body77
  %79 = load i32, i32* %j2, align 4
  %inc88 = add nsw i32 %79, 1
  store i32 %inc88, i32* %j2, align 4
  br label %for.cond73

for.end89:                                        ; preds = %for.cond73
  %80 = load i32, i32* %i2, align 4
  %inc90 = add nsw i32 %80, 1
  store i32 %inc90, i32* %i2, align 4
  store i32 0, i32* %count, align 4
  br label %if.end91

if.end91:                                         ; preds = %for.end89, %if.else
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.then49
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end144

if.else93:                                        ; preds = %for.end23
  br label %while.cond94

while.cond94:                                     ; preds = %if.end142, %if.else93
  %81 = load i32, i32* %i2, align 4
  %82 = load i32, i32* @last, align 4
  %cmp95 = icmp sle i32 %81, %82
  br i1 %cmp95, label %while.body97, label %while.end143

while.body97:                                     ; preds = %while.cond94
  %83 = load i32, i32* %ch2, align 4
  store i32 %83, i32* %chPrev, align 4
  %84 = load i8*, i8** @ll8, align 4
  %85 = load i32, i32* %tPos, align 4
  %arrayidx98 = getelementptr inbounds i8, i8* %84, i32 %85
  %86 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %86 to i32
  store i32 %conv99, i32* %ch2, align 4
  %87 = load i32*, i32** @tt, align 4
  %88 = load i32, i32* %tPos, align 4
  %arrayidx100 = getelementptr inbounds i32, i32* %87, i32 %88
  %89 = load i32, i32* %arrayidx100, align 4
  store i32 %89, i32* %tPos, align 4
  %90 = load i32, i32* %i2, align 4
  %inc101 = add nsw i32 %90, 1
  store i32 %inc101, i32* %i2, align 4
  %91 = load i32, i32* %dst.addr, align 4
  %92 = load i32, i32* %ch2, align 4
  %conv102 = trunc i32 %92 to i8
  %call103 = call i32 @spec_putc(i8 zeroext %conv102, i32 %91)
  store i32 %call103, i32* %retVal, align 4
  %93 = load i32, i32* %localCrc, align 4
  %shl104 = shl i32 %93, 8
  %94 = load i32, i32* %localCrc, align 4
  %shr105 = lshr i32 %94, 24
  %95 = load i32, i32* %ch2, align 4
  %conv106 = trunc i32 %95 to i8
  %conv107 = zext i8 %conv106 to i32
  %xor108 = xor i32 %shr105, %conv107
  %arrayidx109 = getelementptr inbounds [256 x i32], [256 x i32]* @crc32Table, i32 0, i32 %xor108
  %96 = load i32, i32* %arrayidx109, align 4
  %xor110 = xor i32 %shl104, %96
  store i32 %xor110, i32* %localCrc, align 4
  %97 = load i32, i32* %ch2, align 4
  %98 = load i32, i32* %chPrev, align 4
  %cmp111 = icmp ne i32 %97, %98
  br i1 %cmp111, label %if.then113, label %if.else114

if.then113:                                       ; preds = %while.body97
  store i32 1, i32* %count, align 4
  br label %if.end142

if.else114:                                       ; preds = %while.body97
  %99 = load i32, i32* %count, align 4
  %inc115 = add nsw i32 %99, 1
  store i32 %inc115, i32* %count, align 4
  %100 = load i32, i32* %count, align 4
  %cmp116 = icmp sge i32 %100, 4
  br i1 %cmp116, label %if.then118, label %if.end141

if.then118:                                       ; preds = %if.else114
  %101 = load i8*, i8** @ll8, align 4
  %102 = load i32, i32* %tPos, align 4
  %arrayidx121 = getelementptr inbounds i8, i8* %101, i32 %102
  %103 = load i8, i8* %arrayidx121, align 1
  store i8 %103, i8* %z120, align 1
  %104 = load i32*, i32** @tt, align 4
  %105 = load i32, i32* %tPos, align 4
  %arrayidx122 = getelementptr inbounds i32, i32* %104, i32 %105
  %106 = load i32, i32* %arrayidx122, align 4
  store i32 %106, i32* %tPos, align 4
  store i32 0, i32* %j2119, align 4
  br label %for.cond123

for.cond123:                                      ; preds = %for.inc137, %if.then118
  %107 = load i32, i32* %j2119, align 4
  %108 = load i8, i8* %z120, align 1
  %conv124 = zext i8 %108 to i32
  %cmp125 = icmp slt i32 %107, %conv124
  br i1 %cmp125, label %for.body127, label %for.end139

for.body127:                                      ; preds = %for.cond123
  %109 = load i32, i32* %dst.addr, align 4
  %110 = load i32, i32* %ch2, align 4
  %conv128 = trunc i32 %110 to i8
  %call129 = call i32 @spec_putc(i8 zeroext %conv128, i32 %109)
  store i32 %call129, i32* %retVal, align 4
  %111 = load i32, i32* %localCrc, align 4
  %shl130 = shl i32 %111, 8
  %112 = load i32, i32* %localCrc, align 4
  %shr131 = lshr i32 %112, 24
  %113 = load i32, i32* %ch2, align 4
  %conv132 = trunc i32 %113 to i8
  %conv133 = zext i8 %conv132 to i32
  %xor134 = xor i32 %shr131, %conv133
  %arrayidx135 = getelementptr inbounds [256 x i32], [256 x i32]* @crc32Table, i32 0, i32 %xor134
  %114 = load i32, i32* %arrayidx135, align 4
  %xor136 = xor i32 %shl130, %114
  store i32 %xor136, i32* %localCrc, align 4
  br label %for.inc137

for.inc137:                                       ; preds = %for.body127
  %115 = load i32, i32* %j2119, align 4
  %inc138 = add nsw i32 %115, 1
  store i32 %inc138, i32* %j2119, align 4
  br label %for.cond123

for.end139:                                       ; preds = %for.cond123
  %116 = load i32, i32* %i2, align 4
  %inc140 = add nsw i32 %116, 1
  store i32 %inc140, i32* %i2, align 4
  store i32 0, i32* %count, align 4
  br label %if.end141

if.end141:                                        ; preds = %for.end139, %if.else114
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %if.then113
  br label %while.cond94

while.end143:                                     ; preds = %while.cond94
  br label %if.end144

if.end144:                                        ; preds = %while.end143, %while.end
  %117 = load i32, i32* %localCrc, align 4
  call void @setGlobalCRC(i32 %117)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @getRLEpair(i32 %src) #1 {
entry:
  %retval = alloca i32, align 4
  %src.addr = alloca i32, align 4
  %runLength = alloca i32, align 4
  %ch = alloca i32, align 4
  %chLatest = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %src, i32* %src.addr, align 4
  %0 = load i32, i32* %src.addr, align 4
  %call = call i32 @spec_getc(i32 %0)
  store i32 %call, i32* %ch, align 4
  %1 = load i32, i32* %ch, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 65793, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %runLength, align 4
  br label %do.body

do.body:                                          ; preds = %land.end, %if.end
  %2 = load i32, i32* %src.addr, align 4
  %call1 = call i32 @spec_getc(i32 %2)
  store i32 %call1, i32* %chLatest, align 4
  %3 = load i32, i32* %runLength, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %runLength, align 4
  %4 = load i32, i32* @bytesIn, align 4
  %inc2 = add i32 %4, 1
  store i32 %inc2, i32* @bytesIn, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %5 = load i32, i32* %ch, align 4
  %6 = load i32, i32* %chLatest, align 4
  %cmp3 = icmp eq i32 %5, %6
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %7 = load i32, i32* %runLength, align 4
  %cmp4 = icmp slt i32 %7, 255
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %8 = phi i1 [ false, %do.cond ], [ %cmp4, %land.rhs ]
  br i1 %8, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %9 = load i32, i32* %chLatest, align 4
  %cmp5 = icmp ne i32 %9, -1
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %do.end
  %10 = load i32, i32* %src.addr, align 4
  %11 = load i32, i32* %chLatest, align 4
  %conv = trunc i32 %11 to i8
  %call7 = call i32 @spec_ungetc(i8 zeroext %conv, i32 %10)
  %cmp8 = icmp eq i32 %call7, -1
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then6
  call void @panic(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"??_C@_0BK@LDHEAIKH@getRLEpair?3?5ungetc?5failed?$AA@", i32 0, i32 0))
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.then6
  br label %if.end12

if.else:                                          ; preds = %do.end
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.end11
  %12 = load i32, i32* %runLength, align 4
  %cmp13 = icmp eq i32 %12, 1
  br i1 %cmp13, label %if.then15, label %if.else19

if.then15:                                        ; preds = %if.end12
  %13 = load i32, i32* @globalCrc, align 4
  %shl = shl i32 %13, 8
  %14 = load i32, i32* @globalCrc, align 4
  %shr = lshr i32 %14, 24
  %15 = load i32, i32* %ch, align 4
  %conv16 = trunc i32 %15 to i8
  %conv17 = zext i8 %conv16 to i32
  %xor = xor i32 %shr, %conv17
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @crc32Table, i32 0, i32 %xor
  %16 = load i32, i32* %arrayidx, align 4
  %xor18 = xor i32 %shl, %16
  store i32 %xor18, i32* @globalCrc, align 4
  %17 = load i32, i32* %ch, align 4
  %or = or i32 65536, %17
  store i32 %or, i32* %retval, align 4
  br label %return

if.else19:                                        ; preds = %if.end12
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else19
  %18 = load i32, i32* %i, align 4
  %19 = load i32, i32* %runLength, align 4
  %cmp20 = icmp sle i32 %18, %19
  br i1 %cmp20, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i32, i32* @globalCrc, align 4
  %shl22 = shl i32 %20, 8
  %21 = load i32, i32* @globalCrc, align 4
  %shr23 = lshr i32 %21, 24
  %22 = load i32, i32* %ch, align 4
  %conv24 = trunc i32 %22 to i8
  %conv25 = zext i8 %conv24 to i32
  %xor26 = xor i32 %shr23, %conv25
  %arrayidx27 = getelementptr inbounds [256 x i32], [256 x i32]* @crc32Table, i32 0, i32 %xor26
  %23 = load i32, i32* %arrayidx27, align 4
  %xor28 = xor i32 %shl22, %23
  store i32 %xor28, i32* @globalCrc, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %i, align 4
  %inc29 = add nsw i32 %24, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i32, i32* %runLength, align 4
  %shl30 = shl i32 %25, 16
  %26 = load i32, i32* %ch, align 4
  %or31 = or i32 %shl30, %26
  store i32 %or31, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then15, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @loadAndRLEsource(i32 %src) #1 {
entry:
  %src.addr = alloca i32, align 4
  %ch = alloca i32, align 4
  %allowableBlockSize = alloca i32, align 4
  %i = alloca i32, align 4
  %rlePair = alloca i32, align 4
  %runLen = alloca i32, align 4
  store i32 %src, i32* %src.addr, align 4
  store i32 -1, i32* @last, align 4
  store i32 0, i32* %ch, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %1
  store i8 0, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %3 = load i32, i32* @blockSize100k, align 4
  %mul = mul nsw i32 100000, %3
  %sub = sub nsw i32 %mul, 20
  store i32 %sub, i32* %allowableBlockSize, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.end
  %4 = load i32, i32* @last, align 4
  %5 = load i32, i32* %allowableBlockSize, align 4
  %cmp1 = icmp slt i32 %4, %5
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i32, i32* %ch, align 4
  %cmp2 = icmp ne i32 %6, 257
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i32, i32* %src.addr, align 4
  %call = call i32 @getRLEpair(i32 %8)
  store i32 %call, i32* %rlePair, align 4
  %9 = load i32, i32* %rlePair, align 4
  %and = and i32 %9, 65535
  store i32 %and, i32* %ch, align 4
  %10 = load i32, i32* %rlePair, align 4
  %shr = lshr i32 %10, 16
  store i32 %shr, i32* %runLen, align 4
  %11 = load i32, i32* %ch, align 4
  %cmp3 = icmp ne i32 %11, 257
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %12 = load i32, i32* %ch, align 4
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %12
  store i8 1, i8* %arrayidx4, align 1
  %13 = load i32, i32* %runLen, align 4
  switch i32 %13, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb7
    i32 3, label %sw.bb14
  ]

sw.bb:                                            ; preds = %if.then
  %14 = load i32, i32* @last, align 4
  %inc5 = add nsw i32 %14, 1
  store i32 %inc5, i32* @last, align 4
  %15 = load i32, i32* %ch, align 4
  %conv = trunc i32 %15 to i8
  %16 = load i8*, i8** @block, align 4
  %17 = load i32, i32* @last, align 4
  %arrayidx6 = getelementptr inbounds i8, i8* %16, i32 %17
  store i8 %conv, i8* %arrayidx6, align 1
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.then
  %18 = load i32, i32* @last, align 4
  %inc8 = add nsw i32 %18, 1
  store i32 %inc8, i32* @last, align 4
  %19 = load i32, i32* %ch, align 4
  %conv9 = trunc i32 %19 to i8
  %20 = load i8*, i8** @block, align 4
  %21 = load i32, i32* @last, align 4
  %arrayidx10 = getelementptr inbounds i8, i8* %20, i32 %21
  store i8 %conv9, i8* %arrayidx10, align 1
  %22 = load i32, i32* @last, align 4
  %inc11 = add nsw i32 %22, 1
  store i32 %inc11, i32* @last, align 4
  %23 = load i32, i32* %ch, align 4
  %conv12 = trunc i32 %23 to i8
  %24 = load i8*, i8** @block, align 4
  %25 = load i32, i32* @last, align 4
  %arrayidx13 = getelementptr inbounds i8, i8* %24, i32 %25
  store i8 %conv12, i8* %arrayidx13, align 1
  br label %sw.epilog

sw.bb14:                                          ; preds = %if.then
  %26 = load i32, i32* @last, align 4
  %inc15 = add nsw i32 %26, 1
  store i32 %inc15, i32* @last, align 4
  %27 = load i32, i32* %ch, align 4
  %conv16 = trunc i32 %27 to i8
  %28 = load i8*, i8** @block, align 4
  %29 = load i32, i32* @last, align 4
  %arrayidx17 = getelementptr inbounds i8, i8* %28, i32 %29
  store i8 %conv16, i8* %arrayidx17, align 1
  %30 = load i32, i32* @last, align 4
  %inc18 = add nsw i32 %30, 1
  store i32 %inc18, i32* @last, align 4
  %31 = load i32, i32* %ch, align 4
  %conv19 = trunc i32 %31 to i8
  %32 = load i8*, i8** @block, align 4
  %33 = load i32, i32* @last, align 4
  %arrayidx20 = getelementptr inbounds i8, i8* %32, i32 %33
  store i8 %conv19, i8* %arrayidx20, align 1
  %34 = load i32, i32* @last, align 4
  %inc21 = add nsw i32 %34, 1
  store i32 %inc21, i32* @last, align 4
  %35 = load i32, i32* %ch, align 4
  %conv22 = trunc i32 %35 to i8
  %36 = load i8*, i8** @block, align 4
  %37 = load i32, i32* @last, align 4
  %arrayidx23 = getelementptr inbounds i8, i8* %36, i32 %37
  store i8 %conv22, i8* %arrayidx23, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  %38 = load i32, i32* %runLen, align 4
  %sub24 = sub nsw i32 %38, 4
  %arrayidx25 = getelementptr inbounds [256 x i8], [256 x i8]* @inUse, i32 0, i32 %sub24
  store i8 1, i8* %arrayidx25, align 1
  %39 = load i32, i32* @last, align 4
  %inc26 = add nsw i32 %39, 1
  store i32 %inc26, i32* @last, align 4
  %40 = load i32, i32* %ch, align 4
  %conv27 = trunc i32 %40 to i8
  %41 = load i8*, i8** @block, align 4
  %42 = load i32, i32* @last, align 4
  %arrayidx28 = getelementptr inbounds i8, i8* %41, i32 %42
  store i8 %conv27, i8* %arrayidx28, align 1
  %43 = load i32, i32* @last, align 4
  %inc29 = add nsw i32 %43, 1
  store i32 %inc29, i32* @last, align 4
  %44 = load i32, i32* %ch, align 4
  %conv30 = trunc i32 %44 to i8
  %45 = load i8*, i8** @block, align 4
  %46 = load i32, i32* @last, align 4
  %arrayidx31 = getelementptr inbounds i8, i8* %45, i32 %46
  store i8 %conv30, i8* %arrayidx31, align 1
  %47 = load i32, i32* @last, align 4
  %inc32 = add nsw i32 %47, 1
  store i32 %inc32, i32* @last, align 4
  %48 = load i32, i32* %ch, align 4
  %conv33 = trunc i32 %48 to i8
  %49 = load i8*, i8** @block, align 4
  %50 = load i32, i32* @last, align 4
  %arrayidx34 = getelementptr inbounds i8, i8* %49, i32 %50
  store i8 %conv33, i8* %arrayidx34, align 1
  %51 = load i32, i32* @last, align 4
  %inc35 = add nsw i32 %51, 1
  store i32 %inc35, i32* @last, align 4
  %52 = load i32, i32* %ch, align 4
  %conv36 = trunc i32 %52 to i8
  %53 = load i8*, i8** @block, align 4
  %54 = load i32, i32* @last, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %53, i32 %54
  store i8 %conv36, i8* %arrayidx37, align 1
  %55 = load i32, i32* @last, align 4
  %inc38 = add nsw i32 %55, 1
  store i32 %inc38, i32* @last, align 4
  %56 = load i32, i32* %runLen, align 4
  %sub39 = sub nsw i32 %56, 4
  %conv40 = trunc i32 %sub39 to i8
  %57 = load i8*, i8** @block, align 4
  %58 = load i32, i32* @last, align 4
  %arrayidx41 = getelementptr inbounds i8, i8* %57, i32 %58
  store i8 %conv40, i8* %arrayidx41, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb14, %sw.bb7, %sw.bb
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %while.body
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @compressStream(i32 %stream, i32 %zStream) #1 {
entry:
  %zStream.addr = alloca i32, align 4
  %stream.addr = alloca i32, align 4
  %retVal = alloca i32, align 4
  %blockCRC = alloca i32, align 4
  %combinedCRC = alloca i32, align 4
  %blockNo = alloca i32, align 4
  store i32 %zStream, i32* %zStream.addr, align 4
  store i32 %stream, i32* %stream.addr, align 4
  store i32 0, i32* %blockNo, align 4
  store i32 0, i32* @bytesIn, align 4
  store i32 0, i32* @bytesOut, align 4
  store i32 0, i32* @nBlocksRandomised, align 4
  %0 = load i32, i32* %zStream.addr, align 4
  call void @bsSetStream(i32 %0, i8 zeroext 1)
  call void @bsPutUChar(i8 zeroext 66)
  call void @bsPutUChar(i8 zeroext 90)
  call void @bsPutUChar(i8 zeroext 104)
  %1 = load i32, i32* @blockSize100k, align 4
  %add = add nsw i32 48, %1
  %conv = trunc i32 %add to i8
  call void @bsPutUChar(i8 zeroext %conv)
  store i32 0, i32* %combinedCRC, align 4
  %2 = load i32, i32* @verbosity, align 4
  %cmp = icmp sge i32 %2, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call2 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.body

while.body:                                       ; preds = %if.end18, %if.end
  %3 = load i32, i32* %blockNo, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %blockNo, align 4
  call void @initialiseCRC()
  %4 = load i32, i32* %stream.addr, align 4
  call void @loadAndRLEsource(i32 %4)
  %5 = load i32, i32* @last, align 4
  %cmp3 = icmp eq i32 %5, -1
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %while.body
  br label %while.end

if.end6:                                          ; preds = %while.body
  %call7 = call i32 @getFinalCRC()
  store i32 %call7, i32* %blockCRC, align 4
  %6 = load i32, i32* %combinedCRC, align 4
  %shl = shl i32 %6, 1
  %7 = load i32, i32* %combinedCRC, align 4
  %shr = lshr i32 %7, 31
  %or = or i32 %shl, %shr
  store i32 %or, i32* %combinedCRC, align 4
  %8 = load i32, i32* %blockCRC, align 4
  %9 = load i32, i32* %combinedCRC, align 4
  %xor = xor i32 %9, %8
  store i32 %xor, i32* %combinedCRC, align 4
  %10 = load i32, i32* @verbosity, align 4
  %cmp8 = icmp sge i32 %10, 2
  br i1 %cmp8, label %if.then10, label %if.end15

if.then10:                                        ; preds = %if.end6
  %11 = load i32, i32* @last, align 4
  %add11 = add nsw i32 %11, 1
  %12 = load i32, i32* %combinedCRC, align 4
  %13 = load i32, i32* %blockCRC, align 4
  %14 = load i32, i32* %blockNo, align 4
  %call12 = call %struct._iobuf* @__iob_func()
  %arrayidx13 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call12, i32 2
  %call14 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx13, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @"??_C@_0DL@COPHMPBD@?5?5?5?5block?5?$CFd?3?5crc?5?$DN?50x?$CF8x?0?5combi@", i32 0, i32 0), i32 %14, i32 %13, i32 %12, i32 %add11)
  br label %if.end15

if.end15:                                         ; preds = %if.then10, %if.end6
  call void @doReversibleTransformation()
  call void @bsPutUChar(i8 zeroext 49)
  call void @bsPutUChar(i8 zeroext 65)
  call void @bsPutUChar(i8 zeroext 89)
  call void @bsPutUChar(i8 zeroext 38)
  call void @bsPutUChar(i8 zeroext 83)
  call void @bsPutUChar(i8 zeroext 89)
  %15 = load i32, i32* %blockCRC, align 4
  call void @bsPutUInt32(i32 %15)
  %16 = load i8, i8* @blockRandomised, align 1
  %tobool = icmp ne i8 %16, 0
  br i1 %tobool, label %if.then16, label %if.else

if.then16:                                        ; preds = %if.end15
  call void @bsW(i32 1, i32 1)
  %17 = load i32, i32* @nBlocksRandomised, align 4
  %inc17 = add nsw i32 %17, 1
  store i32 %inc17, i32* @nBlocksRandomised, align 4
  br label %if.end18

if.else:                                          ; preds = %if.end15
  call void @bsW(i32 1, i32 0)
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then16
  call void @moveToFrontCodeAndSend()
  br label %while.body

while.end:                                        ; preds = %if.then5
  %18 = load i32, i32* @verbosity, align 4
  %cmp19 = icmp sge i32 %18, 2
  br i1 %cmp19, label %land.lhs.true, label %if.end29

land.lhs.true:                                    ; preds = %while.end
  %19 = load i32, i32* @nBlocksRandomised, align 4
  %cmp21 = icmp sgt i32 %19, 0
  br i1 %cmp21, label %if.then23, label %if.end29

if.then23:                                        ; preds = %land.lhs.true
  %20 = load i32, i32* @nBlocksRandomised, align 4
  %cmp24 = icmp eq i32 %20, 1
  %21 = zext i1 %cmp24 to i64
  %cond = select i1 %cmp24, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @"??_C@_00CNPNBAHC@?$AA@", i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01LKDEMHDF@s?$AA@", i32 0, i32 0)
  %22 = load i32, i32* @nBlocksRandomised, align 4
  %call26 = call %struct._iobuf* @__iob_func()
  %arrayidx27 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call26, i32 2
  %call28 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx27, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"??_C@_0CF@OEHDEGJO@?5?5?5?5?$CFd?5block?$CFs?5needed?5randomisat@", i32 0, i32 0), i32 %22, i8* %cond)
  br label %if.end29

if.end29:                                         ; preds = %if.then23, %land.lhs.true, %while.end
  call void @bsPutUChar(i8 zeroext 23)
  call void @bsPutUChar(i8 zeroext 114)
  call void @bsPutUChar(i8 zeroext 69)
  call void @bsPutUChar(i8 zeroext 56)
  call void @bsPutUChar(i8 zeroext 80)
  call void @bsPutUChar(i8 zeroext -112)
  %23 = load i32, i32* %combinedCRC, align 4
  call void @bsPutUInt32(i32 %23)
  %24 = load i32, i32* @verbosity, align 4
  %cmp30 = icmp sge i32 %24, 2
  br i1 %cmp30, label %if.then32, label %if.end36

if.then32:                                        ; preds = %if.end29
  %25 = load i32, i32* %combinedCRC, align 4
  %call33 = call %struct._iobuf* @__iob_func()
  %arrayidx34 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call33, i32 2
  %call35 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx34, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@CFAJDODG@?5?5?5?5final?5combined?5CRC?5?$DN?50x?$CFx?6?5?5@", i32 0, i32 0), i32 %25)
  br label %if.end36

if.end36:                                         ; preds = %if.then32, %if.end29
  call void @bsFinishedWithStream()
  store i32 0, i32* %retVal, align 4
  %26 = load i32, i32* %retVal, align 4
  %cmp37 = icmp eq i32 %26, -1
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.end36
  call void @ioError()
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %if.end36
  store i32 0, i32* %retVal, align 4
  %27 = load i32, i32* %retVal, align 4
  %cmp41 = icmp eq i32 %27, -1
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end40
  call void @ioError()
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %if.end40
  store i32 0, i32* %retVal, align 4
  %28 = load i32, i32* %retVal, align 4
  %cmp45 = icmp eq i32 %28, -1
  br i1 %cmp45, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.end44
  call void @ioError()
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.end44
  %29 = load i32, i32* @bytesIn, align 4
  %cmp49 = icmp eq i32 %29, 0
  br i1 %cmp49, label %if.then51, label %if.end52

if.then51:                                        ; preds = %if.end48
  store i32 1, i32* @bytesIn, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then51, %if.end48
  %30 = load i32, i32* @bytesOut, align 4
  %cmp53 = icmp eq i32 %30, 0
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.end52
  store i32 1, i32* @bytesOut, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.end52
  %31 = load i32, i32* @verbosity, align 4
  %cmp57 = icmp sge i32 %31, 1
  br i1 %cmp57, label %if.then59, label %if.end76

if.then59:                                        ; preds = %if.end56
  %32 = load i32, i32* @bytesOut, align 4
  %33 = load i32, i32* @bytesIn, align 4
  %34 = load i32, i32* @bytesOut, align 4
  %conv60 = uitofp i32 %34 to float
  %35 = load i32, i32* @bytesIn, align 4
  %conv61 = uitofp i32 %35 to float
  %div = fdiv float %conv60, %conv61
  %conv62 = fpext float %div to double
  %sub = fsub double 1.000000e+00, %conv62
  %mul = fmul double 1.000000e+02, %sub
  %36 = load i32, i32* @bytesOut, align 4
  %conv63 = uitofp i32 %36 to float
  %conv64 = fpext float %conv63 to double
  %mul65 = fmul double 8.000000e+00, %conv64
  %37 = load i32, i32* @bytesIn, align 4
  %conv66 = uitofp i32 %37 to float
  %conv67 = fpext float %conv66 to double
  %div68 = fdiv double %mul65, %conv67
  %38 = load i32, i32* @bytesIn, align 4
  %conv69 = uitofp i32 %38 to float
  %39 = load i32, i32* @bytesOut, align 4
  %conv70 = uitofp i32 %39 to float
  %div71 = fdiv float %conv69, %conv70
  %conv72 = fpext float %div71 to double
  %call73 = call %struct._iobuf* @__iob_func()
  %arrayidx74 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call73, i32 2
  %call75 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx74, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @"??_C@_0DJ@NACHODOJ@?$CF6?43f?31?0?5?$CF6?43f?5bits?1byte?0?5?$CF5?42f?$CF@", i32 0, i32 0), double %conv72, double %div68, double %mul, i32 %33, i32 %32)
  br label %if.end76

if.end76:                                         ; preds = %if.then59, %if.end56
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @ioError() #1 {
entry:
  %0 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"??_C@_0EB@PIENDKAN@?6?$CFs?3?5I?1O?5or?5other?5error?0?5bailing@", i32 0, i32 0), i8* %0)
  %1 = load i8*, i8** @progName, align 4
  call void @perror(i8* %1)
  call void @showFileNames()
  call void @cleanUpAndFail(i32 1)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local zeroext i8 @uncompressStream(i32 %zStream, i32 %stream) #1 {
entry:
  %retval = alloca i8, align 1
  %stream.addr = alloca i32, align 4
  %zStream.addr = alloca i32, align 4
  %magic1 = alloca i8, align 1
  %magic2 = alloca i8, align 1
  %magic3 = alloca i8, align 1
  %magic4 = alloca i8, align 1
  %magic5 = alloca i8, align 1
  %magic6 = alloca i8, align 1
  %storedBlockCRC = alloca i32, align 4
  %storedCombinedCRC = alloca i32, align 4
  %computedBlockCRC = alloca i32, align 4
  %computedCombinedCRC = alloca i32, align 4
  %currBlockNo = alloca i32, align 4
  %retVal = alloca i32, align 4
  store i32 %stream, i32* %stream.addr, align 4
  store i32 %zStream, i32* %zStream.addr, align 4
  %0 = load i32, i32* %zStream.addr, align 4
  call void @bsSetStream(i32 %0, i8 zeroext 0)
  %call = call zeroext i8 @bsGetUChar()
  store i8 %call, i8* %magic1, align 1
  %call1 = call zeroext i8 @bsGetUChar()
  store i8 %call1, i8* %magic2, align 1
  %call2 = call zeroext i8 @bsGetUChar()
  store i8 %call2, i8* %magic3, align 1
  %call3 = call zeroext i8 @bsGetUChar()
  store i8 %call3, i8* %magic4, align 1
  %1 = load i8, i8* %magic1, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 66
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8, i8* %magic2, align 1
  %conv5 = zext i8 %2 to i32
  %cmp6 = icmp ne i32 %conv5, 90
  br i1 %cmp6, label %if.then, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %3 = load i8, i8* %magic3, align 1
  %conv9 = zext i8 %3 to i32
  %cmp10 = icmp ne i32 %conv9, 104
  br i1 %cmp10, label %if.then, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %4 = load i8, i8* %magic4, align 1
  %conv13 = zext i8 %4 to i32
  %cmp14 = icmp slt i32 %conv13, 49
  br i1 %cmp14, label %if.then, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false12
  %5 = load i8, i8* %magic4, align 1
  %conv17 = zext i8 %5 to i32
  %cmp18 = icmp sgt i32 %conv17, 57
  br i1 %cmp18, label %if.then, label %if.end23

if.then:                                          ; preds = %lor.lhs.false16, %lor.lhs.false12, %lor.lhs.false8, %lor.lhs.false, %entry
  call void @bsFinishedWithStream()
  store i32 0, i32* %retVal, align 4
  %6 = load i32, i32* %retVal, align 4
  %cmp20 = icmp eq i32 %6, -1
  br i1 %cmp20, label %if.then22, label %if.end

if.then22:                                        ; preds = %if.then
  call void @ioError()
  br label %if.end

if.end:                                           ; preds = %if.then22, %if.then
  store i8 0, i8* %retval, align 1
  br label %return

if.end23:                                         ; preds = %lor.lhs.false16
  %7 = load i8, i8* %magic4, align 1
  %conv24 = zext i8 %7 to i32
  %sub = sub nsw i32 %conv24, 48
  call void @setDecompressStructureSizes(i32 %sub)
  store i32 0, i32* %computedCombinedCRC, align 4
  %8 = load i32, i32* @verbosity, align 4
  %cmp25 = icmp sge i32 %8, 2
  br i1 %cmp25, label %if.then27, label %if.end30

if.then27:                                        ; preds = %if.end23
  %call28 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call28, i32 2
  %call29 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"??_C@_05CDJMJPEC@?6?5?5?5?5?$AA@", i32 0, i32 0))
  br label %if.end30

if.end30:                                         ; preds = %if.then27, %if.end23
  store i32 0, i32* %currBlockNo, align 4
  br label %while.body

while.body:                                       ; preds = %if.end127, %if.end30
  %call31 = call zeroext i8 @bsGetUChar()
  store i8 %call31, i8* %magic1, align 1
  %call32 = call zeroext i8 @bsGetUChar()
  store i8 %call32, i8* %magic2, align 1
  %call33 = call zeroext i8 @bsGetUChar()
  store i8 %call33, i8* %magic3, align 1
  %call34 = call zeroext i8 @bsGetUChar()
  store i8 %call34, i8* %magic4, align 1
  %call35 = call zeroext i8 @bsGetUChar()
  store i8 %call35, i8* %magic5, align 1
  %call36 = call zeroext i8 @bsGetUChar()
  store i8 %call36, i8* %magic6, align 1
  %9 = load i8, i8* %magic1, align 1
  %conv37 = zext i8 %9 to i32
  %cmp38 = icmp eq i32 %conv37, 23
  br i1 %cmp38, label %land.lhs.true, label %if.end60

land.lhs.true:                                    ; preds = %while.body
  %10 = load i8, i8* %magic2, align 1
  %conv40 = zext i8 %10 to i32
  %cmp41 = icmp eq i32 %conv40, 114
  br i1 %cmp41, label %land.lhs.true43, label %if.end60

land.lhs.true43:                                  ; preds = %land.lhs.true
  %11 = load i8, i8* %magic3, align 1
  %conv44 = zext i8 %11 to i32
  %cmp45 = icmp eq i32 %conv44, 69
  br i1 %cmp45, label %land.lhs.true47, label %if.end60

land.lhs.true47:                                  ; preds = %land.lhs.true43
  %12 = load i8, i8* %magic4, align 1
  %conv48 = zext i8 %12 to i32
  %cmp49 = icmp eq i32 %conv48, 56
  br i1 %cmp49, label %land.lhs.true51, label %if.end60

land.lhs.true51:                                  ; preds = %land.lhs.true47
  %13 = load i8, i8* %magic5, align 1
  %conv52 = zext i8 %13 to i32
  %cmp53 = icmp eq i32 %conv52, 80
  br i1 %cmp53, label %land.lhs.true55, label %if.end60

land.lhs.true55:                                  ; preds = %land.lhs.true51
  %14 = load i8, i8* %magic6, align 1
  %conv56 = zext i8 %14 to i32
  %cmp57 = icmp eq i32 %conv56, 144
  br i1 %cmp57, label %if.then59, label %if.end60

if.then59:                                        ; preds = %land.lhs.true55
  br label %while.end

if.end60:                                         ; preds = %land.lhs.true55, %land.lhs.true51, %land.lhs.true47, %land.lhs.true43, %land.lhs.true, %while.body
  %15 = load i8, i8* %magic1, align 1
  %conv61 = zext i8 %15 to i32
  %cmp62 = icmp ne i32 %conv61, 49
  br i1 %cmp62, label %if.then84, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %if.end60
  %16 = load i8, i8* %magic2, align 1
  %conv65 = zext i8 %16 to i32
  %cmp66 = icmp ne i32 %conv65, 65
  br i1 %cmp66, label %if.then84, label %lor.lhs.false68

lor.lhs.false68:                                  ; preds = %lor.lhs.false64
  %17 = load i8, i8* %magic3, align 1
  %conv69 = zext i8 %17 to i32
  %cmp70 = icmp ne i32 %conv69, 89
  br i1 %cmp70, label %if.then84, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %lor.lhs.false68
  %18 = load i8, i8* %magic4, align 1
  %conv73 = zext i8 %18 to i32
  %cmp74 = icmp ne i32 %conv73, 38
  br i1 %cmp74, label %if.then84, label %lor.lhs.false76

lor.lhs.false76:                                  ; preds = %lor.lhs.false72
  %19 = load i8, i8* %magic5, align 1
  %conv77 = zext i8 %19 to i32
  %cmp78 = icmp ne i32 %conv77, 83
  br i1 %cmp78, label %if.then84, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %lor.lhs.false76
  %20 = load i8, i8* %magic6, align 1
  %conv81 = zext i8 %20 to i32
  %cmp82 = icmp ne i32 %conv81, 89
  br i1 %cmp82, label %if.then84, label %if.end85

if.then84:                                        ; preds = %lor.lhs.false80, %lor.lhs.false76, %lor.lhs.false72, %lor.lhs.false68, %lor.lhs.false64, %if.end60
  call void @badBlockHeader()
  br label %if.end85

if.end85:                                         ; preds = %if.then84, %lor.lhs.false80
  %call86 = call i32 @bsGetUInt32()
  store i32 %call86, i32* %storedBlockCRC, align 4
  %call87 = call i32 @bsR(i32 1)
  %cmp88 = icmp eq i32 %call87, 1
  br i1 %cmp88, label %if.then90, label %if.else

if.then90:                                        ; preds = %if.end85
  store i8 1, i8* @blockRandomised, align 1
  br label %if.end91

if.else:                                          ; preds = %if.end85
  store i8 0, i8* @blockRandomised, align 1
  br label %if.end91

if.end91:                                         ; preds = %if.else, %if.then90
  %21 = load i32, i32* %currBlockNo, align 4
  %inc = add nsw i32 %21, 1
  store i32 %inc, i32* %currBlockNo, align 4
  %22 = load i32, i32* @verbosity, align 4
  %cmp92 = icmp sge i32 %22, 2
  br i1 %cmp92, label %if.then94, label %if.end98

if.then94:                                        ; preds = %if.end91
  %23 = load i32, i32* %currBlockNo, align 4
  %call95 = call %struct._iobuf* @__iob_func()
  %arrayidx96 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call95, i32 2
  %call97 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx96, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"??_C@_0P@DAOCLJBE@?$FL?$CFd?3?5huff?$CLmtf?5?$AA@", i32 0, i32 0), i32 %23)
  br label %if.end98

if.end98:                                         ; preds = %if.then94, %if.end91
  call void @getAndMoveToFrontDecode()
  call void @initialiseCRC()
  %24 = load i32, i32* @verbosity, align 4
  %cmp99 = icmp sge i32 %24, 2
  br i1 %cmp99, label %if.then101, label %if.end105

if.then101:                                       ; preds = %if.end98
  %call102 = call %struct._iobuf* @__iob_func()
  %arrayidx103 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call102, i32 2
  %call104 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx103, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06LOKMEELB@rt?$CLrld?$AA@", i32 0, i32 0))
  br label %if.end105

if.end105:                                        ; preds = %if.then101, %if.end98
  %25 = load i8, i8* @smallMode, align 1
  %tobool = icmp ne i8 %25, 0
  br i1 %tobool, label %if.then106, label %if.else107

if.then106:                                       ; preds = %if.end105
  %26 = load i32, i32* %stream.addr, align 4
  call void @undoReversibleTransformation_small(i32 %26)
  br label %if.end108

if.else107:                                       ; preds = %if.end105
  %27 = load i32, i32* %stream.addr, align 4
  call void @undoReversibleTransformation_fast(i32 %27)
  br label %if.end108

if.end108:                                        ; preds = %if.else107, %if.then106
  %call109 = call i32 @getFinalCRC()
  store i32 %call109, i32* %computedBlockCRC, align 4
  %28 = load i32, i32* @verbosity, align 4
  %cmp110 = icmp sge i32 %28, 3
  br i1 %cmp110, label %if.then112, label %if.end116

if.then112:                                       ; preds = %if.end108
  %29 = load i32, i32* %computedBlockCRC, align 4
  %30 = load i32, i32* %storedBlockCRC, align 4
  %call113 = call %struct._iobuf* @__iob_func()
  %arrayidx114 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call113, i32 2
  %call115 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx114, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"??_C@_0O@PHPJJCFF@?5?$HL0x?$CFx?0?50x?$CFx?$HN?$AA@", i32 0, i32 0), i32 %30, i32 %29)
  br label %if.end116

if.end116:                                        ; preds = %if.then112, %if.end108
  %31 = load i32, i32* @verbosity, align 4
  %cmp117 = icmp sge i32 %31, 2
  br i1 %cmp117, label %if.then119, label %if.end123

if.then119:                                       ; preds = %if.end116
  %call120 = call %struct._iobuf* @__iob_func()
  %arrayidx121 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call120, i32 2
  %call122 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx121, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02PBFOLPKM@?$FN?5?$AA@", i32 0, i32 0))
  br label %if.end123

if.end123:                                        ; preds = %if.then119, %if.end116
  %32 = load i32, i32* %storedBlockCRC, align 4
  %33 = load i32, i32* %computedBlockCRC, align 4
  %cmp124 = icmp ne i32 %32, %33
  br i1 %cmp124, label %if.then126, label %if.end127

if.then126:                                       ; preds = %if.end123
  %34 = load i32, i32* %computedBlockCRC, align 4
  %35 = load i32, i32* %storedBlockCRC, align 4
  call void @crcError(i32 %35, i32 %34)
  br label %if.end127

if.end127:                                        ; preds = %if.then126, %if.end123
  %36 = load i32, i32* %computedCombinedCRC, align 4
  %shl = shl i32 %36, 1
  %37 = load i32, i32* %computedCombinedCRC, align 4
  %shr = lshr i32 %37, 31
  %or = or i32 %shl, %shr
  store i32 %or, i32* %computedCombinedCRC, align 4
  %38 = load i32, i32* %computedBlockCRC, align 4
  %39 = load i32, i32* %computedCombinedCRC, align 4
  %xor = xor i32 %39, %38
  store i32 %xor, i32* %computedCombinedCRC, align 4
  br label %while.body

while.end:                                        ; preds = %if.then59
  %40 = load i32, i32* @verbosity, align 4
  %cmp128 = icmp sge i32 %40, 2
  br i1 %cmp128, label %if.then130, label %if.end134

if.then130:                                       ; preds = %while.end
  %call131 = call %struct._iobuf* @__iob_func()
  %arrayidx132 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call131, i32 2
  %call133 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx132, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"??_C@_05CDJMJPEC@?6?5?5?5?5?$AA@", i32 0, i32 0))
  br label %if.end134

if.end134:                                        ; preds = %if.then130, %while.end
  %call135 = call i32 @bsGetUInt32()
  store i32 %call135, i32* %storedCombinedCRC, align 4
  %41 = load i32, i32* @verbosity, align 4
  %cmp136 = icmp sge i32 %41, 2
  br i1 %cmp136, label %if.then138, label %if.end142

if.then138:                                       ; preds = %if.end134
  %42 = load i32, i32* %computedCombinedCRC, align 4
  %43 = load i32, i32* %storedCombinedCRC, align 4
  %call139 = call %struct._iobuf* @__iob_func()
  %arrayidx140 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call139, i32 2
  %call141 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx140, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @"??_C@_0DD@BPJILLIJ@combined?5CRCs?3?5stored?5?$DN?50x?$CFx?0?5co@", i32 0, i32 0), i32 %43, i32 %42)
  br label %if.end142

if.end142:                                        ; preds = %if.then138, %if.end134
  %44 = load i32, i32* %storedCombinedCRC, align 4
  %45 = load i32, i32* %computedCombinedCRC, align 4
  %cmp143 = icmp ne i32 %44, %45
  br i1 %cmp143, label %if.then145, label %if.end146

if.then145:                                       ; preds = %if.end142
  %46 = load i32, i32* %computedCombinedCRC, align 4
  %47 = load i32, i32* %storedCombinedCRC, align 4
  call void @crcError(i32 %47, i32 %46)
  br label %if.end146

if.end146:                                        ; preds = %if.then145, %if.end142
  call void @bsFinishedWithStream()
  store i32 0, i32* %retVal, align 4
  %48 = load i32, i32* %retVal, align 4
  %cmp147 = icmp eq i32 %48, -1
  br i1 %cmp147, label %if.then149, label %if.end150

if.then149:                                       ; preds = %if.end146
  call void @ioError()
  br label %if.end150

if.end150:                                        ; preds = %if.then149, %if.end146
  store i32 0, i32* %retVal, align 4
  %49 = load i32, i32* %retVal, align 4
  %cmp151 = icmp ne i32 %49, 0
  br i1 %cmp151, label %if.then153, label %if.end154

if.then153:                                       ; preds = %if.end150
  call void @ioError()
  br label %if.end154

if.end154:                                        ; preds = %if.then153, %if.end150
  store i8 1, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end154, %if.end
  %50 = load i8, i8* %retval, align 1
  ret i8 %50
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @badBlockHeader() #1 {
entry:
  %0 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @"??_C@_0FG@ENDAPJHF@?6?$CFs?3?5bad?5block?5header?5in?5the?5com@", i32 0, i32 0), i8* %0)
  call void @showFileNames()
  call void @cadvise()
  call void @cleanUpAndFail(i32 2)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @crcError(i32 %crcStored, i32 %crcComputed) #1 {
entry:
  %crcComputed.addr = alloca i32, align 4
  %crcStored.addr = alloca i32, align 4
  store i32 %crcComputed, i32* %crcComputed.addr, align 4
  store i32 %crcStored, i32* %crcStored.addr, align 4
  %0 = load i32, i32* %crcComputed.addr, align 4
  %1 = load i32, i32* %crcStored.addr, align 4
  %2 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @"??_C@_0FH@ELAJDNDD@?6?$CFs?3?5Data?5integrity?5error?5when?5d@", i32 0, i32 0), i8* %2, i32 %1, i32 %0)
  call void @showFileNames()
  call void @cadvise()
  call void @cleanUpAndFail(i32 2)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local zeroext i8 @testStream(i32 %zStream) #1 {
entry:
  %retval = alloca i8, align 1
  %zStream.addr = alloca i32, align 4
  %magic1 = alloca i8, align 1
  %magic2 = alloca i8, align 1
  %magic3 = alloca i8, align 1
  %magic4 = alloca i8, align 1
  %magic5 = alloca i8, align 1
  %magic6 = alloca i8, align 1
  %storedBlockCRC = alloca i32, align 4
  %storedCombinedCRC = alloca i32, align 4
  %computedBlockCRC = alloca i32, align 4
  %computedCombinedCRC = alloca i32, align 4
  %currBlockNo = alloca i32, align 4
  %retVal = alloca i32, align 4
  store i32 %zStream, i32* %zStream.addr, align 4
  %0 = load i32, i32* %zStream.addr, align 4
  call void @bsSetStream(i32 %0, i8 zeroext 0)
  %call = call zeroext i8 @bsGetUChar()
  store i8 %call, i8* %magic1, align 1
  %call1 = call zeroext i8 @bsGetUChar()
  store i8 %call1, i8* %magic2, align 1
  %call2 = call zeroext i8 @bsGetUChar()
  store i8 %call2, i8* %magic3, align 1
  %call3 = call zeroext i8 @bsGetUChar()
  store i8 %call3, i8* %magic4, align 1
  %1 = load i8, i8* %magic1, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 66
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8, i8* %magic2, align 1
  %conv5 = zext i8 %2 to i32
  %cmp6 = icmp ne i32 %conv5, 90
  br i1 %cmp6, label %if.then, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %3 = load i8, i8* %magic3, align 1
  %conv9 = zext i8 %3 to i32
  %cmp10 = icmp ne i32 %conv9, 104
  br i1 %cmp10, label %if.then, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %4 = load i8, i8* %magic4, align 1
  %conv13 = zext i8 %4 to i32
  %cmp14 = icmp slt i32 %conv13, 49
  br i1 %cmp14, label %if.then, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false12
  %5 = load i8, i8* %magic4, align 1
  %conv17 = zext i8 %5 to i32
  %cmp18 = icmp sgt i32 %conv17, 57
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false16, %lor.lhs.false12, %lor.lhs.false8, %lor.lhs.false, %entry
  call void @bsFinishedWithStream()
  %call20 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call20, i32 2
  %call21 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @"??_C@_0DC@DKEHONPL@?6?$CFs?3?5bad?5magic?5number?5?$CIie?0?5not?5c@", i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @inName, i32 0, i32 0))
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %lor.lhs.false16
  store i8 1, i8* @smallMode, align 1
  %6 = load i8, i8* %magic4, align 1
  %conv22 = zext i8 %6 to i32
  %sub = sub nsw i32 %conv22, 48
  call void @setDecompressStructureSizes(i32 %sub)
  store i32 0, i32* %computedCombinedCRC, align 4
  %7 = load i32, i32* @verbosity, align 4
  %cmp23 = icmp sge i32 %7, 2
  br i1 %cmp23, label %if.then25, label %if.end29

if.then25:                                        ; preds = %if.end
  %call26 = call %struct._iobuf* @__iob_func()
  %arrayidx27 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call26, i32 2
  %call28 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %if.end29

if.end29:                                         ; preds = %if.then25, %if.end
  store i32 0, i32* %currBlockNo, align 4
  br label %while.body

while.body:                                       ; preds = %if.end136, %if.end29
  %call30 = call zeroext i8 @bsGetUChar()
  store i8 %call30, i8* %magic1, align 1
  %call31 = call zeroext i8 @bsGetUChar()
  store i8 %call31, i8* %magic2, align 1
  %call32 = call zeroext i8 @bsGetUChar()
  store i8 %call32, i8* %magic3, align 1
  %call33 = call zeroext i8 @bsGetUChar()
  store i8 %call33, i8* %magic4, align 1
  %call34 = call zeroext i8 @bsGetUChar()
  store i8 %call34, i8* %magic5, align 1
  %call35 = call zeroext i8 @bsGetUChar()
  store i8 %call35, i8* %magic6, align 1
  %8 = load i8, i8* %magic1, align 1
  %conv36 = zext i8 %8 to i32
  %cmp37 = icmp eq i32 %conv36, 23
  br i1 %cmp37, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %9 = load i8, i8* %magic2, align 1
  %conv39 = zext i8 %9 to i32
  %cmp40 = icmp eq i32 %conv39, 114
  br i1 %cmp40, label %land.lhs.true42, label %if.end59

land.lhs.true42:                                  ; preds = %land.lhs.true
  %10 = load i8, i8* %magic3, align 1
  %conv43 = zext i8 %10 to i32
  %cmp44 = icmp eq i32 %conv43, 69
  br i1 %cmp44, label %land.lhs.true46, label %if.end59

land.lhs.true46:                                  ; preds = %land.lhs.true42
  %11 = load i8, i8* %magic4, align 1
  %conv47 = zext i8 %11 to i32
  %cmp48 = icmp eq i32 %conv47, 56
  br i1 %cmp48, label %land.lhs.true50, label %if.end59

land.lhs.true50:                                  ; preds = %land.lhs.true46
  %12 = load i8, i8* %magic5, align 1
  %conv51 = zext i8 %12 to i32
  %cmp52 = icmp eq i32 %conv51, 80
  br i1 %cmp52, label %land.lhs.true54, label %if.end59

land.lhs.true54:                                  ; preds = %land.lhs.true50
  %13 = load i8, i8* %magic6, align 1
  %conv55 = zext i8 %13 to i32
  %cmp56 = icmp eq i32 %conv55, 144
  br i1 %cmp56, label %if.then58, label %if.end59

if.then58:                                        ; preds = %land.lhs.true54
  br label %while.end

if.end59:                                         ; preds = %land.lhs.true54, %land.lhs.true50, %land.lhs.true46, %land.lhs.true42, %land.lhs.true, %while.body
  %14 = load i32, i32* %currBlockNo, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %currBlockNo, align 4
  %15 = load i8, i8* %magic1, align 1
  %conv60 = zext i8 %15 to i32
  %cmp61 = icmp ne i32 %conv60, 49
  br i1 %cmp61, label %if.then83, label %lor.lhs.false63

lor.lhs.false63:                                  ; preds = %if.end59
  %16 = load i8, i8* %magic2, align 1
  %conv64 = zext i8 %16 to i32
  %cmp65 = icmp ne i32 %conv64, 65
  br i1 %cmp65, label %if.then83, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %lor.lhs.false63
  %17 = load i8, i8* %magic3, align 1
  %conv68 = zext i8 %17 to i32
  %cmp69 = icmp ne i32 %conv68, 89
  br i1 %cmp69, label %if.then83, label %lor.lhs.false71

lor.lhs.false71:                                  ; preds = %lor.lhs.false67
  %18 = load i8, i8* %magic4, align 1
  %conv72 = zext i8 %18 to i32
  %cmp73 = icmp ne i32 %conv72, 38
  br i1 %cmp73, label %if.then83, label %lor.lhs.false75

lor.lhs.false75:                                  ; preds = %lor.lhs.false71
  %19 = load i8, i8* %magic5, align 1
  %conv76 = zext i8 %19 to i32
  %cmp77 = icmp ne i32 %conv76, 83
  br i1 %cmp77, label %if.then83, label %lor.lhs.false79

lor.lhs.false79:                                  ; preds = %lor.lhs.false75
  %20 = load i8, i8* %magic6, align 1
  %conv80 = zext i8 %20 to i32
  %cmp81 = icmp ne i32 %conv80, 89
  br i1 %cmp81, label %if.then83, label %if.end87

if.then83:                                        ; preds = %lor.lhs.false79, %lor.lhs.false75, %lor.lhs.false71, %lor.lhs.false67, %lor.lhs.false63, %if.end59
  call void @bsFinishedWithStream()
  %21 = load i32, i32* %currBlockNo, align 4
  %call84 = call %struct._iobuf* @__iob_func()
  %arrayidx85 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call84, i32 2
  %call86 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx85, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @"??_C@_0DD@JELJMEBD@?6?$CFs?0?5block?5?$CFd?3?5bad?5header?5?$CInot?5?$DN@", i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @inName, i32 0, i32 0), i32 %21)
  store i8 0, i8* %retval, align 1
  br label %return

if.end87:                                         ; preds = %lor.lhs.false79
  %call88 = call i32 @bsGetUInt32()
  store i32 %call88, i32* %storedBlockCRC, align 4
  %call89 = call i32 @bsR(i32 1)
  %cmp90 = icmp eq i32 %call89, 1
  br i1 %cmp90, label %if.then92, label %if.else

if.then92:                                        ; preds = %if.end87
  store i8 1, i8* @blockRandomised, align 1
  br label %if.end93

if.else:                                          ; preds = %if.end87
  store i8 0, i8* @blockRandomised, align 1
  br label %if.end93

if.end93:                                         ; preds = %if.else, %if.then92
  %22 = load i32, i32* @verbosity, align 4
  %cmp94 = icmp sge i32 %22, 2
  br i1 %cmp94, label %if.then96, label %if.end100

if.then96:                                        ; preds = %if.end93
  %23 = load i32, i32* %currBlockNo, align 4
  %call97 = call %struct._iobuf* @__iob_func()
  %arrayidx98 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call97, i32 2
  %call99 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx98, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"??_C@_0BJ@EFKNBPIK@?5?5?5?5block?5?$FL?$CFd?3?5huff?$CLmtf?5?$AA@", i32 0, i32 0), i32 %23)
  br label %if.end100

if.end100:                                        ; preds = %if.then96, %if.end93
  call void @getAndMoveToFrontDecode()
  call void @initialiseCRC()
  %24 = load i32, i32* @verbosity, align 4
  %cmp101 = icmp sge i32 %24, 2
  br i1 %cmp101, label %if.then103, label %if.end107

if.then103:                                       ; preds = %if.end100
  %call104 = call %struct._iobuf* @__iob_func()
  %arrayidx105 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call104, i32 2
  %call106 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx105, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06LOKMEELB@rt?$CLrld?$AA@", i32 0, i32 0))
  br label %if.end107

if.end107:                                        ; preds = %if.then103, %if.end100
  call void @undoReversibleTransformation_small(i32 0)
  %call108 = call i32 @getFinalCRC()
  store i32 %call108, i32* %computedBlockCRC, align 4
  %25 = load i32, i32* @verbosity, align 4
  %cmp109 = icmp sge i32 %25, 3
  br i1 %cmp109, label %if.then111, label %if.end115

if.then111:                                       ; preds = %if.end107
  %26 = load i32, i32* %computedBlockCRC, align 4
  %27 = load i32, i32* %storedBlockCRC, align 4
  %call112 = call %struct._iobuf* @__iob_func()
  %arrayidx113 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call112, i32 2
  %call114 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx113, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"??_C@_0O@PHPJJCFF@?5?$HL0x?$CFx?0?50x?$CFx?$HN?$AA@", i32 0, i32 0), i32 %27, i32 %26)
  br label %if.end115

if.end115:                                        ; preds = %if.then111, %if.end107
  %28 = load i32, i32* @verbosity, align 4
  %cmp116 = icmp sge i32 %28, 2
  br i1 %cmp116, label %if.then118, label %if.end122

if.then118:                                       ; preds = %if.end115
  %call119 = call %struct._iobuf* @__iob_func()
  %arrayidx120 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call119, i32 2
  %call121 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02PBFOLPKM@?$FN?5?$AA@", i32 0, i32 0))
  br label %if.end122

if.end122:                                        ; preds = %if.then118, %if.end115
  %29 = load i32, i32* %storedBlockCRC, align 4
  %30 = load i32, i32* %computedBlockCRC, align 4
  %cmp123 = icmp ne i32 %29, %30
  br i1 %cmp123, label %if.then125, label %if.end129

if.then125:                                       ; preds = %if.end122
  call void @bsFinishedWithStream()
  %31 = load i32, i32* %currBlockNo, align 4
  %call126 = call %struct._iobuf* @__iob_func()
  %arrayidx127 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call126, i32 2
  %call128 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx127, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @"??_C@_0DH@PBPGJFFK@?6?$CFs?0?5block?5?$CFd?3?5computed?5CRC?5does@", i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @inName, i32 0, i32 0), i32 %31)
  store i8 0, i8* %retval, align 1
  br label %return

if.end129:                                        ; preds = %if.end122
  %32 = load i32, i32* @verbosity, align 4
  %cmp130 = icmp sge i32 %32, 2
  br i1 %cmp130, label %if.then132, label %if.end136

if.then132:                                       ; preds = %if.end129
  %call133 = call %struct._iobuf* @__iob_func()
  %arrayidx134 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call133, i32 2
  %call135 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx134, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03DJDALPN@ok?6?$AA@", i32 0, i32 0))
  br label %if.end136

if.end136:                                        ; preds = %if.then132, %if.end129
  %33 = load i32, i32* %computedCombinedCRC, align 4
  %shl = shl i32 %33, 1
  %34 = load i32, i32* %computedCombinedCRC, align 4
  %shr = lshr i32 %34, 31
  %or = or i32 %shl, %shr
  store i32 %or, i32* %computedCombinedCRC, align 4
  %35 = load i32, i32* %computedBlockCRC, align 4
  %36 = load i32, i32* %computedCombinedCRC, align 4
  %xor = xor i32 %36, %35
  store i32 %xor, i32* %computedCombinedCRC, align 4
  br label %while.body

while.end:                                        ; preds = %if.then58
  %call137 = call i32 @bsGetUInt32()
  store i32 %call137, i32* %storedCombinedCRC, align 4
  %37 = load i32, i32* @verbosity, align 4
  %cmp138 = icmp sge i32 %37, 2
  br i1 %cmp138, label %if.then140, label %if.end144

if.then140:                                       ; preds = %while.end
  %38 = load i32, i32* %computedCombinedCRC, align 4
  %39 = load i32, i32* %storedCombinedCRC, align 4
  %call141 = call %struct._iobuf* @__iob_func()
  %arrayidx142 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call141, i32 2
  %call143 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx142, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @"??_C@_0DH@GEOOOFP@?5?5?5?5combined?5CRCs?3?5stored?5?$DN?50x?$CFx@", i32 0, i32 0), i32 %39, i32 %38)
  br label %if.end144

if.end144:                                        ; preds = %if.then140, %while.end
  %40 = load i32, i32* %storedCombinedCRC, align 4
  %41 = load i32, i32* %computedCombinedCRC, align 4
  %cmp145 = icmp ne i32 %40, %41
  br i1 %cmp145, label %if.then147, label %if.end151

if.then147:                                       ; preds = %if.end144
  call void @bsFinishedWithStream()
  %call148 = call %struct._iobuf* @__iob_func()
  %arrayidx149 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call148, i32 2
  %call150 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx149, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @"??_C@_0CN@PELOGPKG@?6?$CFs?3?5computed?5CRC?5does?5not?5match@", i32 0, i32 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @inName, i32 0, i32 0))
  store i8 0, i8* %retval, align 1
  br label %return

if.end151:                                        ; preds = %if.end144
  call void @bsFinishedWithStream()
  store i32 0, i32* %retVal, align 4
  %42 = load i32, i32* %retVal, align 4
  %cmp152 = icmp eq i32 %42, -1
  br i1 %cmp152, label %if.then154, label %if.end155

if.then154:                                       ; preds = %if.end151
  call void @ioError()
  br label %if.end155

if.end155:                                        ; preds = %if.then154, %if.end151
  store i8 1, i8* %retval, align 1
  br label %return

return:                                           ; preds = %if.end155, %if.then147, %if.then125, %if.then83, %if.then
  %43 = load i8, i8* %retval, align 1
  ret i8 %43
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @badBGLengths() #1 {
entry:
  %0 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([112 x i8], [112 x i8]* @"??_C@_0HA@OMFHFLIH@?6?$CFs?3?5error?5when?5reading?5backgrou@", i32 0, i32 0), i8* %0)
  call void @showFileNames()
  call void @cadvise()
  call void @cleanUpAndFail(i32 2)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @bitStreamEOF() #1 {
entry:
  %0 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"??_C@_0FD@DPFPGMHI@?6?$CFs?3?5read?5past?5the?5end?5of?5compre@", i32 0, i32 0), i8* %0)
  call void @showFileNames()
  call void @cadvise()
  call void @cleanUpAndFail(i32 2)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @mySignalCatcher(i32 %n) #1 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @"??_C@_0CP@MAMNFBII@?6?$CFs?3?5Control?9C?5?$CIor?5similar?$CJ?5caug@", i32 0, i32 0), i8* %0)
  call void @cleanUpAndFail(i32 1)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @mySIGSEGVorSIGBUScatcher(i32 %n) #1 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* @opMode, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** @progName, align 4
  %call = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call, i32 2
  %call1 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @"??_C@_0IM@OOGCOPJG@?6?$CFs?3?5Caught?5a?5SIGSEGV?5or?5SIGBUS?5@", i32 0, i32 0), i8* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load i8*, i8** @progName, align 4
  %call2 = call %struct._iobuf* @__iob_func()
  %arrayidx3 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call2, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx3, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @"??_C@_0HJ@CHPFEBGG@?6?$CFs?3?5Caught?5a?5SIGSEGV?5or?5SIGBUS?5@", i32 0, i32 0), i8* %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @showFileNames()
  %3 = load i32, i32* @opMode, align 4
  %cmp5 = icmp eq i32 %3, 1
  br i1 %cmp5, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.end
  call void @cleanUpAndFail(i32 3)
  br label %if.end8

if.else7:                                         ; preds = %if.end
  call void @cadvise()
  call void @cleanUpAndFail(i32 2)
  br label %if.end8

if.end8:                                          ; preds = %if.else7, %if.then6
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local double @ran() #0 {
entry:
  %lo = alloca i32, align 4
  %hi = alloca i32, align 4
  %test = alloca i32, align 4
  %0 = load i32, i32* @seedi, align 4
  %div = sdiv i32 %0, 127773
  store i32 %div, i32* %hi, align 4
  %1 = load i32, i32* @seedi, align 4
  %rem = srem i32 %1, 127773
  store i32 %rem, i32* %lo, align 4
  %2 = load i32, i32* %lo, align 4
  %mul = mul nsw i32 16807, %2
  %3 = load i32, i32* %hi, align 4
  %mul1 = mul nsw i32 2836, %3
  %sub = sub nsw i32 %mul, %mul1
  store i32 %sub, i32* %test, align 4
  %4 = load i32, i32* %test, align 4
  %cmp = icmp sgt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %test, align 4
  store i32 %5, i32* @seedi, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %test, align 4
  %add = add nsw i32 %6, 2147483647
  store i32 %add, i32* @seedi, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load i32, i32* @seedi, align 4
  %conv = sitofp i32 %7 to float
  %div2 = fdiv float %conv, 0x41E0000000000000
  %conv3 = fpext float %div2 to double
  ret double %conv3
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @spec_init() #1 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %limit = alloca i32, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 3, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"??_C@_0L@HODMACKF@spec_init?6?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc21, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 3
  br i1 %cmp1, label %for.body, label %for.end22

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %2
  %limit2 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx, i32 0, i32 0
  %3 = load i32, i32* %limit2, align 4
  store i32 %3, i32* %limit, align 4
  %4 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %5 = bitcast %struct.spec_fd_t* %arrayidx3 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %5, i8 0, i32 16, i1 false)
  %6 = load i32, i32* %limit, align 4
  %7 = load i32, i32* %i, align 4
  %arrayidx4 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %7
  %limit5 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx4, i32 0, i32 0
  store i32 %6, i32* %limit5, align 4
  %8 = load i32, i32* %limit, align 4
  %add = add nsw i32 %8, 102400
  %call6 = call noalias i8* @malloc(i32 %add) #5
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %9
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 3
  store i8* %call6, i8** %buf, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %10
  %buf9 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx8, i32 0, i32 3
  %11 = load i8*, i8** %buf9, align 4
  %cmp10 = icmp eq i8* %11, null
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %for.body
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @"??_C@_0CE@CICPOJPD@spec_init?3?5Error?5mallocing?5memor@", i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

if.end13:                                         ; preds = %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %if.end13
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %limit, align 4
  %cmp15 = icmp slt i32 %12, %13
  br i1 %cmp15, label %for.body16, label %for.end

for.body16:                                       ; preds = %for.cond14
  %14 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %14
  %buf18 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx17, i32 0, i32 3
  %15 = load i8*, i8** %buf18, align 4
  %16 = load i32, i32* %j, align 4
  %arrayidx19 = getelementptr inbounds i8, i8* %15, i32 %16
  store i8 0, i8* %arrayidx19, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body16
  %17 = load i32, i32* %j, align 4
  %add20 = add nsw i32 %17, 1024
  store i32 %add20, i32* %j, align 4
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.inc21

for.inc21:                                        ; preds = %for.end
  %18 = load i32, i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end22:                                        ; preds = %for.cond
  ret i32 0
}

declare dllimport i32 @printf(i8*, ...) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1) #5

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @spec_random_load(i32 %fd) #1 {
entry:
  %fd.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %random_text = alloca [32 x [131072 x i8]], align 1
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"??_C@_0BB@FOGGIPDD@Creating?5Chunks?6?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc12, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 32
  br i1 %cmp1, label %for.body, label %for.end14

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* @dbglvl, align 4
  %cmp2 = icmp slt i32 5, %2
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"??_C@_0BD@LLLPCEOC@Creating?5Chunk?5?$CFd?6?$AA@", i32 0, i32 0), i32 %3)
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %for.body
  store i32 0, i32* %j, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.end5
  %4 = load i32, i32* %j, align 4
  %cmp7 = icmp slt i32 %4, 131072
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %call9 = call double @ran()
  %mul = fmul double %call9, 2.560000e+02
  %conv = fptosi double %mul to i32
  %conv10 = trunc i32 %conv to i8
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [32 x [131072 x i8]], [32 x [131072 x i8]]* %random_text, i32 0, i32 %5
  %6 = load i32, i32* %j, align 4
  %arrayidx11 = getelementptr inbounds [131072 x i8], [131072 x i8]* %arrayidx, i32 0, i32 %6
  store i8 %conv10, i8* %arrayidx11, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %7 = load i32, i32* %j, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %j, align 4
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  br label %for.inc12

for.inc12:                                        ; preds = %for.end
  %8 = load i32, i32* %i, align 4
  %inc13 = add nsw i32 %8, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond

for.end14:                                        ; preds = %for.cond
  %9 = load i32, i32* @dbglvl, align 4
  %cmp15 = icmp slt i32 4, %9
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %for.end14
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"??_C@_0BE@GLOHHOFE@Filling?5input?5file?6?$AA@", i32 0, i32 0))
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %for.end14
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc30, %if.end19
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %fd.addr, align 4
  %arrayidx21 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %11
  %limit = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx21, i32 0, i32 0
  %12 = load i32, i32* %limit, align 4
  %cmp22 = icmp slt i32 %10, %12
  br i1 %cmp22, label %for.body24, label %for.end31

for.body24:                                       ; preds = %for.cond20
  %13 = load i32, i32* %fd.addr, align 4
  %arrayidx25 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %13
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx25, i32 0, i32 3
  %14 = load i8*, i8** %buf, align 4
  %15 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %14, i32 %15
  %call26 = call double @ran()
  %mul27 = fmul double %call26, 3.200000e+01
  %conv28 = fptosi double %mul27 to i32
  %arrayidx29 = getelementptr inbounds [32 x [131072 x i8]], [32 x [131072 x i8]]* %random_text, i32 0, i32 %conv28
  %arraydecay = getelementptr inbounds [131072 x i8], [131072 x i8]* %arrayidx29, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr, i8* align 1 %arraydecay, i32 131072, i1 false)
  br label %for.inc30

for.inc30:                                        ; preds = %for.body24
  %16 = load i32, i32* %i, align 4
  %add = add nsw i32 %16, 131072
  store i32 %add, i32* %i, align 4
  br label %for.cond20

for.end31:                                        ; preds = %for.cond20
  %17 = load i32, i32* %fd.addr, align 4
  %arrayidx32 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %17
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx32, i32 0, i32 1
  store i32 1048576, i32* %len, align 4
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1) #5

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @spec_load(i32 %num, i8* %filename, i32 %size) #1 {
entry:
  %size.addr = alloca i32, align 4
  %filename.addr = alloca i8*, align 4
  %num.addr = alloca i32, align 4
  %fd = alloca i32, align 4
  %rc = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %filename, i8** %filename.addr, align 4
  store i32 %num, i32* %num.addr, align 4
  %0 = load i8*, i8** %filename.addr, align 4
  %call = call i32 bitcast (i32 (...)* @open to i32 (i8*, i32)*)(i8* %0, i32 32768)
  store i32 %call, i32* %fd, align 4
  %1 = load i32, i32* %fd, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32* @_errno()
  %2 = load i32, i32* %call1, align 4
  %call2 = call i8* @strerror(i32 %2)
  %3 = load i8*, i8** %filename.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"??_C@_0BI@PNOIDAGN@Can?8t?5open?5file?5?$CFs?3?5?$CFs?6?$AA@", i32 0, i32 0), i8* %3, i8* %call2)
  call void @exit(i32 1) #6
  unreachable

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %num.addr, align 4
  %arrayidx5 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx5, i32 0, i32 1
  store i32 0, i32* %len, align 4
  %5 = load i32, i32* %num.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %5
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4
  %7 = load i32, i32* %size.addr, align 4
  %cmp7 = icmp slt i32 %6, %7
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %num.addr, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx8, i32 0, i32 3
  %9 = load i8*, i8** %buf, align 4
  %10 = load i32, i32* %i, align 4
  %add.ptr = getelementptr inbounds i8, i8* %9, i32 %10
  %11 = load i32, i32* %fd, align 4
  %call9 = call i32 bitcast (i32 (...)* @read to i32 (i32, i8*, i32)*)(i32 %11, i8* %add.ptr, i32 131072)
  store i32 %call9, i32* %rc, align 4
  %12 = load i32, i32* %rc, align 4
  %cmp10 = icmp eq i32 %12, 0
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %for.body
  br label %for.end

if.end12:                                         ; preds = %for.body
  %13 = load i32, i32* %rc, align 4
  %cmp13 = icmp slt i32 %13, 0
  br i1 %cmp13, label %if.then14, label %if.end20

if.then14:                                        ; preds = %if.end12
  %call15 = call i32* @_errno()
  %14 = load i32, i32* %call15, align 4
  %call16 = call i8* @strerror(i32 %14)
  %15 = load i8*, i8** %filename.addr, align 4
  %call17 = call %struct._iobuf* @__iob_func()
  %arrayidx18 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call17, i32 2
  %call19 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx18, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"??_C@_0BL@JAKFMFOB@Error?5reading?5from?5?$CFs?3?5?$CFs?6?$AA@", i32 0, i32 0), i8* %15, i8* %call16)
  call void @exit(i32 1) #6
  unreachable

if.end20:                                         ; preds = %if.end12
  %16 = load i32, i32* %rc, align 4
  %17 = load i32, i32* %num.addr, align 4
  %arrayidx21 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %17
  %len22 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx21, i32 0, i32 1
  %18 = load i32, i32* %len22, align 4
  %add = add nsw i32 %18, %16
  store i32 %add, i32* %len22, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %19 = load i32, i32* %rc, align 4
  %20 = load i32, i32* %i, align 4
  %add23 = add nsw i32 %20, %19
  store i32 %add23, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then11, %for.cond
  %21 = load i32, i32* %fd, align 4
  %call24 = call i32 bitcast (i32 (...)* @close to i32 (i32)*)(i32 %21)
  br label %while.cond

while.cond:                                       ; preds = %if.end40, %for.end
  %22 = load i32, i32* %num.addr, align 4
  %arrayidx25 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %22
  %len26 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx25, i32 0, i32 1
  %23 = load i32, i32* %len26, align 4
  %24 = load i32, i32* %size.addr, align 4
  %cmp27 = icmp slt i32 %23, %24
  br i1 %cmp27, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %25 = load i32, i32* %size.addr, align 4
  %26 = load i32, i32* %num.addr, align 4
  %arrayidx28 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %26
  %len29 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx28, i32 0, i32 1
  %27 = load i32, i32* %len29, align 4
  %sub = sub nsw i32 %25, %27
  store i32 %sub, i32* %tmp, align 4
  %28 = load i32, i32* %tmp, align 4
  %29 = load i32, i32* %num.addr, align 4
  %arrayidx30 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %29
  %len31 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx30, i32 0, i32 1
  %30 = load i32, i32* %len31, align 4
  %cmp32 = icmp sgt i32 %28, %30
  br i1 %cmp32, label %if.then33, label %if.end36

if.then33:                                        ; preds = %while.body
  %31 = load i32, i32* %num.addr, align 4
  %arrayidx34 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %31
  %len35 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx34, i32 0, i32 1
  %32 = load i32, i32* %len35, align 4
  store i32 %32, i32* %tmp, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then33, %while.body
  %33 = load i32, i32* @dbglvl, align 4
  %cmp37 = icmp slt i32 3, %33
  br i1 %cmp37, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end36
  %34 = load i32, i32* %tmp, align 4
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"??_C@_0BG@MFFNAFHA@Duplicating?5?$CFd?5bytes?6?$AA@", i32 0, i32 0), i32 %34)
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.end36
  %35 = load i32, i32* %num.addr, align 4
  %arrayidx41 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %35
  %buf42 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx41, i32 0, i32 3
  %36 = load i8*, i8** %buf42, align 4
  %37 = load i32, i32* %num.addr, align 4
  %arrayidx43 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %37
  %len44 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx43, i32 0, i32 1
  %38 = load i32, i32* %len44, align 4
  %add.ptr45 = getelementptr inbounds i8, i8* %36, i32 %38
  %39 = load i32, i32* %num.addr, align 4
  %arrayidx46 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %39
  %buf47 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx46, i32 0, i32 3
  %40 = load i8*, i8** %buf47, align 4
  %41 = load i32, i32* %tmp, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %add.ptr45, i8* align 1 %40, i32 %41, i1 false)
  %42 = load i32, i32* %tmp, align 4
  %43 = load i32, i32* %num.addr, align 4
  %arrayidx48 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %43
  %len49 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx48, i32 0, i32 1
  %44 = load i32, i32* %len49, align 4
  %add50 = add nsw i32 %44, %42
  store i32 %add50, i32* %len49, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret i32 0
}

declare dso_local i32 @open(...) #2

declare dllimport i32* @_errno() #2

declare dllimport i8* @strerror(i32) #2

declare dso_local i32 @read(...) #2

declare dso_local i32 @close(...) #2

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @spec_read(i32 %fd, i8* %buf, i32 %size) #1 {
entry:
  %retval = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %fd.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i32 0, i32* %rc, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %2 = load i8*, i8** %buf.addr, align 4
  %3 = load i32, i32* %fd.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"??_C@_0BJ@BAEOOLFB@spec_read?3?5?$CFd?0?5?$CFp?0?5?$CFd?5?$DN?5?$AA@", i32 0, i32 0), i32 %3, i8* %2, i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %4, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %fd.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@PGADNMPC@spec_read?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD?$CB@", i32 0, i32 0), i32 %5)
  call void @exit(i32 1) #6
  unreachable

if.end5:                                          ; preds = %if.end
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  %7 = load i32, i32* %pos, align 4
  %8 = load i32, i32* %fd.addr, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 1
  %9 = load i32, i32* %len, align 4
  %cmp8 = icmp sge i32 %7, %9
  br i1 %cmp8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end5
  %10 = load i32, i32* @dbglvl, align 4
  %cmp10 = icmp slt i32 4, %10
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.then9
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04OEEBIOEI@EOF?6?$AA@", i32 0, i32 0))
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.then9
  store i32 -1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end5
  %11 = load i32, i32* %fd.addr, align 4
  %arrayidx15 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %11
  %pos16 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx15, i32 0, i32 2
  %12 = load i32, i32* %pos16, align 4
  %13 = load i32, i32* %size.addr, align 4
  %add = add nsw i32 %12, %13
  %14 = load i32, i32* %fd.addr, align 4
  %arrayidx17 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %14
  %len18 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx17, i32 0, i32 1
  %15 = load i32, i32* %len18, align 4
  %cmp19 = icmp sge i32 %add, %15
  br i1 %cmp19, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.end14
  %16 = load i32, i32* %fd.addr, align 4
  %arrayidx21 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %16
  %len22 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx21, i32 0, i32 1
  %17 = load i32, i32* %len22, align 4
  %18 = load i32, i32* %fd.addr, align 4
  %arrayidx23 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %18
  %pos24 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx23, i32 0, i32 2
  %19 = load i32, i32* %pos24, align 4
  %sub = sub nsw i32 %17, %19
  store i32 %sub, i32* %rc, align 4
  br label %if.end25

if.else:                                          ; preds = %if.end14
  %20 = load i32, i32* %size.addr, align 4
  store i32 %20, i32* %rc, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then20
  %21 = load i8*, i8** %buf.addr, align 4
  %22 = load i32, i32* %fd.addr, align 4
  %arrayidx26 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %22
  %buf27 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx26, i32 0, i32 3
  %23 = load i8*, i8** %buf27, align 4
  %24 = load i32, i32* %fd.addr, align 4
  %arrayidx28 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %24
  %pos29 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx28, i32 0, i32 2
  %25 = load i32, i32* %pos29, align 4
  %arrayidx30 = getelementptr inbounds i8, i8* %23, i32 %25
  %26 = load i32, i32* %rc, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %21, i8* align 1 %arrayidx30, i32 %26, i1 false)
  %27 = load i32, i32* %rc, align 4
  %28 = load i32, i32* %fd.addr, align 4
  %arrayidx31 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %28
  %pos32 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx31, i32 0, i32 2
  %29 = load i32, i32* %pos32, align 4
  %add33 = add nsw i32 %29, %27
  store i32 %add33, i32* %pos32, align 4
  %30 = load i32, i32* @dbglvl, align 4
  %cmp34 = icmp slt i32 4, %30
  br i1 %cmp34, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end25
  %31 = load i32, i32* %rc, align 4
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03PMGGPEJJ@?$CFd?6?$AA@", i32 0, i32 0), i32 %31)
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end25
  %32 = load i32, i32* %rc, align 4
  store i32 %32, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end37, %if.end13
  %33 = load i32, i32* %retval, align 4
  ret i32 %33
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @spec_getc(i32 %fd) #1 {
entry:
  %retval = alloca i32, align 4
  %fd.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i32 0, i32* %rc, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"??_C@_0BB@GPMEHCHC@spec_getc?3?5?$CFd?5?$DN?5?$AA@", i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %2, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %fd.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@PGADNMPC@spec_read?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD?$CB@", i32 0, i32 0), i32 %3)
  call void @exit(i32 1) #6
  unreachable

if.end5:                                          ; preds = %if.end
  %4 = load i32, i32* %fd.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  %5 = load i32, i32* %pos, align 4
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 1
  %7 = load i32, i32* %len, align 4
  %cmp8 = icmp sge i32 %5, %7
  br i1 %cmp8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end5
  %8 = load i32, i32* @dbglvl, align 4
  %cmp10 = icmp slt i32 4, %8
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.then9
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04OEEBIOEI@EOF?6?$AA@", i32 0, i32 0))
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.then9
  store i32 -1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end5
  %9 = load i32, i32* %fd.addr, align 4
  %arrayidx15 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %9
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx15, i32 0, i32 3
  %10 = load i8*, i8** %buf, align 4
  %11 = load i32, i32* %fd.addr, align 4
  %arrayidx16 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %11
  %pos17 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx16, i32 0, i32 2
  %12 = load i32, i32* %pos17, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %pos17, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %10, i32 %12
  %13 = load i8, i8* %arrayidx18, align 1
  %conv = zext i8 %13 to i32
  store i32 %conv, i32* %rc, align 4
  %14 = load i32, i32* @dbglvl, align 4
  %cmp19 = icmp slt i32 4, %14
  br i1 %cmp19, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end14
  %15 = load i32, i32* %rc, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03PMGGPEJJ@?$CFd?6?$AA@", i32 0, i32 0), i32 %15)
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.end14
  %16 = load i32, i32* %rc, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %if.end13
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @spec_ungetc(i8 zeroext %ch, i32 %fd) #1 {
entry:
  %fd.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  %rc = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  store i32 0, i32* %rc, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"??_C@_0BD@POGOMCNJ@spec_ungetc?3?5?$CFd?5?$DN?5?$AA@", i32 0, i32 0), i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %2, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load i32, i32* %fd.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@PGADNMPC@spec_read?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD?$CB@", i32 0, i32 0), i32 %3)
  call void @exit(i32 1) #6
  unreachable

if.end5:                                          ; preds = %if.end
  %4 = load i32, i32* %fd.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 2
  %5 = load i32, i32* %pos, align 4
  %cmp7 = icmp sle i32 %5, 0
  br i1 %cmp7, label %if.then8, label %if.end14

if.then8:                                         ; preds = %if.end5
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx9 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %pos10 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx9, i32 0, i32 2
  %7 = load i32, i32* %pos10, align 4
  %call11 = call %struct._iobuf* @__iob_func()
  %arrayidx12 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call11, i32 2
  %call13 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx12, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"??_C@_0BK@PBMPALNH@spec_ungetc?3?5pos?5?$CFd?5?$DM?$DN?50?6?$AA@", i32 0, i32 0), i32 %7)
  call void @exit(i32 1) #6
  unreachable

if.end14:                                         ; preds = %if.end5
  %8 = load i32, i32* %fd.addr, align 4
  %arrayidx15 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx15, i32 0, i32 3
  %9 = load i8*, i8** %buf, align 4
  %10 = load i32, i32* %fd.addr, align 4
  %arrayidx16 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %10
  %pos17 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx16, i32 0, i32 2
  %11 = load i32, i32* %pos17, align 4
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %pos17, align 4
  %arrayidx18 = getelementptr inbounds i8, i8* %9, i32 %dec
  %12 = load i8, i8* %arrayidx18, align 1
  %conv = zext i8 %12 to i32
  %13 = load i8, i8* %ch.addr, align 1
  %conv19 = zext i8 %13 to i32
  %cmp20 = icmp ne i32 %conv, %conv19
  br i1 %cmp20, label %if.then22, label %if.end26

if.then22:                                        ; preds = %if.end14
  %call23 = call %struct._iobuf* @__iob_func()
  %arrayidx24 = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call23, i32 2
  %call25 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx24, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @"??_C@_0EI@JGFIDMH@spec_ungetc?3?5can?8t?5unget?5somethi@", i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

if.end26:                                         ; preds = %if.end14
  %14 = load i32, i32* @dbglvl, align 4
  %cmp27 = icmp slt i32 4, %14
  br i1 %cmp27, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end26
  %15 = load i32, i32* %rc, align 4
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03PMGGPEJJ@?$CFd?6?$AA@", i32 0, i32 0), i32 %15)
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %if.end26
  %16 = load i8, i8* %ch.addr, align 1
  %conv32 = zext i8 %16 to i32
  ret i32 %conv32
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local i32 @spec_rewind(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* %fd.addr, align 4
  %arrayidx = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %0
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx, i32 0, i32 2
  store i32 0, i32* %pos, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local i32 @spec_reset(i32 %fd) #0 {
entry:
  %fd.addr = alloca i32, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* %fd.addr, align 4
  %arrayidx = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %0
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx, i32 0, i32 3
  %1 = load i8*, i8** %buf, align 4
  %2 = load i32, i32* %fd.addr, align 4
  %arrayidx1 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %2
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx1, i32 0, i32 1
  %3 = load i32, i32* %len, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %1, i8 0, i32 %3, i1 false)
  %4 = load i32, i32* %fd.addr, align 4
  %arrayidx2 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %4
  %len3 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx2, i32 0, i32 1
  store i32 0, i32* %len3, align 4
  %5 = load i32, i32* %fd.addr, align 4
  %arrayidx4 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %5
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx4, i32 0, i32 2
  store i32 0, i32* %pos, align 4
  ret i32 0
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @spec_write(i32 %fd, i8* %buf, i32 %size) #1 {
entry:
  %size.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 4
  %fd.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4
  store i8* %buf, i8** %buf.addr, align 4
  store i32 %fd, i32* %fd.addr, align 4
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4
  %2 = load i8*, i8** %buf.addr, align 4
  %3 = load i32, i32* %fd.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"??_C@_0BK@NBIONNGF@spec_write?3?5?$CFd?0?5?$CFp?0?5?$CFd?5?$DN?5?$AA@", i32 0, i32 0), i32 %3, i8* %2, i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %4, 3
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %fd.addr, align 4
  %call3 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call3, i32 2
  %call4 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"??_C@_0CD@NANFEFEM@spec_write?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD@", i32 0, i32 0), i32 %5)
  call void @exit(i32 1) #6
  unreachable

if.end5:                                          ; preds = %if.end
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx6 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %buf7 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx6, i32 0, i32 3
  %7 = load i8*, i8** %buf7, align 4
  %8 = load i32, i32* %fd.addr, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx8, i32 0, i32 2
  %9 = load i32, i32* %pos, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %7, i32 %9
  %10 = load i8*, i8** %buf.addr, align 4
  %11 = load i32, i32* %size.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arrayidx9, i8* align 1 %10, i32 %11, i1 false)
  %12 = load i32, i32* %size.addr, align 4
  %13 = load i32, i32* %fd.addr, align 4
  %arrayidx10 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %13
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx10, i32 0, i32 1
  %14 = load i32, i32* %len, align 4
  %add = add nsw i32 %14, %12
  store i32 %add, i32* %len, align 4
  %15 = load i32, i32* %size.addr, align 4
  %16 = load i32, i32* %fd.addr, align 4
  %arrayidx11 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %16
  %pos12 = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx11, i32 0, i32 2
  %17 = load i32, i32* %pos12, align 4
  %add13 = add nsw i32 %17, %15
  store i32 %add13, i32* %pos12, align 4
  %18 = load i32, i32* @dbglvl, align 4
  %cmp14 = icmp slt i32 4, %18
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end5
  %19 = load i32, i32* %size.addr, align 4
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03PMGGPEJJ@?$CFd?6?$AA@", i32 0, i32 0), i32 %19)
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %if.end5
  %20 = load i32, i32* %size.addr, align 4
  ret i32 %20
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @spec_putc(i8 zeroext %ch, i32 %fd) #1 {
entry:
  %fd.addr = alloca i32, align 4
  %ch.addr = alloca i8, align 1
  store i32 %fd, i32* %fd.addr, align 4
  store i8 %ch, i8* %ch.addr, align 1
  %0 = load i32, i32* @dbglvl, align 4
  %cmp = icmp slt i32 4, %0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %fd.addr, align 4
  %2 = load i8, i8* %ch.addr, align 1
  %conv = zext i8 %2 to i32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"??_C@_0BF@MPLILGCO@spec_putc?3?5?$CFd?0?5?$CFd?5?$DN?5?$AA@", i32 0, i32 0), i32 %conv, i32 %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %fd.addr, align 4
  %cmp1 = icmp sgt i32 %3, 3
  br i1 %cmp1, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.end
  %4 = load i32, i32* %fd.addr, align 4
  %call4 = call %struct._iobuf* @__iob_func()
  %arrayidx = getelementptr inbounds %struct._iobuf, %struct._iobuf* %call4, i32 2
  %call5 = call i32 (%struct._iobuf*, i8*, ...) @fprintf(%struct._iobuf* %arrayidx, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"??_C@_0CD@NANFEFEM@spec_write?3?5fd?$DN?$CFd?0?5?$DO?5MAX_SPEC_FD@", i32 0, i32 0), i32 %4)
  call void @exit(i32 1) #6
  unreachable

if.end6:                                          ; preds = %if.end
  %5 = load i8, i8* %ch.addr, align 1
  %6 = load i32, i32* %fd.addr, align 4
  %arrayidx7 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %6
  %buf = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx7, i32 0, i32 3
  %7 = load i8*, i8** %buf, align 4
  %8 = load i32, i32* %fd.addr, align 4
  %arrayidx8 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %8
  %pos = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx8, i32 0, i32 2
  %9 = load i32, i32* %pos, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %pos, align 4
  %arrayidx9 = getelementptr inbounds i8, i8* %7, i32 %9
  store i8 %5, i8* %arrayidx9, align 1
  %10 = load i32, i32* %fd.addr, align 4
  %arrayidx10 = getelementptr inbounds [3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 %10
  %len = getelementptr inbounds %struct.spec_fd_t, %struct.spec_fd_t* %arrayidx10, i32 0, i32 1
  %11 = load i32, i32* %len, align 4
  %inc11 = add nsw i32 %11, 1
  store i32 %inc11, i32* %len, align 4
  %12 = load i8, i8* %ch.addr, align 1
  %conv12 = zext i8 %12 to i32
  ret i32 %conv12
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @timetest() #1 {
entry:
  %argc = alloca i32, align 4
  %argv = alloca [3 x i8*], align 4
  %i = alloca i32, align 4
  %level = alloca i32, align 4
  %input_size = alloca i32, align 4
  %compressed_size = alloca i32, align 4
  %input_name = alloca i8*, align 4
  %validate_array = alloca i8*, align 4
  store i32 64, i32* %input_size, align 4
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"??_C@_0P@IBHKFCCJ@input?4combined?$AA@", i32 0, i32 0), i8** %input_name, align 4
  store i32 10, i32* @seedi, align 4
  store i32 3, i32* %argc, align 4
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %argv, i32 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"??_C@_0N@KOLOAFDN@input?4random?$AA@", i32 0, i32 0), i8** %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [3 x i8*], [3 x i8*]* %argv, i32 0, i32 2
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01FDFGLJHB@2?$AA@", i32 0, i32 0), i8** %arrayidx1, align 4
  %0 = load i32, i32* %argc, align 4
  %cmp = icmp sgt i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx2 = getelementptr inbounds [3 x i8*], [3 x i8*]* %argv, i32 0, i32 1
  %1 = load i8*, i8** %arrayidx2, align 4
  store i8* %1, i8** %input_name, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %argc, align 4
  %cmp3 = icmp sgt i32 %2, 2
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %arrayidx5 = getelementptr inbounds [3 x i8*], [3 x i8*]* %argv, i32 0, i32 2
  %3 = load i8*, i8** %arrayidx5, align 4
  %call = call i32 @atoi(i8* %3)
  store i32 %call, i32* %input_size, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %4 = load i32, i32* %argc, align 4
  %cmp7 = icmp sgt i32 %4, 3
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end6
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* %argv, i32 0, i32 3
  %5 = load i8*, i8** %arrayidx9, align 4
  %call10 = call i32 @atoi(i8* %5)
  store i32 %call10, i32* %compressed_size, align 4
  br label %if.end11

if.else:                                          ; preds = %if.end6
  %6 = load i32, i32* %input_size, align 4
  store i32 %6, i32* %compressed_size, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then8
  %7 = load i32, i32* %input_size, align 4
  %mul = mul nsw i32 %7, 1048576
  store i32 %mul, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 0), align 4
  %8 = load i32, i32* %compressed_size, align 4
  %mul12 = mul nsw i32 %8, 1048576
  store i32 %mul12, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 1, i32 0), align 4
  %9 = load i32, i32* %input_size, align 4
  %mul13 = mul nsw i32 %9, 1048576
  store i32 %mul13, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 2, i32 0), align 4
  %call14 = call i32 @spec_init()
  %call15 = call i32 @debug_time()
  %10 = load i32, i32* @dbglvl, align 4
  %cmp16 = icmp slt i32 2, %10
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end11
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"??_C@_0BE@EEBELGKE@Loading?5Input?5Data?6?$AA@", i32 0, i32 0))
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %if.end11
  %11 = load i32, i32* %input_size, align 4
  %mul20 = mul nsw i32 %11, 1048576
  %12 = load i8*, i8** %input_name, align 4
  %call21 = call i32 @spec_load(i32 0, i8* %12, i32 %mul20)
  %13 = load i32, i32* @dbglvl, align 4
  %cmp22 = icmp slt i32 3, %13
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end19
  %14 = load i32, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 1), align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"??_C@_0BP@KDCDDFCD@Input?5data?5?$CFd?5bytes?5in?5length?6?$AA@", i32 0, i32 0), i32 %14)
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.end19
  %15 = load i32, i32* %input_size, align 4
  %mul26 = mul nsw i32 %15, 1048576
  %div = sdiv i32 %mul26, 1024
  %call27 = call noalias i8* @malloc(i32 %div) #5
  store i8* %call27, i8** %validate_array, align 4
  %16 = load i8*, i8** %validate_array, align 4
  %cmp28 = icmp eq i8* %16, null
  br i1 %cmp28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end25
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"??_C@_0BP@KJFPKECC@main?3?5Error?5mallocing?5memory?$CB?6?$AA@", i32 0, i32 0))
  call void @exit(i32 1) #6
  unreachable

if.end31:                                         ; preds = %if.end25
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end31
  %17 = load i32, i32* %i, align 4
  %mul32 = mul nsw i32 %17, 1027
  %18 = load i32, i32* %input_size, align 4
  %mul33 = mul nsw i32 %18, 1048576
  %cmp34 = icmp slt i32 %mul32, %mul33
  br i1 %cmp34, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i8*, i8** getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 3), align 4
  %20 = load i32, i32* %i, align 4
  %mul35 = mul nsw i32 %20, 1027
  %arrayidx36 = getelementptr inbounds i8, i8* %19, i32 %mul35
  %21 = load i8, i8* %arrayidx36, align 1
  %22 = load i8*, i8** %validate_array, align 4
  %23 = load i32, i32* %i, align 4
  %arrayidx37 = getelementptr inbounds i8, i8* %22, i32 %23
  store i8 %21, i8* %arrayidx37, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %i, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @spec_initbufs()
  store i32 7, i32* %level, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc88, %for.end
  %25 = load i32, i32* %level, align 4
  %cmp39 = icmp sle i32 %25, 9
  br i1 %cmp39, label %for.body40, label %for.end89

for.body40:                                       ; preds = %for.cond38
  %call41 = call i32 @debug_time()
  %26 = load i32, i32* @dbglvl, align 4
  %cmp42 = icmp slt i32 2, %26
  br i1 %cmp42, label %if.then43, label %if.end45

if.then43:                                        ; preds = %for.body40
  %27 = load i32, i32* %level, align 4
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@KJFJJBAE@Compressing?5Input?5Data?0?5level?5?$CFd@", i32 0, i32 0), i32 %27)
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %for.body40
  %28 = load i32, i32* %level, align 4
  call void @spec_compress(i32 0, i32 1, i32 %28)
  %call46 = call i32 @debug_time()
  %29 = load i32, i32* @dbglvl, align 4
  %cmp47 = icmp slt i32 3, %29
  br i1 %cmp47, label %if.then48, label %if.end50

if.then48:                                        ; preds = %if.end45
  %30 = load i32, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 1, i32 1), align 4
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @"??_C@_0CE@PFHIOJOC@Compressed?5data?5?$CFd?5bytes?5in?5leng@", i32 0, i32 0), i32 %30)
  br label %if.end50

if.end50:                                         ; preds = %if.then48, %if.end45
  %call51 = call i32 @spec_reset(i32 0)
  %call52 = call i32 @spec_rewind(i32 1)
  %call53 = call i32 @debug_time()
  %31 = load i32, i32* @dbglvl, align 4
  %cmp54 = icmp slt i32 2, %31
  br i1 %cmp54, label %if.then55, label %if.end57

if.then55:                                        ; preds = %if.end50
  %call56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"??_C@_0BE@JICHKDFP@Uncompressing?5Data?6?$AA@", i32 0, i32 0))
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %if.end50
  %32 = load i32, i32* %level, align 4
  call void @spec_uncompress(i32 1, i32 0, i32 %32)
  %call58 = call i32 @debug_time()
  %33 = load i32, i32* @dbglvl, align 4
  %cmp59 = icmp slt i32 3, %33
  br i1 %cmp59, label %if.then60, label %if.end62

if.then60:                                        ; preds = %if.end57
  %34 = load i32, i32* getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 1), align 4
  %call61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"??_C@_0CG@DJIKCILP@Uncompressed?5data?5?$CFd?5bytes?5in?5le@", i32 0, i32 0), i32 %34)
  br label %if.end62

if.end62:                                         ; preds = %if.then60, %if.end57
  store i32 0, i32* %i, align 4
  br label %for.cond63

for.cond63:                                       ; preds = %for.inc77, %if.end62
  %35 = load i32, i32* %i, align 4
  %mul64 = mul nsw i32 %35, 1027
  %36 = load i32, i32* %input_size, align 4
  %mul65 = mul nsw i32 %36, 1048576
  %cmp66 = icmp slt i32 %mul64, %mul65
  br i1 %cmp66, label %for.body67, label %for.end79

for.body67:                                       ; preds = %for.cond63
  %37 = load i8*, i8** %validate_array, align 4
  %38 = load i32, i32* %i, align 4
  %arrayidx68 = getelementptr inbounds i8, i8* %37, i32 %38
  %39 = load i8, i8* %arrayidx68, align 1
  %conv = zext i8 %39 to i32
  %40 = load i8*, i8** getelementptr inbounds ([3 x %struct.spec_fd_t], [3 x %struct.spec_fd_t]* @spec_fd, i32 0, i32 0, i32 3), align 4
  %41 = load i32, i32* %i, align 4
  %mul69 = mul nsw i32 %41, 1027
  %arrayidx70 = getelementptr inbounds i8, i8* %40, i32 %mul69
  %42 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %42 to i32
  %cmp72 = icmp ne i32 %conv, %conv71
  br i1 %cmp72, label %if.then74, label %if.end76

if.then74:                                        ; preds = %for.body67
  %43 = load i32, i32* %input_size, align 4
  %call75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"??_C@_0CD@KACBMJDH@Tested?5?$CFdMB?5buffer?3?5Miscompared?$CB@", i32 0, i32 0), i32 %43)
  call void @exit(i32 1) #6
  unreachable

if.end76:                                         ; preds = %for.body67
  br label %for.inc77

for.inc77:                                        ; preds = %if.end76
  %44 = load i32, i32* %i, align 4
  %inc78 = add nsw i32 %44, 1
  store i32 %inc78, i32* %i, align 4
  br label %for.cond63

for.end79:                                        ; preds = %for.cond63
  %call80 = call i32 @debug_time()
  %45 = load i32, i32* @dbglvl, align 4
  %cmp81 = icmp slt i32 3, %45
  br i1 %cmp81, label %if.then83, label %if.end85

if.then83:                                        ; preds = %for.end79
  %call84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"??_C@_0CG@PNDINMCI@Uncompressed?5data?5compared?5corre@", i32 0, i32 0))
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %for.end79
  %call86 = call i32 @spec_reset(i32 1)
  %call87 = call i32 @spec_rewind(i32 0)
  br label %for.inc88

for.inc88:                                        ; preds = %if.end85
  %46 = load i32, i32* %level, align 4
  %add = add nsw i32 %46, 2
  store i32 %add, i32* %level, align 4
  br label %for.cond38

for.end89:                                        ; preds = %for.cond38
  %47 = load i32, i32* %input_size, align 4
  %call90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"??_C@_0BJ@HBIMNPIC@Tested?5?$CFdMB?5buffer?3?5OK?$CB?6?$AA@", i32 0, i32 0), i32 %47)
  ret i32 0
}

declare dllimport i32 @atoi(i8*) #2

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local i32 @debug_time() #0 {
entry:
  ret i32 0
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @spec_initbufs() #1 {
entry:
  store i8 0, i8* @smallMode, align 1
  store i32 0, i32* @verbosity, align 4
  store i32 9, i32* @blockSize100k, align 4
  store i32 0, i32* @bsStream, align 4
  store i32 30, i32* @workFactor, align 4
  call void @allocateCompressStructures()
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @spec_compress(i32 %in, i32 %out, i32 %lev) #1 {
entry:
  %lev.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  store i32 %lev, i32* %lev.addr, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  %0 = load i32, i32* %lev.addr, align 4
  store i32 %0, i32* @blockSize100k, align 4
  %1 = load i32, i32* %out.addr, align 4
  %2 = load i32, i32* %in.addr, align 4
  call void @compressStream(i32 %2, i32 %1)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local void @spec_uncompress(i32 %in, i32 %out, i32 %lev) #1 {
entry:
  %lev.addr = alloca i32, align 4
  %out.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  store i32 %lev, i32* %lev.addr, align 4
  store i32 %out, i32* %out.addr, align 4
  store i32 %in, i32* %in.addr, align 4
  store i32 0, i32* @blockSize100k, align 4
  %0 = load i32, i32* %out.addr, align 4
  %1 = load i32, i32* %in.addr, align 4
  %call = call zeroext i8 @uncompressStream(i32 %1, i32 %0)
  ret void
}

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @main() #1 {
entry:
  %retval = alloca i32, align 4
  %start = alloca i32, align 4
  %finish = alloca i32, align 4
  %duration = alloca double, align 8
  store i32 0, i32* %retval, align 4
  %call = call i32 @clock()
  store i32 %call, i32* %start, align 4
  %call1 = call i32 @timetest()
  %call2 = call i32 @clock()
  store i32 %call2, i32* %finish, align 4
  %0 = load i32, i32* %finish, align 4
  %1 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %0, %1
  %conv = sitofp i32 %sub to double
  %div = fdiv double %conv, 1.000000e+03
  store double %div, double* %duration, align 8
  %2 = load double, double* %duration, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"??_C@_0M@NPEDOHBA@?$CFf?5seconds?6?$AA@", i32 0, i32 0), double %2)
  ret i32 0
}

declare dllimport i32 @clock() #2

attributes #0 = { noinline nounwind optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn }

!llvm.linker.options = !{!0, !1, !0, !1}
!llvm.ident = !{!2, !2}
!llvm.module.flags = !{!3, !4}

!0 = !{!"/DEFAULTLIB:msvcrtd.lib"}
!1 = !{!"/DEFAULTLIB:oldnames.lib"}
!2 = !{!"Obfuscator-LLVM clang version 8.0.1 (tags/RELEASE_801/final) (based on Obfuscator-LLVM 8.0.1)"}
!3 = !{i32 1, !"NumRegisterParameters", i32 0}
!4 = !{i32 1, !"wchar_size", i32 2}
