; ModuleID = 'inline.bc'
source_filename = "llvm-link"
target datalayout = "e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32"
target triple = "i686-pc-windows-msvc16.0.0"

%ReturnStruct = type {}
%ReturnStruct.0 = type {}
%ReturnStruct.1 = type {}
%ReturnStruct.2 = type {}
%ReturnStruct.3 = type {}
%ReturnStruct.4 = type {}
%ReturnStruct.5 = type {}
%ReturnStruct.6 = type {}
%ReturnStruct.7 = type {}
%ReturnStruct.8 = type {}
%ReturnStruct.9 = type {}
%ReturnStruct.10 = type {}
%ReturnStruct.11 = type {}
%ReturnStruct.12 = type {}
%ReturnStruct.13 = type {}
%ReturnStruct.14 = type {}
%ReturnStruct.15 = type {}
%ReturnStruct.16 = type {}
%ReturnStruct.17 = type {}
%ReturnStruct.18 = type {}
%struct.rsa_pk_t = type { i32, [256 x i8], [256 x i8] }
%struct.rsa_sk_t = type { i32, [256 x i8], [256 x i8], [256 x i8], [128 x i8], [128 x i8], [128 x i8], [128 x i8], [128 x i8] }
%struct._iobuf = type { i8*, i32, i8*, i32, i32, i32, i32, i8* }

$"??_C@_08GMFBNBBA@?$CFs?$FL?$CFd?$FN?3?5?$AA@" = comdat any

$"??_C@_04JFFKLGJF@?$CF02X?$AA@" = comdat any

$"??_C@_01EEMJAFIK@?6?$AA@" = comdat any

$"??_C@_02DKCKIIND@?$CFs?$AA@" = comdat any

$"??_C@_08OPCGNDGK@PK?$FL?$CFd?$FN?3?6?$AA@" = comdat any

$"??_C@_0M@NMEDBGMP@?5?5modulus?3?5?$AA@" = comdat any

$"??_C@_0N@JLCGLEPG@?5?5exponent?3?5?$AA@" = comdat any

$"??_C@_08NGKLOPKP@SK?$FL?$CFd?$FN?3?6?$AA@" = comdat any

$"??_C@_0BD@HINABDEP@?5?5public_exponet?3?5?$AA@" = comdat any

$"??_C@_0L@EMBGKBID@?5?5prime1?3?5?$AA@" = comdat any

$"??_C@_0L@FOKDAOGN@?5?5prime2?3?5?$AA@" = comdat any

$"??_C@_0BD@DBOOPOHL@?5?5primeExponent1?3?5?$AA@" = comdat any

$"??_C@_0BD@CDFLFBJF@?5?5primeExponent2?3?5?$AA@" = comdat any

$"??_C@_0BA@BHHMNKPP@?5?5coefficient?3?5?$AA@" = comdat any

$"??_C@_06OGPOEGBJ@sk?4prv?$AA@" = comdat any

$"??_C@_03GHMILMGE@DEC?$AA@" = comdat any

$"??_C@_08NBICHAHH@DEC?3?5?$CFs?6?$AA@" = comdat any

$"??_C@_0CA@BAIGFOPC@rsa_private_decrypt?0?5ret?3?5?$CF04X?6?$AA@" = comdat any

$"??_C@_01NOFIACDB@w?$AA@" = comdat any

$"??_C@_0BD@DOBJINJI@CAN?5NOT?5OPEN?5FILE?6?$AA@" = comdat any

$"??_C@_0O@OBPALAEI@hello?5world?$CB?6?$AA@" = comdat any

$"??_C@_0BO@PAABOMNB@rsa_generate_keys?0?5ret?3?5?$CF04X?6?$AA@" = comdat any

$"??_C@_03GGAHOJCI@MSG?$AA@" = comdat any

$"??_C@_06OIICAIJO@PK?5ENC?$AA@" = comdat any

$"??_C@_0BP@OKHOIEME@rsa_public_encrypt?0?5ret?3?5?$CF04X?6?$AA@" = comdat any

$"??_C@_06GNIDJKIH@SK?5DEC?$AA@" = comdat any

$"??_C@_06NJGKBCAD@SK?5ENC?$AA@" = comdat any

$"??_C@_0CA@NPBGPOJI@rsa_private_encrypt?0?5ret?3?5?$CF04X?6?$AA@" = comdat any

$"??_C@_06FMGLIABK@PK?5DEC?$AA@" = comdat any

$"??_C@_0BP@CFOOCEKO@rsa_public_decrypt?0?5ret?3?5?$CF04X?6?$AA@" = comdat any

$"??_C@_0M@NPEDOHBA@?$CFf?5seconds?6?$AA@" = comdat any

$"??_C@_01KDCPPGHE@r?$AA@" = comdat any

@key_m = dso_local global [256 x i8] c"\B8\9Bc\7F3\EE\AD\06\18\9F\F1]\9D\C7\B8\E9\ADM7%\1F0\A4\BE=\C7\12\E9j\84\BC\AB6m\E8\12>\12\DD\0D\C3q\1E\0E*\BDWs\D4\D7\CDH\A0d\F9X\07H\DAI\80\A8\93`\AEt\A2m\96xfJ\D5\A0A\AA\A1<\10q\D3.\89\8E\0A\AC\F0\04\16t\AD\BF\7FP\B7\1C\9D\84\9D|\DC\AB\03\AC\D7h\B6Y\8C\15H\BA\07\A7\90\89\A9v\E2x\B5\E6\19\E3\C5\CD\C0\A1)\22$\D5B\B9\E3]\F7b\00\8ByV\BF?\E3v.g\EB\C3v\F8\ADt\1E\93\93\B5/\917\91\E2\D2\90J\B0\EF%x|\9A\06\D6\D1\C3LI*\F7\12\80\16b\0B\D4\A2\96\9F\1E9\FA)\A2\D9\1A\0E\0DdS\82)\18\8AYW\B0\ED\AD\F0\8E\17Z\9C\B6\A0\C7\96\C8M\1Eq\B2\1Cl\F0\95\FC\E6\C7\90I\04\F2\01\A7\8A\C4J\D4\95\FF\15k\A04 \FE\86\BBp\CC\AC\A9\C1\A7", align 1
@key_e = dso_local global [3 x i8] c"\01\00\01", align 1
@key_pe = dso_local global [256 x i8] c"\B6\96ZN\91\DA\DB\9FO\F3\C2\12\C9\DF\A4p\DBK\A7\E3;z-7Lz\FD\A5\88\09Ib>/n}\BC\8F\83\BB\FD6\80w\9A\A63=\09\A3x\13\011]\BDGW3/\C7\E4\F3\FF\88\0D,*\1F\CDm\BFN\93v\DF\81!\9BR9\81\A9\E3\A7\83l\D1^4\815\0A\83\96\D8\E2\A3+\F17\80\9D\DD\F2 K[>F>\EC`m\C7s\A0\FDH\FA\03OW\04\05\BC\7Fl7=\95\8A\06:\91a\1F\B5\06\FA\06?\03\D3\87\C6\C4\B5\C4\B3\99\E0\18\8B1=\00Y\E8\F9\A25SHFP\BB\E0V\D7\DF\92\E6\95g\09\D2\E5\F8\DF\A6\AC\99\C6(\89\10\C4\AF\0B?\D3\E4<\85\E5\137\8C\F7\B3\AF\C0\C6-\18\D2h\E1\1Fj#\E2X\CE&gyd\12i\AA\9DR\9E\BFW\DB\DD\DD\04\FB\C6\B1\FE\08\01Mk\87\18'\F19\94\1A\CF\EB\E6\FE\07\C3\FB\84z\A1", align 1
@key_p1 = dso_local global [128 x i8] c"\ED\89\0B\DC\BER\DC\0D1\9C?2\999\F3\8EV]\CB\D1Kz;\F8\A7ex\E9\AE%3\9C\0BR\EFL\97\DC\BF\92A\DC@\F6\82q\09\8E\FB4\9F\E7\13B)g\F0\EE\01\1ACJ\F3\EE\87w\F7\F0\DE\94\05\93\ACY\ADi\17,\01\1C\0F\1A(\D93\E1\E5\94\80\AE\B5\B9^\F9n`\07\A6\84R\12 \09 ~\8D\F5\19\DAS\F2\02\BF\F4\B5\0C\C3!\08\FF.$\D1\07p\1D\C9\0B", align 1
@key_p2 = dso_local global [128 x i8] c"\C6\F5\11k\CB\0C\05+\13@Mi\91\94\1BQ\B5n\E8\17{DR\B2\9B\1C=\E7\80E\C7\15\C0-\BD\E6d\83:\B4\F3/\95W\A2\00F\AE\D5\CF\FB\88\F1\F8\8E\83#\DCw\C1\E6\83;Nu\00#}\19\0E\0A`\9A\CE\F1V\B1\C0\C5G\F2?c\A2Z~\E9\00\0F\1C8\E3\17\A5\DCE\C9|W\ABh\8CH\1Ba\F4_{\A2\9C>\C4t\EF\C0\86E\F8\14j\9D\B1\F9\825\CC\A3U", align 1
@key_e1 = dso_local global [128 x i8] c">\02\BA\13\0D\A8\AA\03\D3\C0\BB\8A\E5\0F\88\F2\CE\BF;\D7N\C2\01g\FF\A3p\F6h]\13\E5\17\DB\B5\D7$\0A \04\F9\A6\9BZ\FF`\AD##\97pk-\CE\E6\EAX\AEy\A16\92\19\AEZ\B5J\08\1A\C3?\D5vx\0E\DAQ\8FNV\D9\E6ue\86\B2\E1qlJ\AF\ECM\CC\061\91\AD\B9\FB\86\F9\D0\08(\A1\BC\AB\DC p\1C\A1\AA+\9D\C2O\1C\7F)\B7\B8\CE\1DI\D9S", align 1
@key_e2 = dso_local global [128 x i8] c"\C5\09\E6S\F4\06\96\83\BF\90\1AZ\A8\03\9F>\BF\C9\F3\EFut\07\D6\BD\09.A\BCf\DE\B1*\DF\E2GoZ\0B\E53F\F7\C7\8F8h\C84\16\C3\CD/\9E\F3<\EBb'\F4\8F\9F~7\C8e\F7\BF\A7\F5\A0\CFe\E1\F7_\DD\B0\C5p\E8x`\EBdfu\C9J-\B0%/\C1b\B2v\C6?i\11\A4\84\B1!\C4\CC_|~\F3&\CB\8C\BA\06\00\FB\9C\F4\AD\F2\99\E1\9B\F8k\F5", align 1
@key_c = dso_local global [128 x i8] c"\CC\C6\BA\E9\80(\80\C6\C6u\9A`\B5@\0C8\B5oS\CD\AD%\13:U\8F\E3\17vo\F1\C3H:^c\07\AC\D0\C4\B4\BE\8BN3\00\97;@L\80F\1E\96\854'u\D1\E5\18\E0\11\F4\04\DD}\ADb\F0\FE\FC\D2\011\1E\22?\EC\BD-F\D9\C3Y\D2L4\F2\94\B9Ln3\88a0\0FwPEb\B1>s\F0\A2\EE\A9;\FE\E4.\C9\9A\F3\FCcBB\DF\B5x3qa+f", align 1
@hex_array = dso_local global [256 x i8] c"_\AFG\E5k<\B4\C2\E6\8D\F5\B6\89\BD\22\91\14\5C\97\C3\93\9C\D2\06\1A\82d\C6\CB\C1\F6A\9A\BB\84\E2\82]t\85\00V\8A\951~\9D\B9d\AD\CD\D1\99\DAL\CF\D6\94V^\95\E6\99 \19#U\CC\E7\DDzWi\9B]\ECN\07\F2\AE\C3v\F3\9F\A9\E2V\C8\D8\97\C6D\F8\BE,\22\9D;\8A\8D\D7@\9F%\96;\D9\C3\EF!\DEL,*\0C\D1>\06F\C3\B6\08\0F\BB\11\D8\B6d\FC\A1(\AA;\0E\CC\1E\C4Y\C8\A3\D7\C1\9FE\B9\ADd\07|\DEa\CB\A7\0FT\B7w\93S\DB8q\0E\D4n\C5\1A\96\0F\8A\14b3\B9E\82\10\AB\EE\9Dc\D7+\0C\09\E8\99\10\1C\10\F2\EB\22H\B1\A2G\C3\A0\CFuMK\CE\0Eo;d\7FR\09\02\FA;\15\DAH\89\9A\BD\D9~\96\93\CE\95\ABIn\22\A6\05\CAu\19T\FA\BB\DEX\9C1x\FAj\F9\19}t\08_\0F\E6\EEx\0C", align 1
@"??_C@_08GMFBNBBA@?$CFs?$FL?$CFd?$FN?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [9 x i8] c"%s[%d]: \00", comdat, align 1
@"??_C@_04JFFKLGJF@?$CF02X?$AA@" = linkonce_odr dso_local unnamed_addr constant [5 x i8] c"%02X\00", comdat, align 1
@"??_C@_01EEMJAFIK@?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"\0A\00", comdat, align 1
@"??_C@_02DKCKIIND@?$CFs?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"%s\00", comdat, align 1
@"??_C@_08OPCGNDGK@PK?$FL?$CFd?$FN?3?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [9 x i8] c"PK[%d]:\0A\00", comdat, align 1
@"??_C@_0M@NMEDBGMP@?5?5modulus?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [12 x i8] c"  modulus: \00", comdat, align 1
@"??_C@_0N@JLCGLEPG@?5?5exponent?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [13 x i8] c"  exponent: \00", comdat, align 1
@"??_C@_08NGKLOPKP@SK?$FL?$CFd?$FN?3?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [9 x i8] c"SK[%d]:\0A\00", comdat, align 1
@"??_C@_0BD@HINABDEP@?5?5public_exponet?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [19 x i8] c"  public_exponet: \00", comdat, align 1
@"??_C@_0L@EMBGKBID@?5?5prime1?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [11 x i8] c"  prime1: \00", comdat, align 1
@"??_C@_0L@FOKDAOGN@?5?5prime2?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [11 x i8] c"  prime2: \00", comdat, align 1
@"??_C@_0BD@DBOOPOHL@?5?5primeExponent1?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [19 x i8] c"  primeExponent1: \00", comdat, align 1
@"??_C@_0BD@CDFLFBJF@?5?5primeExponent2?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [19 x i8] c"  primeExponent2: \00", comdat, align 1
@"??_C@_0BA@BHHMNKPP@?5?5coefficient?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [16 x i8] c"  coefficient: \00", comdat, align 1
@"??_C@_06OGPOEGBJ@sk?4prv?$AA@" = linkonce_odr dso_local unnamed_addr constant [7 x i8] c"sk.prv\00", comdat, align 1
@"??_C@_03GHMILMGE@DEC?$AA@" = linkonce_odr dso_local unnamed_addr constant [4 x i8] c"DEC\00", comdat, align 1
@"??_C@_08NBICHAHH@DEC?3?5?$CFs?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [9 x i8] c"DEC: %s\0A\00", comdat, align 1
@"??_C@_0CA@BAIGFOPC@rsa_private_decrypt?0?5ret?3?5?$CF04X?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [32 x i8] c"rsa_private_decrypt, ret: %04X\0A\00", comdat, align 1
@"??_C@_01NOFIACDB@w?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"w\00", comdat, align 1
@"??_C@_0BD@DOBJINJI@CAN?5NOT?5OPEN?5FILE?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [19 x i8] c"CAN NOT OPEN FILE\0A\00", comdat, align 1
@"??_C@_0O@OBPALAEI@hello?5world?$CB?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [14 x i8] c"hello world!\0A\00", comdat, align 1
@"??_C@_0BO@PAABOMNB@rsa_generate_keys?0?5ret?3?5?$CF04X?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [30 x i8] c"rsa_generate_keys, ret: %04X\0A\00", comdat, align 1
@"??_C@_03GGAHOJCI@MSG?$AA@" = linkonce_odr dso_local unnamed_addr constant [4 x i8] c"MSG\00", comdat, align 1
@"??_C@_06OIICAIJO@PK?5ENC?$AA@" = linkonce_odr dso_local unnamed_addr constant [7 x i8] c"PK ENC\00", comdat, align 1
@"??_C@_0BP@OKHOIEME@rsa_public_encrypt?0?5ret?3?5?$CF04X?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [31 x i8] c"rsa_public_encrypt, ret: %04X\0A\00", comdat, align 1
@"??_C@_06GNIDJKIH@SK?5DEC?$AA@" = linkonce_odr dso_local unnamed_addr constant [7 x i8] c"SK DEC\00", comdat, align 1
@"??_C@_06NJGKBCAD@SK?5ENC?$AA@" = linkonce_odr dso_local unnamed_addr constant [7 x i8] c"SK ENC\00", comdat, align 1
@"??_C@_0CA@NPBGPOJI@rsa_private_encrypt?0?5ret?3?5?$CF04X?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [32 x i8] c"rsa_private_encrypt, ret: %04X\0A\00", comdat, align 1
@"??_C@_06FMGLIABK@PK?5DEC?$AA@" = linkonce_odr dso_local unnamed_addr constant [7 x i8] c"PK DEC\00", comdat, align 1
@"??_C@_0BP@CFOOCEKO@rsa_public_decrypt?0?5ret?3?5?$CF04X?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [31 x i8] c"rsa_public_decrypt, ret: %04X\0A\00", comdat, align 1
@"??_C@_0M@NPEDOHBA@?$CFf?5seconds?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [12 x i8] c"%f seconds\0A\00", comdat, align 1
@SMALL_PRIMES = dso_local constant [4 x i8] c"\03\05\07\0B", align 1
@"??_C@_01KDCPPGHE@r?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"r\00", comdat, align 1
@x = common global i32 0
@y = common global i32 0
@x.2 = common global i32 0
@y.3 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.8 = common global i32 0
@y.9 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.14 = common global i32 0
@y.15 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.20 = common global i32 0
@y.21 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.26 = common global i32 0
@y.27 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.32 = common global i32 0
@y.33 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.38 = common global i32 0
@y.39 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.44 = common global i32 0
@y.45 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.50 = common global i32 0
@y.51 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.56 = common global i32 0
@y.57 = common global i32 0

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1) #0

; Function Attrs: noinline nounwind optnone
define internal i32 @bn_digit_bits(i32 %a) #1 {
entry:
  %a.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %a.addr, align 4
  %cmp1 = icmp eq i32 %1, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %2 = load i32, i32* %a.addr, align 4
  %shr = lshr i32 %2, 1
  store i32 %shr, i32* %a.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %3 = load i32, i32* %i, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %4 = load i32, i32* %i, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define dso_local i32 @bn_shift_l(i32* %a, i32* %b, i32 %c, i32 %digits) #1 {
entry:
  %retval = alloca i32, align 4
  %digits.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %b.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %bi = alloca i32, align 4
  %carry = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp uge i32 %0, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4
  %sub = sub i32 32, %1
  store i32 %sub, i32* %t, align 4
  store i32 0, i32* %carry, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %digits.addr, align 4
  %cmp1 = icmp ult i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  store i32 %6, i32* %bi, align 4
  %7 = load i32, i32* %bi, align 4
  %8 = load i32, i32* %c.addr, align 4
  %shl = shl i32 %7, %8
  %9 = load i32, i32* %carry, align 4
  %or = or i32 %shl, %9
  %10 = load i32*, i32** %a.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx2 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %or, i32* %arrayidx2, align 4
  %12 = load i32, i32* %c.addr, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %13 = load i32, i32* %bi, align 4
  %14 = load i32, i32* %t, align 4
  %shr = lshr i32 %13, %14
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %shr, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %carry, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %15 = load i32, i32* %i, align 4
  %inc = add i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %carry, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone
define internal i32 @bn_sub_digit_mul(i32* %a, i32* %b, i32 %c, i32* %d, i32 %digits) #1 {
entry:
  %retval = alloca i32, align 4
  %digits.addr = alloca i32, align 4
  %d.addr = alloca i32*, align 4
  %c.addr = alloca i32, align 4
  %b.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %result = alloca i64, align 8
  %borrow = alloca i32, align 4
  %rh = alloca i32, align 4
  %rl = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %d, i32** %d.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %borrow, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %digits.addr, align 4
  %cmp1 = icmp ult i32 %1, %2
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %c.addr, align 4
  %conv = zext i32 %3 to i64
  %4 = load i32*, i32** %d.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  %conv2 = zext i32 %6 to i64
  %mul = mul i64 %conv, %conv2
  store i64 %mul, i64* %result, align 8
  %7 = load i64, i64* %result, align 8
  %and = and i64 %7, 4294967295
  %conv3 = trunc i64 %and to i32
  store i32 %conv3, i32* %rl, align 4
  %8 = load i64, i64* %result, align 8
  %shr = lshr i64 %8, 32
  %and4 = and i64 %shr, 4294967295
  %conv5 = trunc i64 %and4 to i32
  store i32 %conv5, i32* %rh, align 4
  %9 = load i32*, i32** %b.addr, align 4
  %10 = load i32, i32* %i, align 4
  %arrayidx6 = getelementptr inbounds i32, i32* %9, i32 %10
  %11 = load i32, i32* %arrayidx6, align 4
  %12 = load i32, i32* %borrow, align 4
  %sub = sub i32 %11, %12
  %13 = load i32*, i32** %a.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds i32, i32* %13, i32 %14
  store i32 %sub, i32* %arrayidx7, align 4
  %15 = load i32, i32* %borrow, align 4
  %sub8 = sub i32 -1, %15
  %cmp9 = icmp ugt i32 %sub, %sub8
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %for.body
  store i32 1, i32* %borrow, align 4
  br label %if.end12

if.else:                                          ; preds = %for.body
  store i32 0, i32* %borrow, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.then11
  %16 = load i32, i32* %rl, align 4
  %17 = load i32*, i32** %a.addr, align 4
  %18 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32* %17, i32 %18
  %19 = load i32, i32* %arrayidx13, align 4
  %sub14 = sub i32 %19, %16
  store i32 %sub14, i32* %arrayidx13, align 4
  %20 = load i32, i32* %rl, align 4
  %sub15 = sub i32 -1, %20
  %cmp16 = icmp ugt i32 %sub14, %sub15
  br i1 %cmp16, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end12
  %21 = load i32, i32* %borrow, align 4
  %inc = add i32 %21, 1
  store i32 %inc, i32* %borrow, align 4
  br label %if.end19

if.end19:                                         ; preds = %if.then18, %if.end12
  %22 = load i32, i32* %rh, align 4
  %23 = load i32, i32* %borrow, align 4
  %add = add i32 %23, %22
  store i32 %add, i32* %borrow, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %24 = load i32, i32* %i, align 4
  %inc20 = add i32 %24, 1
  store i32 %inc20, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i32, i32* %borrow, align 4
  store i32 %25, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone
define dso_local i32 @bn_shift_r(i32* %a, i32* %b, i32 %c, i32 %digits) #1 {
entry:
  %retval = alloca i32, align 4
  %digits.addr = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %b.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %bi = alloca i32, align 4
  %carry = alloca i32, align 4
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32 %c, i32* %c.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp uge i32 %0, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4
  %sub = sub i32 32, %1
  store i32 %sub, i32* %t, align 4
  store i32 0, i32* %carry, align 4
  %2 = load i32, i32* %digits.addr, align 4
  %sub1 = sub i32 %2, 1
  store i32 %sub1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4
  %cmp2 = icmp sge i32 %3, 0
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32*, i32** %b.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %4, i32 %5
  %6 = load i32, i32* %arrayidx, align 4
  store i32 %6, i32* %bi, align 4
  %7 = load i32, i32* %bi, align 4
  %8 = load i32, i32* %c.addr, align 4
  %shr = lshr i32 %7, %8
  %9 = load i32, i32* %carry, align 4
  %or = or i32 %shr, %9
  %10 = load i32*, i32** %a.addr, align 4
  %11 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i32 %11
  store i32 %or, i32* %arrayidx3, align 4
  %12 = load i32, i32* %c.addr, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %13 = load i32, i32* %bi, align 4
  %14 = load i32, i32* %t, align 4
  %shl = shl i32 %13, %14
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %shl, %cond.true ], [ 0, %cond.false ]
  store i32 %cond, i32* %carry, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %15 = load i32, i32* %i, align 4
  %dec = add nsw i32 %15, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %carry, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline optnone
define dso_local void @bn_mod_mul(i32* %a, i32* %b, i32* %c, i32* %d, i32 %digits) #2 {
entry:
  %digits.addr = alloca i32, align 4
  %d.addr = alloca i32*, align 4
  %c.addr = alloca i32*, align 4
  %b.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %t = alloca [130 x i32], align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %d, i32** %d.addr, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %digits.addr, align 4
  %1 = load i32*, i32** %c.addr, align 4
  %2 = load i32*, i32** %b.addr, align 4
  %arraydecay = getelementptr inbounds [130 x i32], [130 x i32]* %t, i32 0, i32 0
  br label %bn_mul_entry

bn_mul_entry:                                     ; preds = %entry
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32*, align 4
  %7 = alloca [130 x i32], align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32* %1, i32** %4, align 4
  store i32* %2, i32** %5, align 4
  store i32* %arraydecay, i32** %6, align 4
  %11 = load i32, i32* %3, align 4
  %12 = mul i32 2, %11
  %13 = getelementptr inbounds [130 x i32], [130 x i32]* %7, i32 0, i32 0
  br label %bn_mul_bn_assign_zero_entry

bn_mul_bn_assign_zero_entry:                      ; preds = %bn_mul_entry
  %14 = alloca i32, align 4
  %15 = alloca i32*, align 4
  %16 = alloca i32, align 4
  store i32 %12, i32* %14, align 4
  store i32* %13, i32** %15, align 4
  store i32 0, i32* %16, align 4
  br label %bn_mul_bn_assign_zero_for.cond

bn_mul_bn_assign_zero_for.cond:                   ; preds = %bn_mul_bn_assign_zero_entry
  %call = call %ReturnStruct* @ConditionFun(i32 0, i32* %14, i32** %15, i32* %16)
  %MainStrut = alloca %ReturnStruct*, align 4
  store %ReturnStruct* %call, %ReturnStruct** %MainStrut, align 4
  br label %new

new:                                              ; preds = %bn_mul_bn_assign_zero_for.cond
  br label %bn_mul_entry.split

bn_mul_entry.split:                               ; preds = %new
  %17 = load i32, i32* %3, align 4
  %18 = load i32*, i32** %5, align 4
  br label %bn_digits_entry2

bn_digits_entry2:                                 ; preds = %bn_mul_entry.split
  %19 = alloca i32, align 4
  %20 = alloca i32*, align 4
  %21 = alloca i32, align 4
  store i32 %17, i32* %19, align 4
  store i32* %18, i32** %20, align 4
  %22 = load i32, i32* %19, align 4
  %23 = sub i32 %22, 1
  store i32 %23, i32* %21, align 4
  br label %bn_digits_for.cond3

bn_digits_for.cond3:                              ; preds = %bn_digits_for.inc7, %bn_digits_entry2
  %24 = load i32, i32* %21, align 4
  %25 = icmp sge i32 %24, 0
  br i1 %25, label %bn_digits_for.body4, label %bn_digits_for.end8

bn_digits_for.body4:                              ; preds = %bn_digits_for.cond3
  %26 = load i32*, i32** %20, align 4
  %27 = load i32, i32* %21, align 4
  %28 = getelementptr inbounds i32, i32* %26, i32 %27
  %29 = load i32, i32* %28, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %bn_digits_if.then5, label %bn_digits_if.end6

bn_digits_if.then5:                               ; preds = %bn_digits_for.body4
  br label %bn_digits_for.end8

bn_digits_if.end6:                                ; preds = %bn_digits_for.body4
  br label %bn_digits_for.inc7

bn_digits_for.inc7:                               ; preds = %bn_digits_if.end6
  %31 = load i32, i32* %21, align 4
  %32 = add nsw i32 %31, -1
  store i32 %32, i32* %21, align 4
  br label %bn_digits_for.cond3

bn_digits_for.end8:                               ; preds = %bn_digits_if.then5, %bn_digits_for.cond3
  %33 = load i32, i32* %21, align 4
  %34 = add nsw i32 %33, 1
  br label %bn_mul_entry.split.split1

bn_mul_entry.split.split1:                        ; preds = %bn_digits_for.end8
  store i32 %34, i32* %8, align 4
  %35 = load i32, i32* %3, align 4
  %36 = load i32*, i32** %4, align 4
  br label %bn_digits_entry

bn_digits_entry:                                  ; preds = %bn_mul_entry.split.split1
  %37 = alloca i32, align 4
  %38 = alloca i32*, align 4
  %39 = alloca i32, align 4
  store i32 %35, i32* %37, align 4
  store i32* %36, i32** %38, align 4
  %40 = load i32, i32* %37, align 4
  %41 = sub i32 %40, 1
  store i32 %41, i32* %39, align 4
  br label %bn_digits_for.cond

bn_digits_for.cond:                               ; preds = %bn_digits_for.inc, %bn_digits_entry
  %42 = load i32, i32* %39, align 4
  %43 = icmp sge i32 %42, 0
  br i1 %43, label %bn_digits_for.body, label %bn_digits_for.end

bn_digits_for.body:                               ; preds = %bn_digits_for.cond
  %44 = load i32*, i32** %38, align 4
  %45 = load i32, i32* %39, align 4
  %46 = getelementptr inbounds i32, i32* %44, i32 %45
  %47 = load i32, i32* %46, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %bn_digits_if.then, label %bn_digits_if.end

bn_digits_if.then:                                ; preds = %bn_digits_for.body
  br label %bn_digits_for.end

bn_digits_if.end:                                 ; preds = %bn_digits_for.body
  br label %bn_digits_for.inc

bn_digits_for.inc:                                ; preds = %bn_digits_if.end
  %49 = load i32, i32* %39, align 4
  %50 = add nsw i32 %49, -1
  store i32 %50, i32* %39, align 4
  br label %bn_digits_for.cond

bn_digits_for.end:                                ; preds = %bn_digits_if.then, %bn_digits_for.cond
  %51 = load i32, i32* %39, align 4
  %52 = add nsw i32 %51, 1
  br label %bn_mul_entry.split.split

bn_mul_entry.split.split:                         ; preds = %bn_digits_for.end
  store i32 %52, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %bn_mul_for.cond

bn_mul_for.cond:                                  ; preds = %bn_mul_for.inc, %bn_mul_entry.split.split
  %53 = load i32, i32* %10, align 4
  %54 = load i32, i32* %8, align 4
  %55 = icmp ult i32 %53, %54
  br i1 %55, label %bn_mul_for.body, label %bn_mul_for.end

bn_mul_for.body:                                  ; preds = %bn_mul_for.cond
  %56 = load i32, i32* %9, align 4
  %57 = load i32*, i32** %4, align 4
  %58 = load i32*, i32** %5, align 4
  %59 = load i32, i32* %10, align 4
  %60 = getelementptr inbounds i32, i32* %58, i32 %59
  %61 = load i32, i32* %60, align 4
  %62 = load i32, i32* %10, align 4
  %63 = getelementptr inbounds [130 x i32], [130 x i32]* %7, i32 0, i32 %62
  %64 = load i32, i32* %10, align 4
  %65 = getelementptr inbounds [130 x i32], [130 x i32]* %7, i32 0, i32 %64
  br label %bn_add_digit_mul_entry

bn_add_digit_mul_entry:                           ; preds = %bn_mul_for.body
  %66 = alloca i32, align 4
  %67 = alloca i32, align 4
  %68 = alloca i32*, align 4
  %69 = alloca i32, align 4
  %70 = alloca i32*, align 4
  %71 = alloca i32*, align 4
  %72 = alloca i64, align 8
  %73 = alloca i32, align 4
  %74 = alloca i32, align 4
  %75 = alloca i32, align 4
  %76 = alloca i32, align 4
  store i32 %56, i32* %67, align 4
  store i32* %57, i32** %68, align 4
  store i32 %61, i32* %69, align 4
  store i32* %63, i32** %70, align 4
  store i32* %65, i32** %71, align 4
  %77 = load i32, i32* %69, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %bn_add_digit_mul_if.then, label %bn_add_digit_mul_if.end

bn_add_digit_mul_if.then:                         ; preds = %bn_add_digit_mul_entry
  store i32 0, i32* %66, align 4
  br label %bn_add_digit_mul_return

bn_add_digit_mul_if.end:                          ; preds = %bn_add_digit_mul_entry
  store i32 0, i32* %73, align 4
  store i32 0, i32* %76, align 4
  br label %bn_add_digit_mul_for.cond

bn_add_digit_mul_for.cond:                        ; preds = %bn_add_digit_mul_for.inc, %bn_add_digit_mul_if.end
  %79 = load i32, i32* %76, align 4
  %80 = load i32, i32* %67, align 4
  %81 = icmp ult i32 %79, %80
  br i1 %81, label %bn_add_digit_mul_for.body, label %bn_add_digit_mul_for.end

bn_add_digit_mul_for.body:                        ; preds = %bn_add_digit_mul_for.cond
  %82 = load i32, i32* %69, align 4
  %83 = zext i32 %82 to i64
  %84 = load i32*, i32** %68, align 4
  %85 = load i32, i32* %76, align 4
  %86 = getelementptr inbounds i32, i32* %84, i32 %85
  %87 = load i32, i32* %86, align 4
  %88 = zext i32 %87 to i64
  %89 = mul i64 %83, %88
  store i64 %89, i64* %72, align 8
  %90 = load i64, i64* %72, align 8
  %91 = and i64 %90, 4294967295
  %92 = trunc i64 %91 to i32
  store i32 %92, i32* %75, align 4
  %93 = load i64, i64* %72, align 8
  %94 = lshr i64 %93, 32
  %95 = and i64 %94, 4294967295
  %96 = trunc i64 %95 to i32
  store i32 %96, i32* %74, align 4
  %97 = load i32*, i32** %70, align 4
  %98 = load i32, i32* %76, align 4
  %99 = getelementptr inbounds i32, i32* %97, i32 %98
  %100 = load i32, i32* %99, align 4
  %101 = load i32, i32* %73, align 4
  %102 = add i32 %100, %101
  %103 = load i32*, i32** %71, align 4
  %104 = load i32, i32* %76, align 4
  %105 = getelementptr inbounds i32, i32* %103, i32 %104
  store i32 %102, i32* %105, align 4
  %106 = load i32, i32* %73, align 4
  %107 = icmp ult i32 %102, %106
  br i1 %107, label %bn_add_digit_mul_if.then10, label %bn_add_digit_mul_if.else

bn_add_digit_mul_if.then10:                       ; preds = %bn_add_digit_mul_for.body
  store i32 1, i32* %73, align 4
  br label %bn_add_digit_mul_if.end11

bn_add_digit_mul_if.else:                         ; preds = %bn_add_digit_mul_for.body
  store i32 0, i32* %73, align 4
  br label %bn_add_digit_mul_if.end11

bn_add_digit_mul_if.end11:                        ; preds = %bn_add_digit_mul_if.else, %bn_add_digit_mul_if.then10
  %108 = load i32, i32* %75, align 4
  %109 = load i32*, i32** %71, align 4
  %110 = load i32, i32* %76, align 4
  %111 = getelementptr inbounds i32, i32* %109, i32 %110
  %112 = load i32, i32* %111, align 4
  %113 = add i32 %112, %108
  store i32 %113, i32* %111, align 4
  %114 = load i32, i32* %75, align 4
  %115 = icmp ult i32 %113, %114
  br i1 %115, label %bn_add_digit_mul_if.then16, label %bn_add_digit_mul_if.end17

bn_add_digit_mul_if.then16:                       ; preds = %bn_add_digit_mul_if.end11
  %116 = load i32, i32* %73, align 4
  %117 = add i32 %116, 1
  store i32 %117, i32* %73, align 4
  br label %bn_add_digit_mul_if.end17

bn_add_digit_mul_if.end17:                        ; preds = %bn_add_digit_mul_if.then16, %bn_add_digit_mul_if.end11
  %118 = load i32, i32* %74, align 4
  %119 = load i32, i32* %73, align 4
  %120 = add i32 %119, %118
  store i32 %120, i32* %73, align 4
  br label %bn_add_digit_mul_for.inc

bn_add_digit_mul_for.inc:                         ; preds = %bn_add_digit_mul_if.end17
  %121 = load i32, i32* %76, align 4
  %122 = add i32 %121, 1
  store i32 %122, i32* %76, align 4
  br label %bn_add_digit_mul_for.cond

bn_add_digit_mul_for.end:                         ; preds = %bn_add_digit_mul_for.cond
  %123 = load i32, i32* %73, align 4
  store i32 %123, i32* %66, align 4
  br label %bn_add_digit_mul_return

bn_add_digit_mul_return:                          ; preds = %bn_add_digit_mul_for.end, %bn_add_digit_mul_if.then
  %124 = load i32, i32* %66, align 4
  br label %bn_mul_for.body.split

bn_mul_for.body.split:                            ; preds = %bn_add_digit_mul_return
  %125 = load i32, i32* %10, align 4
  %126 = load i32, i32* %9, align 4
  %127 = add i32 %125, %126
  %128 = getelementptr inbounds [130 x i32], [130 x i32]* %7, i32 0, i32 %127
  %129 = load i32, i32* %128, align 4
  %130 = add i32 %129, %124
  store i32 %130, i32* %128, align 4
  br label %bn_mul_for.inc

bn_mul_for.inc:                                   ; preds = %bn_mul_for.body.split
  %131 = load i32, i32* %10, align 4
  %132 = add i32 %131, 1
  store i32 %132, i32* %10, align 4
  br label %bn_mul_for.cond

bn_mul_for.end:                                   ; preds = %bn_mul_for.cond
  %133 = load i32, i32* %3, align 4
  %134 = mul i32 2, %133
  %135 = getelementptr inbounds [130 x i32], [130 x i32]* %7, i32 0, i32 0
  %136 = load i32*, i32** %6, align 4
  br label %bn_mul_bn_assign_entry

bn_mul_bn_assign_entry:                           ; preds = %bn_mul_for.end
  %137 = alloca i32, align 4
  %138 = alloca i32*, align 4
  %139 = alloca i32*, align 4
  %140 = alloca i32, align 4
  store i32 %134, i32* %137, align 4
  store i32* %135, i32** %138, align 4
  store i32* %136, i32** %139, align 4
  store i32 0, i32* %140, align 4
  br label %bn_mul_bn_assign_for.cond

bn_mul_bn_assign_for.cond:                        ; preds = %bn_mul_bn_assign_entry
  %call2 = call %ReturnStruct.0* @ConditionFun.1(i32 1, i32* %137, i32** %138, i32** %139, i32* %140)
  %MainStrut3 = alloca %ReturnStruct.0*, align 4
  store %ReturnStruct.0* %call2, %ReturnStruct.0** %MainStrut3, align 4
  br label %new1

new1:                                             ; preds = %bn_mul_bn_assign_for.cond
  br label %bn_mul_for.end.split

bn_mul_for.end.split:                             ; preds = %new1
  %141 = getelementptr inbounds [130 x i32], [130 x i32]* %7, i32 0, i32 0
  %142 = bitcast i32* %141 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %142, i8 0, i32 520, i1 false)
  br label %entry.split

entry.split:                                      ; preds = %bn_mul_for.end.split
  %143 = load i32, i32* %digits.addr, align 4
  %144 = load i32*, i32** %d.addr, align 4
  %145 = load i32, i32* %digits.addr, align 4
  %mul = mul i32 2, %145
  %arraydecay1 = getelementptr inbounds [130 x i32], [130 x i32]* %t, i32 0, i32 0
  %146 = load i32*, i32** %a.addr, align 4
  br label %bn_mod_entry

bn_mod_entry:                                     ; preds = %entry.split
  %147 = alloca i32, align 4
  %148 = alloca i32*, align 4
  %149 = alloca i32, align 4
  %150 = alloca i32*, align 4
  %151 = alloca i32*, align 4
  %152 = alloca [130 x i32], align 4
  store i32 %143, i32* %147, align 4
  store i32* %144, i32** %148, align 4
  store i32 %mul, i32* %149, align 4
  store i32* %arraydecay1, i32** %150, align 4
  store i32* %146, i32** %151, align 4
  %153 = bitcast [130 x i32]* %152 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %153, i8 0, i32 520, i1 false)
  %154 = load i32, i32* %147, align 4
  %155 = load i32*, i32** %148, align 4
  %156 = load i32, i32* %149, align 4
  %157 = load i32*, i32** %150, align 4
  %158 = load i32*, i32** %151, align 4
  %159 = getelementptr inbounds [130 x i32], [130 x i32]* %152, i32 0, i32 0
  br label %bn_mod_bn_div_entry

bn_mod_bn_div_entry:                              ; preds = %bn_mod_entry
  %160 = alloca i32, align 4
  %161 = alloca i32*, align 4
  %162 = alloca i32, align 4
  %163 = alloca i32*, align 4
  %164 = alloca i32*, align 4
  %165 = alloca i32*, align 4
  %166 = alloca i64, align 8
  %167 = alloca i32, align 4
  %168 = alloca i32, align 4
  %169 = alloca [131 x i32], align 4
  %170 = alloca [65 x i32], align 4
  %171 = alloca i32, align 4
  %172 = alloca i32, align 4
  %173 = alloca i32, align 4
  store i32 %154, i32* %160, align 4
  store i32* %155, i32** %161, align 4
  store i32 %156, i32* %162, align 4
  store i32* %157, i32** %163, align 4
  store i32* %158, i32** %164, align 4
  store i32* %159, i32** %165, align 4
  %174 = load i32, i32* %160, align 4
  %175 = load i32*, i32** %161, align 4
  br label %bn_mod_bn_div_bn_digits_entry

bn_mod_bn_div_bn_digits_entry:                    ; preds = %bn_mod_bn_div_entry
  %176 = alloca i32, align 4
  %177 = alloca i32*, align 4
  %178 = alloca i32, align 4
  store i32 %174, i32* %176, align 4
  store i32* %175, i32** %177, align 4
  %179 = load i32, i32* %176, align 4
  %180 = sub i32 %179, 1
  store i32 %180, i32* %178, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.cond:                 ; preds = %bn_mod_bn_div_bn_digits_for.inc, %bn_mod_bn_div_bn_digits_entry
  %181 = load i32, i32* %178, align 4
  %182 = icmp sge i32 %181, 0
  br i1 %182, label %bn_mod_bn_div_bn_digits_for.body, label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_for.body:                 ; preds = %bn_mod_bn_div_bn_digits_for.cond
  %183 = load i32*, i32** %177, align 4
  %184 = load i32, i32* %178, align 4
  %185 = getelementptr inbounds i32, i32* %183, i32 %184
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %186, 0
  br i1 %187, label %bn_mod_bn_div_bn_digits_if.then, label %bn_mod_bn_div_bn_digits_if.end

bn_mod_bn_div_bn_digits_if.then:                  ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_if.end:                   ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.inc

bn_mod_bn_div_bn_digits_for.inc:                  ; preds = %bn_mod_bn_div_bn_digits_if.end
  %188 = load i32, i32* %178, align 4
  %189 = add nsw i32 %188, -1
  store i32 %189, i32* %178, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.end:                  ; preds = %bn_mod_bn_div_bn_digits_if.then, %bn_mod_bn_div_bn_digits_for.cond
  %190 = load i32, i32* %178, align 4
  %191 = add nsw i32 %190, 1
  br label %bn_mod_bn_div_entry.split

bn_mod_bn_div_entry.split:                        ; preds = %bn_mod_bn_div_bn_digits_for.end
  store i32 %191, i32* %172, align 4
  %192 = load i32, i32* %172, align 4
  %193 = icmp eq i32 %192, 0
  br i1 %193, label %bn_mod_bn_div_if.then, label %bn_mod_bn_div_if.end

bn_mod_bn_div_if.then:                            ; preds = %bn_mod_bn_div_entry.split
  br label %bn_mod_bn_div_return

bn_mod_bn_div_if.end:                             ; preds = %bn_mod_bn_div_entry.split
  %194 = load i32*, i32** %161, align 4
  %195 = load i32, i32* %172, align 4
  %196 = sub i32 %195, 1
  %197 = getelementptr inbounds i32, i32* %194, i32 %196
  %198 = load i32, i32* %197, align 4
  %199 = call i32 @bn_digit_bits(i32 %198)
  %200 = sub i32 32, %199
  store i32 %200, i32* %173, align 4
  %201 = load i32, i32* %172, align 4
  %202 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7

bn_mod_bn_div_bn_assign_zero_entry7:              ; preds = %bn_mod_bn_div_if.end
  %203 = alloca i32, align 4
  %204 = alloca i32*, align 4
  %205 = alloca i32, align 4
  store i32 %201, i32* %203, align 4
  store i32* %202, i32** %204, align 4
  store i32 0, i32* %205, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.cond8:           ; preds = %bn_mod_bn_div_bn_assign_zero_entry7
  %call5 = call %ReturnStruct.1* @ConditionFun.4(i32 0, i32 1, i32* %203, i32** %204, i32* %205)
  %MainStrut6 = alloca %ReturnStruct.1*, align 4
  store %ReturnStruct.1* %call5, %ReturnStruct.1** %MainStrut6, align 4
  br label %new4

new4:                                             ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  br label %bn_mod_bn_div_if.end.split6

bn_mod_bn_div_if.end.split6:                      ; preds = %new4
  %206 = load i32, i32* %162, align 4
  %207 = load i32, i32* %173, align 4
  %208 = load i32*, i32** %163, align 4
  %209 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 0
  %210 = call i32 @bn_shift_l(i32* %209, i32* %208, i32 %207, i32 %206)
  %211 = load i32, i32* %162, align 4
  %212 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %211
  store i32 %210, i32* %212, align 4
  %213 = load i32, i32* %172, align 4
  %214 = load i32, i32* %173, align 4
  %215 = load i32*, i32** %161, align 4
  %216 = getelementptr inbounds [65 x i32], [65 x i32]* %170, i32 0, i32 0
  %217 = call i32 @bn_shift_l(i32* %216, i32* %215, i32 %214, i32 %213)
  %218 = load i32, i32* %172, align 4
  %219 = sub i32 %218, 1
  %220 = getelementptr inbounds [65 x i32], [65 x i32]* %170, i32 0, i32 %219
  %221 = load i32, i32* %220, align 4
  store i32 %221, i32* %168, align 4
  %222 = load i32, i32* %162, align 4
  %223 = load i32*, i32** %165, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1

bn_mod_bn_div_bn_assign_zero_entry1:              ; preds = %bn_mod_bn_div_if.end.split6
  %224 = alloca i32, align 4
  %225 = alloca i32*, align 4
  %226 = alloca i32, align 4
  store i32 %222, i32* %224, align 4
  store i32* %223, i32** %225, align 4
  store i32 0, i32* %226, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.cond2:           ; preds = %bn_mod_bn_div_bn_assign_zero_entry1
  %call8 = call %ReturnStruct.2* @ConditionFun.7(i32 0, i32 1, i32* %224, i32** %225, i32* %226)
  %MainStrut9 = alloca %ReturnStruct.2*, align 4
  store %ReturnStruct.2* %call8, %ReturnStruct.2** %MainStrut9, align 4
  br label %new7

new7:                                             ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  br label %bn_mod_bn_div_if.end.split

bn_mod_bn_div_if.end.split:                       ; preds = %new7
  %227 = load i32, i32* %162, align 4
  %228 = load i32, i32* %172, align 4
  %229 = sub i32 %227, %228
  store i32 %229, i32* %171, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.cond:                           ; preds = %bn_mod_bn_div_for.inc, %bn_mod_bn_div_if.end.split
  %230 = load i32, i32* %171, align 4
  %231 = icmp sge i32 %230, 0
  br i1 %231, label %bn_mod_bn_div_for.body, label %bn_mod_bn_div_for.end

bn_mod_bn_div_for.body:                           ; preds = %bn_mod_bn_div_for.cond
  %232 = load i32, i32* %168, align 4
  %233 = icmp eq i32 %232, -1
  br i1 %233, label %bn_mod_bn_div_if.then13, label %bn_mod_bn_div_if.else

bn_mod_bn_div_if.then13:                          ; preds = %bn_mod_bn_div_for.body
  %234 = load i32, i32* %171, align 4
  %235 = load i32, i32* %172, align 4
  %236 = add i32 %234, %235
  %237 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %236
  %238 = load i32, i32* %237, align 4
  store i32 %238, i32* %167, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.else:                            ; preds = %bn_mod_bn_div_for.body
  %239 = load i32, i32* %171, align 4
  %240 = load i32, i32* %172, align 4
  %241 = add i32 %239, %240
  %242 = sub i32 %241, 1
  %243 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %242
  %244 = load i32, i32* %243, align 4
  %245 = zext i32 %244 to i64
  store i64 %245, i64* %166, align 8
  %246 = load i32, i32* %171, align 4
  %247 = load i32, i32* %172, align 4
  %248 = add i32 %246, %247
  %249 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %248
  %250 = load i32, i32* %249, align 4
  %251 = zext i32 %250 to i64
  %252 = shl i64 %251, 32
  %253 = load i64, i64* %166, align 8
  %254 = add i64 %253, %252
  store i64 %254, i64* %166, align 8
  %255 = load i64, i64* %166, align 8
  %256 = load i32, i32* %168, align 4
  %257 = add i32 %256, 1
  %258 = zext i32 %257 to i64
  %259 = udiv i64 %255, %258
  %260 = trunc i64 %259 to i32
  store i32 %260, i32* %167, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.end25:                           ; preds = %bn_mod_bn_div_if.else, %bn_mod_bn_div_if.then13
  %261 = load i32, i32* %172, align 4
  %262 = getelementptr inbounds [65 x i32], [65 x i32]* %170, i32 0, i32 0
  %263 = load i32, i32* %167, align 4
  %264 = load i32, i32* %171, align 4
  %265 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %264
  %266 = load i32, i32* %171, align 4
  %267 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %266
  %268 = call i32 @bn_sub_digit_mul(i32* %267, i32* %265, i32 %263, i32* %262, i32 %261)
  %269 = load i32, i32* %171, align 4
  %270 = load i32, i32* %172, align 4
  %271 = add i32 %269, %270
  %272 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %271
  %273 = load i32, i32* %272, align 4
  %274 = sub i32 %273, %268
  store i32 %274, i32* %272, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.cond:                         ; preds = %bn_mod_bn_div_while.body.split, %bn_mod_bn_div_if.end25
  %275 = load i32, i32* %171, align 4
  %276 = load i32, i32* %172, align 4
  %277 = add i32 %275, %276
  %278 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %277
  %279 = load i32, i32* %278, align 4
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %bn_mod_bn_div_lor.end, label %bn_mod_bn_div_lor.rhs

bn_mod_bn_div_lor.rhs:                            ; preds = %bn_mod_bn_div_while.cond
  %281 = load i32, i32* %172, align 4
  %282 = getelementptr inbounds [65 x i32], [65 x i32]* %170, i32 0, i32 0
  %283 = load i32, i32* %171, align 4
  %284 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %283
  br label %bn_mod_bn_cmp_entry

bn_mod_bn_cmp_entry:                              ; preds = %bn_mod_bn_div_lor.rhs
  %285 = alloca i32, align 4
  %286 = alloca i32, align 4
  %287 = alloca i32*, align 4
  %288 = alloca i32*, align 4
  %289 = alloca i32, align 4
  store i32 %281, i32* %286, align 4
  store i32* %282, i32** %287, align 4
  store i32* %284, i32** %288, align 4
  %290 = load i32, i32* %286, align 4
  %291 = sub i32 %290, 1
  store i32 %291, i32* %289, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.cond:                           ; preds = %bn_mod_bn_cmp_for.inc, %bn_mod_bn_cmp_entry
  %292 = load i32, i32* %289, align 4
  %293 = icmp sge i32 %292, 0
  br i1 %293, label %bn_mod_bn_cmp_for.body, label %bn_mod_bn_cmp_for.end

bn_mod_bn_cmp_for.body:                           ; preds = %bn_mod_bn_cmp_for.cond
  %294 = load i32*, i32** %288, align 4
  %295 = load i32, i32* %289, align 4
  %296 = getelementptr inbounds i32, i32* %294, i32 %295
  %297 = load i32, i32* %296, align 4
  %298 = load i32*, i32** %287, align 4
  %299 = load i32, i32* %289, align 4
  %300 = getelementptr inbounds i32, i32* %298, i32 %299
  %301 = load i32, i32* %300, align 4
  %302 = icmp ugt i32 %297, %301
  br i1 %302, label %bn_mod_bn_cmp_if.then, label %bn_mod_bn_cmp_if.end

bn_mod_bn_cmp_if.then:                            ; preds = %bn_mod_bn_cmp_for.body
  store i32 1, i32* %285, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end:                             ; preds = %bn_mod_bn_cmp_for.body
  %303 = load i32*, i32** %288, align 4
  %304 = load i32, i32* %289, align 4
  %305 = getelementptr inbounds i32, i32* %303, i32 %304
  %306 = load i32, i32* %305, align 4
  %307 = load i32*, i32** %287, align 4
  %308 = load i32, i32* %289, align 4
  %309 = getelementptr inbounds i32, i32* %307, i32 %308
  %310 = load i32, i32* %309, align 4
  %311 = icmp ult i32 %306, %310
  br i1 %311, label %bn_mod_bn_cmp_if.then6, label %bn_mod_bn_cmp_if.end7

bn_mod_bn_cmp_if.then6:                           ; preds = %bn_mod_bn_cmp_if.end
  store i32 -1, i32* %285, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end7:                            ; preds = %bn_mod_bn_cmp_if.end
  br label %bn_mod_bn_cmp_for.inc

bn_mod_bn_cmp_for.inc:                            ; preds = %bn_mod_bn_cmp_if.end7
  %312 = load i32, i32* %289, align 4
  %313 = add nsw i32 %312, -1
  store i32 %313, i32* %289, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.end:                            ; preds = %bn_mod_bn_cmp_for.cond
  store i32 0, i32* %285, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_return:                             ; preds = %bn_mod_bn_cmp_for.end, %bn_mod_bn_cmp_if.then6, %bn_mod_bn_cmp_if.then
  %314 = load i32, i32* %285, align 4
  br label %bn_mod_bn_div_lor.rhs.split

bn_mod_bn_div_lor.rhs.split:                      ; preds = %bn_mod_bn_cmp_return
  %315 = icmp sge i32 %314, 0
  br label %bn_mod_bn_div_lor.end

bn_mod_bn_div_lor.end:                            ; preds = %bn_mod_bn_div_lor.rhs.split, %bn_mod_bn_div_while.cond
  %316 = phi i1 [ true, %bn_mod_bn_div_while.cond ], [ %315, %bn_mod_bn_div_lor.rhs.split ]
  br i1 %316, label %bn_mod_bn_div_while.body, label %bn_mod_bn_div_while.end

bn_mod_bn_div_while.body:                         ; preds = %bn_mod_bn_div_lor.end
  %317 = load i32, i32* %167, align 4
  %318 = add i32 %317, 1
  store i32 %318, i32* %167, align 4
  %319 = load i32, i32* %172, align 4
  %320 = getelementptr inbounds [65 x i32], [65 x i32]* %170, i32 0, i32 0
  %321 = load i32, i32* %171, align 4
  %322 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %321
  %323 = load i32, i32* %171, align 4
  %324 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %323
  br label %bn_mod_bn_div_bn_sub_entry

bn_mod_bn_div_bn_sub_entry:                       ; preds = %bn_mod_bn_div_while.body
  %325 = alloca i32, align 4
  %326 = alloca i32*, align 4
  %327 = alloca i32*, align 4
  %328 = alloca i32*, align 4
  %329 = alloca i32, align 4
  %330 = alloca i32, align 4
  %331 = alloca i32, align 4
  store i32 %319, i32* %325, align 4
  store i32* %320, i32** %326, align 4
  store i32* %322, i32** %327, align 4
  store i32* %324, i32** %328, align 4
  store i32 0, i32* %330, align 4
  store i32 0, i32* %331, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.cond:                    ; preds = %bn_mod_bn_div_bn_sub_for.inc, %bn_mod_bn_div_bn_sub_entry
  %332 = load i32, i32* %331, align 4
  %333 = load i32, i32* %325, align 4
  %334 = icmp ult i32 %332, %333
  br i1 %334, label %bn_mod_bn_div_bn_sub_for.body, label %bn_mod_bn_div_bn_sub_for.end

bn_mod_bn_div_bn_sub_for.body:                    ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %335 = load i32*, i32** %327, align 4
  %336 = load i32, i32* %331, align 4
  %337 = getelementptr inbounds i32, i32* %335, i32 %336
  %338 = load i32, i32* %337, align 4
  %339 = load i32, i32* %330, align 4
  %340 = sub i32 %338, %339
  store i32 %340, i32* %329, align 4
  %341 = load i32, i32* %330, align 4
  %342 = sub i32 -1, %341
  %343 = icmp ugt i32 %340, %342
  br i1 %343, label %bn_mod_bn_div_bn_sub_if.then, label %bn_mod_bn_div_bn_sub_if.else

bn_mod_bn_div_bn_sub_if.then:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %344 = load i32*, i32** %326, align 4
  %345 = load i32, i32* %331, align 4
  %346 = getelementptr inbounds i32, i32* %344, i32 %345
  %347 = load i32, i32* %346, align 4
  %348 = sub i32 -1, %347
  store i32 %348, i32* %329, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.else:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %349 = load i32*, i32** %326, align 4
  %350 = load i32, i32* %331, align 4
  %351 = getelementptr inbounds i32, i32* %349, i32 %350
  %352 = load i32, i32* %351, align 4
  %353 = load i32, i32* %329, align 4
  %354 = sub i32 %353, %352
  store i32 %354, i32* %329, align 4
  %355 = load i32*, i32** %326, align 4
  %356 = load i32, i32* %331, align 4
  %357 = getelementptr inbounds i32, i32* %355, i32 %356
  %358 = load i32, i32* %357, align 4
  %359 = sub i32 -1, %358
  %360 = icmp ugt i32 %354, %359
  br i1 %360, label %bn_mod_bn_div_bn_sub_if.then10, label %bn_mod_bn_div_bn_sub_if.else11

bn_mod_bn_div_bn_sub_if.then10:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 1, i32* %330, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.else11:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 0, i32* %330, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.end:                      ; preds = %bn_mod_bn_div_bn_sub_if.else11, %bn_mod_bn_div_bn_sub_if.then10
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.end12:                    ; preds = %bn_mod_bn_div_bn_sub_if.end, %bn_mod_bn_div_bn_sub_if.then
  %361 = load i32, i32* %329, align 4
  %362 = load i32*, i32** %328, align 4
  %363 = load i32, i32* %331, align 4
  %364 = getelementptr inbounds i32, i32* %362, i32 %363
  store i32 %361, i32* %364, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc

bn_mod_bn_div_bn_sub_for.inc:                     ; preds = %bn_mod_bn_div_bn_sub_if.end12
  %365 = load i32, i32* %331, align 4
  %366 = add i32 %365, 1
  store i32 %366, i32* %331, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.end:                     ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %367 = load i32, i32* %330, align 4
  br label %bn_mod_bn_div_while.body.split

bn_mod_bn_div_while.body.split:                   ; preds = %bn_mod_bn_div_bn_sub_for.end
  %368 = load i32, i32* %171, align 4
  %369 = load i32, i32* %172, align 4
  %370 = add i32 %368, %369
  %371 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 %370
  %372 = load i32, i32* %371, align 4
  %373 = sub i32 %372, %367
  store i32 %373, i32* %371, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.end:                          ; preds = %bn_mod_bn_div_lor.end
  %374 = load i32, i32* %167, align 4
  %375 = load i32*, i32** %165, align 4
  %376 = load i32, i32* %171, align 4
  %377 = getelementptr inbounds i32, i32* %375, i32 %376
  store i32 %374, i32* %377, align 4
  br label %bn_mod_bn_div_for.inc

bn_mod_bn_div_for.inc:                            ; preds = %bn_mod_bn_div_while.end
  %378 = load i32, i32* %171, align 4
  %379 = add nsw i32 %378, -1
  store i32 %379, i32* %171, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.end:                            ; preds = %bn_mod_bn_div_for.cond
  %380 = load i32, i32* %160, align 4
  %381 = load i32*, i32** %164, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry

bn_mod_bn_div_bn_assign_zero_entry:               ; preds = %bn_mod_bn_div_for.end
  %382 = alloca i32, align 4
  %383 = alloca i32*, align 4
  %384 = alloca i32, align 4
  store i32 %380, i32* %382, align 4
  store i32* %381, i32** %383, align 4
  store i32 0, i32* %384, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.cond:            ; preds = %bn_mod_bn_div_bn_assign_zero_entry
  %call11 = call %ReturnStruct.3* @ConditionFun.10(i32 0, i32 1, i32* %382, i32** %383, i32* %384)
  %MainStrut12 = alloca %ReturnStruct.3*, align 4
  store %ReturnStruct.3* %call11, %ReturnStruct.3** %MainStrut12, align 4
  br label %new10

new10:                                            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  br label %bn_mod_bn_div_for.end.split

bn_mod_bn_div_for.end.split:                      ; preds = %new10
  %385 = load i32, i32* %172, align 4
  %386 = load i32, i32* %173, align 4
  %387 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 0
  %388 = load i32*, i32** %164, align 4
  %389 = call i32 @bn_shift_r(i32* %388, i32* %387, i32 %386, i32 %385)
  %390 = getelementptr inbounds [131 x i32], [131 x i32]* %169, i32 0, i32 0
  %391 = bitcast i32* %390 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %391, i8 0, i32 524, i1 false)
  %392 = getelementptr inbounds [65 x i32], [65 x i32]* %170, i32 0, i32 0
  %393 = bitcast i32* %392 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %393, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return

bn_mod_bn_div_return:                             ; preds = %bn_mod_bn_div_for.end.split, %bn_mod_bn_div_if.then
  br label %bn_mod_entry.split

bn_mod_entry.split:                               ; preds = %bn_mod_bn_div_return
  %394 = getelementptr inbounds [130 x i32], [130 x i32]* %152, i32 0, i32 0
  %395 = bitcast i32* %394 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %395, i8 0, i32 520, i1 false)
  br label %entry.split.split

entry.split.split:                                ; preds = %bn_mod_entry.split
  %arraydecay2 = getelementptr inbounds [130 x i32], [130 x i32]* %t, i32 0, i32 0
  %396 = bitcast i32* %arraydecay2 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %396, i8 0, i32 520, i1 false)
  ret void
}

; Function Attrs: noinline optnone
define dso_local void @bn_mod_inv(i32* %a, i32* %b, i32* %c, i32 %digits) #2 {
entry:
  %digits.addr = alloca i32, align 4
  %c.addr = alloca i32*, align 4
  %b.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %q = alloca [65 x i32], align 4
  %t1 = alloca [65 x i32], align 4
  %t3 = alloca [65 x i32], align 4
  %w = alloca [130 x i32], align 4
  %u1 = alloca [65 x i32], align 4
  %u3 = alloca [65 x i32], align 4
  %v1 = alloca [65 x i32], align 4
  %v3 = alloca [65 x i32], align 4
  %u1_sign = alloca i32, align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %digits.addr, align 4
  %arraydecay = getelementptr inbounds [65 x i32], [65 x i32]* %u1, i32 0, i32 0
  br label %bn_assign_zero_entry37

bn_assign_zero_entry37:                           ; preds = %entry
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %1, align 4
  store i32* %arraydecay, i32** %2, align 4
  store i32 0, i32* %3, align 4
  br label %bn_assign_zero_for.cond38

bn_assign_zero_for.cond38:                        ; preds = %bn_assign_zero_entry37
  %call1 = call %ReturnStruct.4* @ConditionFun.13(i32 0, i32* %1, i32** %2, i32* %3)
  %MainStrut = alloca %ReturnStruct.4*, align 4
  store %ReturnStruct.4* %call1, %ReturnStruct.4** %MainStrut, align 4
  br label %new

new:                                              ; preds = %bn_assign_zero_for.cond38
  br label %entry.split36

entry.split36:                                    ; preds = %new
  %arrayidx = getelementptr inbounds [65 x i32], [65 x i32]* %u1, i32 0, i32 0
  store i32 1, i32* %arrayidx, align 4
  %4 = load i32, i32* %digits.addr, align 4
  %arraydecay1 = getelementptr inbounds [65 x i32], [65 x i32]* %v1, i32 0, i32 0
  br label %bn_assign_zero_entry

bn_assign_zero_entry:                             ; preds = %entry.split36
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 4
  %7 = alloca i32, align 4
  store i32 %4, i32* %5, align 4
  store i32* %arraydecay1, i32** %6, align 4
  store i32 0, i32* %7, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.cond:                          ; preds = %bn_assign_zero_entry
  %call3 = call %ReturnStruct.5* @ConditionFun.16(i32 0, i32 1, i32* %5, i32** %6, i32* %7)
  %MainStrut4 = alloca %ReturnStruct.5*, align 4
  store %ReturnStruct.5* %call3, %ReturnStruct.5** %MainStrut4, align 4
  br label %new2

new2:                                             ; preds = %bn_assign_zero_for.cond
  br label %entry.split35

entry.split35:                                    ; preds = %new2
  %8 = load i32, i32* %digits.addr, align 4
  %9 = load i32*, i32** %b.addr, align 4
  %arraydecay2 = getelementptr inbounds [65 x i32], [65 x i32]* %u3, i32 0, i32 0
  br label %bn_assign_entry30

bn_assign_entry30:                                ; preds = %entry.split35
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 4
  %12 = alloca i32*, align 4
  %13 = alloca i32, align 4
  store i32 %8, i32* %10, align 4
  store i32* %9, i32** %11, align 4
  store i32* %arraydecay2, i32** %12, align 4
  store i32 0, i32* %13, align 4
  br label %bn_assign_for.cond31

bn_assign_for.cond31:                             ; preds = %bn_assign_entry30
  %call6 = call %ReturnStruct.6* @ConditionFun.19(i32 1, i32* %10, i32** %11, i32** %12, i32* %13)
  %MainStrut7 = alloca %ReturnStruct.6*, align 4
  store %ReturnStruct.6* %call6, %ReturnStruct.6** %MainStrut7, align 4
  br label %new5

new5:                                             ; preds = %bn_assign_for.cond31
  br label %entry.split29

entry.split29:                                    ; preds = %new5
  %14 = load i32, i32* %digits.addr, align 4
  %15 = load i32*, i32** %c.addr, align 4
  %arraydecay3 = getelementptr inbounds [65 x i32], [65 x i32]* %v3, i32 0, i32 0
  br label %bn_assign_entry24

bn_assign_entry24:                                ; preds = %entry.split29
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 4
  %18 = alloca i32*, align 4
  %19 = alloca i32, align 4
  store i32 %14, i32* %16, align 4
  store i32* %15, i32** %17, align 4
  store i32* %arraydecay3, i32** %18, align 4
  store i32 0, i32* %19, align 4
  br label %bn_assign_for.cond25

bn_assign_for.cond25:                             ; preds = %bn_assign_entry24
  %call9 = call %ReturnStruct.7* @ConditionFun.22(i32 1, i32* %16, i32** %17, i32** %18, i32* %19)
  %MainStrut10 = alloca %ReturnStruct.7*, align 4
  store %ReturnStruct.7* %call9, %ReturnStruct.7** %MainStrut10, align 4
  br label %new8

new8:                                             ; preds = %bn_assign_for.cond25
  br label %entry.split

entry.split:                                      ; preds = %new8
  store i32 1, i32* %u1_sign, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body.split, %entry.split
  %20 = load i32, i32* %digits.addr, align 4
  %arraydecay4 = getelementptr inbounds [65 x i32], [65 x i32]* %v3, i32 0, i32 0
  %call = call i32 @bn_is_zero(i32* %arraydecay4, i32 %20)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %21 = load i32, i32* %digits.addr, align 4
  %arraydecay5 = getelementptr inbounds [65 x i32], [65 x i32]* %v3, i32 0, i32 0
  %22 = load i32, i32* %digits.addr, align 4
  %arraydecay6 = getelementptr inbounds [65 x i32], [65 x i32]* %u3, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [65 x i32], [65 x i32]* %t3, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  br label %bn_div_entry

bn_div_entry:                                     ; preds = %while.body
  %23 = alloca i32, align 4
  %24 = alloca i32*, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32*, align 4
  %27 = alloca i32*, align 4
  %28 = alloca i32*, align 4
  %29 = alloca i64, align 8
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca [131 x i32], align 4
  %33 = alloca [65 x i32], align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  store i32 %21, i32* %23, align 4
  store i32* %arraydecay5, i32** %24, align 4
  store i32 %22, i32* %25, align 4
  store i32* %arraydecay6, i32** %26, align 4
  store i32* %arraydecay7, i32** %27, align 4
  store i32* %arraydecay8, i32** %28, align 4
  %37 = load i32, i32* %23, align 4
  %38 = load i32*, i32** %24, align 4
  br label %bn_div_bn_digits_entry

bn_div_bn_digits_entry:                           ; preds = %bn_div_entry
  %39 = alloca i32, align 4
  %40 = alloca i32*, align 4
  %41 = alloca i32, align 4
  store i32 %37, i32* %39, align 4
  store i32* %38, i32** %40, align 4
  %42 = load i32, i32* %39, align 4
  %43 = sub i32 %42, 1
  store i32 %43, i32* %41, align 4
  br label %bn_div_bn_digits_for.cond

bn_div_bn_digits_for.cond:                        ; preds = %bn_div_bn_digits_for.inc, %bn_div_bn_digits_entry
  %44 = load i32, i32* %41, align 4
  %45 = icmp sge i32 %44, 0
  br i1 %45, label %bn_div_bn_digits_for.body, label %bn_div_bn_digits_for.end

bn_div_bn_digits_for.body:                        ; preds = %bn_div_bn_digits_for.cond
  %46 = load i32*, i32** %40, align 4
  %47 = load i32, i32* %41, align 4
  %48 = getelementptr inbounds i32, i32* %46, i32 %47
  %49 = load i32, i32* %48, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %bn_div_bn_digits_if.then, label %bn_div_bn_digits_if.end

bn_div_bn_digits_if.then:                         ; preds = %bn_div_bn_digits_for.body
  br label %bn_div_bn_digits_for.end

bn_div_bn_digits_if.end:                          ; preds = %bn_div_bn_digits_for.body
  br label %bn_div_bn_digits_for.inc

bn_div_bn_digits_for.inc:                         ; preds = %bn_div_bn_digits_if.end
  %51 = load i32, i32* %41, align 4
  %52 = add nsw i32 %51, -1
  store i32 %52, i32* %41, align 4
  br label %bn_div_bn_digits_for.cond

bn_div_bn_digits_for.end:                         ; preds = %bn_div_bn_digits_if.then, %bn_div_bn_digits_for.cond
  %53 = load i32, i32* %41, align 4
  %54 = add nsw i32 %53, 1
  br label %bn_div_entry.split

bn_div_entry.split:                               ; preds = %bn_div_bn_digits_for.end
  store i32 %54, i32* %35, align 4
  %55 = load i32, i32* %35, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %bn_div_if.then, label %bn_div_if.end

bn_div_if.then:                                   ; preds = %bn_div_entry.split
  br label %bn_div_return

bn_div_if.end:                                    ; preds = %bn_div_entry.split
  %57 = load i32*, i32** %24, align 4
  %58 = load i32, i32* %35, align 4
  %59 = sub i32 %58, 1
  %60 = getelementptr inbounds i32, i32* %57, i32 %59
  %61 = load i32, i32* %60, align 4
  %62 = call i32 @bn_digit_bits(i32 %61)
  %63 = sub i32 32, %62
  store i32 %63, i32* %36, align 4
  %64 = load i32, i32* %35, align 4
  %65 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 0
  br label %bn_div_bn_assign_zero_entry7

bn_div_bn_assign_zero_entry7:                     ; preds = %bn_div_if.end
  %66 = alloca i32, align 4
  %67 = alloca i32*, align 4
  %68 = alloca i32, align 4
  store i32 %64, i32* %66, align 4
  store i32* %65, i32** %67, align 4
  store i32 0, i32* %68, align 4
  br label %bn_div_bn_assign_zero_for.cond8

bn_div_bn_assign_zero_for.cond8:                  ; preds = %bn_div_bn_assign_zero_for.inc10, %bn_div_bn_assign_zero_entry7
  %69 = load i32, i32* %68, align 4
  %70 = load i32, i32* %66, align 4
  %71 = icmp ult i32 %69, %70
  br i1 %71, label %bn_div_bn_assign_zero_for.body9, label %bn_div_bn_assign_zero_for.end11

bn_div_bn_assign_zero_for.body9:                  ; preds = %bn_div_bn_assign_zero_for.cond8
  %72 = load i32*, i32** %67, align 4
  %73 = load i32, i32* %68, align 4
  %74 = getelementptr inbounds i32, i32* %72, i32 %73
  store i32 0, i32* %74, align 4
  br label %bn_div_bn_assign_zero_for.inc10

bn_div_bn_assign_zero_for.inc10:                  ; preds = %bn_div_bn_assign_zero_for.body9
  %75 = load i32, i32* %68, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %68, align 4
  br label %bn_div_bn_assign_zero_for.cond8

bn_div_bn_assign_zero_for.end11:                  ; preds = %bn_div_bn_assign_zero_for.cond8
  br label %bn_div_if.end.split6

bn_div_if.end.split6:                             ; preds = %bn_div_bn_assign_zero_for.end11
  %77 = load i32, i32* %25, align 4
  %78 = load i32, i32* %36, align 4
  %79 = load i32*, i32** %26, align 4
  %80 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 0
  %81 = call i32 @bn_shift_l(i32* %80, i32* %79, i32 %78, i32 %77)
  %82 = load i32, i32* %25, align 4
  %83 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %82
  store i32 %81, i32* %83, align 4
  %84 = load i32, i32* %35, align 4
  %85 = load i32, i32* %36, align 4
  %86 = load i32*, i32** %24, align 4
  %87 = getelementptr inbounds [65 x i32], [65 x i32]* %33, i32 0, i32 0
  %88 = call i32 @bn_shift_l(i32* %87, i32* %86, i32 %85, i32 %84)
  %89 = load i32, i32* %35, align 4
  %90 = sub i32 %89, 1
  %91 = getelementptr inbounds [65 x i32], [65 x i32]* %33, i32 0, i32 %90
  %92 = load i32, i32* %91, align 4
  store i32 %92, i32* %31, align 4
  %93 = load i32, i32* %25, align 4
  %94 = load i32*, i32** %28, align 4
  br label %bn_div_bn_assign_zero_entry1

bn_div_bn_assign_zero_entry1:                     ; preds = %bn_div_if.end.split6
  %95 = alloca i32, align 4
  %96 = alloca i32*, align 4
  %97 = alloca i32, align 4
  store i32 %93, i32* %95, align 4
  store i32* %94, i32** %96, align 4
  store i32 0, i32* %97, align 4
  br label %bn_div_bn_assign_zero_for.cond2

bn_div_bn_assign_zero_for.cond2:                  ; preds = %bn_div_bn_assign_zero_entry1
  %call12 = call %ReturnStruct.8* @ConditionFun.25(i32 0, i32 1, i32* %95, i32** %96, i32* %97)
  %MainStrut13 = alloca %ReturnStruct.8*, align 4
  store %ReturnStruct.8* %call12, %ReturnStruct.8** %MainStrut13, align 4
  br label %new11

new11:                                            ; preds = %bn_div_bn_assign_zero_for.cond2
  br label %bn_div_if.end.split

bn_div_if.end.split:                              ; preds = %new11
  %98 = load i32, i32* %25, align 4
  %99 = load i32, i32* %35, align 4
  %100 = sub i32 %98, %99
  store i32 %100, i32* %34, align 4
  br label %bn_div_for.cond

bn_div_for.cond:                                  ; preds = %bn_div_for.inc, %bn_div_if.end.split
  %101 = load i32, i32* %34, align 4
  %102 = icmp sge i32 %101, 0
  br i1 %102, label %bn_div_for.body, label %bn_div_for.end

bn_div_for.body:                                  ; preds = %bn_div_for.cond
  %103 = load i32, i32* %31, align 4
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %bn_div_if.then13, label %bn_div_if.else

bn_div_if.then13:                                 ; preds = %bn_div_for.body
  %105 = load i32, i32* %34, align 4
  %106 = load i32, i32* %35, align 4
  %107 = add i32 %105, %106
  %108 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %107
  %109 = load i32, i32* %108, align 4
  store i32 %109, i32* %30, align 4
  br label %bn_div_if.end25

bn_div_if.else:                                   ; preds = %bn_div_for.body
  %110 = load i32, i32* %34, align 4
  %111 = load i32, i32* %35, align 4
  %112 = add i32 %110, %111
  %113 = sub i32 %112, 1
  %114 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %113
  %115 = load i32, i32* %114, align 4
  %116 = zext i32 %115 to i64
  store i64 %116, i64* %29, align 8
  %117 = load i32, i32* %34, align 4
  %118 = load i32, i32* %35, align 4
  %119 = add i32 %117, %118
  %120 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %119
  %121 = load i32, i32* %120, align 4
  %122 = zext i32 %121 to i64
  %123 = shl i64 %122, 32
  %124 = load i64, i64* %29, align 8
  %125 = add i64 %124, %123
  store i64 %125, i64* %29, align 8
  %126 = load i64, i64* %29, align 8
  %127 = load i32, i32* %31, align 4
  %128 = add i32 %127, 1
  %129 = zext i32 %128 to i64
  %130 = udiv i64 %126, %129
  %131 = trunc i64 %130 to i32
  store i32 %131, i32* %30, align 4
  br label %bn_div_if.end25

bn_div_if.end25:                                  ; preds = %bn_div_if.else, %bn_div_if.then13
  %132 = load i32, i32* %35, align 4
  %133 = getelementptr inbounds [65 x i32], [65 x i32]* %33, i32 0, i32 0
  %134 = load i32, i32* %30, align 4
  %135 = load i32, i32* %34, align 4
  %136 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %135
  %137 = load i32, i32* %34, align 4
  %138 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %137
  %139 = call i32 @bn_sub_digit_mul(i32* %138, i32* %136, i32 %134, i32* %133, i32 %132)
  %140 = load i32, i32* %34, align 4
  %141 = load i32, i32* %35, align 4
  %142 = add i32 %140, %141
  %143 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %142
  %144 = load i32, i32* %143, align 4
  %145 = sub i32 %144, %139
  store i32 %145, i32* %143, align 4
  br label %bn_div_while.cond

bn_div_while.cond:                                ; preds = %bn_div_while.body.split, %bn_div_if.end25
  %146 = load i32, i32* %34, align 4
  %147 = load i32, i32* %35, align 4
  %148 = add i32 %146, %147
  %149 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %148
  %150 = load i32, i32* %149, align 4
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %bn_div_lor.end, label %bn_div_lor.rhs

bn_div_lor.rhs:                                   ; preds = %bn_div_while.cond
  %152 = load i32, i32* %35, align 4
  %153 = getelementptr inbounds [65 x i32], [65 x i32]* %33, i32 0, i32 0
  %154 = load i32, i32* %34, align 4
  %155 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %154
  br label %bn_cmp_entry

bn_cmp_entry:                                     ; preds = %bn_div_lor.rhs
  %156 = alloca i32, align 4
  %157 = alloca i32, align 4
  %158 = alloca i32*, align 4
  %159 = alloca i32*, align 4
  %160 = alloca i32, align 4
  store i32 %152, i32* %157, align 4
  store i32* %153, i32** %158, align 4
  store i32* %155, i32** %159, align 4
  %161 = load i32, i32* %157, align 4
  %162 = sub i32 %161, 1
  store i32 %162, i32* %160, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.cond:                                  ; preds = %bn_cmp_for.inc, %bn_cmp_entry
  %163 = load i32, i32* %160, align 4
  %164 = icmp sge i32 %163, 0
  br i1 %164, label %bn_cmp_for.body, label %bn_cmp_for.end

bn_cmp_for.body:                                  ; preds = %bn_cmp_for.cond
  %165 = load i32*, i32** %159, align 4
  %166 = load i32, i32* %160, align 4
  %167 = getelementptr inbounds i32, i32* %165, i32 %166
  %168 = load i32, i32* %167, align 4
  %169 = load i32*, i32** %158, align 4
  %170 = load i32, i32* %160, align 4
  %171 = getelementptr inbounds i32, i32* %169, i32 %170
  %172 = load i32, i32* %171, align 4
  %173 = icmp ugt i32 %168, %172
  br i1 %173, label %bn_cmp_if.then, label %bn_cmp_if.end

bn_cmp_if.then:                                   ; preds = %bn_cmp_for.body
  store i32 1, i32* %156, align 4
  br label %bn_cmp_return

bn_cmp_if.end:                                    ; preds = %bn_cmp_for.body
  %174 = load i32*, i32** %159, align 4
  %175 = load i32, i32* %160, align 4
  %176 = getelementptr inbounds i32, i32* %174, i32 %175
  %177 = load i32, i32* %176, align 4
  %178 = load i32*, i32** %158, align 4
  %179 = load i32, i32* %160, align 4
  %180 = getelementptr inbounds i32, i32* %178, i32 %179
  %181 = load i32, i32* %180, align 4
  %182 = icmp ult i32 %177, %181
  br i1 %182, label %bn_cmp_if.then6, label %bn_cmp_if.end7

bn_cmp_if.then6:                                  ; preds = %bn_cmp_if.end
  store i32 -1, i32* %156, align 4
  br label %bn_cmp_return

bn_cmp_if.end7:                                   ; preds = %bn_cmp_if.end
  br label %bn_cmp_for.inc

bn_cmp_for.inc:                                   ; preds = %bn_cmp_if.end7
  %183 = load i32, i32* %160, align 4
  %184 = add nsw i32 %183, -1
  store i32 %184, i32* %160, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.end:                                   ; preds = %bn_cmp_for.cond
  store i32 0, i32* %156, align 4
  br label %bn_cmp_return

bn_cmp_return:                                    ; preds = %bn_cmp_for.end, %bn_cmp_if.then6, %bn_cmp_if.then
  %185 = load i32, i32* %156, align 4
  br label %bn_div_lor.rhs.split

bn_div_lor.rhs.split:                             ; preds = %bn_cmp_return
  %186 = icmp sge i32 %185, 0
  br label %bn_div_lor.end

bn_div_lor.end:                                   ; preds = %bn_div_lor.rhs.split, %bn_div_while.cond
  %187 = phi i1 [ true, %bn_div_while.cond ], [ %186, %bn_div_lor.rhs.split ]
  br i1 %187, label %bn_div_while.body, label %bn_div_while.end

bn_div_while.body:                                ; preds = %bn_div_lor.end
  %188 = load i32, i32* %30, align 4
  %189 = add i32 %188, 1
  store i32 %189, i32* %30, align 4
  %190 = load i32, i32* %35, align 4
  %191 = getelementptr inbounds [65 x i32], [65 x i32]* %33, i32 0, i32 0
  %192 = load i32, i32* %34, align 4
  %193 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %192
  %194 = load i32, i32* %34, align 4
  %195 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %194
  br label %bn_div_bn_sub_entry

bn_div_bn_sub_entry:                              ; preds = %bn_div_while.body
  %196 = alloca i32, align 4
  %197 = alloca i32*, align 4
  %198 = alloca i32*, align 4
  %199 = alloca i32*, align 4
  %200 = alloca i32, align 4
  %201 = alloca i32, align 4
  %202 = alloca i32, align 4
  store i32 %190, i32* %196, align 4
  store i32* %191, i32** %197, align 4
  store i32* %193, i32** %198, align 4
  store i32* %195, i32** %199, align 4
  store i32 0, i32* %201, align 4
  store i32 0, i32* %202, align 4
  br label %bn_div_bn_sub_for.cond

bn_div_bn_sub_for.cond:                           ; preds = %bn_div_bn_sub_for.inc, %bn_div_bn_sub_entry
  %203 = load i32, i32* %202, align 4
  %204 = load i32, i32* %196, align 4
  %205 = icmp ult i32 %203, %204
  br i1 %205, label %bn_div_bn_sub_for.body, label %bn_div_bn_sub_for.end

bn_div_bn_sub_for.body:                           ; preds = %bn_div_bn_sub_for.cond
  %206 = load i32*, i32** %198, align 4
  %207 = load i32, i32* %202, align 4
  %208 = getelementptr inbounds i32, i32* %206, i32 %207
  %209 = load i32, i32* %208, align 4
  %210 = load i32, i32* %201, align 4
  %211 = sub i32 %209, %210
  store i32 %211, i32* %200, align 4
  %212 = load i32, i32* %201, align 4
  %213 = sub i32 -1, %212
  %214 = icmp ugt i32 %211, %213
  br i1 %214, label %bn_div_bn_sub_if.then, label %bn_div_bn_sub_if.else

bn_div_bn_sub_if.then:                            ; preds = %bn_div_bn_sub_for.body
  %215 = load i32*, i32** %197, align 4
  %216 = load i32, i32* %202, align 4
  %217 = getelementptr inbounds i32, i32* %215, i32 %216
  %218 = load i32, i32* %217, align 4
  %219 = sub i32 -1, %218
  store i32 %219, i32* %200, align 4
  br label %bn_div_bn_sub_if.end12

bn_div_bn_sub_if.else:                            ; preds = %bn_div_bn_sub_for.body
  %220 = load i32*, i32** %197, align 4
  %221 = load i32, i32* %202, align 4
  %222 = getelementptr inbounds i32, i32* %220, i32 %221
  %223 = load i32, i32* %222, align 4
  %224 = load i32, i32* %200, align 4
  %225 = sub i32 %224, %223
  store i32 %225, i32* %200, align 4
  %226 = load i32*, i32** %197, align 4
  %227 = load i32, i32* %202, align 4
  %228 = getelementptr inbounds i32, i32* %226, i32 %227
  %229 = load i32, i32* %228, align 4
  %230 = sub i32 -1, %229
  %231 = icmp ugt i32 %225, %230
  br i1 %231, label %bn_div_bn_sub_if.then10, label %bn_div_bn_sub_if.else11

bn_div_bn_sub_if.then10:                          ; preds = %bn_div_bn_sub_if.else
  store i32 1, i32* %201, align 4
  br label %bn_div_bn_sub_if.end

bn_div_bn_sub_if.else11:                          ; preds = %bn_div_bn_sub_if.else
  store i32 0, i32* %201, align 4
  br label %bn_div_bn_sub_if.end

bn_div_bn_sub_if.end:                             ; preds = %bn_div_bn_sub_if.else11, %bn_div_bn_sub_if.then10
  br label %bn_div_bn_sub_if.end12

bn_div_bn_sub_if.end12:                           ; preds = %bn_div_bn_sub_if.end, %bn_div_bn_sub_if.then
  %232 = load i32, i32* %200, align 4
  %233 = load i32*, i32** %199, align 4
  %234 = load i32, i32* %202, align 4
  %235 = getelementptr inbounds i32, i32* %233, i32 %234
  store i32 %232, i32* %235, align 4
  br label %bn_div_bn_sub_for.inc

bn_div_bn_sub_for.inc:                            ; preds = %bn_div_bn_sub_if.end12
  %236 = load i32, i32* %202, align 4
  %237 = add i32 %236, 1
  store i32 %237, i32* %202, align 4
  br label %bn_div_bn_sub_for.cond

bn_div_bn_sub_for.end:                            ; preds = %bn_div_bn_sub_for.cond
  %238 = load i32, i32* %201, align 4
  br label %bn_div_while.body.split

bn_div_while.body.split:                          ; preds = %bn_div_bn_sub_for.end
  %239 = load i32, i32* %34, align 4
  %240 = load i32, i32* %35, align 4
  %241 = add i32 %239, %240
  %242 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 %241
  %243 = load i32, i32* %242, align 4
  %244 = sub i32 %243, %238
  store i32 %244, i32* %242, align 4
  br label %bn_div_while.cond

bn_div_while.end:                                 ; preds = %bn_div_lor.end
  %245 = load i32, i32* %30, align 4
  %246 = load i32*, i32** %28, align 4
  %247 = load i32, i32* %34, align 4
  %248 = getelementptr inbounds i32, i32* %246, i32 %247
  store i32 %245, i32* %248, align 4
  br label %bn_div_for.inc

bn_div_for.inc:                                   ; preds = %bn_div_while.end
  %249 = load i32, i32* %34, align 4
  %250 = add nsw i32 %249, -1
  store i32 %250, i32* %34, align 4
  br label %bn_div_for.cond

bn_div_for.end:                                   ; preds = %bn_div_for.cond
  %251 = load i32, i32* %23, align 4
  %252 = load i32*, i32** %27, align 4
  br label %bn_div_bn_assign_zero_entry

bn_div_bn_assign_zero_entry:                      ; preds = %bn_div_for.end
  %253 = alloca i32, align 4
  %254 = alloca i32*, align 4
  %255 = alloca i32, align 4
  store i32 %251, i32* %253, align 4
  store i32* %252, i32** %254, align 4
  store i32 0, i32* %255, align 4
  br label %bn_div_bn_assign_zero_for.cond

bn_div_bn_assign_zero_for.cond:                   ; preds = %bn_div_bn_assign_zero_for.inc, %bn_div_bn_assign_zero_entry
  %256 = load i32, i32* %255, align 4
  %257 = load i32, i32* %253, align 4
  %258 = icmp ult i32 %256, %257
  br i1 %258, label %bn_div_bn_assign_zero_for.body, label %bn_div_bn_assign_zero_for.end

bn_div_bn_assign_zero_for.body:                   ; preds = %bn_div_bn_assign_zero_for.cond
  %259 = load i32*, i32** %254, align 4
  %260 = load i32, i32* %255, align 4
  %261 = getelementptr inbounds i32, i32* %259, i32 %260
  store i32 0, i32* %261, align 4
  br label %bn_div_bn_assign_zero_for.inc

bn_div_bn_assign_zero_for.inc:                    ; preds = %bn_div_bn_assign_zero_for.body
  %262 = load i32, i32* %255, align 4
  %263 = add i32 %262, 1
  store i32 %263, i32* %255, align 4
  br label %bn_div_bn_assign_zero_for.cond

bn_div_bn_assign_zero_for.end:                    ; preds = %bn_div_bn_assign_zero_for.cond
  br label %bn_div_for.end.split

bn_div_for.end.split:                             ; preds = %bn_div_bn_assign_zero_for.end
  %264 = load i32, i32* %35, align 4
  %265 = load i32, i32* %36, align 4
  %266 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 0
  %267 = load i32*, i32** %27, align 4
  %268 = call i32 @bn_shift_r(i32* %267, i32* %266, i32 %265, i32 %264)
  %269 = getelementptr inbounds [131 x i32], [131 x i32]* %32, i32 0, i32 0
  %270 = bitcast i32* %269 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %270, i8 0, i32 524, i1 false)
  %271 = getelementptr inbounds [65 x i32], [65 x i32]* %33, i32 0, i32 0
  %272 = bitcast i32* %271 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %272, i8 0, i32 260, i1 false)
  br label %bn_div_return

bn_div_return:                                    ; preds = %bn_div_for.end.split, %bn_div_if.then
  br label %while.body.split52

while.body.split52:                               ; preds = %bn_div_return
  %273 = load i32, i32* %digits.addr, align 4
  %arraydecay9 = getelementptr inbounds [65 x i32], [65 x i32]* %v1, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [130 x i32], [130 x i32]* %w, i32 0, i32 0
  br label %bn_mul_entry

bn_mul_entry:                                     ; preds = %while.body.split52
  %274 = alloca i32, align 4
  %275 = alloca i32*, align 4
  %276 = alloca i32*, align 4
  %277 = alloca i32*, align 4
  %278 = alloca [130 x i32], align 4
  %279 = alloca i32, align 4
  %280 = alloca i32, align 4
  %281 = alloca i32, align 4
  store i32 %273, i32* %274, align 4
  store i32* %arraydecay9, i32** %275, align 4
  store i32* %arraydecay10, i32** %276, align 4
  store i32* %arraydecay11, i32** %277, align 4
  %282 = load i32, i32* %274, align 4
  %283 = mul i32 2, %282
  %284 = getelementptr inbounds [130 x i32], [130 x i32]* %278, i32 0, i32 0
  br label %bn_mul_bn_assign_zero_entry

bn_mul_bn_assign_zero_entry:                      ; preds = %bn_mul_entry
  %285 = alloca i32, align 4
  %286 = alloca i32*, align 4
  %287 = alloca i32, align 4
  store i32 %283, i32* %285, align 4
  store i32* %284, i32** %286, align 4
  store i32 0, i32* %287, align 4
  br label %bn_mul_bn_assign_zero_for.cond

bn_mul_bn_assign_zero_for.cond:                   ; preds = %bn_mul_bn_assign_zero_for.inc, %bn_mul_bn_assign_zero_entry
  %288 = load i32, i32* %287, align 4
  %289 = load i32, i32* %285, align 4
  %290 = icmp ult i32 %288, %289
  br i1 %290, label %bn_mul_bn_assign_zero_for.body, label %bn_mul_bn_assign_zero_for.end

bn_mul_bn_assign_zero_for.body:                   ; preds = %bn_mul_bn_assign_zero_for.cond
  %291 = load i32*, i32** %286, align 4
  %292 = load i32, i32* %287, align 4
  %293 = getelementptr inbounds i32, i32* %291, i32 %292
  store i32 0, i32* %293, align 4
  br label %bn_mul_bn_assign_zero_for.inc

bn_mul_bn_assign_zero_for.inc:                    ; preds = %bn_mul_bn_assign_zero_for.body
  %294 = load i32, i32* %287, align 4
  %295 = add i32 %294, 1
  store i32 %295, i32* %287, align 4
  br label %bn_mul_bn_assign_zero_for.cond

bn_mul_bn_assign_zero_for.end:                    ; preds = %bn_mul_bn_assign_zero_for.cond
  br label %bn_mul_entry.split

bn_mul_entry.split:                               ; preds = %bn_mul_bn_assign_zero_for.end
  %296 = load i32, i32* %274, align 4
  %297 = load i32*, i32** %276, align 4
  br label %bn_digits_entry45

bn_digits_entry45:                                ; preds = %bn_mul_entry.split
  %298 = alloca i32, align 4
  %299 = alloca i32*, align 4
  %300 = alloca i32, align 4
  store i32 %296, i32* %298, align 4
  store i32* %297, i32** %299, align 4
  %301 = load i32, i32* %298, align 4
  %302 = sub i32 %301, 1
  store i32 %302, i32* %300, align 4
  br label %bn_digits_for.cond46

bn_digits_for.cond46:                             ; preds = %bn_digits_for.inc50, %bn_digits_entry45
  %303 = load i32, i32* %300, align 4
  %304 = icmp sge i32 %303, 0
  br i1 %304, label %bn_digits_for.body47, label %bn_digits_for.end51

bn_digits_for.body47:                             ; preds = %bn_digits_for.cond46
  %305 = load i32*, i32** %299, align 4
  %306 = load i32, i32* %300, align 4
  %307 = getelementptr inbounds i32, i32* %305, i32 %306
  %308 = load i32, i32* %307, align 4
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %bn_digits_if.then48, label %bn_digits_if.end49

bn_digits_if.then48:                              ; preds = %bn_digits_for.body47
  br label %bn_digits_for.end51

bn_digits_if.end49:                               ; preds = %bn_digits_for.body47
  br label %bn_digits_for.inc50

bn_digits_for.inc50:                              ; preds = %bn_digits_if.end49
  %310 = load i32, i32* %300, align 4
  %311 = add nsw i32 %310, -1
  store i32 %311, i32* %300, align 4
  br label %bn_digits_for.cond46

bn_digits_for.end51:                              ; preds = %bn_digits_if.then48, %bn_digits_for.cond46
  %312 = load i32, i32* %300, align 4
  %313 = add nsw i32 %312, 1
  br label %bn_mul_entry.split.split44

bn_mul_entry.split.split44:                       ; preds = %bn_digits_for.end51
  store i32 %313, i32* %279, align 4
  %314 = load i32, i32* %274, align 4
  %315 = load i32*, i32** %275, align 4
  br label %bn_digits_entry

bn_digits_entry:                                  ; preds = %bn_mul_entry.split.split44
  %316 = alloca i32, align 4
  %317 = alloca i32*, align 4
  %318 = alloca i32, align 4
  store i32 %314, i32* %316, align 4
  store i32* %315, i32** %317, align 4
  %319 = load i32, i32* %316, align 4
  %320 = sub i32 %319, 1
  store i32 %320, i32* %318, align 4
  br label %bn_digits_for.cond

bn_digits_for.cond:                               ; preds = %bn_digits_for.inc, %bn_digits_entry
  %321 = load i32, i32* %318, align 4
  %322 = icmp sge i32 %321, 0
  br i1 %322, label %bn_digits_for.body, label %bn_digits_for.end

bn_digits_for.body:                               ; preds = %bn_digits_for.cond
  %323 = load i32*, i32** %317, align 4
  %324 = load i32, i32* %318, align 4
  %325 = getelementptr inbounds i32, i32* %323, i32 %324
  %326 = load i32, i32* %325, align 4
  %327 = icmp ne i32 %326, 0
  br i1 %327, label %bn_digits_if.then, label %bn_digits_if.end

bn_digits_if.then:                                ; preds = %bn_digits_for.body
  br label %bn_digits_for.end

bn_digits_if.end:                                 ; preds = %bn_digits_for.body
  br label %bn_digits_for.inc

bn_digits_for.inc:                                ; preds = %bn_digits_if.end
  %328 = load i32, i32* %318, align 4
  %329 = add nsw i32 %328, -1
  store i32 %329, i32* %318, align 4
  br label %bn_digits_for.cond

bn_digits_for.end:                                ; preds = %bn_digits_if.then, %bn_digits_for.cond
  %330 = load i32, i32* %318, align 4
  %331 = add nsw i32 %330, 1
  br label %bn_mul_entry.split.split

bn_mul_entry.split.split:                         ; preds = %bn_digits_for.end
  store i32 %331, i32* %280, align 4
  store i32 0, i32* %281, align 4
  br label %bn_mul_for.cond

bn_mul_for.cond:                                  ; preds = %bn_mul_for.inc, %bn_mul_entry.split.split
  %332 = load i32, i32* %281, align 4
  %333 = load i32, i32* %279, align 4
  %334 = icmp ult i32 %332, %333
  br i1 %334, label %bn_mul_for.body, label %bn_mul_for.end

bn_mul_for.body:                                  ; preds = %bn_mul_for.cond
  %335 = load i32, i32* %280, align 4
  %336 = load i32*, i32** %275, align 4
  %337 = load i32*, i32** %276, align 4
  %338 = load i32, i32* %281, align 4
  %339 = getelementptr inbounds i32, i32* %337, i32 %338
  %340 = load i32, i32* %339, align 4
  %341 = load i32, i32* %281, align 4
  %342 = getelementptr inbounds [130 x i32], [130 x i32]* %278, i32 0, i32 %341
  %343 = load i32, i32* %281, align 4
  %344 = getelementptr inbounds [130 x i32], [130 x i32]* %278, i32 0, i32 %343
  br label %bn_add_digit_mul_entry

bn_add_digit_mul_entry:                           ; preds = %bn_mul_for.body
  %345 = alloca i32, align 4
  %346 = alloca i32, align 4
  %347 = alloca i32*, align 4
  %348 = alloca i32, align 4
  %349 = alloca i32*, align 4
  %350 = alloca i32*, align 4
  %351 = alloca i64, align 8
  %352 = alloca i32, align 4
  %353 = alloca i32, align 4
  %354 = alloca i32, align 4
  %355 = alloca i32, align 4
  store i32 %335, i32* %346, align 4
  store i32* %336, i32** %347, align 4
  store i32 %340, i32* %348, align 4
  store i32* %342, i32** %349, align 4
  store i32* %344, i32** %350, align 4
  %356 = load i32, i32* %348, align 4
  %357 = icmp eq i32 %356, 0
  br i1 %357, label %bn_add_digit_mul_if.then, label %bn_add_digit_mul_if.end

bn_add_digit_mul_if.then:                         ; preds = %bn_add_digit_mul_entry
  store i32 0, i32* %345, align 4
  br label %bn_add_digit_mul_return

bn_add_digit_mul_if.end:                          ; preds = %bn_add_digit_mul_entry
  store i32 0, i32* %352, align 4
  store i32 0, i32* %355, align 4
  br label %bn_add_digit_mul_for.cond

bn_add_digit_mul_for.cond:                        ; preds = %bn_add_digit_mul_for.inc, %bn_add_digit_mul_if.end
  %358 = load i32, i32* %355, align 4
  %359 = load i32, i32* %346, align 4
  %360 = icmp ult i32 %358, %359
  br i1 %360, label %bn_add_digit_mul_for.body, label %bn_add_digit_mul_for.end

bn_add_digit_mul_for.body:                        ; preds = %bn_add_digit_mul_for.cond
  %361 = load i32, i32* %348, align 4
  %362 = zext i32 %361 to i64
  %363 = load i32*, i32** %347, align 4
  %364 = load i32, i32* %355, align 4
  %365 = getelementptr inbounds i32, i32* %363, i32 %364
  %366 = load i32, i32* %365, align 4
  %367 = zext i32 %366 to i64
  %368 = mul i64 %362, %367
  store i64 %368, i64* %351, align 8
  %369 = load i64, i64* %351, align 8
  %370 = and i64 %369, 4294967295
  %371 = trunc i64 %370 to i32
  store i32 %371, i32* %354, align 4
  %372 = load i64, i64* %351, align 8
  %373 = lshr i64 %372, 32
  %374 = and i64 %373, 4294967295
  %375 = trunc i64 %374 to i32
  store i32 %375, i32* %353, align 4
  %376 = load i32*, i32** %349, align 4
  %377 = load i32, i32* %355, align 4
  %378 = getelementptr inbounds i32, i32* %376, i32 %377
  %379 = load i32, i32* %378, align 4
  %380 = load i32, i32* %352, align 4
  %381 = add i32 %379, %380
  %382 = load i32*, i32** %350, align 4
  %383 = load i32, i32* %355, align 4
  %384 = getelementptr inbounds i32, i32* %382, i32 %383
  store i32 %381, i32* %384, align 4
  %385 = load i32, i32* %352, align 4
  %386 = icmp ult i32 %381, %385
  br i1 %386, label %bn_add_digit_mul_if.then10, label %bn_add_digit_mul_if.else

bn_add_digit_mul_if.then10:                       ; preds = %bn_add_digit_mul_for.body
  store i32 1, i32* %352, align 4
  br label %bn_add_digit_mul_if.end11

bn_add_digit_mul_if.else:                         ; preds = %bn_add_digit_mul_for.body
  store i32 0, i32* %352, align 4
  br label %bn_add_digit_mul_if.end11

bn_add_digit_mul_if.end11:                        ; preds = %bn_add_digit_mul_if.else, %bn_add_digit_mul_if.then10
  %387 = load i32, i32* %354, align 4
  %388 = load i32*, i32** %350, align 4
  %389 = load i32, i32* %355, align 4
  %390 = getelementptr inbounds i32, i32* %388, i32 %389
  %391 = load i32, i32* %390, align 4
  %392 = add i32 %391, %387
  store i32 %392, i32* %390, align 4
  %393 = load i32, i32* %354, align 4
  %394 = icmp ult i32 %392, %393
  br i1 %394, label %bn_add_digit_mul_if.then16, label %bn_add_digit_mul_if.end17

bn_add_digit_mul_if.then16:                       ; preds = %bn_add_digit_mul_if.end11
  %395 = load i32, i32* %352, align 4
  %396 = add i32 %395, 1
  store i32 %396, i32* %352, align 4
  br label %bn_add_digit_mul_if.end17

bn_add_digit_mul_if.end17:                        ; preds = %bn_add_digit_mul_if.then16, %bn_add_digit_mul_if.end11
  %397 = load i32, i32* %353, align 4
  %398 = load i32, i32* %352, align 4
  %399 = add i32 %398, %397
  store i32 %399, i32* %352, align 4
  br label %bn_add_digit_mul_for.inc

bn_add_digit_mul_for.inc:                         ; preds = %bn_add_digit_mul_if.end17
  %400 = load i32, i32* %355, align 4
  %401 = add i32 %400, 1
  store i32 %401, i32* %355, align 4
  br label %bn_add_digit_mul_for.cond

bn_add_digit_mul_for.end:                         ; preds = %bn_add_digit_mul_for.cond
  %402 = load i32, i32* %352, align 4
  store i32 %402, i32* %345, align 4
  br label %bn_add_digit_mul_return

bn_add_digit_mul_return:                          ; preds = %bn_add_digit_mul_for.end, %bn_add_digit_mul_if.then
  %403 = load i32, i32* %345, align 4
  br label %bn_mul_for.body.split

bn_mul_for.body.split:                            ; preds = %bn_add_digit_mul_return
  %404 = load i32, i32* %281, align 4
  %405 = load i32, i32* %280, align 4
  %406 = add i32 %404, %405
  %407 = getelementptr inbounds [130 x i32], [130 x i32]* %278, i32 0, i32 %406
  %408 = load i32, i32* %407, align 4
  %409 = add i32 %408, %403
  store i32 %409, i32* %407, align 4
  br label %bn_mul_for.inc

bn_mul_for.inc:                                   ; preds = %bn_mul_for.body.split
  %410 = load i32, i32* %281, align 4
  %411 = add i32 %410, 1
  store i32 %411, i32* %281, align 4
  br label %bn_mul_for.cond

bn_mul_for.end:                                   ; preds = %bn_mul_for.cond
  %412 = load i32, i32* %274, align 4
  %413 = mul i32 2, %412
  %414 = getelementptr inbounds [130 x i32], [130 x i32]* %278, i32 0, i32 0
  %415 = load i32*, i32** %277, align 4
  br label %bn_mul_bn_assign_entry

bn_mul_bn_assign_entry:                           ; preds = %bn_mul_for.end
  %416 = alloca i32, align 4
  %417 = alloca i32*, align 4
  %418 = alloca i32*, align 4
  %419 = alloca i32, align 4
  store i32 %413, i32* %416, align 4
  store i32* %414, i32** %417, align 4
  store i32* %415, i32** %418, align 4
  store i32 0, i32* %419, align 4
  br label %bn_mul_bn_assign_for.cond

bn_mul_bn_assign_for.cond:                        ; preds = %bn_mul_bn_assign_for.inc, %bn_mul_bn_assign_entry
  %420 = load i32, i32* %419, align 4
  %421 = load i32, i32* %416, align 4
  %422 = icmp ult i32 %420, %421
  br i1 %422, label %bn_mul_bn_assign_for.body, label %bn_mul_bn_assign_for.end

bn_mul_bn_assign_for.body:                        ; preds = %bn_mul_bn_assign_for.cond
  %423 = load i32*, i32** %417, align 4
  %424 = load i32, i32* %419, align 4
  %425 = getelementptr inbounds i32, i32* %423, i32 %424
  %426 = load i32, i32* %425, align 4
  %427 = load i32*, i32** %418, align 4
  %428 = load i32, i32* %419, align 4
  %429 = getelementptr inbounds i32, i32* %427, i32 %428
  store i32 %426, i32* %429, align 4
  br label %bn_mul_bn_assign_for.inc

bn_mul_bn_assign_for.inc:                         ; preds = %bn_mul_bn_assign_for.body
  %430 = load i32, i32* %419, align 4
  %431 = add i32 %430, 1
  store i32 %431, i32* %419, align 4
  br label %bn_mul_bn_assign_for.cond

bn_mul_bn_assign_for.end:                         ; preds = %bn_mul_bn_assign_for.cond
  br label %bn_mul_for.end.split

bn_mul_for.end.split:                             ; preds = %bn_mul_bn_assign_for.end
  %432 = getelementptr inbounds [130 x i32], [130 x i32]* %278, i32 0, i32 0
  %433 = bitcast i32* %432 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %433, i8 0, i32 520, i1 false)
  br label %while.body.split43

while.body.split43:                               ; preds = %bn_mul_for.end.split
  %434 = load i32, i32* %digits.addr, align 4
  %arraydecay12 = getelementptr inbounds [130 x i32], [130 x i32]* %w, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [65 x i32], [65 x i32]* %u1, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [65 x i32], [65 x i32]* %t1, i32 0, i32 0
  br label %bn_add_entry

bn_add_entry:                                     ; preds = %while.body.split43
  %435 = alloca i32, align 4
  %436 = alloca i32*, align 4
  %437 = alloca i32*, align 4
  %438 = alloca i32*, align 4
  %439 = alloca i32, align 4
  %440 = alloca i32, align 4
  %441 = alloca i32, align 4
  store i32 %434, i32* %435, align 4
  store i32* %arraydecay12, i32** %436, align 4
  store i32* %arraydecay13, i32** %437, align 4
  store i32* %arraydecay14, i32** %438, align 4
  store i32 0, i32* %440, align 4
  store i32 0, i32* %441, align 4
  br label %bn_add_for.cond

bn_add_for.cond:                                  ; preds = %bn_add_for.inc, %bn_add_entry
  %442 = load i32, i32* %441, align 4
  %443 = load i32, i32* %435, align 4
  %444 = icmp ult i32 %442, %443
  br i1 %444, label %bn_add_for.body, label %bn_add_for.end

bn_add_for.body:                                  ; preds = %bn_add_for.cond
  %445 = load i32*, i32** %437, align 4
  %446 = load i32, i32* %441, align 4
  %447 = getelementptr inbounds i32, i32* %445, i32 %446
  %448 = load i32, i32* %447, align 4
  %449 = load i32, i32* %440, align 4
  %450 = add i32 %448, %449
  store i32 %450, i32* %439, align 4
  %451 = load i32, i32* %440, align 4
  %452 = icmp ult i32 %450, %451
  br i1 %452, label %bn_add_if.then, label %bn_add_if.else

bn_add_if.then:                                   ; preds = %bn_add_for.body
  %453 = load i32*, i32** %436, align 4
  %454 = load i32, i32* %441, align 4
  %455 = getelementptr inbounds i32, i32* %453, i32 %454
  %456 = load i32, i32* %455, align 4
  store i32 %456, i32* %439, align 4
  br label %bn_add_if.end9

bn_add_if.else:                                   ; preds = %bn_add_for.body
  %457 = load i32*, i32** %436, align 4
  %458 = load i32, i32* %441, align 4
  %459 = getelementptr inbounds i32, i32* %457, i32 %458
  %460 = load i32, i32* %459, align 4
  %461 = load i32, i32* %439, align 4
  %462 = add i32 %461, %460
  store i32 %462, i32* %439, align 4
  %463 = load i32*, i32** %436, align 4
  %464 = load i32, i32* %441, align 4
  %465 = getelementptr inbounds i32, i32* %463, i32 %464
  %466 = load i32, i32* %465, align 4
  %467 = icmp ult i32 %462, %466
  br i1 %467, label %bn_add_if.then7, label %bn_add_if.else8

bn_add_if.then7:                                  ; preds = %bn_add_if.else
  store i32 1, i32* %440, align 4
  br label %bn_add_if.end

bn_add_if.else8:                                  ; preds = %bn_add_if.else
  store i32 0, i32* %440, align 4
  br label %bn_add_if.end

bn_add_if.end:                                    ; preds = %bn_add_if.else8, %bn_add_if.then7
  br label %bn_add_if.end9

bn_add_if.end9:                                   ; preds = %bn_add_if.end, %bn_add_if.then
  %468 = load i32, i32* %439, align 4
  %469 = load i32*, i32** %438, align 4
  %470 = load i32, i32* %441, align 4
  %471 = getelementptr inbounds i32, i32* %469, i32 %470
  store i32 %468, i32* %471, align 4
  br label %bn_add_for.inc

bn_add_for.inc:                                   ; preds = %bn_add_if.end9
  %472 = load i32, i32* %441, align 4
  %473 = add i32 %472, 1
  store i32 %473, i32* %441, align 4
  br label %bn_add_for.cond

bn_add_for.end:                                   ; preds = %bn_add_for.cond
  %474 = load i32, i32* %440, align 4
  br label %while.body.split42

while.body.split42:                               ; preds = %bn_add_for.end
  %475 = load i32, i32* %digits.addr, align 4
  %arraydecay16 = getelementptr inbounds [65 x i32], [65 x i32]* %v1, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [65 x i32], [65 x i32]* %u1, i32 0, i32 0
  br label %bn_assign_entry19

bn_assign_entry19:                                ; preds = %while.body.split42
  %476 = alloca i32, align 4
  %477 = alloca i32*, align 4
  %478 = alloca i32*, align 4
  %479 = alloca i32, align 4
  store i32 %475, i32* %476, align 4
  store i32* %arraydecay16, i32** %477, align 4
  store i32* %arraydecay17, i32** %478, align 4
  store i32 0, i32* %479, align 4
  br label %bn_assign_for.cond20

bn_assign_for.cond20:                             ; preds = %bn_assign_for.inc22, %bn_assign_entry19
  %480 = load i32, i32* %479, align 4
  %481 = load i32, i32* %476, align 4
  %482 = icmp ult i32 %480, %481
  br i1 %482, label %bn_assign_for.body21, label %bn_assign_for.end23

bn_assign_for.body21:                             ; preds = %bn_assign_for.cond20
  %483 = load i32*, i32** %477, align 4
  %484 = load i32, i32* %479, align 4
  %485 = getelementptr inbounds i32, i32* %483, i32 %484
  %486 = load i32, i32* %485, align 4
  %487 = load i32*, i32** %478, align 4
  %488 = load i32, i32* %479, align 4
  %489 = getelementptr inbounds i32, i32* %487, i32 %488
  store i32 %486, i32* %489, align 4
  br label %bn_assign_for.inc22

bn_assign_for.inc22:                              ; preds = %bn_assign_for.body21
  %490 = load i32, i32* %479, align 4
  %491 = add i32 %490, 1
  store i32 %491, i32* %479, align 4
  br label %bn_assign_for.cond20

bn_assign_for.end23:                              ; preds = %bn_assign_for.cond20
  br label %while.body.split18

while.body.split18:                               ; preds = %bn_assign_for.end23
  %492 = load i32, i32* %digits.addr, align 4
  %arraydecay18 = getelementptr inbounds [65 x i32], [65 x i32]* %t1, i32 0, i32 0
  %arraydecay19 = getelementptr inbounds [65 x i32], [65 x i32]* %v1, i32 0, i32 0
  br label %bn_assign_entry13

bn_assign_entry13:                                ; preds = %while.body.split18
  %493 = alloca i32, align 4
  %494 = alloca i32*, align 4
  %495 = alloca i32*, align 4
  %496 = alloca i32, align 4
  store i32 %492, i32* %493, align 4
  store i32* %arraydecay18, i32** %494, align 4
  store i32* %arraydecay19, i32** %495, align 4
  store i32 0, i32* %496, align 4
  br label %bn_assign_for.cond14

bn_assign_for.cond14:                             ; preds = %bn_assign_entry13
  %call15 = call %ReturnStruct.9* @ConditionFun.28(i32 1, i32* %493, i32** %494, i32** %495, i32* %496)
  %MainStrut16 = alloca %ReturnStruct.9*, align 4
  store %ReturnStruct.9* %call15, %ReturnStruct.9** %MainStrut16, align 4
  br label %new14

new14:                                            ; preds = %bn_assign_for.cond14
  br label %while.body.split12

while.body.split12:                               ; preds = %new14
  %497 = load i32, i32* %digits.addr, align 4
  %arraydecay20 = getelementptr inbounds [65 x i32], [65 x i32]* %v3, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [65 x i32], [65 x i32]* %u3, i32 0, i32 0
  br label %bn_assign_entry7

bn_assign_entry7:                                 ; preds = %while.body.split12
  %498 = alloca i32, align 4
  %499 = alloca i32*, align 4
  %500 = alloca i32*, align 4
  %501 = alloca i32, align 4
  store i32 %497, i32* %498, align 4
  store i32* %arraydecay20, i32** %499, align 4
  store i32* %arraydecay21, i32** %500, align 4
  store i32 0, i32* %501, align 4
  br label %bn_assign_for.cond8

bn_assign_for.cond8:                              ; preds = %bn_assign_entry7
  %call18 = call %ReturnStruct.10* @ConditionFun.31(i32 1, i32* %498, i32** %499, i32** %500, i32* %501)
  %MainStrut19 = alloca %ReturnStruct.10*, align 4
  store %ReturnStruct.10* %call18, %ReturnStruct.10** %MainStrut19, align 4
  br label %new17

new17:                                            ; preds = %bn_assign_for.cond8
  br label %while.body.split6

while.body.split6:                                ; preds = %new17
  %502 = load i32, i32* %digits.addr, align 4
  %arraydecay22 = getelementptr inbounds [65 x i32], [65 x i32]* %t3, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [65 x i32], [65 x i32]* %v3, i32 0, i32 0
  br label %bn_assign_entry1

bn_assign_entry1:                                 ; preds = %while.body.split6
  %503 = alloca i32, align 4
  %504 = alloca i32*, align 4
  %505 = alloca i32*, align 4
  %506 = alloca i32, align 4
  store i32 %502, i32* %503, align 4
  store i32* %arraydecay22, i32** %504, align 4
  store i32* %arraydecay23, i32** %505, align 4
  store i32 0, i32* %506, align 4
  br label %bn_assign_for.cond2

bn_assign_for.cond2:                              ; preds = %bn_assign_entry1
  %call21 = call %ReturnStruct.11* @ConditionFun.34(i32 1, i32* %503, i32** %504, i32** %505, i32* %506)
  %MainStrut22 = alloca %ReturnStruct.11*, align 4
  store %ReturnStruct.11* %call21, %ReturnStruct.11** %MainStrut22, align 4
  br label %new20

new20:                                            ; preds = %bn_assign_for.cond2
  br label %while.body.split

while.body.split:                                 ; preds = %new20
  %507 = load i32, i32* %u1_sign, align 4
  %sub = sub nsw i32 0, %507
  store i32 %sub, i32* %u1_sign, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %508 = load i32, i32* %u1_sign, align 4
  %cmp = icmp slt i32 %508, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.end
  %509 = load i32, i32* %digits.addr, align 4
  %arraydecay24 = getelementptr inbounds [65 x i32], [65 x i32]* %u1, i32 0, i32 0
  %510 = load i32*, i32** %c.addr, align 4
  %511 = load i32*, i32** %a.addr, align 4
  br label %bn_sub_entry

bn_sub_entry:                                     ; preds = %if.then
  %512 = alloca i32, align 4
  %513 = alloca i32*, align 4
  %514 = alloca i32*, align 4
  %515 = alloca i32*, align 4
  %516 = alloca i32, align 4
  %517 = alloca i32, align 4
  %518 = alloca i32, align 4
  store i32 %509, i32* %512, align 4
  store i32* %arraydecay24, i32** %513, align 4
  store i32* %510, i32** %514, align 4
  store i32* %511, i32** %515, align 4
  store i32 0, i32* %517, align 4
  store i32 0, i32* %518, align 4
  br label %bn_sub_for.cond

bn_sub_for.cond:                                  ; preds = %bn_sub_for.inc, %bn_sub_entry
  %519 = load i32, i32* %518, align 4
  %520 = load i32, i32* %512, align 4
  %521 = icmp ult i32 %519, %520
  br i1 %521, label %bn_sub_for.body, label %bn_sub_for.end

bn_sub_for.body:                                  ; preds = %bn_sub_for.cond
  %522 = load i32*, i32** %514, align 4
  %523 = load i32, i32* %518, align 4
  %524 = getelementptr inbounds i32, i32* %522, i32 %523
  %525 = load i32, i32* %524, align 4
  %526 = load i32, i32* %517, align 4
  %527 = sub i32 %525, %526
  store i32 %527, i32* %516, align 4
  %528 = load i32, i32* %517, align 4
  %529 = sub i32 -1, %528
  %530 = icmp ugt i32 %527, %529
  br i1 %530, label %bn_sub_if.then, label %bn_sub_if.else

bn_sub_if.then:                                   ; preds = %bn_sub_for.body
  %531 = load i32*, i32** %513, align 4
  %532 = load i32, i32* %518, align 4
  %533 = getelementptr inbounds i32, i32* %531, i32 %532
  %534 = load i32, i32* %533, align 4
  %535 = sub i32 -1, %534
  store i32 %535, i32* %516, align 4
  br label %bn_sub_if.end12

bn_sub_if.else:                                   ; preds = %bn_sub_for.body
  %536 = load i32*, i32** %513, align 4
  %537 = load i32, i32* %518, align 4
  %538 = getelementptr inbounds i32, i32* %536, i32 %537
  %539 = load i32, i32* %538, align 4
  %540 = load i32, i32* %516, align 4
  %541 = sub i32 %540, %539
  store i32 %541, i32* %516, align 4
  %542 = load i32*, i32** %513, align 4
  %543 = load i32, i32* %518, align 4
  %544 = getelementptr inbounds i32, i32* %542, i32 %543
  %545 = load i32, i32* %544, align 4
  %546 = sub i32 -1, %545
  %547 = icmp ugt i32 %541, %546
  br i1 %547, label %bn_sub_if.then10, label %bn_sub_if.else11

bn_sub_if.then10:                                 ; preds = %bn_sub_if.else
  store i32 1, i32* %517, align 4
  br label %bn_sub_if.end

bn_sub_if.else11:                                 ; preds = %bn_sub_if.else
  store i32 0, i32* %517, align 4
  br label %bn_sub_if.end

bn_sub_if.end:                                    ; preds = %bn_sub_if.else11, %bn_sub_if.then10
  br label %bn_sub_if.end12

bn_sub_if.end12:                                  ; preds = %bn_sub_if.end, %bn_sub_if.then
  %548 = load i32, i32* %516, align 4
  %549 = load i32*, i32** %515, align 4
  %550 = load i32, i32* %518, align 4
  %551 = getelementptr inbounds i32, i32* %549, i32 %550
  store i32 %548, i32* %551, align 4
  br label %bn_sub_for.inc

bn_sub_for.inc:                                   ; preds = %bn_sub_if.end12
  %552 = load i32, i32* %518, align 4
  %553 = add i32 %552, 1
  store i32 %553, i32* %518, align 4
  br label %bn_sub_for.cond

bn_sub_for.end:                                   ; preds = %bn_sub_for.cond
  %554 = load i32, i32* %517, align 4
  br label %if.then.split

if.then.split:                                    ; preds = %bn_sub_for.end
  br label %if.end

if.else:                                          ; preds = %while.end
  %555 = load i32, i32* %digits.addr, align 4
  %arraydecay26 = getelementptr inbounds [65 x i32], [65 x i32]* %u1, i32 0, i32 0
  %556 = load i32*, i32** %a.addr, align 4
  br label %bn_assign_entry

bn_assign_entry:                                  ; preds = %if.else
  %557 = alloca i32, align 4
  %558 = alloca i32*, align 4
  %559 = alloca i32*, align 4
  %560 = alloca i32, align 4
  store i32 %555, i32* %557, align 4
  store i32* %arraydecay26, i32** %558, align 4
  store i32* %556, i32** %559, align 4
  store i32 0, i32* %560, align 4
  br label %bn_assign_for.cond

bn_assign_for.cond:                               ; preds = %bn_assign_for.inc, %bn_assign_entry
  %561 = load i32, i32* %560, align 4
  %562 = load i32, i32* %557, align 4
  %563 = icmp ult i32 %561, %562
  br i1 %563, label %bn_assign_for.body, label %bn_assign_for.end

bn_assign_for.body:                               ; preds = %bn_assign_for.cond
  %564 = load i32*, i32** %558, align 4
  %565 = load i32, i32* %560, align 4
  %566 = getelementptr inbounds i32, i32* %564, i32 %565
  %567 = load i32, i32* %566, align 4
  %568 = load i32*, i32** %559, align 4
  %569 = load i32, i32* %560, align 4
  %570 = getelementptr inbounds i32, i32* %568, i32 %569
  store i32 %567, i32* %570, align 4
  br label %bn_assign_for.inc

bn_assign_for.inc:                                ; preds = %bn_assign_for.body
  %571 = load i32, i32* %560, align 4
  %572 = add i32 %571, 1
  store i32 %572, i32* %560, align 4
  br label %bn_assign_for.cond

bn_assign_for.end:                                ; preds = %bn_assign_for.cond
  br label %if.else.split

if.else.split:                                    ; preds = %bn_assign_for.end
  br label %if.end

if.end:                                           ; preds = %if.else.split, %if.then.split
  %arraydecay27 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %573 = bitcast i32* %arraydecay27 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %573, i8 0, i32 260, i1 false)
  %arraydecay28 = getelementptr inbounds [65 x i32], [65 x i32]* %t1, i32 0, i32 0
  %574 = bitcast i32* %arraydecay28 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %574, i8 0, i32 260, i1 false)
  %arraydecay29 = getelementptr inbounds [65 x i32], [65 x i32]* %t3, i32 0, i32 0
  %575 = bitcast i32* %arraydecay29 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %575, i8 0, i32 260, i1 false)
  %arraydecay30 = getelementptr inbounds [65 x i32], [65 x i32]* %u1, i32 0, i32 0
  %576 = bitcast i32* %arraydecay30 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %576, i8 0, i32 260, i1 false)
  %arraydecay31 = getelementptr inbounds [65 x i32], [65 x i32]* %u3, i32 0, i32 0
  %577 = bitcast i32* %arraydecay31 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %577, i8 0, i32 260, i1 false)
  %arraydecay32 = getelementptr inbounds [65 x i32], [65 x i32]* %v1, i32 0, i32 0
  %578 = bitcast i32* %arraydecay32 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %578, i8 0, i32 260, i1 false)
  %arraydecay33 = getelementptr inbounds [65 x i32], [65 x i32]* %v3, i32 0, i32 0
  %579 = bitcast i32* %arraydecay33 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %579, i8 0, i32 260, i1 false)
  %arraydecay34 = getelementptr inbounds [130 x i32], [130 x i32]* %w, i32 0, i32 0
  %580 = bitcast i32* %arraydecay34 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %580, i8 0, i32 520, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone
define dso_local i32 @bn_is_zero(i32* %a, i32 %digits) #1 {
entry:
  %retval = alloca i32, align 4
  %digits.addr = alloca i32, align 4
  %a.addr = alloca i32*, align 4
  %i = alloca i32, align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %digits.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32* %2, i32 %3
  %4 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline optnone
define dso_local void @bn_gcd(i32* %a, i32* %b, i32* %c, i32 %digits) #2 {
entry:
  %digits.addr = alloca i32, align 4
  %c.addr = alloca i32*, align 4
  %b.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %t = alloca [65 x i32], align 4
  %u = alloca [65 x i32], align 4
  %v = alloca [65 x i32], align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %c, i32** %c.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %digits.addr, align 4
  %1 = load i32*, i32** %b.addr, align 4
  %arraydecay = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_assign_entry18

bn_assign_entry18:                                ; preds = %entry
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 4
  %4 = alloca i32*, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32* %1, i32** %3, align 4
  store i32* %arraydecay, i32** %4, align 4
  store i32 0, i32* %5, align 4
  br label %bn_assign_for.cond19

bn_assign_for.cond19:                             ; preds = %bn_assign_entry18
  %call1 = call %ReturnStruct.12* @ConditionFun.37(i32* %2, i32** %3, i32** %4, i32* %5)
  %MainStrut = alloca %ReturnStruct.12*, align 4
  store %ReturnStruct.12* %call1, %ReturnStruct.12** %MainStrut, align 4
  br label %new

new:                                              ; preds = %bn_assign_for.cond19
  br label %entry.split17

entry.split17:                                    ; preds = %new
  %6 = load i32, i32* %digits.addr, align 4
  %7 = load i32*, i32** %c.addr, align 4
  %arraydecay1 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  br label %bn_assign_entry12

bn_assign_entry12:                                ; preds = %entry.split17
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 4
  %10 = alloca i32*, align 4
  %11 = alloca i32, align 4
  store i32 %6, i32* %8, align 4
  store i32* %7, i32** %9, align 4
  store i32* %arraydecay1, i32** %10, align 4
  store i32 0, i32* %11, align 4
  br label %bn_assign_for.cond13

bn_assign_for.cond13:                             ; preds = %bn_assign_entry12
  %call3 = call %ReturnStruct.13* @ConditionFun.40(i32* %8, i32** %9, i32** %10, i32* %11)
  %MainStrut4 = alloca %ReturnStruct.13*, align 4
  store %ReturnStruct.13* %call3, %ReturnStruct.13** %MainStrut4, align 4
  br label %new2

new2:                                             ; preds = %bn_assign_for.cond13
  br label %entry.split

entry.split:                                      ; preds = %new2
  br label %while.cond

while.cond:                                       ; preds = %while.body.split, %entry.split
  %12 = load i32, i32* %digits.addr, align 4
  %arraydecay2 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %call = call i32 @bn_is_zero(i32* %arraydecay2, i32 %12)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load i32, i32* %digits.addr, align 4
  %arraydecay3 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %14 = load i32, i32* %digits.addr, align 4
  %arraydecay4 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay5 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_mod_entry

bn_mod_entry:                                     ; preds = %while.body
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 4
  %19 = alloca i32*, align 4
  %20 = alloca [130 x i32], align 4
  store i32 %13, i32* %15, align 4
  store i32* %arraydecay3, i32** %16, align 4
  store i32 %14, i32* %17, align 4
  store i32* %arraydecay4, i32** %18, align 4
  store i32* %arraydecay5, i32** %19, align 4
  %21 = bitcast [130 x i32]* %20 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %21, i8 0, i32 520, i1 false)
  %22 = load i32, i32* %15, align 4
  %23 = load i32*, i32** %16, align 4
  %24 = load i32, i32* %17, align 4
  %25 = load i32*, i32** %18, align 4
  %26 = load i32*, i32** %19, align 4
  %27 = getelementptr inbounds [130 x i32], [130 x i32]* %20, i32 0, i32 0
  br label %bn_mod_bn_div_entry

bn_mod_bn_div_entry:                              ; preds = %bn_mod_entry
  %28 = alloca i32, align 4
  %29 = alloca i32*, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32*, align 4
  %32 = alloca i32*, align 4
  %33 = alloca i32*, align 4
  %34 = alloca i64, align 8
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca [131 x i32], align 4
  %38 = alloca [65 x i32], align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  store i32 %22, i32* %28, align 4
  store i32* %23, i32** %29, align 4
  store i32 %24, i32* %30, align 4
  store i32* %25, i32** %31, align 4
  store i32* %26, i32** %32, align 4
  store i32* %27, i32** %33, align 4
  %42 = load i32, i32* %28, align 4
  %43 = load i32*, i32** %29, align 4
  br label %bn_mod_bn_div_bn_digits_entry

bn_mod_bn_div_bn_digits_entry:                    ; preds = %bn_mod_bn_div_entry
  %44 = alloca i32, align 4
  %45 = alloca i32*, align 4
  %46 = alloca i32, align 4
  store i32 %42, i32* %44, align 4
  store i32* %43, i32** %45, align 4
  %47 = load i32, i32* %44, align 4
  %48 = sub i32 %47, 1
  store i32 %48, i32* %46, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.cond:                 ; preds = %bn_mod_bn_div_bn_digits_for.inc, %bn_mod_bn_div_bn_digits_entry
  %49 = load i32, i32* %46, align 4
  %50 = icmp sge i32 %49, 0
  br i1 %50, label %bn_mod_bn_div_bn_digits_for.body, label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_for.body:                 ; preds = %bn_mod_bn_div_bn_digits_for.cond
  %51 = load i32*, i32** %45, align 4
  %52 = load i32, i32* %46, align 4
  %53 = getelementptr inbounds i32, i32* %51, i32 %52
  %54 = load i32, i32* %53, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %bn_mod_bn_div_bn_digits_if.then, label %bn_mod_bn_div_bn_digits_if.end

bn_mod_bn_div_bn_digits_if.then:                  ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_if.end:                   ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.inc

bn_mod_bn_div_bn_digits_for.inc:                  ; preds = %bn_mod_bn_div_bn_digits_if.end
  %56 = load i32, i32* %46, align 4
  %57 = add nsw i32 %56, -1
  store i32 %57, i32* %46, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.end:                  ; preds = %bn_mod_bn_div_bn_digits_if.then, %bn_mod_bn_div_bn_digits_for.cond
  %58 = load i32, i32* %46, align 4
  %59 = add nsw i32 %58, 1
  br label %bn_mod_bn_div_entry.split

bn_mod_bn_div_entry.split:                        ; preds = %bn_mod_bn_div_bn_digits_for.end
  store i32 %59, i32* %40, align 4
  %60 = load i32, i32* %40, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %bn_mod_bn_div_if.then, label %bn_mod_bn_div_if.end

bn_mod_bn_div_if.then:                            ; preds = %bn_mod_bn_div_entry.split
  br label %bn_mod_bn_div_return

bn_mod_bn_div_if.end:                             ; preds = %bn_mod_bn_div_entry.split
  %62 = load i32*, i32** %29, align 4
  %63 = load i32, i32* %40, align 4
  %64 = sub i32 %63, 1
  %65 = getelementptr inbounds i32, i32* %62, i32 %64
  %66 = load i32, i32* %65, align 4
  %67 = call i32 @bn_digit_bits(i32 %66)
  %68 = sub i32 32, %67
  store i32 %68, i32* %41, align 4
  %69 = load i32, i32* %40, align 4
  %70 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7

bn_mod_bn_div_bn_assign_zero_entry7:              ; preds = %bn_mod_bn_div_if.end
  %71 = alloca i32, align 4
  %72 = alloca i32*, align 4
  %73 = alloca i32, align 4
  store i32 %69, i32* %71, align 4
  store i32* %70, i32** %72, align 4
  store i32 0, i32* %73, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.cond8:           ; preds = %bn_mod_bn_div_bn_assign_zero_entry7
  %call6 = call %ReturnStruct.14* @ConditionFun.43(i32 0, i32 1, i32* %71, i32** %72, i32* %73)
  %MainStrut7 = alloca %ReturnStruct.14*, align 4
  store %ReturnStruct.14* %call6, %ReturnStruct.14** %MainStrut7, align 4
  br label %new5

new5:                                             ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  br label %bn_mod_bn_div_if.end.split6

bn_mod_bn_div_if.end.split6:                      ; preds = %new5
  %74 = load i32, i32* %30, align 4
  %75 = load i32, i32* %41, align 4
  %76 = load i32*, i32** %31, align 4
  %77 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 0
  %78 = call i32 @bn_shift_l(i32* %77, i32* %76, i32 %75, i32 %74)
  %79 = load i32, i32* %30, align 4
  %80 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %79
  store i32 %78, i32* %80, align 4
  %81 = load i32, i32* %40, align 4
  %82 = load i32, i32* %41, align 4
  %83 = load i32*, i32** %29, align 4
  %84 = getelementptr inbounds [65 x i32], [65 x i32]* %38, i32 0, i32 0
  %85 = call i32 @bn_shift_l(i32* %84, i32* %83, i32 %82, i32 %81)
  %86 = load i32, i32* %40, align 4
  %87 = sub i32 %86, 1
  %88 = getelementptr inbounds [65 x i32], [65 x i32]* %38, i32 0, i32 %87
  %89 = load i32, i32* %88, align 4
  store i32 %89, i32* %36, align 4
  %90 = load i32, i32* %30, align 4
  %91 = load i32*, i32** %33, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1

bn_mod_bn_div_bn_assign_zero_entry1:              ; preds = %bn_mod_bn_div_if.end.split6
  %92 = alloca i32, align 4
  %93 = alloca i32*, align 4
  %94 = alloca i32, align 4
  store i32 %90, i32* %92, align 4
  store i32* %91, i32** %93, align 4
  store i32 0, i32* %94, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.cond2:           ; preds = %bn_mod_bn_div_bn_assign_zero_entry1
  %call9 = call %ReturnStruct.15* @ConditionFun.46(i32 0, i32 1, i32* %92, i32** %93, i32* %94)
  %MainStrut10 = alloca %ReturnStruct.15*, align 4
  store %ReturnStruct.15* %call9, %ReturnStruct.15** %MainStrut10, align 4
  br label %new8

new8:                                             ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  br label %bn_mod_bn_div_if.end.split

bn_mod_bn_div_if.end.split:                       ; preds = %new8
  %95 = load i32, i32* %30, align 4
  %96 = load i32, i32* %40, align 4
  %97 = sub i32 %95, %96
  store i32 %97, i32* %39, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.cond:                           ; preds = %bn_mod_bn_div_for.inc, %bn_mod_bn_div_if.end.split
  %98 = load i32, i32* %39, align 4
  %99 = icmp sge i32 %98, 0
  br i1 %99, label %bn_mod_bn_div_for.body, label %bn_mod_bn_div_for.end

bn_mod_bn_div_for.body:                           ; preds = %bn_mod_bn_div_for.cond
  %100 = load i32, i32* %36, align 4
  %101 = icmp eq i32 %100, -1
  br i1 %101, label %bn_mod_bn_div_if.then13, label %bn_mod_bn_div_if.else

bn_mod_bn_div_if.then13:                          ; preds = %bn_mod_bn_div_for.body
  %102 = load i32, i32* %39, align 4
  %103 = load i32, i32* %40, align 4
  %104 = add i32 %102, %103
  %105 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %104
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %35, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.else:                            ; preds = %bn_mod_bn_div_for.body
  %107 = load i32, i32* %39, align 4
  %108 = load i32, i32* %40, align 4
  %109 = add i32 %107, %108
  %110 = sub i32 %109, 1
  %111 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %110
  %112 = load i32, i32* %111, align 4
  %113 = zext i32 %112 to i64
  store i64 %113, i64* %34, align 8
  %114 = load i32, i32* %39, align 4
  %115 = load i32, i32* %40, align 4
  %116 = add i32 %114, %115
  %117 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %116
  %118 = load i32, i32* %117, align 4
  %119 = zext i32 %118 to i64
  %120 = shl i64 %119, 32
  %121 = load i64, i64* %34, align 8
  %122 = add i64 %121, %120
  store i64 %122, i64* %34, align 8
  %123 = load i64, i64* %34, align 8
  %124 = load i32, i32* %36, align 4
  %125 = add i32 %124, 1
  %126 = zext i32 %125 to i64
  %127 = udiv i64 %123, %126
  %128 = trunc i64 %127 to i32
  store i32 %128, i32* %35, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.end25:                           ; preds = %bn_mod_bn_div_if.else, %bn_mod_bn_div_if.then13
  %129 = load i32, i32* %40, align 4
  %130 = getelementptr inbounds [65 x i32], [65 x i32]* %38, i32 0, i32 0
  %131 = load i32, i32* %35, align 4
  %132 = load i32, i32* %39, align 4
  %133 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %132
  %134 = load i32, i32* %39, align 4
  %135 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %134
  %136 = call i32 @bn_sub_digit_mul(i32* %135, i32* %133, i32 %131, i32* %130, i32 %129)
  %137 = load i32, i32* %39, align 4
  %138 = load i32, i32* %40, align 4
  %139 = add i32 %137, %138
  %140 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %139
  %141 = load i32, i32* %140, align 4
  %142 = sub i32 %141, %136
  store i32 %142, i32* %140, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.cond:                         ; preds = %bn_mod_bn_div_while.body.split, %bn_mod_bn_div_if.end25
  %143 = load i32, i32* %39, align 4
  %144 = load i32, i32* %40, align 4
  %145 = add i32 %143, %144
  %146 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %145
  %147 = load i32, i32* %146, align 4
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %bn_mod_bn_div_lor.end, label %bn_mod_bn_div_lor.rhs

bn_mod_bn_div_lor.rhs:                            ; preds = %bn_mod_bn_div_while.cond
  %149 = load i32, i32* %40, align 4
  %150 = getelementptr inbounds [65 x i32], [65 x i32]* %38, i32 0, i32 0
  %151 = load i32, i32* %39, align 4
  %152 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %151
  br label %bn_mod_bn_cmp_entry

bn_mod_bn_cmp_entry:                              ; preds = %bn_mod_bn_div_lor.rhs
  %153 = alloca i32, align 4
  %154 = alloca i32, align 4
  %155 = alloca i32*, align 4
  %156 = alloca i32*, align 4
  %157 = alloca i32, align 4
  store i32 %149, i32* %154, align 4
  store i32* %150, i32** %155, align 4
  store i32* %152, i32** %156, align 4
  %158 = load i32, i32* %154, align 4
  %159 = sub i32 %158, 1
  store i32 %159, i32* %157, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.cond:                           ; preds = %bn_mod_bn_cmp_for.inc, %bn_mod_bn_cmp_entry
  %160 = load i32, i32* %157, align 4
  %161 = icmp sge i32 %160, 0
  br i1 %161, label %bn_mod_bn_cmp_for.body, label %bn_mod_bn_cmp_for.end

bn_mod_bn_cmp_for.body:                           ; preds = %bn_mod_bn_cmp_for.cond
  %162 = load i32*, i32** %156, align 4
  %163 = load i32, i32* %157, align 4
  %164 = getelementptr inbounds i32, i32* %162, i32 %163
  %165 = load i32, i32* %164, align 4
  %166 = load i32*, i32** %155, align 4
  %167 = load i32, i32* %157, align 4
  %168 = getelementptr inbounds i32, i32* %166, i32 %167
  %169 = load i32, i32* %168, align 4
  %170 = icmp ugt i32 %165, %169
  br i1 %170, label %bn_mod_bn_cmp_if.then, label %bn_mod_bn_cmp_if.end

bn_mod_bn_cmp_if.then:                            ; preds = %bn_mod_bn_cmp_for.body
  store i32 1, i32* %153, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end:                             ; preds = %bn_mod_bn_cmp_for.body
  %171 = load i32*, i32** %156, align 4
  %172 = load i32, i32* %157, align 4
  %173 = getelementptr inbounds i32, i32* %171, i32 %172
  %174 = load i32, i32* %173, align 4
  %175 = load i32*, i32** %155, align 4
  %176 = load i32, i32* %157, align 4
  %177 = getelementptr inbounds i32, i32* %175, i32 %176
  %178 = load i32, i32* %177, align 4
  %179 = icmp ult i32 %174, %178
  br i1 %179, label %bn_mod_bn_cmp_if.then6, label %bn_mod_bn_cmp_if.end7

bn_mod_bn_cmp_if.then6:                           ; preds = %bn_mod_bn_cmp_if.end
  store i32 -1, i32* %153, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end7:                            ; preds = %bn_mod_bn_cmp_if.end
  br label %bn_mod_bn_cmp_for.inc

bn_mod_bn_cmp_for.inc:                            ; preds = %bn_mod_bn_cmp_if.end7
  %180 = load i32, i32* %157, align 4
  %181 = add nsw i32 %180, -1
  store i32 %181, i32* %157, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.end:                            ; preds = %bn_mod_bn_cmp_for.cond
  store i32 0, i32* %153, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_return:                             ; preds = %bn_mod_bn_cmp_for.end, %bn_mod_bn_cmp_if.then6, %bn_mod_bn_cmp_if.then
  %182 = load i32, i32* %153, align 4
  br label %bn_mod_bn_div_lor.rhs.split

bn_mod_bn_div_lor.rhs.split:                      ; preds = %bn_mod_bn_cmp_return
  %183 = icmp sge i32 %182, 0
  br label %bn_mod_bn_div_lor.end

bn_mod_bn_div_lor.end:                            ; preds = %bn_mod_bn_div_lor.rhs.split, %bn_mod_bn_div_while.cond
  %184 = phi i1 [ true, %bn_mod_bn_div_while.cond ], [ %183, %bn_mod_bn_div_lor.rhs.split ]
  br i1 %184, label %bn_mod_bn_div_while.body, label %bn_mod_bn_div_while.end

bn_mod_bn_div_while.body:                         ; preds = %bn_mod_bn_div_lor.end
  %185 = load i32, i32* %35, align 4
  %186 = add i32 %185, 1
  store i32 %186, i32* %35, align 4
  %187 = load i32, i32* %40, align 4
  %188 = getelementptr inbounds [65 x i32], [65 x i32]* %38, i32 0, i32 0
  %189 = load i32, i32* %39, align 4
  %190 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %189
  %191 = load i32, i32* %39, align 4
  %192 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %191
  br label %bn_mod_bn_div_bn_sub_entry

bn_mod_bn_div_bn_sub_entry:                       ; preds = %bn_mod_bn_div_while.body
  %193 = alloca i32, align 4
  %194 = alloca i32*, align 4
  %195 = alloca i32*, align 4
  %196 = alloca i32*, align 4
  %197 = alloca i32, align 4
  %198 = alloca i32, align 4
  %199 = alloca i32, align 4
  store i32 %187, i32* %193, align 4
  store i32* %188, i32** %194, align 4
  store i32* %190, i32** %195, align 4
  store i32* %192, i32** %196, align 4
  store i32 0, i32* %198, align 4
  store i32 0, i32* %199, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.cond:                    ; preds = %bn_mod_bn_div_bn_sub_for.inc, %bn_mod_bn_div_bn_sub_entry
  %200 = load i32, i32* %199, align 4
  %201 = load i32, i32* %193, align 4
  %202 = icmp ult i32 %200, %201
  br i1 %202, label %bn_mod_bn_div_bn_sub_for.body, label %bn_mod_bn_div_bn_sub_for.end

bn_mod_bn_div_bn_sub_for.body:                    ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %203 = load i32*, i32** %195, align 4
  %204 = load i32, i32* %199, align 4
  %205 = getelementptr inbounds i32, i32* %203, i32 %204
  %206 = load i32, i32* %205, align 4
  %207 = load i32, i32* %198, align 4
  %208 = sub i32 %206, %207
  store i32 %208, i32* %197, align 4
  %209 = load i32, i32* %198, align 4
  %210 = sub i32 -1, %209
  %211 = icmp ugt i32 %208, %210
  br i1 %211, label %bn_mod_bn_div_bn_sub_if.then, label %bn_mod_bn_div_bn_sub_if.else

bn_mod_bn_div_bn_sub_if.then:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %212 = load i32*, i32** %194, align 4
  %213 = load i32, i32* %199, align 4
  %214 = getelementptr inbounds i32, i32* %212, i32 %213
  %215 = load i32, i32* %214, align 4
  %216 = sub i32 -1, %215
  store i32 %216, i32* %197, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.else:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %217 = load i32*, i32** %194, align 4
  %218 = load i32, i32* %199, align 4
  %219 = getelementptr inbounds i32, i32* %217, i32 %218
  %220 = load i32, i32* %219, align 4
  %221 = load i32, i32* %197, align 4
  %222 = sub i32 %221, %220
  store i32 %222, i32* %197, align 4
  %223 = load i32*, i32** %194, align 4
  %224 = load i32, i32* %199, align 4
  %225 = getelementptr inbounds i32, i32* %223, i32 %224
  %226 = load i32, i32* %225, align 4
  %227 = sub i32 -1, %226
  %228 = icmp ugt i32 %222, %227
  br i1 %228, label %bn_mod_bn_div_bn_sub_if.then10, label %bn_mod_bn_div_bn_sub_if.else11

bn_mod_bn_div_bn_sub_if.then10:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 1, i32* %198, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.else11:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 0, i32* %198, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.end:                      ; preds = %bn_mod_bn_div_bn_sub_if.else11, %bn_mod_bn_div_bn_sub_if.then10
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.end12:                    ; preds = %bn_mod_bn_div_bn_sub_if.end, %bn_mod_bn_div_bn_sub_if.then
  %229 = load i32, i32* %197, align 4
  %230 = load i32*, i32** %196, align 4
  %231 = load i32, i32* %199, align 4
  %232 = getelementptr inbounds i32, i32* %230, i32 %231
  store i32 %229, i32* %232, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc

bn_mod_bn_div_bn_sub_for.inc:                     ; preds = %bn_mod_bn_div_bn_sub_if.end12
  %233 = load i32, i32* %199, align 4
  %234 = add i32 %233, 1
  store i32 %234, i32* %199, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.end:                     ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %235 = load i32, i32* %198, align 4
  br label %bn_mod_bn_div_while.body.split

bn_mod_bn_div_while.body.split:                   ; preds = %bn_mod_bn_div_bn_sub_for.end
  %236 = load i32, i32* %39, align 4
  %237 = load i32, i32* %40, align 4
  %238 = add i32 %236, %237
  %239 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 %238
  %240 = load i32, i32* %239, align 4
  %241 = sub i32 %240, %235
  store i32 %241, i32* %239, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.end:                          ; preds = %bn_mod_bn_div_lor.end
  %242 = load i32, i32* %35, align 4
  %243 = load i32*, i32** %33, align 4
  %244 = load i32, i32* %39, align 4
  %245 = getelementptr inbounds i32, i32* %243, i32 %244
  store i32 %242, i32* %245, align 4
  br label %bn_mod_bn_div_for.inc

bn_mod_bn_div_for.inc:                            ; preds = %bn_mod_bn_div_while.end
  %246 = load i32, i32* %39, align 4
  %247 = add nsw i32 %246, -1
  store i32 %247, i32* %39, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.end:                            ; preds = %bn_mod_bn_div_for.cond
  %248 = load i32, i32* %28, align 4
  %249 = load i32*, i32** %32, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry

bn_mod_bn_div_bn_assign_zero_entry:               ; preds = %bn_mod_bn_div_for.end
  %250 = alloca i32, align 4
  %251 = alloca i32*, align 4
  %252 = alloca i32, align 4
  store i32 %248, i32* %250, align 4
  store i32* %249, i32** %251, align 4
  store i32 0, i32* %252, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.cond:            ; preds = %bn_mod_bn_div_bn_assign_zero_entry
  %call12 = call %ReturnStruct.16* @ConditionFun.49(i32 0, i32 1, i32* %250, i32** %251, i32* %252)
  %MainStrut13 = alloca %ReturnStruct.16*, align 4
  store %ReturnStruct.16* %call12, %ReturnStruct.16** %MainStrut13, align 4
  br label %new11

new11:                                            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  br label %bn_mod_bn_div_for.end.split

bn_mod_bn_div_for.end.split:                      ; preds = %new11
  %253 = load i32, i32* %40, align 4
  %254 = load i32, i32* %41, align 4
  %255 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 0
  %256 = load i32*, i32** %32, align 4
  %257 = call i32 @bn_shift_r(i32* %256, i32* %255, i32 %254, i32 %253)
  %258 = getelementptr inbounds [131 x i32], [131 x i32]* %37, i32 0, i32 0
  %259 = bitcast i32* %258 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %259, i8 0, i32 524, i1 false)
  %260 = getelementptr inbounds [65 x i32], [65 x i32]* %38, i32 0, i32 0
  %261 = bitcast i32* %260 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %261, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return

bn_mod_bn_div_return:                             ; preds = %bn_mod_bn_div_for.end.split, %bn_mod_bn_div_if.then
  br label %bn_mod_entry.split

bn_mod_entry.split:                               ; preds = %bn_mod_bn_div_return
  %262 = getelementptr inbounds [130 x i32], [130 x i32]* %20, i32 0, i32 0
  %263 = bitcast i32* %262 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %263, i8 0, i32 520, i1 false)
  br label %while.body.split23

while.body.split23:                               ; preds = %bn_mod_entry.split
  %264 = load i32, i32* %digits.addr, align 4
  %arraydecay6 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_assign_entry7

bn_assign_entry7:                                 ; preds = %while.body.split23
  %265 = alloca i32, align 4
  %266 = alloca i32*, align 4
  %267 = alloca i32*, align 4
  %268 = alloca i32, align 4
  store i32 %264, i32* %265, align 4
  store i32* %arraydecay6, i32** %266, align 4
  store i32* %arraydecay7, i32** %267, align 4
  store i32 0, i32* %268, align 4
  br label %bn_assign_for.cond8

bn_assign_for.cond8:                              ; preds = %bn_assign_entry7
  %call15 = call %ReturnStruct.17* @ConditionFun.52(i32 1, i32* %265, i32** %266, i32** %267, i32* %268)
  %MainStrut16 = alloca %ReturnStruct.17*, align 4
  store %ReturnStruct.17* %call15, %ReturnStruct.17** %MainStrut16, align 4
  br label %new14

new14:                                            ; preds = %bn_assign_for.cond8
  br label %while.body.split6

while.body.split6:                                ; preds = %new14
  %269 = load i32, i32* %digits.addr, align 4
  %arraydecay8 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay9 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  br label %bn_assign_entry1

bn_assign_entry1:                                 ; preds = %while.body.split6
  %270 = alloca i32, align 4
  %271 = alloca i32*, align 4
  %272 = alloca i32*, align 4
  %273 = alloca i32, align 4
  store i32 %269, i32* %270, align 4
  store i32* %arraydecay8, i32** %271, align 4
  store i32* %arraydecay9, i32** %272, align 4
  store i32 0, i32* %273, align 4
  br label %bn_assign_for.cond2

bn_assign_for.cond2:                              ; preds = %bn_assign_entry1
  %call18 = call %ReturnStruct.18* @ConditionFun.55(i32 1, i32* %270, i32** %271, i32** %272, i32* %273)
  %MainStrut19 = alloca %ReturnStruct.18*, align 4
  store %ReturnStruct.18* %call18, %ReturnStruct.18** %MainStrut19, align 4
  br label %new17

new17:                                            ; preds = %bn_assign_for.cond2
  br label %while.body.split

while.body.split:                                 ; preds = %new17
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %274 = load i32, i32* %digits.addr, align 4
  %arraydecay10 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %275 = load i32*, i32** %a.addr, align 4
  br label %bn_assign_entry

bn_assign_entry:                                  ; preds = %while.end
  %276 = alloca i32, align 4
  %277 = alloca i32*, align 4
  %278 = alloca i32*, align 4
  %279 = alloca i32, align 4
  store i32 %274, i32* %276, align 4
  store i32* %arraydecay10, i32** %277, align 4
  store i32* %275, i32** %278, align 4
  store i32 0, i32* %279, align 4
  br label %bn_assign_for.cond

bn_assign_for.cond:                               ; preds = %bn_assign_for.inc, %bn_assign_entry
  %280 = load i32, i32* %279, align 4
  %281 = load i32, i32* %276, align 4
  %282 = icmp ult i32 %280, %281
  br i1 %282, label %bn_assign_for.body, label %bn_assign_for.end

bn_assign_for.body:                               ; preds = %bn_assign_for.cond
  %283 = load i32*, i32** %277, align 4
  %284 = load i32, i32* %279, align 4
  %285 = getelementptr inbounds i32, i32* %283, i32 %284
  %286 = load i32, i32* %285, align 4
  %287 = load i32*, i32** %278, align 4
  %288 = load i32, i32* %279, align 4
  %289 = getelementptr inbounds i32, i32* %287, i32 %288
  store i32 %286, i32* %289, align 4
  br label %bn_assign_for.inc

bn_assign_for.inc:                                ; preds = %bn_assign_for.body
  %290 = load i32, i32* %279, align 4
  %291 = add i32 %290, 1
  store i32 %291, i32* %279, align 4
  br label %bn_assign_for.cond

bn_assign_for.end:                                ; preds = %bn_assign_for.cond
  br label %while.end.split

while.end.split:                                  ; preds = %bn_assign_for.end
  %arraydecay11 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %292 = bitcast i32* %arraydecay11 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %292, i8 0, i32 260, i1 false)
  %arraydecay12 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %293 = bitcast i32* %arraydecay12 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %293, i8 0, i32 260, i1 false)
  %arraydecay13 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %294 = bitcast i32* %arraydecay13 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %294, i8 0, i32 260, i1 false)
  ret void
}

; Function Attrs: noinline optnone
define dso_local i32 @bn_bits(i32* %a, i32 %digits) #2 {
entry:
  %retval = alloca i32, align 4
  %digits.addr = alloca i32, align 4
  %a.addr = alloca i32*, align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %digits.addr, align 4
  %1 = load i32*, i32** %a.addr, align 4
  br label %bn_digits_entry

bn_digits_entry:                                  ; preds = %entry
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32* %1, i32** %3, align 4
  %5 = load i32, i32* %2, align 4
  %6 = sub i32 %5, 1
  store i32 %6, i32* %4, align 4
  br label %bn_digits_for.cond

bn_digits_for.cond:                               ; preds = %bn_digits_for.inc, %bn_digits_entry
  %7 = load i32, i32* %4, align 4
  %8 = icmp sge i32 %7, 0
  br i1 %8, label %bn_digits_for.body, label %bn_digits_for.end

bn_digits_for.body:                               ; preds = %bn_digits_for.cond
  %9 = load i32*, i32** %3, align 4
  %10 = load i32, i32* %4, align 4
  %11 = getelementptr inbounds i32, i32* %9, i32 %10
  %12 = load i32, i32* %11, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %bn_digits_if.then, label %bn_digits_if.end

bn_digits_if.then:                                ; preds = %bn_digits_for.body
  br label %bn_digits_for.end

bn_digits_if.end:                                 ; preds = %bn_digits_for.body
  br label %bn_digits_for.inc

bn_digits_for.inc:                                ; preds = %bn_digits_if.end
  %14 = load i32, i32* %4, align 4
  %15 = add nsw i32 %14, -1
  store i32 %15, i32* %4, align 4
  br label %bn_digits_for.cond

bn_digits_for.end:                                ; preds = %bn_digits_if.then, %bn_digits_for.cond
  %16 = load i32, i32* %4, align 4
  %17 = add nsw i32 %16, 1
  br label %entry.split

entry.split:                                      ; preds = %bn_digits_for.end
  store i32 %17, i32* %digits.addr, align 4
  %cmp = icmp eq i32 %17, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry.split
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry.split
  %18 = load i32, i32* %digits.addr, align 4
  %sub = sub i32 %18, 1
  %mul = mul i32 %sub, 32
  %19 = load i32*, i32** %a.addr, align 4
  %20 = load i32, i32* %digits.addr, align 4
  %sub1 = sub i32 %20, 1
  %arrayidx = getelementptr inbounds i32, i32* %19, i32 %sub1
  %21 = load i32, i32* %arrayidx, align 4
  %call2 = call i32 @bn_digit_bits(i32 %21)
  %add = add i32 %mul, %call2
  store i32 %add, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

; Function Attrs: noinline optnone
define dso_local void @print_bn(i8* %TAG, i32* %bn, i32 %bn_size) #2 {
entry:
  %bn_size.addr = alloca i32, align 4
  %bn.addr = alloca i32*, align 4
  %TAG.addr = alloca i8*, align 4
  %buf = alloca [512 x i8], align 1
  %i = alloca i32, align 4
  store i32 %bn_size, i32* %bn_size.addr, align 4
  store i32* %bn, i32** %bn.addr, align 4
  store i8* %TAG, i8** %TAG.addr, align 4
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 512, i1 false)
  %0 = load i32, i32* %bn_size.addr, align 4
  %1 = load i32*, i32** %bn.addr, align 4
  %arraydecay1 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 0
  br label %bn_encode_entry

bn_encode_entry:                                  ; preds = %entry
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32* %1, i32** %3, align 4
  store i32 512, i32* %4, align 4
  store i8* %arraydecay1, i8** %5, align 4
  store i32 0, i32* %8, align 4
  %10 = load i32, i32* %4, align 4
  %11 = sub i32 %10, 1
  store i32 %11, i32* %7, align 4
  br label %bn_encode_for.cond

bn_encode_for.cond:                               ; preds = %bn_encode_for.inc9, %bn_encode_entry
  %12 = load i32, i32* %8, align 4
  %13 = load i32, i32* %2, align 4
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %bn_encode_land.rhs, label %bn_encode_land.end

bn_encode_land.rhs:                               ; preds = %bn_encode_for.cond
  %15 = load i32, i32* %7, align 4
  %16 = icmp sge i32 %15, 0
  br label %bn_encode_land.end

bn_encode_land.end:                               ; preds = %bn_encode_land.rhs, %bn_encode_for.cond
  %17 = phi i1 [ false, %bn_encode_for.cond ], [ %16, %bn_encode_land.rhs ]
  br i1 %17, label %bn_encode_for.body, label %bn_encode_for.end10

bn_encode_for.body:                               ; preds = %bn_encode_land.end
  %18 = load i32*, i32** %3, align 4
  %19 = load i32, i32* %8, align 4
  %20 = getelementptr inbounds i32, i32* %18, i32 %19
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %6, align 4
  store i32 0, i32* %9, align 4
  br label %bn_encode_for.cond2

bn_encode_for.cond2:                              ; preds = %bn_encode_for.inc, %bn_encode_for.body
  %22 = load i32, i32* %7, align 4
  %23 = icmp sge i32 %22, 0
  br i1 %23, label %bn_encode_land.rhs4, label %bn_encode_land.end6

bn_encode_land.rhs4:                              ; preds = %bn_encode_for.cond2
  %24 = load i32, i32* %9, align 4
  %25 = icmp ult i32 %24, 32
  br label %bn_encode_land.end6

bn_encode_land.end6:                              ; preds = %bn_encode_land.rhs4, %bn_encode_for.cond2
  %26 = phi i1 [ false, %bn_encode_for.cond2 ], [ %25, %bn_encode_land.rhs4 ]
  br i1 %26, label %bn_encode_for.body7, label %bn_encode_for.end

bn_encode_for.body7:                              ; preds = %bn_encode_land.end6
  %27 = load i32, i32* %6, align 4
  %28 = load i32, i32* %9, align 4
  %29 = lshr i32 %27, %28
  %30 = trunc i32 %29 to i8
  %31 = load i8*, i8** %5, align 4
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds i8, i8* %31, i32 %32
  store i8 %30, i8* %33, align 1
  br label %bn_encode_for.inc

bn_encode_for.inc:                                ; preds = %bn_encode_for.body7
  %34 = load i32, i32* %7, align 4
  %35 = add nsw i32 %34, -1
  store i32 %35, i32* %7, align 4
  %36 = load i32, i32* %9, align 4
  %37 = add i32 %36, 8
  store i32 %37, i32* %9, align 4
  br label %bn_encode_for.cond2

bn_encode_for.end:                                ; preds = %bn_encode_land.end6
  br label %bn_encode_for.inc9

bn_encode_for.inc9:                               ; preds = %bn_encode_for.end
  %38 = load i32, i32* %8, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %8, align 4
  br label %bn_encode_for.cond

bn_encode_for.end10:                              ; preds = %bn_encode_land.end
  br label %bn_encode_for.cond11

bn_encode_for.cond11:                             ; preds = %bn_encode_for.inc16, %bn_encode_for.end10
  %40 = load i32, i32* %7, align 4
  %41 = icmp sge i32 %40, 0
  br i1 %41, label %bn_encode_for.body14, label %bn_encode_for.end18

bn_encode_for.body14:                             ; preds = %bn_encode_for.cond11
  %42 = load i8*, i8** %5, align 4
  %43 = load i32, i32* %7, align 4
  %44 = getelementptr inbounds i8, i8* %42, i32 %43
  store i8 0, i8* %44, align 1
  br label %bn_encode_for.inc16

bn_encode_for.inc16:                              ; preds = %bn_encode_for.body14
  %45 = load i32, i32* %7, align 4
  %46 = add nsw i32 %45, -1
  store i32 %46, i32* %7, align 4
  br label %bn_encode_for.cond11

bn_encode_for.end18:                              ; preds = %bn_encode_for.cond11
  br label %entry.split

entry.split:                                      ; preds = %bn_encode_for.end18
  %47 = load i32, i32* %bn_size.addr, align 4
  %48 = load i8*, i8** %TAG.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"??_C@_08GMFBNBBA@?$CFs?$FL?$CFd?$FN?3?5?$AA@", i32 0, i32 0), i8* %48, i32 %47)
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry.split
  %49 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 %49
  %50 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %50 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %51 = load i32, i32* %i, align 4
  %inc = add nsw i32 %51, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %52 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %52, 512
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %53 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i32 0, i32 %53
  %54 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %54 to i32
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %conv6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %55 = load i32, i32* %i, align 4
  %inc8 = add nsw i32 %55, 1
  store i32 %inc8, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  ret void
}

declare dllimport i32 @printf(i8*, ...) #3

; Function Attrs: noinline optnone
define dso_local void @print_array(i8* %TAG, i8* %array, i32 %len) #2 {
entry:
  %len.addr = alloca i32, align 4
  %array.addr = alloca i8*, align 4
  %TAG.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 %len, i32* %len.addr, align 4
  store i8* %array, i8** %array.addr, align 4
  store i8* %TAG, i8** %TAG.addr, align 4
  %0 = load i32, i32* %len.addr, align 4
  %1 = load i8*, i8** %TAG.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"??_C@_08GMFBNBBA@?$CFs?$FL?$CFd?$FN?3?5?$AA@", i32 0, i32 0), i8* %1, i32 %0)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %array.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %4, i32 %5
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  ret void
}

; Function Attrs: noinline optnone
define dso_local void @print_pk(%struct.rsa_pk_t* %pk) #2 {
entry:
  %pk.addr = alloca %struct.rsa_pk_t*, align 4
  store %struct.rsa_pk_t* %pk, %struct.rsa_pk_t** %pk.addr, align 4
  %0 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %0, i32 0, i32 0
  %1 = load i32, i32* %bits, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"??_C@_08OPCGNDGK@PK?$FL?$CFd?$FN?3?6?$AA@", i32 0, i32 0), i32 %1)
  %2 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %modulus = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %modulus, i32 0, i32 0
  br label %print_bn_arr_entry2

print_bn_arr_entry2:                              ; preds = %entry
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  store i32 256, i32* %3, align 4
  store i8* %arraydecay, i8** %4, align 4
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"??_C@_0M@NMEDBGMP@?5?5modulus?3?5?$AA@", i32 0, i32 0), i8** %5, align 4
  store i32 0, i32* %6, align 4
  %7 = load i8*, i8** %5, align 4
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %7)
  br label %print_bn_arr_while.cond3

print_bn_arr_while.cond3:                         ; preds = %print_bn_arr_while.body4, %print_bn_arr_entry2
  %9 = load i8*, i8** %4, align 4
  %10 = load i32, i32* %6, align 4
  %11 = getelementptr inbounds i8, i8* %9, i32 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %print_bn_arr_while.body4, label %print_bn_arr_while.end5

print_bn_arr_while.body4:                         ; preds = %print_bn_arr_while.cond3
  %15 = load i32, i32* %6, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %6, align 4
  br label %print_bn_arr_while.cond3

print_bn_arr_while.end5:                          ; preds = %print_bn_arr_while.cond3
  br label %print_bn_arr_for.cond6

print_bn_arr_for.cond6:                           ; preds = %print_bn_arr_for.inc8, %print_bn_arr_while.end5
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %3, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %print_bn_arr_for.body7, label %print_bn_arr_for.end9

print_bn_arr_for.body7:                           ; preds = %print_bn_arr_for.cond6
  %20 = load i8*, i8** %4, align 4
  %21 = load i32, i32* %6, align 4
  %22 = getelementptr inbounds i8, i8* %20, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %24)
  br label %print_bn_arr_for.inc8

print_bn_arr_for.inc8:                            ; preds = %print_bn_arr_for.body7
  %26 = load i32, i32* %6, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %6, align 4
  br label %print_bn_arr_for.cond6

print_bn_arr_for.end9:                            ; preds = %print_bn_arr_for.cond6
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split1

entry.split1:                                     ; preds = %print_bn_arr_for.end9
  %29 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %exponent = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %29, i32 0, i32 2
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %exponent, i32 0, i32 0
  br label %print_bn_arr_entry

print_bn_arr_entry:                               ; preds = %entry.split1
  %30 = alloca i32, align 4
  %31 = alloca i8*, align 4
  %32 = alloca i8*, align 4
  %33 = alloca i32, align 4
  store i32 256, i32* %30, align 4
  store i8* %arraydecay1, i8** %31, align 4
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"??_C@_0N@JLCGLEPG@?5?5exponent?3?5?$AA@", i32 0, i32 0), i8** %32, align 4
  store i32 0, i32* %33, align 4
  %34 = load i8*, i8** %32, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %34)
  br label %print_bn_arr_while.cond

print_bn_arr_while.cond:                          ; preds = %print_bn_arr_while.body, %print_bn_arr_entry
  %36 = load i8*, i8** %31, align 4
  %37 = load i32, i32* %33, align 4
  %38 = getelementptr inbounds i8, i8* %36, i32 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %print_bn_arr_while.body, label %print_bn_arr_while.end

print_bn_arr_while.body:                          ; preds = %print_bn_arr_while.cond
  %42 = load i32, i32* %33, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %33, align 4
  br label %print_bn_arr_while.cond

print_bn_arr_while.end:                           ; preds = %print_bn_arr_while.cond
  br label %print_bn_arr_for.cond

print_bn_arr_for.cond:                            ; preds = %print_bn_arr_for.inc, %print_bn_arr_while.end
  %44 = load i32, i32* %33, align 4
  %45 = load i32, i32* %30, align 4
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %print_bn_arr_for.body, label %print_bn_arr_for.end

print_bn_arr_for.body:                            ; preds = %print_bn_arr_for.cond
  %47 = load i8*, i8** %31, align 4
  %48 = load i32, i32* %33, align 4
  %49 = getelementptr inbounds i8, i8* %47, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %51)
  br label %print_bn_arr_for.inc

print_bn_arr_for.inc:                             ; preds = %print_bn_arr_for.body
  %53 = load i32, i32* %33, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %33, align 4
  br label %print_bn_arr_for.cond

print_bn_arr_for.end:                             ; preds = %print_bn_arr_for.cond
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split

entry.split:                                      ; preds = %print_bn_arr_for.end
  ret void
}

; Function Attrs: noinline optnone
define dso_local void @print_sk(%struct.rsa_sk_t* %sk) #2 {
entry:
  %sk.addr = alloca %struct.rsa_sk_t*, align 4
  store %struct.rsa_sk_t* %sk, %struct.rsa_sk_t** %sk.addr, align 4
  %0 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %0, i32 0, i32 0
  %1 = load i32, i32* %bits, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"??_C@_08NGKLOPKP@SK?$FL?$CFd?$FN?3?6?$AA@", i32 0, i32 0), i32 %1)
  %2 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %modulus = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %2, i32 0, i32 1
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %modulus, i32 0, i32 0
  br label %print_bn_arr_entry56

print_bn_arr_entry56:                             ; preds = %entry
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  store i32 256, i32* %3, align 4
  store i8* %arraydecay, i8** %4, align 4
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"??_C@_0M@NMEDBGMP@?5?5modulus?3?5?$AA@", i32 0, i32 0), i8** %5, align 4
  store i32 0, i32* %6, align 4
  %7 = load i8*, i8** %5, align 4
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %7)
  br label %print_bn_arr_while.cond57

print_bn_arr_while.cond57:                        ; preds = %print_bn_arr_while.body58, %print_bn_arr_entry56
  %9 = load i8*, i8** %4, align 4
  %10 = load i32, i32* %6, align 4
  %11 = getelementptr inbounds i8, i8* %9, i32 %10
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i32
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %print_bn_arr_while.body58, label %print_bn_arr_while.end59

print_bn_arr_while.body58:                        ; preds = %print_bn_arr_while.cond57
  %15 = load i32, i32* %6, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %6, align 4
  br label %print_bn_arr_while.cond57

print_bn_arr_while.end59:                         ; preds = %print_bn_arr_while.cond57
  br label %print_bn_arr_for.cond60

print_bn_arr_for.cond60:                          ; preds = %print_bn_arr_for.inc62, %print_bn_arr_while.end59
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %3, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %print_bn_arr_for.body61, label %print_bn_arr_for.end63

print_bn_arr_for.body61:                          ; preds = %print_bn_arr_for.cond60
  %20 = load i8*, i8** %4, align 4
  %21 = load i32, i32* %6, align 4
  %22 = getelementptr inbounds i8, i8* %20, i32 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %24)
  br label %print_bn_arr_for.inc62

print_bn_arr_for.inc62:                           ; preds = %print_bn_arr_for.body61
  %26 = load i32, i32* %6, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %6, align 4
  br label %print_bn_arr_for.cond60

print_bn_arr_for.end63:                           ; preds = %print_bn_arr_for.cond60
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split55

entry.split55:                                    ; preds = %print_bn_arr_for.end63
  %29 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %public_exponet = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %29, i32 0, i32 2
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %public_exponet, i32 0, i32 0
  br label %print_bn_arr_entry47

print_bn_arr_entry47:                             ; preds = %entry.split55
  %30 = alloca i32, align 4
  %31 = alloca i8*, align 4
  %32 = alloca i8*, align 4
  %33 = alloca i32, align 4
  store i32 256, i32* %30, align 4
  store i8* %arraydecay1, i8** %31, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"??_C@_0BD@HINABDEP@?5?5public_exponet?3?5?$AA@", i32 0, i32 0), i8** %32, align 4
  store i32 0, i32* %33, align 4
  %34 = load i8*, i8** %32, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %34)
  br label %print_bn_arr_while.cond48

print_bn_arr_while.cond48:                        ; preds = %print_bn_arr_while.body49, %print_bn_arr_entry47
  %36 = load i8*, i8** %31, align 4
  %37 = load i32, i32* %33, align 4
  %38 = getelementptr inbounds i8, i8* %36, i32 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %print_bn_arr_while.body49, label %print_bn_arr_while.end50

print_bn_arr_while.body49:                        ; preds = %print_bn_arr_while.cond48
  %42 = load i32, i32* %33, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %33, align 4
  br label %print_bn_arr_while.cond48

print_bn_arr_while.end50:                         ; preds = %print_bn_arr_while.cond48
  br label %print_bn_arr_for.cond51

print_bn_arr_for.cond51:                          ; preds = %print_bn_arr_for.inc53, %print_bn_arr_while.end50
  %44 = load i32, i32* %33, align 4
  %45 = load i32, i32* %30, align 4
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %print_bn_arr_for.body52, label %print_bn_arr_for.end54

print_bn_arr_for.body52:                          ; preds = %print_bn_arr_for.cond51
  %47 = load i8*, i8** %31, align 4
  %48 = load i32, i32* %33, align 4
  %49 = getelementptr inbounds i8, i8* %47, i32 %48
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %51)
  br label %print_bn_arr_for.inc53

print_bn_arr_for.inc53:                           ; preds = %print_bn_arr_for.body52
  %53 = load i32, i32* %33, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %33, align 4
  br label %print_bn_arr_for.cond51

print_bn_arr_for.end54:                           ; preds = %print_bn_arr_for.cond51
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split46

entry.split46:                                    ; preds = %print_bn_arr_for.end54
  %56 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %exponent = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %56, i32 0, i32 3
  %arraydecay2 = getelementptr inbounds [256 x i8], [256 x i8]* %exponent, i32 0, i32 0
  br label %print_bn_arr_entry38

print_bn_arr_entry38:                             ; preds = %entry.split46
  %57 = alloca i32, align 4
  %58 = alloca i8*, align 4
  %59 = alloca i8*, align 4
  %60 = alloca i32, align 4
  store i32 256, i32* %57, align 4
  store i8* %arraydecay2, i8** %58, align 4
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"??_C@_0N@JLCGLEPG@?5?5exponent?3?5?$AA@", i32 0, i32 0), i8** %59, align 4
  store i32 0, i32* %60, align 4
  %61 = load i8*, i8** %59, align 4
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %61)
  br label %print_bn_arr_while.cond39

print_bn_arr_while.cond39:                        ; preds = %print_bn_arr_while.body40, %print_bn_arr_entry38
  %63 = load i8*, i8** %58, align 4
  %64 = load i32, i32* %60, align 4
  %65 = getelementptr inbounds i8, i8* %63, i32 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %print_bn_arr_while.body40, label %print_bn_arr_while.end41

print_bn_arr_while.body40:                        ; preds = %print_bn_arr_while.cond39
  %69 = load i32, i32* %60, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %60, align 4
  br label %print_bn_arr_while.cond39

print_bn_arr_while.end41:                         ; preds = %print_bn_arr_while.cond39
  br label %print_bn_arr_for.cond42

print_bn_arr_for.cond42:                          ; preds = %print_bn_arr_for.inc44, %print_bn_arr_while.end41
  %71 = load i32, i32* %60, align 4
  %72 = load i32, i32* %57, align 4
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %print_bn_arr_for.body43, label %print_bn_arr_for.end45

print_bn_arr_for.body43:                          ; preds = %print_bn_arr_for.cond42
  %74 = load i8*, i8** %58, align 4
  %75 = load i32, i32* %60, align 4
  %76 = getelementptr inbounds i8, i8* %74, i32 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %78)
  br label %print_bn_arr_for.inc44

print_bn_arr_for.inc44:                           ; preds = %print_bn_arr_for.body43
  %80 = load i32, i32* %60, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %60, align 4
  br label %print_bn_arr_for.cond42

print_bn_arr_for.end45:                           ; preds = %print_bn_arr_for.cond42
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split37

entry.split37:                                    ; preds = %print_bn_arr_for.end45
  %83 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime1 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %83, i32 0, i32 4
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %prime1, i32 0, i32 0
  br label %print_bn_arr_entry29

print_bn_arr_entry29:                             ; preds = %entry.split37
  %84 = alloca i32, align 4
  %85 = alloca i8*, align 4
  %86 = alloca i8*, align 4
  %87 = alloca i32, align 4
  store i32 128, i32* %84, align 4
  store i8* %arraydecay3, i8** %85, align 4
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"??_C@_0L@EMBGKBID@?5?5prime1?3?5?$AA@", i32 0, i32 0), i8** %86, align 4
  store i32 0, i32* %87, align 4
  %88 = load i8*, i8** %86, align 4
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %88)
  br label %print_bn_arr_while.cond30

print_bn_arr_while.cond30:                        ; preds = %print_bn_arr_while.body31, %print_bn_arr_entry29
  %90 = load i8*, i8** %85, align 4
  %91 = load i32, i32* %87, align 4
  %92 = getelementptr inbounds i8, i8* %90, i32 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %print_bn_arr_while.body31, label %print_bn_arr_while.end32

print_bn_arr_while.body31:                        ; preds = %print_bn_arr_while.cond30
  %96 = load i32, i32* %87, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %87, align 4
  br label %print_bn_arr_while.cond30

print_bn_arr_while.end32:                         ; preds = %print_bn_arr_while.cond30
  br label %print_bn_arr_for.cond33

print_bn_arr_for.cond33:                          ; preds = %print_bn_arr_for.inc35, %print_bn_arr_while.end32
  %98 = load i32, i32* %87, align 4
  %99 = load i32, i32* %84, align 4
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %print_bn_arr_for.body34, label %print_bn_arr_for.end36

print_bn_arr_for.body34:                          ; preds = %print_bn_arr_for.cond33
  %101 = load i8*, i8** %85, align 4
  %102 = load i32, i32* %87, align 4
  %103 = getelementptr inbounds i8, i8* %101, i32 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %105)
  br label %print_bn_arr_for.inc35

print_bn_arr_for.inc35:                           ; preds = %print_bn_arr_for.body34
  %107 = load i32, i32* %87, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %87, align 4
  br label %print_bn_arr_for.cond33

print_bn_arr_for.end36:                           ; preds = %print_bn_arr_for.cond33
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split28

entry.split28:                                    ; preds = %print_bn_arr_for.end36
  %110 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %110, i32 0, i32 5
  %arraydecay4 = getelementptr inbounds [128 x i8], [128 x i8]* %prime2, i32 0, i32 0
  br label %print_bn_arr_entry20

print_bn_arr_entry20:                             ; preds = %entry.split28
  %111 = alloca i32, align 4
  %112 = alloca i8*, align 4
  %113 = alloca i8*, align 4
  %114 = alloca i32, align 4
  store i32 128, i32* %111, align 4
  store i8* %arraydecay4, i8** %112, align 4
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"??_C@_0L@FOKDAOGN@?5?5prime2?3?5?$AA@", i32 0, i32 0), i8** %113, align 4
  store i32 0, i32* %114, align 4
  %115 = load i8*, i8** %113, align 4
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %115)
  br label %print_bn_arr_while.cond21

print_bn_arr_while.cond21:                        ; preds = %print_bn_arr_while.body22, %print_bn_arr_entry20
  %117 = load i8*, i8** %112, align 4
  %118 = load i32, i32* %114, align 4
  %119 = getelementptr inbounds i8, i8* %117, i32 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %print_bn_arr_while.body22, label %print_bn_arr_while.end23

print_bn_arr_while.body22:                        ; preds = %print_bn_arr_while.cond21
  %123 = load i32, i32* %114, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %114, align 4
  br label %print_bn_arr_while.cond21

print_bn_arr_while.end23:                         ; preds = %print_bn_arr_while.cond21
  br label %print_bn_arr_for.cond24

print_bn_arr_for.cond24:                          ; preds = %print_bn_arr_for.inc26, %print_bn_arr_while.end23
  %125 = load i32, i32* %114, align 4
  %126 = load i32, i32* %111, align 4
  %127 = icmp slt i32 %125, %126
  br i1 %127, label %print_bn_arr_for.body25, label %print_bn_arr_for.end27

print_bn_arr_for.body25:                          ; preds = %print_bn_arr_for.cond24
  %128 = load i8*, i8** %112, align 4
  %129 = load i32, i32* %114, align 4
  %130 = getelementptr inbounds i8, i8* %128, i32 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %132)
  br label %print_bn_arr_for.inc26

print_bn_arr_for.inc26:                           ; preds = %print_bn_arr_for.body25
  %134 = load i32, i32* %114, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %114, align 4
  br label %print_bn_arr_for.cond24

print_bn_arr_for.end27:                           ; preds = %print_bn_arr_for.cond24
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split19

entry.split19:                                    ; preds = %print_bn_arr_for.end27
  %137 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime_exponent1 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %137, i32 0, i32 6
  %arraydecay5 = getelementptr inbounds [128 x i8], [128 x i8]* %prime_exponent1, i32 0, i32 0
  br label %print_bn_arr_entry11

print_bn_arr_entry11:                             ; preds = %entry.split19
  %138 = alloca i32, align 4
  %139 = alloca i8*, align 4
  %140 = alloca i8*, align 4
  %141 = alloca i32, align 4
  store i32 128, i32* %138, align 4
  store i8* %arraydecay5, i8** %139, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"??_C@_0BD@DBOOPOHL@?5?5primeExponent1?3?5?$AA@", i32 0, i32 0), i8** %140, align 4
  store i32 0, i32* %141, align 4
  %142 = load i8*, i8** %140, align 4
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %142)
  br label %print_bn_arr_while.cond12

print_bn_arr_while.cond12:                        ; preds = %print_bn_arr_while.body13, %print_bn_arr_entry11
  %144 = load i8*, i8** %139, align 4
  %145 = load i32, i32* %141, align 4
  %146 = getelementptr inbounds i8, i8* %144, i32 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %print_bn_arr_while.body13, label %print_bn_arr_while.end14

print_bn_arr_while.body13:                        ; preds = %print_bn_arr_while.cond12
  %150 = load i32, i32* %141, align 4
  %151 = add nsw i32 %150, 1
  store i32 %151, i32* %141, align 4
  br label %print_bn_arr_while.cond12

print_bn_arr_while.end14:                         ; preds = %print_bn_arr_while.cond12
  br label %print_bn_arr_for.cond15

print_bn_arr_for.cond15:                          ; preds = %print_bn_arr_for.inc17, %print_bn_arr_while.end14
  %152 = load i32, i32* %141, align 4
  %153 = load i32, i32* %138, align 4
  %154 = icmp slt i32 %152, %153
  br i1 %154, label %print_bn_arr_for.body16, label %print_bn_arr_for.end18

print_bn_arr_for.body16:                          ; preds = %print_bn_arr_for.cond15
  %155 = load i8*, i8** %139, align 4
  %156 = load i32, i32* %141, align 4
  %157 = getelementptr inbounds i8, i8* %155, i32 %156
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %159)
  br label %print_bn_arr_for.inc17

print_bn_arr_for.inc17:                           ; preds = %print_bn_arr_for.body16
  %161 = load i32, i32* %141, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %141, align 4
  br label %print_bn_arr_for.cond15

print_bn_arr_for.end18:                           ; preds = %print_bn_arr_for.cond15
  %163 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split10

entry.split10:                                    ; preds = %print_bn_arr_for.end18
  %164 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime_exponent2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %164, i32 0, i32 7
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %prime_exponent2, i32 0, i32 0
  br label %print_bn_arr_entry2

print_bn_arr_entry2:                              ; preds = %entry.split10
  %165 = alloca i32, align 4
  %166 = alloca i8*, align 4
  %167 = alloca i8*, align 4
  %168 = alloca i32, align 4
  store i32 128, i32* %165, align 4
  store i8* %arraydecay6, i8** %166, align 4
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"??_C@_0BD@CDFLFBJF@?5?5primeExponent2?3?5?$AA@", i32 0, i32 0), i8** %167, align 4
  store i32 0, i32* %168, align 4
  %169 = load i8*, i8** %167, align 4
  %170 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %169)
  br label %print_bn_arr_while.cond3

print_bn_arr_while.cond3:                         ; preds = %print_bn_arr_while.body4, %print_bn_arr_entry2
  %171 = load i8*, i8** %166, align 4
  %172 = load i32, i32* %168, align 4
  %173 = getelementptr inbounds i8, i8* %171, i32 %172
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %print_bn_arr_while.body4, label %print_bn_arr_while.end5

print_bn_arr_while.body4:                         ; preds = %print_bn_arr_while.cond3
  %177 = load i32, i32* %168, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %168, align 4
  br label %print_bn_arr_while.cond3

print_bn_arr_while.end5:                          ; preds = %print_bn_arr_while.cond3
  br label %print_bn_arr_for.cond6

print_bn_arr_for.cond6:                           ; preds = %print_bn_arr_for.inc8, %print_bn_arr_while.end5
  %179 = load i32, i32* %168, align 4
  %180 = load i32, i32* %165, align 4
  %181 = icmp slt i32 %179, %180
  br i1 %181, label %print_bn_arr_for.body7, label %print_bn_arr_for.end9

print_bn_arr_for.body7:                           ; preds = %print_bn_arr_for.cond6
  %182 = load i8*, i8** %166, align 4
  %183 = load i32, i32* %168, align 4
  %184 = getelementptr inbounds i8, i8* %182, i32 %183
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  %187 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %186)
  br label %print_bn_arr_for.inc8

print_bn_arr_for.inc8:                            ; preds = %print_bn_arr_for.body7
  %188 = load i32, i32* %168, align 4
  %189 = add nsw i32 %188, 1
  store i32 %189, i32* %168, align 4
  br label %print_bn_arr_for.cond6

print_bn_arr_for.end9:                            ; preds = %print_bn_arr_for.cond6
  %190 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split1

entry.split1:                                     ; preds = %print_bn_arr_for.end9
  %191 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %coefficient = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %191, i32 0, i32 8
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %coefficient, i32 0, i32 0
  br label %print_bn_arr_entry

print_bn_arr_entry:                               ; preds = %entry.split1
  %192 = alloca i32, align 4
  %193 = alloca i8*, align 4
  %194 = alloca i8*, align 4
  %195 = alloca i32, align 4
  store i32 128, i32* %192, align 4
  store i8* %arraydecay7, i8** %193, align 4
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"??_C@_0BA@BHHMNKPP@?5?5coefficient?3?5?$AA@", i32 0, i32 0), i8** %194, align 4
  store i32 0, i32* %195, align 4
  %196 = load i8*, i8** %194, align 4
  %197 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DKCKIIND@?$CFs?$AA@", i32 0, i32 0), i8* %196)
  br label %print_bn_arr_while.cond

print_bn_arr_while.cond:                          ; preds = %print_bn_arr_while.body, %print_bn_arr_entry
  %198 = load i8*, i8** %193, align 4
  %199 = load i32, i32* %195, align 4
  %200 = getelementptr inbounds i8, i8* %198, i32 %199
  %201 = load i8, i8* %200, align 1
  %202 = zext i8 %201 to i32
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %print_bn_arr_while.body, label %print_bn_arr_while.end

print_bn_arr_while.body:                          ; preds = %print_bn_arr_while.cond
  %204 = load i32, i32* %195, align 4
  %205 = add nsw i32 %204, 1
  store i32 %205, i32* %195, align 4
  br label %print_bn_arr_while.cond

print_bn_arr_while.end:                           ; preds = %print_bn_arr_while.cond
  br label %print_bn_arr_for.cond

print_bn_arr_for.cond:                            ; preds = %print_bn_arr_for.inc, %print_bn_arr_while.end
  %206 = load i32, i32* %195, align 4
  %207 = load i32, i32* %192, align 4
  %208 = icmp slt i32 %206, %207
  br i1 %208, label %print_bn_arr_for.body, label %print_bn_arr_for.end

print_bn_arr_for.body:                            ; preds = %print_bn_arr_for.cond
  %209 = load i8*, i8** %193, align 4
  %210 = load i32, i32* %195, align 4
  %211 = getelementptr inbounds i8, i8* %209, i32 %210
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04JFFKLGJF@?$CF02X?$AA@", i32 0, i32 0), i32 %213)
  br label %print_bn_arr_for.inc

print_bn_arr_for.inc:                             ; preds = %print_bn_arr_for.body
  %215 = load i32, i32* %195, align 4
  %216 = add nsw i32 %215, 1
  store i32 %216, i32* %195, align 4
  br label %print_bn_arr_for.cond

print_bn_arr_for.end:                             ; preds = %print_bn_arr_for.cond
  %217 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %entry.split

entry.split:                                      ; preds = %print_bn_arr_for.end
  ret void
}

; Function Attrs: noinline optnone
define dso_local i32 @timetest() #2 {
entry:
  %call = call i32 @test1()
  %call1 = call i32 @test2()
  %call2 = call i32 @test3()
  ret i32 0
}

; Function Attrs: noinline optnone
define internal i32 @test1() #2 {
entry:
  %retval = alloca i32, align 4
  %ret = alloca i32, align 4
  %pk = alloca %struct.rsa_pk_t, align 4
  %sk = alloca %struct.rsa_sk_t, align 4
  %output = alloca [256 x i8], align 1
  %input = alloca [256 x i8], align 1
  %msg = alloca [256 x i8], align 1
  %outputLen = alloca i32, align 4
  %inputLen = alloca i32, align 4
  %msg_len = alloca i32, align 4
  %0 = bitcast [256 x i8]* %input to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 256, i1 false)
  %1 = bitcast i8* %0 to [256 x i8]*
  %2 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i32 0, i32 0
  store i8 116, i8* %2, align 1
  %3 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i32 0, i32 1
  store i8 101, i8* %3, align 1
  %4 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i32 0, i32 2
  store i8 115, i8* %4, align 1
  %5 = getelementptr inbounds [256 x i8], [256 x i8]* %1, i32 0, i32 3
  store i8 116, i8* %5, align 1
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"??_C@_0O@OBPALAEI@hello?5world?$CB?6?$AA@", i32 0, i32 0))
  %call1 = call i32 @rsa_generate_keys(%struct.rsa_pk_t* %pk, %struct.rsa_sk_t* %sk, i32 512)
  store i32 %call1, i32* %ret, align 4
  %6 = load i32, i32* %ret, align 4
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @print_pk(%struct.rsa_pk_t* %pk)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  call void @print_sk(%struct.rsa_sk_t* %sk)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %ret, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"??_C@_0BO@PAABOMNB@rsa_generate_keys?0?5ret?3?5?$CF04X?6?$AA@", i32 0, i32 0), i32 %7)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %input, i32 0, i32 0
  %call4 = call i32 @strlen(i8* %arraydecay)
  store i32 %call4, i32* %inputLen, align 4
  %8 = load i32, i32* %inputLen, align 4
  %arraydecay5 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i32 0, i32 0
  call void @print_array(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03GGAHOJCI@MSG?$AA@", i32 0, i32 0), i8* %arraydecay5, i32 %8)
  %9 = load i32, i32* %inputLen, align 4
  %arraydecay6 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i32 0, i32 0
  %call8 = call i32 @rsa_public_encrypt(i8* %arraydecay7, i32* %outputLen, i8* %arraydecay6, i32 %9, %struct.rsa_pk_t* %pk)
  store i32 %call8, i32* %ret, align 4
  %10 = load i32, i32* %ret, align 4
  %cmp9 = icmp eq i32 %10, 0
  br i1 %cmp9, label %if.then10, label %if.else12

if.then10:                                        ; preds = %if.end
  %11 = load i32, i32* %outputLen, align 4
  %arraydecay11 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i32 0, i32 0
  call void @print_array(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06OIICAIJO@PK?5ENC?$AA@", i32 0, i32 0), i8* %arraydecay11, i32 %11)
  br label %if.end14

if.else12:                                        ; preds = %if.end
  %12 = load i32, i32* %ret, align 4
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"??_C@_0BP@OKHOIEME@rsa_public_encrypt?0?5ret?3?5?$CF04X?6?$AA@", i32 0, i32 0), i32 %12)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.then10
  %13 = load i32, i32* %outputLen, align 4
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i32 0, i32 0
  %arraydecay16 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  %call17 = call i32 @rsa_private_decrypt(i8* %arraydecay16, i32* %msg_len, i8* %arraydecay15, i32 %13, %struct.rsa_sk_t* %sk)
  store i32 %call17, i32* %ret, align 4
  %14 = load i32, i32* %ret, align 4
  %cmp18 = icmp eq i32 %14, 0
  br i1 %cmp18, label %if.then19, label %if.else23

if.then19:                                        ; preds = %if.end14
  %15 = load i32, i32* %msg_len, align 4
  %arraydecay20 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  call void @print_array(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06GNIDJKIH@SK?5DEC?$AA@", i32 0, i32 0), i8* %arraydecay20, i32 %15)
  %arraydecay21 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"??_C@_08NBICHAHH@DEC?3?5?$CFs?6?$AA@", i32 0, i32 0), i8* %arraydecay21)
  br label %if.end25

if.else23:                                        ; preds = %if.end14
  %16 = load i32, i32* %ret, align 4
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"??_C@_0CA@BAIGFOPC@rsa_private_decrypt?0?5ret?3?5?$CF04X?6?$AA@", i32 0, i32 0), i32 %16)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.then19
  %17 = load i32, i32* %inputLen, align 4
  %arraydecay26 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i32 0, i32 0
  %call28 = call i32 @rsa_private_encrypt(i8* %arraydecay27, i32* %outputLen, i8* %arraydecay26, i32 %17, %struct.rsa_sk_t* %sk)
  store i32 %call28, i32* %ret, align 4
  %18 = load i32, i32* %ret, align 4
  %cmp29 = icmp eq i32 %18, 0
  br i1 %cmp29, label %if.then30, label %if.else32

if.then30:                                        ; preds = %if.end25
  %19 = load i32, i32* %outputLen, align 4
  %arraydecay31 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i32 0, i32 0
  call void @print_array(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06NJGKBCAD@SK?5ENC?$AA@", i32 0, i32 0), i8* %arraydecay31, i32 %19)
  br label %if.end34

if.else32:                                        ; preds = %if.end25
  %20 = load i32, i32* %ret, align 4
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"??_C@_0CA@NPBGPOJI@rsa_private_encrypt?0?5ret?3?5?$CF04X?6?$AA@", i32 0, i32 0), i32 %20)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %if.then30
  %21 = load i32, i32* %outputLen, align 4
  %arraydecay35 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i32 0, i32 0
  %arraydecay36 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  %call37 = call i32 @rsa_public_decrypt(i8* %arraydecay36, i32* %msg_len, i8* %arraydecay35, i32 %21, %struct.rsa_pk_t* %pk)
  store i32 %call37, i32* %ret, align 4
  %22 = load i32, i32* %ret, align 4
  %cmp38 = icmp eq i32 %22, 0
  br i1 %cmp38, label %if.then39, label %if.else43

if.then39:                                        ; preds = %if.end34
  %23 = load i32, i32* %msg_len, align 4
  %arraydecay40 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  call void @print_array(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06FMGLIABK@PK?5DEC?$AA@", i32 0, i32 0), i8* %arraydecay40, i32 %23)
  %arraydecay41 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  %call42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"??_C@_08NBICHAHH@DEC?3?5?$CFs?6?$AA@", i32 0, i32 0), i8* %arraydecay41)
  br label %if.end45

if.else43:                                        ; preds = %if.end34
  %24 = load i32, i32* %ret, align 4
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"??_C@_0BP@CFOOCEKO@rsa_public_decrypt?0?5ret?3?5?$CF04X?6?$AA@", i32 0, i32 0), i32 %24)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end45:                                         ; preds = %if.then39
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end45, %if.else43, %if.else32, %if.else23, %if.else12, %if.else
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

; Function Attrs: noinline optnone
define internal i32 @test2() #2 {
entry:
  %retval = alloca i32, align 4
  %ret = alloca i32, align 4
  %pk = alloca %struct.rsa_pk_t, align 4
  %sk = alloca %struct.rsa_sk_t, align 4
  %msg = alloca [256 x i8], align 1
  %msg_len = alloca i32, align 4
  %0 = bitcast %struct.rsa_pk_t* %pk to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %0, i8 0, i32 516, i1 false)
  %1 = bitcast %struct.rsa_sk_t* %sk to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1, i8 0, i32 1412, i1 false)
  %2 = bitcast [256 x i8]* %msg to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %2, i8 0, i32 256, i1 false)
  %bits = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %pk, i32 0, i32 0
  store i32 2048, i32* %bits, align 4
  %modulus = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %pk, i32 0, i32 1
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %modulus, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arrayidx, i8* align 1 getelementptr inbounds ([256 x i8], [256 x i8]* @key_m, i32 0, i32 0), i32 256, i1 false)
  %exponent = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %pk, i32 0, i32 2
  %arrayidx1 = getelementptr inbounds [256 x i8], [256 x i8]* %exponent, i32 0, i32 253
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arrayidx1, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @key_e, i32 0, i32 0), i32 3, i1 false)
  %bits2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 0
  store i32 2048, i32* %bits2, align 4
  %modulus3 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [256 x i8], [256 x i8]* %modulus3, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arrayidx4, i8* align 1 getelementptr inbounds ([256 x i8], [256 x i8]* @key_m, i32 0, i32 0), i32 256, i1 false)
  %public_exponet = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 2
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* %public_exponet, i32 0, i32 253
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arrayidx5, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @key_e, i32 0, i32 0), i32 3, i1 false)
  %exponent6 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 3
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %exponent6, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arrayidx7, i8* align 1 getelementptr inbounds ([256 x i8], [256 x i8]* @key_pe, i32 0, i32 0), i32 256, i1 false)
  %prime1 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 4
  %arrayidx8 = getelementptr inbounds [128 x i8], [128 x i8]* %prime1, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arrayidx8, i8* align 1 getelementptr inbounds ([128 x i8], [128 x i8]* @key_p1, i32 0, i32 0), i32 128, i1 false)
  %prime2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 5
  %arrayidx9 = getelementptr inbounds [128 x i8], [128 x i8]* %prime2, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arrayidx9, i8* align 1 getelementptr inbounds ([128 x i8], [128 x i8]* @key_p2, i32 0, i32 0), i32 128, i1 false)
  %prime_exponent1 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 6
  %arrayidx10 = getelementptr inbounds [128 x i8], [128 x i8]* %prime_exponent1, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arrayidx10, i8* align 1 getelementptr inbounds ([128 x i8], [128 x i8]* @key_e1, i32 0, i32 0), i32 128, i1 false)
  %prime_exponent2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 7
  %arrayidx11 = getelementptr inbounds [128 x i8], [128 x i8]* %prime_exponent2, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arrayidx11, i8* align 1 getelementptr inbounds ([128 x i8], [128 x i8]* @key_e2, i32 0, i32 0), i32 128, i1 false)
  %coefficient = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %sk, i32 0, i32 8
  %arrayidx12 = getelementptr inbounds [128 x i8], [128 x i8]* %coefficient, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arrayidx12, i8* align 1 getelementptr inbounds ([128 x i8], [128 x i8]* @key_c, i32 0, i32 0), i32 128, i1 false)
  call void @print_pk(%struct.rsa_pk_t* %pk)
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  call void @print_sk(%struct.rsa_sk_t* %sk)
  call void @write_sk(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06OGPOEGBJ@sk?4prv?$AA@", i32 0, i32 0), %struct.rsa_sk_t* %sk)
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  %call13 = call i32 @rsa_private_decrypt(i8* %arraydecay, i32* %msg_len, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @hex_array, i32 0, i32 0), i32 256, %struct.rsa_sk_t* %sk)
  store i32 %call13, i32* %ret, align 4
  %3 = load i32, i32* %ret, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %msg_len, align 4
  %arraydecay14 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  call void @print_array(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03GHMILMGE@DEC?$AA@", i32 0, i32 0), i8* %arraydecay14, i32 %4)
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"??_C@_08NBICHAHH@DEC?3?5?$CFs?6?$AA@", i32 0, i32 0), i8* %arraydecay15)
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %ret, align 4
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"??_C@_0CA@BAIGFOPC@rsa_private_decrypt?0?5ret?3?5?$CF04X?6?$AA@", i32 0, i32 0), i32 %5)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.else
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline optnone
define internal i32 @test3() #2 {
entry:
  %retval = alloca i32, align 4
  %sk = alloca %struct.rsa_sk_t, align 4
  %msg = alloca [256 x i8], align 1
  %msg_len = alloca i32, align 4
  %ret = alloca i32, align 4
  %0 = bitcast [256 x i8]* %msg to i8*
  call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 256, i1 false)
  %call = call i32 @rsa_get_sk_from_file(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"??_C@_06OGPOEGBJ@sk?4prv?$AA@", i32 0, i32 0), %struct.rsa_sk_t* %sk)
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  %call1 = call i32 @rsa_private_decrypt(i8* %arraydecay, i32* %msg_len, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @hex_array, i32 0, i32 0), i32 256, %struct.rsa_sk_t* %sk)
  store i32 %call1, i32* %ret, align 4
  %1 = load i32, i32* %ret, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %msg_len, align 4
  %arraydecay2 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  call void @print_array(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"??_C@_03GHMILMGE@DEC?$AA@", i32 0, i32 0), i8* %arraydecay2, i32 %2)
  %arraydecay3 = getelementptr inbounds [256 x i8], [256 x i8]* %msg, i32 0, i32 0
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"??_C@_08NBICHAHH@DEC?3?5?$CFs?6?$AA@", i32 0, i32 0), i8* %arraydecay3)
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %ret, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"??_C@_0CA@BAIGFOPC@rsa_private_decrypt?0?5ret?3?5?$CF04X?6?$AA@", i32 0, i32 0), i32 %3)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.else
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1) #0

; Function Attrs: noinline optnone
define internal void @write_sk(i8* %file, %struct.rsa_sk_t* %sk) #2 {
entry:
  %sk.addr = alloca %struct.rsa_sk_t*, align 4
  %file.addr = alloca i8*, align 4
  %fp = alloca %struct._iobuf*, align 4
  store %struct.rsa_sk_t* %sk, %struct.rsa_sk_t** %sk.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct._iobuf* @fopen(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01NOFIACDB@w?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call, %struct._iobuf** %fp, align 4
  %1 = load %struct._iobuf*, %struct._iobuf** %fp, align 4
  %cmp = icmp eq %struct._iobuf* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"??_C@_0BD@DOBJINJI@CAN?5NOT?5OPEN?5FILE?6?$AA@", i32 0, i32 0))
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._iobuf*, %struct._iobuf** %fp, align 4
  %3 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %4 = bitcast %struct.rsa_sk_t* %3 to i8*
  %call2 = call i32 @fwrite(i8* %4, i32 1, i32 1412, %struct._iobuf* %2)
  %5 = load %struct._iobuf*, %struct._iobuf** %fp, align 4
  %call3 = call i32 @fclose(%struct._iobuf* %5)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

declare dllimport %struct._iobuf* @fopen(i8*, i8*) #3

declare dllimport i32 @fwrite(i8*, i32, i32, %struct._iobuf*) #3

declare dllimport i32 @fclose(%struct._iobuf*) #3

declare dso_local i32 @strlen(i8*) #3

; Function Attrs: noinline optnone
define dso_local i32 @main() #2 {
entry:
  %retval = alloca i32, align 4
  %start = alloca i32, align 4
  %finish = alloca i32, align 4
  %duration = alloca double, align 8
  %i = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @clock()
  store i32 %call, i32* %start, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call1 = call i32 @timetest()
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %1 = load i32, i32* %i, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call2 = call i32 @clock()
  store i32 %call2, i32* %finish, align 4
  %2 = load i32, i32* %finish, align 4
  %3 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %2, %3
  %conv = sitofp i32 %sub to double
  %div = fdiv double %conv, 1.000000e+03
  store double %div, double* %duration, align 8
  %4 = load double, double* %duration, align 8
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"??_C@_0M@NPEDOHBA@?$CFf?5seconds?6?$AA@", i32 0, i32 0), double %4)
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

declare dllimport i32 @clock() #3

; Function Attrs: noinline optnone
define dso_local void @initialize_rand() #2 {
entry:
  %call = call i64 @time(i64* null)
  %conv = trunc i64 %call to i32
  call void @srand(i32 %conv)
  ret void
}

; Function Attrs: noinline optnone
define internal i64 @time(i64* %_Time) #2 {
entry:
  %_Time.addr = alloca i64*, align 4
  store i64* %_Time, i64** %_Time.addr, align 4
  %0 = load i64*, i64** %_Time.addr, align 4
  %call = call i64 @_time64(i64* %0)
  ret i64 %call
}

declare dllimport void @srand(i32) #3

declare dllimport i64 @_time64(i64*) #3

; Function Attrs: noinline optnone
define dso_local void @generate_rand(i8* %block, i32 %block_len) #2 {
entry:
  %block_len.addr = alloca i32, align 4
  %block.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i32 %block_len, i32* %block_len.addr, align 4
  store i8* %block, i8** %block.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %block_len.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %conv = trunc i32 %call to i8
  %2 = load i8*, i8** %block.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %2, i32 %3
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare dllimport i32 @rand() #3

; Function Attrs: noinline optnone
define dso_local i32 @generate_prime(i32* %a, i32* %lower, i32* %upper, i32* %d, i32 %digits) #2 {
entry:
  %retval = alloca i32, align 4
  %digits.addr = alloca i32, align 4
  %d.addr = alloca i32*, align 4
  %upper.addr = alloca i32*, align 4
  %lower.addr = alloca i32*, align 4
  %a.addr = alloca i32*, align 4
  %block = alloca [260 x i8], align 1
  %t = alloca [65 x i32], align 4
  %u = alloca [65 x i32], align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %d, i32** %d.addr, align 4
  store i32* %upper, i32** %upper.addr, align 4
  store i32* %lower, i32** %lower.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %digits.addr, align 4
  %mul = mul i32 %0, 4
  %arraydecay = getelementptr inbounds [260 x i8], [260 x i8]* %block, i32 0, i32 0
  call void @generate_rand(i8* %arraydecay, i32 %mul)
  %1 = load i32, i32* %digits.addr, align 4
  %mul1 = mul i32 %1, 4
  %arraydecay2 = getelementptr inbounds [260 x i8], [260 x i8]* %block, i32 0, i32 0
  %2 = load i32, i32* %digits.addr, align 4
  %3 = load i32*, i32** %a.addr, align 4
  br label %bn_decode_entry

bn_decode_entry:                                  ; preds = %entry
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %mul1, i32* %4, align 4
  store i8* %arraydecay2, i8** %5, align 4
  store i32 %2, i32* %6, align 4
  store i32* %3, i32** %7, align 4
  store i32 0, i32* %10, align 4
  %12 = load i32, i32* %4, align 4
  %13 = sub i32 %12, 1
  store i32 %13, i32* %9, align 4
  br label %bn_decode_for.cond

bn_decode_for.cond:                               ; preds = %bn_decode_for.inc9, %bn_decode_entry
  %14 = load i32, i32* %10, align 4
  %15 = load i32, i32* %6, align 4
  %16 = icmp ult i32 %14, %15
  br i1 %16, label %bn_decode_land.rhs, label %bn_decode_land.end

bn_decode_land.rhs:                               ; preds = %bn_decode_for.cond
  %17 = load i32, i32* %9, align 4
  %18 = icmp sge i32 %17, 0
  br label %bn_decode_land.end

bn_decode_land.end:                               ; preds = %bn_decode_land.rhs, %bn_decode_for.cond
  %19 = phi i1 [ false, %bn_decode_for.cond ], [ %18, %bn_decode_land.rhs ]
  br i1 %19, label %bn_decode_for.body, label %bn_decode_for.end10

bn_decode_for.body:                               ; preds = %bn_decode_land.end
  store i32 0, i32* %8, align 4
  store i32 0, i32* %11, align 4
  br label %bn_decode_for.cond2

bn_decode_for.cond2:                              ; preds = %bn_decode_for.inc, %bn_decode_for.body
  %20 = load i32, i32* %9, align 4
  %21 = icmp sge i32 %20, 0
  br i1 %21, label %bn_decode_land.rhs4, label %bn_decode_land.end6

bn_decode_land.rhs4:                              ; preds = %bn_decode_for.cond2
  %22 = load i32, i32* %11, align 4
  %23 = icmp ult i32 %22, 32
  br label %bn_decode_land.end6

bn_decode_land.end6:                              ; preds = %bn_decode_land.rhs4, %bn_decode_for.cond2
  %24 = phi i1 [ false, %bn_decode_for.cond2 ], [ %23, %bn_decode_land.rhs4 ]
  br i1 %24, label %bn_decode_for.body7, label %bn_decode_for.end

bn_decode_for.body7:                              ; preds = %bn_decode_land.end6
  %25 = load i8*, i8** %5, align 4
  %26 = load i32, i32* %9, align 4
  %27 = getelementptr inbounds i8, i8* %25, i32 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = load i32, i32* %11, align 4
  %31 = shl i32 %29, %30
  %32 = load i32, i32* %8, align 4
  %33 = or i32 %32, %31
  store i32 %33, i32* %8, align 4
  br label %bn_decode_for.inc

bn_decode_for.inc:                                ; preds = %bn_decode_for.body7
  %34 = load i32, i32* %9, align 4
  %35 = add nsw i32 %34, -1
  store i32 %35, i32* %9, align 4
  %36 = load i32, i32* %11, align 4
  %37 = add i32 %36, 8
  store i32 %37, i32* %11, align 4
  br label %bn_decode_for.cond2

bn_decode_for.end:                                ; preds = %bn_decode_land.end6
  %38 = load i32, i32* %8, align 4
  %39 = load i32*, i32** %7, align 4
  %40 = load i32, i32* %10, align 4
  %41 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %38, i32* %41, align 4
  br label %bn_decode_for.inc9

bn_decode_for.inc9:                               ; preds = %bn_decode_for.end
  %42 = load i32, i32* %10, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %10, align 4
  br label %bn_decode_for.cond

bn_decode_for.end10:                              ; preds = %bn_decode_land.end
  br label %bn_decode_for.cond11

bn_decode_for.cond11:                             ; preds = %bn_decode_for.inc16, %bn_decode_for.end10
  %44 = load i32, i32* %10, align 4
  %45 = load i32, i32* %6, align 4
  %46 = icmp ult i32 %44, %45
  br i1 %46, label %bn_decode_for.body14, label %bn_decode_for.end18

bn_decode_for.body14:                             ; preds = %bn_decode_for.cond11
  %47 = load i32*, i32** %7, align 4
  %48 = load i32, i32* %10, align 4
  %49 = getelementptr inbounds i32, i32* %47, i32 %48
  store i32 0, i32* %49, align 4
  br label %bn_decode_for.inc16

bn_decode_for.inc16:                              ; preds = %bn_decode_for.body14
  %50 = load i32, i32* %10, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* %10, align 4
  br label %bn_decode_for.cond11

bn_decode_for.end18:                              ; preds = %bn_decode_for.cond11
  br label %entry.split

entry.split:                                      ; preds = %bn_decode_for.end18
  %52 = load i32, i32* %digits.addr, align 4
  %53 = load i32*, i32** %lower.addr, align 4
  %54 = load i32*, i32** %upper.addr, align 4
  %arraydecay3 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_sub_entry70

bn_sub_entry70:                                   ; preds = %entry.split
  %55 = alloca i32, align 4
  %56 = alloca i32*, align 4
  %57 = alloca i32*, align 4
  %58 = alloca i32*, align 4
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  store i32 %52, i32* %55, align 4
  store i32* %53, i32** %56, align 4
  store i32* %54, i32** %57, align 4
  store i32* %arraydecay3, i32** %58, align 4
  store i32 0, i32* %60, align 4
  store i32 0, i32* %61, align 4
  br label %bn_sub_for.cond71

bn_sub_for.cond71:                                ; preds = %bn_sub_for.inc79, %bn_sub_entry70
  %62 = load i32, i32* %61, align 4
  %63 = load i32, i32* %55, align 4
  %64 = icmp ult i32 %62, %63
  br i1 %64, label %bn_sub_for.body72, label %bn_sub_for.end80

bn_sub_for.body72:                                ; preds = %bn_sub_for.cond71
  %65 = load i32*, i32** %57, align 4
  %66 = load i32, i32* %61, align 4
  %67 = getelementptr inbounds i32, i32* %65, i32 %66
  %68 = load i32, i32* %67, align 4
  %69 = load i32, i32* %60, align 4
  %70 = sub i32 %68, %69
  store i32 %70, i32* %59, align 4
  %71 = load i32, i32* %60, align 4
  %72 = sub i32 -1, %71
  %73 = icmp ugt i32 %70, %72
  br i1 %73, label %bn_sub_if.then73, label %bn_sub_if.else74

bn_sub_if.then73:                                 ; preds = %bn_sub_for.body72
  %74 = load i32*, i32** %56, align 4
  %75 = load i32, i32* %61, align 4
  %76 = getelementptr inbounds i32, i32* %74, i32 %75
  %77 = load i32, i32* %76, align 4
  %78 = sub i32 -1, %77
  store i32 %78, i32* %59, align 4
  br label %bn_sub_if.end1278

bn_sub_if.else74:                                 ; preds = %bn_sub_for.body72
  %79 = load i32*, i32** %56, align 4
  %80 = load i32, i32* %61, align 4
  %81 = getelementptr inbounds i32, i32* %79, i32 %80
  %82 = load i32, i32* %81, align 4
  %83 = load i32, i32* %59, align 4
  %84 = sub i32 %83, %82
  store i32 %84, i32* %59, align 4
  %85 = load i32*, i32** %56, align 4
  %86 = load i32, i32* %61, align 4
  %87 = getelementptr inbounds i32, i32* %85, i32 %86
  %88 = load i32, i32* %87, align 4
  %89 = sub i32 -1, %88
  %90 = icmp ugt i32 %84, %89
  br i1 %90, label %bn_sub_if.then1075, label %bn_sub_if.else1176

bn_sub_if.then1075:                               ; preds = %bn_sub_if.else74
  store i32 1, i32* %60, align 4
  br label %bn_sub_if.end77

bn_sub_if.else1176:                               ; preds = %bn_sub_if.else74
  store i32 0, i32* %60, align 4
  br label %bn_sub_if.end77

bn_sub_if.end77:                                  ; preds = %bn_sub_if.else1176, %bn_sub_if.then1075
  br label %bn_sub_if.end1278

bn_sub_if.end1278:                                ; preds = %bn_sub_if.end77, %bn_sub_if.then73
  %91 = load i32, i32* %59, align 4
  %92 = load i32*, i32** %58, align 4
  %93 = load i32, i32* %61, align 4
  %94 = getelementptr inbounds i32, i32* %92, i32 %93
  store i32 %91, i32* %94, align 4
  br label %bn_sub_for.inc79

bn_sub_for.inc79:                                 ; preds = %bn_sub_if.end1278
  %95 = load i32, i32* %61, align 4
  %96 = add i32 %95, 1
  store i32 %96, i32* %61, align 4
  br label %bn_sub_for.cond71

bn_sub_for.end80:                                 ; preds = %bn_sub_for.cond71
  %97 = load i32, i32* %60, align 4
  br label %entry.split.split69

entry.split.split69:                              ; preds = %bn_sub_for.end80
  %98 = load i32, i32* %digits.addr, align 4
  %arraydecay4 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_assign_zero_entry

bn_assign_zero_entry:                             ; preds = %entry.split.split69
  %99 = alloca i32, align 4
  %100 = alloca i32*, align 4
  %101 = alloca i32, align 4
  store i32 %98, i32* %99, align 4
  store i32* %arraydecay4, i32** %100, align 4
  store i32 0, i32* %101, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.cond:                          ; preds = %bn_assign_zero_for.inc, %bn_assign_zero_entry
  %102 = load i32, i32* %101, align 4
  %103 = load i32, i32* %99, align 4
  %104 = icmp ult i32 %102, %103
  br i1 %104, label %bn_assign_zero_for.body, label %bn_assign_zero_for.end

bn_assign_zero_for.body:                          ; preds = %bn_assign_zero_for.cond
  %105 = load i32*, i32** %100, align 4
  %106 = load i32, i32* %101, align 4
  %107 = getelementptr inbounds i32, i32* %105, i32 %106
  store i32 0, i32* %107, align 4
  br label %bn_assign_zero_for.inc

bn_assign_zero_for.inc:                           ; preds = %bn_assign_zero_for.body
  %108 = load i32, i32* %101, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* %101, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.end:                           ; preds = %bn_assign_zero_for.cond
  br label %entry.split.split

entry.split.split:                                ; preds = %bn_assign_zero_for.end
  %arrayidx = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  store i32 1, i32* %arrayidx, align 4
  %110 = load i32, i32* %digits.addr, align 4
  %arraydecay5 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay7 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_add_entry36

bn_add_entry36:                                   ; preds = %entry.split.split
  %111 = alloca i32, align 4
  %112 = alloca i32*, align 4
  %113 = alloca i32*, align 4
  %114 = alloca i32*, align 4
  %115 = alloca i32, align 4
  %116 = alloca i32, align 4
  %117 = alloca i32, align 4
  store i32 %110, i32* %111, align 4
  store i32* %arraydecay5, i32** %112, align 4
  store i32* %arraydecay6, i32** %113, align 4
  store i32* %arraydecay7, i32** %114, align 4
  store i32 0, i32* %116, align 4
  store i32 0, i32* %117, align 4
  br label %bn_add_for.cond37

bn_add_for.cond37:                                ; preds = %bn_add_for.inc45, %bn_add_entry36
  %118 = load i32, i32* %117, align 4
  %119 = load i32, i32* %111, align 4
  %120 = icmp ult i32 %118, %119
  br i1 %120, label %bn_add_for.body38, label %bn_add_for.end46

bn_add_for.body38:                                ; preds = %bn_add_for.cond37
  %121 = load i32*, i32** %113, align 4
  %122 = load i32, i32* %117, align 4
  %123 = getelementptr inbounds i32, i32* %121, i32 %122
  %124 = load i32, i32* %123, align 4
  %125 = load i32, i32* %116, align 4
  %126 = add i32 %124, %125
  store i32 %126, i32* %115, align 4
  %127 = load i32, i32* %116, align 4
  %128 = icmp ult i32 %126, %127
  br i1 %128, label %bn_add_if.then39, label %bn_add_if.else40

bn_add_if.then39:                                 ; preds = %bn_add_for.body38
  %129 = load i32*, i32** %112, align 4
  %130 = load i32, i32* %117, align 4
  %131 = getelementptr inbounds i32, i32* %129, i32 %130
  %132 = load i32, i32* %131, align 4
  store i32 %132, i32* %115, align 4
  br label %bn_add_if.end944

bn_add_if.else40:                                 ; preds = %bn_add_for.body38
  %133 = load i32*, i32** %112, align 4
  %134 = load i32, i32* %117, align 4
  %135 = getelementptr inbounds i32, i32* %133, i32 %134
  %136 = load i32, i32* %135, align 4
  %137 = load i32, i32* %115, align 4
  %138 = add i32 %137, %136
  store i32 %138, i32* %115, align 4
  %139 = load i32*, i32** %112, align 4
  %140 = load i32, i32* %117, align 4
  %141 = getelementptr inbounds i32, i32* %139, i32 %140
  %142 = load i32, i32* %141, align 4
  %143 = icmp ult i32 %138, %142
  br i1 %143, label %bn_add_if.then741, label %bn_add_if.else842

bn_add_if.then741:                                ; preds = %bn_add_if.else40
  store i32 1, i32* %116, align 4
  br label %bn_add_if.end43

bn_add_if.else842:                                ; preds = %bn_add_if.else40
  store i32 0, i32* %116, align 4
  br label %bn_add_if.end43

bn_add_if.end43:                                  ; preds = %bn_add_if.else842, %bn_add_if.then741
  br label %bn_add_if.end944

bn_add_if.end944:                                 ; preds = %bn_add_if.end43, %bn_add_if.then39
  %144 = load i32, i32* %115, align 4
  %145 = load i32*, i32** %114, align 4
  %146 = load i32, i32* %117, align 4
  %147 = getelementptr inbounds i32, i32* %145, i32 %146
  store i32 %144, i32* %147, align 4
  br label %bn_add_for.inc45

bn_add_for.inc45:                                 ; preds = %bn_add_if.end944
  %148 = load i32, i32* %117, align 4
  %149 = add i32 %148, 1
  store i32 %149, i32* %117, align 4
  br label %bn_add_for.cond37

bn_add_for.end46:                                 ; preds = %bn_add_for.cond37
  %150 = load i32, i32* %116, align 4
  br label %entry.split.split.split35

entry.split.split.split35:                        ; preds = %bn_add_for.end46
  %151 = load i32, i32* %digits.addr, align 4
  %arraydecay9 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %152 = load i32, i32* %digits.addr, align 4
  %153 = load i32*, i32** %a.addr, align 4
  %154 = load i32*, i32** %a.addr, align 4
  br label %bn_mod_entry102

bn_mod_entry102:                                  ; preds = %entry.split.split.split35
  %155 = alloca i32, align 4
  %156 = alloca i32*, align 4
  %157 = alloca i32, align 4
  %158 = alloca i32*, align 4
  %159 = alloca i32*, align 4
  %160 = alloca [130 x i32], align 4
  store i32 %151, i32* %155, align 4
  store i32* %arraydecay9, i32** %156, align 4
  store i32 %152, i32* %157, align 4
  store i32* %153, i32** %158, align 4
  store i32* %154, i32** %159, align 4
  %161 = bitcast [130 x i32]* %160 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %161, i8 0, i32 520, i1 false)
  %162 = load i32, i32* %155, align 4
  %163 = load i32*, i32** %156, align 4
  %164 = load i32, i32* %157, align 4
  %165 = load i32*, i32** %158, align 4
  %166 = load i32*, i32** %159, align 4
  %167 = getelementptr inbounds [130 x i32], [130 x i32]* %160, i32 0, i32 0
  br label %bn_mod_bn_div_entry103

bn_mod_bn_div_entry103:                           ; preds = %bn_mod_entry102
  %168 = alloca i32, align 4
  %169 = alloca i32*, align 4
  %170 = alloca i32, align 4
  %171 = alloca i32*, align 4
  %172 = alloca i32*, align 4
  %173 = alloca i32*, align 4
  %174 = alloca i64, align 8
  %175 = alloca i32, align 4
  %176 = alloca i32, align 4
  %177 = alloca [131 x i32], align 4
  %178 = alloca [65 x i32], align 4
  %179 = alloca i32, align 4
  %180 = alloca i32, align 4
  %181 = alloca i32, align 4
  store i32 %162, i32* %168, align 4
  store i32* %163, i32** %169, align 4
  store i32 %164, i32* %170, align 4
  store i32* %165, i32** %171, align 4
  store i32* %166, i32** %172, align 4
  store i32* %167, i32** %173, align 4
  %182 = load i32, i32* %168, align 4
  %183 = load i32*, i32** %169, align 4
  br label %bn_mod_bn_div_bn_digits_entry104

bn_mod_bn_div_bn_digits_entry104:                 ; preds = %bn_mod_bn_div_entry103
  %184 = alloca i32, align 4
  %185 = alloca i32*, align 4
  %186 = alloca i32, align 4
  store i32 %182, i32* %184, align 4
  store i32* %183, i32** %185, align 4
  %187 = load i32, i32* %184, align 4
  %188 = sub i32 %187, 1
  store i32 %188, i32* %186, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond105

bn_mod_bn_div_bn_digits_for.cond105:              ; preds = %bn_mod_bn_div_bn_digits_for.inc109, %bn_mod_bn_div_bn_digits_entry104
  %189 = load i32, i32* %186, align 4
  %190 = icmp sge i32 %189, 0
  br i1 %190, label %bn_mod_bn_div_bn_digits_for.body106, label %bn_mod_bn_div_bn_digits_for.end110

bn_mod_bn_div_bn_digits_for.body106:              ; preds = %bn_mod_bn_div_bn_digits_for.cond105
  %191 = load i32*, i32** %185, align 4
  %192 = load i32, i32* %186, align 4
  %193 = getelementptr inbounds i32, i32* %191, i32 %192
  %194 = load i32, i32* %193, align 4
  %195 = icmp ne i32 %194, 0
  br i1 %195, label %bn_mod_bn_div_bn_digits_if.then107, label %bn_mod_bn_div_bn_digits_if.end108

bn_mod_bn_div_bn_digits_if.then107:               ; preds = %bn_mod_bn_div_bn_digits_for.body106
  br label %bn_mod_bn_div_bn_digits_for.end110

bn_mod_bn_div_bn_digits_if.end108:                ; preds = %bn_mod_bn_div_bn_digits_for.body106
  br label %bn_mod_bn_div_bn_digits_for.inc109

bn_mod_bn_div_bn_digits_for.inc109:               ; preds = %bn_mod_bn_div_bn_digits_if.end108
  %196 = load i32, i32* %186, align 4
  %197 = add nsw i32 %196, -1
  store i32 %197, i32* %186, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond105

bn_mod_bn_div_bn_digits_for.end110:               ; preds = %bn_mod_bn_div_bn_digits_if.then107, %bn_mod_bn_div_bn_digits_for.cond105
  %198 = load i32, i32* %186, align 4
  %199 = add nsw i32 %198, 1
  br label %bn_mod_bn_div_entry.split111

bn_mod_bn_div_entry.split111:                     ; preds = %bn_mod_bn_div_bn_digits_for.end110
  store i32 %199, i32* %180, align 4
  %200 = load i32, i32* %180, align 4
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %bn_mod_bn_div_if.then112, label %bn_mod_bn_div_if.end113

bn_mod_bn_div_if.then112:                         ; preds = %bn_mod_bn_div_entry.split111
  br label %bn_mod_bn_div_return167

bn_mod_bn_div_if.end113:                          ; preds = %bn_mod_bn_div_entry.split111
  %202 = load i32*, i32** %169, align 4
  %203 = load i32, i32* %180, align 4
  %204 = sub i32 %203, 1
  %205 = getelementptr inbounds i32, i32* %202, i32 %204
  %206 = load i32, i32* %205, align 4
  %207 = call i32 @bn_digit_bits(i32 %206)
  %208 = sub i32 32, %207
  store i32 %208, i32* %181, align 4
  %209 = load i32, i32* %180, align 4
  %210 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7114

bn_mod_bn_div_bn_assign_zero_entry7114:           ; preds = %bn_mod_bn_div_if.end113
  %211 = alloca i32, align 4
  %212 = alloca i32*, align 4
  %213 = alloca i32, align 4
  store i32 %209, i32* %211, align 4
  store i32* %210, i32** %212, align 4
  store i32 0, i32* %213, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8115

bn_mod_bn_div_bn_assign_zero_for.cond8115:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc10117, %bn_mod_bn_div_bn_assign_zero_entry7114
  %214 = load i32, i32* %213, align 4
  %215 = load i32, i32* %211, align 4
  %216 = icmp ult i32 %214, %215
  br i1 %216, label %bn_mod_bn_div_bn_assign_zero_for.body9116, label %bn_mod_bn_div_bn_assign_zero_for.end11118

bn_mod_bn_div_bn_assign_zero_for.body9116:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8115
  %217 = load i32*, i32** %212, align 4
  %218 = load i32, i32* %213, align 4
  %219 = getelementptr inbounds i32, i32* %217, i32 %218
  store i32 0, i32* %219, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc10117

bn_mod_bn_div_bn_assign_zero_for.inc10117:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.body9116
  %220 = load i32, i32* %213, align 4
  %221 = add i32 %220, 1
  store i32 %221, i32* %213, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8115

bn_mod_bn_div_bn_assign_zero_for.end11118:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8115
  br label %bn_mod_bn_div_if.end.split6119

bn_mod_bn_div_if.end.split6119:                   ; preds = %bn_mod_bn_div_bn_assign_zero_for.end11118
  %222 = load i32, i32* %170, align 4
  %223 = load i32, i32* %181, align 4
  %224 = load i32*, i32** %171, align 4
  %225 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 0
  %226 = call i32 @bn_shift_l(i32* %225, i32* %224, i32 %223, i32 %222)
  %227 = load i32, i32* %170, align 4
  %228 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %227
  store i32 %226, i32* %228, align 4
  %229 = load i32, i32* %180, align 4
  %230 = load i32, i32* %181, align 4
  %231 = load i32*, i32** %169, align 4
  %232 = getelementptr inbounds [65 x i32], [65 x i32]* %178, i32 0, i32 0
  %233 = call i32 @bn_shift_l(i32* %232, i32* %231, i32 %230, i32 %229)
  %234 = load i32, i32* %180, align 4
  %235 = sub i32 %234, 1
  %236 = getelementptr inbounds [65 x i32], [65 x i32]* %178, i32 0, i32 %235
  %237 = load i32, i32* %236, align 4
  store i32 %237, i32* %176, align 4
  %238 = load i32, i32* %170, align 4
  %239 = load i32*, i32** %173, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1120

bn_mod_bn_div_bn_assign_zero_entry1120:           ; preds = %bn_mod_bn_div_if.end.split6119
  %240 = alloca i32, align 4
  %241 = alloca i32*, align 4
  %242 = alloca i32, align 4
  store i32 %238, i32* %240, align 4
  store i32* %239, i32** %241, align 4
  store i32 0, i32* %242, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2121

bn_mod_bn_div_bn_assign_zero_for.cond2121:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc4123, %bn_mod_bn_div_bn_assign_zero_entry1120
  %243 = load i32, i32* %242, align 4
  %244 = load i32, i32* %240, align 4
  %245 = icmp ult i32 %243, %244
  br i1 %245, label %bn_mod_bn_div_bn_assign_zero_for.body3122, label %bn_mod_bn_div_bn_assign_zero_for.end5124

bn_mod_bn_div_bn_assign_zero_for.body3122:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2121
  %246 = load i32*, i32** %241, align 4
  %247 = load i32, i32* %242, align 4
  %248 = getelementptr inbounds i32, i32* %246, i32 %247
  store i32 0, i32* %248, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc4123

bn_mod_bn_div_bn_assign_zero_for.inc4123:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.body3122
  %249 = load i32, i32* %242, align 4
  %250 = add i32 %249, 1
  store i32 %250, i32* %242, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2121

bn_mod_bn_div_bn_assign_zero_for.end5124:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2121
  br label %bn_mod_bn_div_if.end.split125

bn_mod_bn_div_if.end.split125:                    ; preds = %bn_mod_bn_div_bn_assign_zero_for.end5124
  %251 = load i32, i32* %170, align 4
  %252 = load i32, i32* %180, align 4
  %253 = sub i32 %251, %252
  store i32 %253, i32* %179, align 4
  br label %bn_mod_bn_div_for.cond126

bn_mod_bn_div_for.cond126:                        ; preds = %bn_mod_bn_div_for.inc159, %bn_mod_bn_div_if.end.split125
  %254 = load i32, i32* %179, align 4
  %255 = icmp sge i32 %254, 0
  br i1 %255, label %bn_mod_bn_div_for.body127, label %bn_mod_bn_div_for.end160

bn_mod_bn_div_for.body127:                        ; preds = %bn_mod_bn_div_for.cond126
  %256 = load i32, i32* %176, align 4
  %257 = icmp eq i32 %256, -1
  br i1 %257, label %bn_mod_bn_div_if.then13128, label %bn_mod_bn_div_if.else129

bn_mod_bn_div_if.then13128:                       ; preds = %bn_mod_bn_div_for.body127
  %258 = load i32, i32* %179, align 4
  %259 = load i32, i32* %180, align 4
  %260 = add i32 %258, %259
  %261 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %260
  %262 = load i32, i32* %261, align 4
  store i32 %262, i32* %175, align 4
  br label %bn_mod_bn_div_if.end25130

bn_mod_bn_div_if.else129:                         ; preds = %bn_mod_bn_div_for.body127
  %263 = load i32, i32* %179, align 4
  %264 = load i32, i32* %180, align 4
  %265 = add i32 %263, %264
  %266 = sub i32 %265, 1
  %267 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %266
  %268 = load i32, i32* %267, align 4
  %269 = zext i32 %268 to i64
  store i64 %269, i64* %174, align 8
  %270 = load i32, i32* %179, align 4
  %271 = load i32, i32* %180, align 4
  %272 = add i32 %270, %271
  %273 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %272
  %274 = load i32, i32* %273, align 4
  %275 = zext i32 %274 to i64
  %276 = shl i64 %275, 32
  %277 = load i64, i64* %174, align 8
  %278 = add i64 %277, %276
  store i64 %278, i64* %174, align 8
  %279 = load i64, i64* %174, align 8
  %280 = load i32, i32* %176, align 4
  %281 = add i32 %280, 1
  %282 = zext i32 %281 to i64
  %283 = udiv i64 %279, %282
  %284 = trunc i64 %283 to i32
  store i32 %284, i32* %175, align 4
  br label %bn_mod_bn_div_if.end25130

bn_mod_bn_div_if.end25130:                        ; preds = %bn_mod_bn_div_if.else129, %bn_mod_bn_div_if.then13128
  %285 = load i32, i32* %180, align 4
  %286 = getelementptr inbounds [65 x i32], [65 x i32]* %178, i32 0, i32 0
  %287 = load i32, i32* %175, align 4
  %288 = load i32, i32* %179, align 4
  %289 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %288
  %290 = load i32, i32* %179, align 4
  %291 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %290
  %292 = call i32 @bn_sub_digit_mul(i32* %291, i32* %289, i32 %287, i32* %286, i32 %285)
  %293 = load i32, i32* %179, align 4
  %294 = load i32, i32* %180, align 4
  %295 = add i32 %293, %294
  %296 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %295
  %297 = load i32, i32* %296, align 4
  %298 = sub i32 %297, %292
  store i32 %298, i32* %296, align 4
  br label %bn_mod_bn_div_while.cond131

bn_mod_bn_div_while.cond131:                      ; preds = %bn_mod_bn_div_while.body.split157, %bn_mod_bn_div_if.end25130
  %299 = load i32, i32* %179, align 4
  %300 = load i32, i32* %180, align 4
  %301 = add i32 %299, %300
  %302 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %301
  %303 = load i32, i32* %302, align 4
  %304 = icmp ne i32 %303, 0
  br i1 %304, label %bn_mod_bn_div_lor.end144, label %bn_mod_bn_div_lor.rhs132

bn_mod_bn_div_lor.rhs132:                         ; preds = %bn_mod_bn_div_while.cond131
  %305 = load i32, i32* %180, align 4
  %306 = getelementptr inbounds [65 x i32], [65 x i32]* %178, i32 0, i32 0
  %307 = load i32, i32* %179, align 4
  %308 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %307
  br label %bn_mod_bn_cmp_entry133

bn_mod_bn_cmp_entry133:                           ; preds = %bn_mod_bn_div_lor.rhs132
  %309 = alloca i32, align 4
  %310 = alloca i32, align 4
  %311 = alloca i32*, align 4
  %312 = alloca i32*, align 4
  %313 = alloca i32, align 4
  store i32 %305, i32* %310, align 4
  store i32* %306, i32** %311, align 4
  store i32* %308, i32** %312, align 4
  %314 = load i32, i32* %310, align 4
  %315 = sub i32 %314, 1
  store i32 %315, i32* %313, align 4
  br label %bn_mod_bn_cmp_for.cond134

bn_mod_bn_cmp_for.cond134:                        ; preds = %bn_mod_bn_cmp_for.inc140, %bn_mod_bn_cmp_entry133
  %316 = load i32, i32* %313, align 4
  %317 = icmp sge i32 %316, 0
  br i1 %317, label %bn_mod_bn_cmp_for.body135, label %bn_mod_bn_cmp_for.end141

bn_mod_bn_cmp_for.body135:                        ; preds = %bn_mod_bn_cmp_for.cond134
  %318 = load i32*, i32** %312, align 4
  %319 = load i32, i32* %313, align 4
  %320 = getelementptr inbounds i32, i32* %318, i32 %319
  %321 = load i32, i32* %320, align 4
  %322 = load i32*, i32** %311, align 4
  %323 = load i32, i32* %313, align 4
  %324 = getelementptr inbounds i32, i32* %322, i32 %323
  %325 = load i32, i32* %324, align 4
  %326 = icmp ugt i32 %321, %325
  br i1 %326, label %bn_mod_bn_cmp_if.then136, label %bn_mod_bn_cmp_if.end137

bn_mod_bn_cmp_if.then136:                         ; preds = %bn_mod_bn_cmp_for.body135
  store i32 1, i32* %309, align 4
  br label %bn_mod_bn_cmp_return142

bn_mod_bn_cmp_if.end137:                          ; preds = %bn_mod_bn_cmp_for.body135
  %327 = load i32*, i32** %312, align 4
  %328 = load i32, i32* %313, align 4
  %329 = getelementptr inbounds i32, i32* %327, i32 %328
  %330 = load i32, i32* %329, align 4
  %331 = load i32*, i32** %311, align 4
  %332 = load i32, i32* %313, align 4
  %333 = getelementptr inbounds i32, i32* %331, i32 %332
  %334 = load i32, i32* %333, align 4
  %335 = icmp ult i32 %330, %334
  br i1 %335, label %bn_mod_bn_cmp_if.then6138, label %bn_mod_bn_cmp_if.end7139

bn_mod_bn_cmp_if.then6138:                        ; preds = %bn_mod_bn_cmp_if.end137
  store i32 -1, i32* %309, align 4
  br label %bn_mod_bn_cmp_return142

bn_mod_bn_cmp_if.end7139:                         ; preds = %bn_mod_bn_cmp_if.end137
  br label %bn_mod_bn_cmp_for.inc140

bn_mod_bn_cmp_for.inc140:                         ; preds = %bn_mod_bn_cmp_if.end7139
  %336 = load i32, i32* %313, align 4
  %337 = add nsw i32 %336, -1
  store i32 %337, i32* %313, align 4
  br label %bn_mod_bn_cmp_for.cond134

bn_mod_bn_cmp_for.end141:                         ; preds = %bn_mod_bn_cmp_for.cond134
  store i32 0, i32* %309, align 4
  br label %bn_mod_bn_cmp_return142

bn_mod_bn_cmp_return142:                          ; preds = %bn_mod_bn_cmp_for.end141, %bn_mod_bn_cmp_if.then6138, %bn_mod_bn_cmp_if.then136
  %338 = load i32, i32* %309, align 4
  br label %bn_mod_bn_div_lor.rhs.split143

bn_mod_bn_div_lor.rhs.split143:                   ; preds = %bn_mod_bn_cmp_return142
  %339 = icmp sge i32 %338, 0
  br label %bn_mod_bn_div_lor.end144

bn_mod_bn_div_lor.end144:                         ; preds = %bn_mod_bn_div_lor.rhs.split143, %bn_mod_bn_div_while.cond131
  %340 = phi i1 [ true, %bn_mod_bn_div_while.cond131 ], [ %339, %bn_mod_bn_div_lor.rhs.split143 ]
  br i1 %340, label %bn_mod_bn_div_while.body145, label %bn_mod_bn_div_while.end158

bn_mod_bn_div_while.body145:                      ; preds = %bn_mod_bn_div_lor.end144
  %341 = load i32, i32* %175, align 4
  %342 = add i32 %341, 1
  store i32 %342, i32* %175, align 4
  %343 = load i32, i32* %180, align 4
  %344 = getelementptr inbounds [65 x i32], [65 x i32]* %178, i32 0, i32 0
  %345 = load i32, i32* %179, align 4
  %346 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %345
  %347 = load i32, i32* %179, align 4
  %348 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %347
  br label %bn_mod_bn_div_bn_sub_entry146

bn_mod_bn_div_bn_sub_entry146:                    ; preds = %bn_mod_bn_div_while.body145
  %349 = alloca i32, align 4
  %350 = alloca i32*, align 4
  %351 = alloca i32*, align 4
  %352 = alloca i32*, align 4
  %353 = alloca i32, align 4
  %354 = alloca i32, align 4
  %355 = alloca i32, align 4
  store i32 %343, i32* %349, align 4
  store i32* %344, i32** %350, align 4
  store i32* %346, i32** %351, align 4
  store i32* %348, i32** %352, align 4
  store i32 0, i32* %354, align 4
  store i32 0, i32* %355, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond147

bn_mod_bn_div_bn_sub_for.cond147:                 ; preds = %bn_mod_bn_div_bn_sub_for.inc155, %bn_mod_bn_div_bn_sub_entry146
  %356 = load i32, i32* %355, align 4
  %357 = load i32, i32* %349, align 4
  %358 = icmp ult i32 %356, %357
  br i1 %358, label %bn_mod_bn_div_bn_sub_for.body148, label %bn_mod_bn_div_bn_sub_for.end156

bn_mod_bn_div_bn_sub_for.body148:                 ; preds = %bn_mod_bn_div_bn_sub_for.cond147
  %359 = load i32*, i32** %351, align 4
  %360 = load i32, i32* %355, align 4
  %361 = getelementptr inbounds i32, i32* %359, i32 %360
  %362 = load i32, i32* %361, align 4
  %363 = load i32, i32* %354, align 4
  %364 = sub i32 %362, %363
  store i32 %364, i32* %353, align 4
  %365 = load i32, i32* %354, align 4
  %366 = sub i32 -1, %365
  %367 = icmp ugt i32 %364, %366
  br i1 %367, label %bn_mod_bn_div_bn_sub_if.then149, label %bn_mod_bn_div_bn_sub_if.else150

bn_mod_bn_div_bn_sub_if.then149:                  ; preds = %bn_mod_bn_div_bn_sub_for.body148
  %368 = load i32*, i32** %350, align 4
  %369 = load i32, i32* %355, align 4
  %370 = getelementptr inbounds i32, i32* %368, i32 %369
  %371 = load i32, i32* %370, align 4
  %372 = sub i32 -1, %371
  store i32 %372, i32* %353, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12154

bn_mod_bn_div_bn_sub_if.else150:                  ; preds = %bn_mod_bn_div_bn_sub_for.body148
  %373 = load i32*, i32** %350, align 4
  %374 = load i32, i32* %355, align 4
  %375 = getelementptr inbounds i32, i32* %373, i32 %374
  %376 = load i32, i32* %375, align 4
  %377 = load i32, i32* %353, align 4
  %378 = sub i32 %377, %376
  store i32 %378, i32* %353, align 4
  %379 = load i32*, i32** %350, align 4
  %380 = load i32, i32* %355, align 4
  %381 = getelementptr inbounds i32, i32* %379, i32 %380
  %382 = load i32, i32* %381, align 4
  %383 = sub i32 -1, %382
  %384 = icmp ugt i32 %378, %383
  br i1 %384, label %bn_mod_bn_div_bn_sub_if.then10151, label %bn_mod_bn_div_bn_sub_if.else11152

bn_mod_bn_div_bn_sub_if.then10151:                ; preds = %bn_mod_bn_div_bn_sub_if.else150
  store i32 1, i32* %354, align 4
  br label %bn_mod_bn_div_bn_sub_if.end153

bn_mod_bn_div_bn_sub_if.else11152:                ; preds = %bn_mod_bn_div_bn_sub_if.else150
  store i32 0, i32* %354, align 4
  br label %bn_mod_bn_div_bn_sub_if.end153

bn_mod_bn_div_bn_sub_if.end153:                   ; preds = %bn_mod_bn_div_bn_sub_if.else11152, %bn_mod_bn_div_bn_sub_if.then10151
  br label %bn_mod_bn_div_bn_sub_if.end12154

bn_mod_bn_div_bn_sub_if.end12154:                 ; preds = %bn_mod_bn_div_bn_sub_if.end153, %bn_mod_bn_div_bn_sub_if.then149
  %385 = load i32, i32* %353, align 4
  %386 = load i32*, i32** %352, align 4
  %387 = load i32, i32* %355, align 4
  %388 = getelementptr inbounds i32, i32* %386, i32 %387
  store i32 %385, i32* %388, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc155

bn_mod_bn_div_bn_sub_for.inc155:                  ; preds = %bn_mod_bn_div_bn_sub_if.end12154
  %389 = load i32, i32* %355, align 4
  %390 = add i32 %389, 1
  store i32 %390, i32* %355, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond147

bn_mod_bn_div_bn_sub_for.end156:                  ; preds = %bn_mod_bn_div_bn_sub_for.cond147
  %391 = load i32, i32* %354, align 4
  br label %bn_mod_bn_div_while.body.split157

bn_mod_bn_div_while.body.split157:                ; preds = %bn_mod_bn_div_bn_sub_for.end156
  %392 = load i32, i32* %179, align 4
  %393 = load i32, i32* %180, align 4
  %394 = add i32 %392, %393
  %395 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 %394
  %396 = load i32, i32* %395, align 4
  %397 = sub i32 %396, %391
  store i32 %397, i32* %395, align 4
  br label %bn_mod_bn_div_while.cond131

bn_mod_bn_div_while.end158:                       ; preds = %bn_mod_bn_div_lor.end144
  %398 = load i32, i32* %175, align 4
  %399 = load i32*, i32** %173, align 4
  %400 = load i32, i32* %179, align 4
  %401 = getelementptr inbounds i32, i32* %399, i32 %400
  store i32 %398, i32* %401, align 4
  br label %bn_mod_bn_div_for.inc159

bn_mod_bn_div_for.inc159:                         ; preds = %bn_mod_bn_div_while.end158
  %402 = load i32, i32* %179, align 4
  %403 = add nsw i32 %402, -1
  store i32 %403, i32* %179, align 4
  br label %bn_mod_bn_div_for.cond126

bn_mod_bn_div_for.end160:                         ; preds = %bn_mod_bn_div_for.cond126
  %404 = load i32, i32* %168, align 4
  %405 = load i32*, i32** %172, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry161

bn_mod_bn_div_bn_assign_zero_entry161:            ; preds = %bn_mod_bn_div_for.end160
  %406 = alloca i32, align 4
  %407 = alloca i32*, align 4
  %408 = alloca i32, align 4
  store i32 %404, i32* %406, align 4
  store i32* %405, i32** %407, align 4
  store i32 0, i32* %408, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond162

bn_mod_bn_div_bn_assign_zero_for.cond162:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc164, %bn_mod_bn_div_bn_assign_zero_entry161
  %409 = load i32, i32* %408, align 4
  %410 = load i32, i32* %406, align 4
  %411 = icmp ult i32 %409, %410
  br i1 %411, label %bn_mod_bn_div_bn_assign_zero_for.body163, label %bn_mod_bn_div_bn_assign_zero_for.end165

bn_mod_bn_div_bn_assign_zero_for.body163:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond162
  %412 = load i32*, i32** %407, align 4
  %413 = load i32, i32* %408, align 4
  %414 = getelementptr inbounds i32, i32* %412, i32 %413
  store i32 0, i32* %414, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc164

bn_mod_bn_div_bn_assign_zero_for.inc164:          ; preds = %bn_mod_bn_div_bn_assign_zero_for.body163
  %415 = load i32, i32* %408, align 4
  %416 = add i32 %415, 1
  store i32 %416, i32* %408, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond162

bn_mod_bn_div_bn_assign_zero_for.end165:          ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond162
  br label %bn_mod_bn_div_for.end.split166

bn_mod_bn_div_for.end.split166:                   ; preds = %bn_mod_bn_div_bn_assign_zero_for.end165
  %417 = load i32, i32* %180, align 4
  %418 = load i32, i32* %181, align 4
  %419 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 0
  %420 = load i32*, i32** %172, align 4
  %421 = call i32 @bn_shift_r(i32* %420, i32* %419, i32 %418, i32 %417)
  %422 = getelementptr inbounds [131 x i32], [131 x i32]* %177, i32 0, i32 0
  %423 = bitcast i32* %422 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %423, i8 0, i32 524, i1 false)
  %424 = getelementptr inbounds [65 x i32], [65 x i32]* %178, i32 0, i32 0
  %425 = bitcast i32* %424 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %425, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return167

bn_mod_bn_div_return167:                          ; preds = %bn_mod_bn_div_for.end.split166, %bn_mod_bn_div_if.then112
  br label %bn_mod_entry.split168

bn_mod_entry.split168:                            ; preds = %bn_mod_bn_div_return167
  %426 = getelementptr inbounds [130 x i32], [130 x i32]* %160, i32 0, i32 0
  %427 = bitcast i32* %426 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %427, i8 0, i32 520, i1 false)
  br label %entry.split.split.split35.split

entry.split.split.split35.split:                  ; preds = %bn_mod_entry.split168
  %428 = load i32, i32* %digits.addr, align 4
  %429 = load i32*, i32** %lower.addr, align 4
  %430 = load i32*, i32** %a.addr, align 4
  %431 = load i32*, i32** %a.addr, align 4
  br label %bn_add_entry24

bn_add_entry24:                                   ; preds = %entry.split.split.split35.split
  %432 = alloca i32, align 4
  %433 = alloca i32*, align 4
  %434 = alloca i32*, align 4
  %435 = alloca i32*, align 4
  %436 = alloca i32, align 4
  %437 = alloca i32, align 4
  %438 = alloca i32, align 4
  store i32 %428, i32* %432, align 4
  store i32* %429, i32** %433, align 4
  store i32* %430, i32** %434, align 4
  store i32* %431, i32** %435, align 4
  store i32 0, i32* %437, align 4
  store i32 0, i32* %438, align 4
  br label %bn_add_for.cond25

bn_add_for.cond25:                                ; preds = %bn_add_for.inc33, %bn_add_entry24
  %439 = load i32, i32* %438, align 4
  %440 = load i32, i32* %432, align 4
  %441 = icmp ult i32 %439, %440
  br i1 %441, label %bn_add_for.body26, label %bn_add_for.end34

bn_add_for.body26:                                ; preds = %bn_add_for.cond25
  %442 = load i32*, i32** %434, align 4
  %443 = load i32, i32* %438, align 4
  %444 = getelementptr inbounds i32, i32* %442, i32 %443
  %445 = load i32, i32* %444, align 4
  %446 = load i32, i32* %437, align 4
  %447 = add i32 %445, %446
  store i32 %447, i32* %436, align 4
  %448 = load i32, i32* %437, align 4
  %449 = icmp ult i32 %447, %448
  br i1 %449, label %bn_add_if.then27, label %bn_add_if.else28

bn_add_if.then27:                                 ; preds = %bn_add_for.body26
  %450 = load i32*, i32** %433, align 4
  %451 = load i32, i32* %438, align 4
  %452 = getelementptr inbounds i32, i32* %450, i32 %451
  %453 = load i32, i32* %452, align 4
  store i32 %453, i32* %436, align 4
  br label %bn_add_if.end932

bn_add_if.else28:                                 ; preds = %bn_add_for.body26
  %454 = load i32*, i32** %433, align 4
  %455 = load i32, i32* %438, align 4
  %456 = getelementptr inbounds i32, i32* %454, i32 %455
  %457 = load i32, i32* %456, align 4
  %458 = load i32, i32* %436, align 4
  %459 = add i32 %458, %457
  store i32 %459, i32* %436, align 4
  %460 = load i32*, i32** %433, align 4
  %461 = load i32, i32* %438, align 4
  %462 = getelementptr inbounds i32, i32* %460, i32 %461
  %463 = load i32, i32* %462, align 4
  %464 = icmp ult i32 %459, %463
  br i1 %464, label %bn_add_if.then729, label %bn_add_if.else830

bn_add_if.then729:                                ; preds = %bn_add_if.else28
  store i32 1, i32* %437, align 4
  br label %bn_add_if.end31

bn_add_if.else830:                                ; preds = %bn_add_if.else28
  store i32 0, i32* %437, align 4
  br label %bn_add_if.end31

bn_add_if.end31:                                  ; preds = %bn_add_if.else830, %bn_add_if.then729
  br label %bn_add_if.end932

bn_add_if.end932:                                 ; preds = %bn_add_if.end31, %bn_add_if.then27
  %465 = load i32, i32* %436, align 4
  %466 = load i32*, i32** %435, align 4
  %467 = load i32, i32* %438, align 4
  %468 = getelementptr inbounds i32, i32* %466, i32 %467
  store i32 %465, i32* %468, align 4
  br label %bn_add_for.inc33

bn_add_for.inc33:                                 ; preds = %bn_add_if.end932
  %469 = load i32, i32* %438, align 4
  %470 = add i32 %469, 1
  store i32 %470, i32* %438, align 4
  br label %bn_add_for.cond25

bn_add_for.end34:                                 ; preds = %bn_add_for.cond25
  %471 = load i32, i32* %437, align 4
  br label %entry.split.split.split23

entry.split.split.split23:                        ; preds = %bn_add_for.end34
  %472 = load i32, i32* %digits.addr, align 4
  %473 = load i32*, i32** %d.addr, align 4
  %474 = load i32, i32* %digits.addr, align 4
  %475 = load i32*, i32** %a.addr, align 4
  %arraydecay11 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_mod_entry

bn_mod_entry:                                     ; preds = %entry.split.split.split23
  %476 = alloca i32, align 4
  %477 = alloca i32*, align 4
  %478 = alloca i32, align 4
  %479 = alloca i32*, align 4
  %480 = alloca i32*, align 4
  %481 = alloca [130 x i32], align 4
  store i32 %472, i32* %476, align 4
  store i32* %473, i32** %477, align 4
  store i32 %474, i32* %478, align 4
  store i32* %475, i32** %479, align 4
  store i32* %arraydecay11, i32** %480, align 4
  %482 = bitcast [130 x i32]* %481 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %482, i8 0, i32 520, i1 false)
  %483 = load i32, i32* %476, align 4
  %484 = load i32*, i32** %477, align 4
  %485 = load i32, i32* %478, align 4
  %486 = load i32*, i32** %479, align 4
  %487 = load i32*, i32** %480, align 4
  %488 = getelementptr inbounds [130 x i32], [130 x i32]* %481, i32 0, i32 0
  br label %bn_mod_bn_div_entry

bn_mod_bn_div_entry:                              ; preds = %bn_mod_entry
  %489 = alloca i32, align 4
  %490 = alloca i32*, align 4
  %491 = alloca i32, align 4
  %492 = alloca i32*, align 4
  %493 = alloca i32*, align 4
  %494 = alloca i32*, align 4
  %495 = alloca i64, align 8
  %496 = alloca i32, align 4
  %497 = alloca i32, align 4
  %498 = alloca [131 x i32], align 4
  %499 = alloca [65 x i32], align 4
  %500 = alloca i32, align 4
  %501 = alloca i32, align 4
  %502 = alloca i32, align 4
  store i32 %483, i32* %489, align 4
  store i32* %484, i32** %490, align 4
  store i32 %485, i32* %491, align 4
  store i32* %486, i32** %492, align 4
  store i32* %487, i32** %493, align 4
  store i32* %488, i32** %494, align 4
  %503 = load i32, i32* %489, align 4
  %504 = load i32*, i32** %490, align 4
  br label %bn_mod_bn_div_bn_digits_entry

bn_mod_bn_div_bn_digits_entry:                    ; preds = %bn_mod_bn_div_entry
  %505 = alloca i32, align 4
  %506 = alloca i32*, align 4
  %507 = alloca i32, align 4
  store i32 %503, i32* %505, align 4
  store i32* %504, i32** %506, align 4
  %508 = load i32, i32* %505, align 4
  %509 = sub i32 %508, 1
  store i32 %509, i32* %507, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.cond:                 ; preds = %bn_mod_bn_div_bn_digits_for.inc, %bn_mod_bn_div_bn_digits_entry
  %510 = load i32, i32* %507, align 4
  %511 = icmp sge i32 %510, 0
  br i1 %511, label %bn_mod_bn_div_bn_digits_for.body, label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_for.body:                 ; preds = %bn_mod_bn_div_bn_digits_for.cond
  %512 = load i32*, i32** %506, align 4
  %513 = load i32, i32* %507, align 4
  %514 = getelementptr inbounds i32, i32* %512, i32 %513
  %515 = load i32, i32* %514, align 4
  %516 = icmp ne i32 %515, 0
  br i1 %516, label %bn_mod_bn_div_bn_digits_if.then, label %bn_mod_bn_div_bn_digits_if.end

bn_mod_bn_div_bn_digits_if.then:                  ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_if.end:                   ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.inc

bn_mod_bn_div_bn_digits_for.inc:                  ; preds = %bn_mod_bn_div_bn_digits_if.end
  %517 = load i32, i32* %507, align 4
  %518 = add nsw i32 %517, -1
  store i32 %518, i32* %507, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.end:                  ; preds = %bn_mod_bn_div_bn_digits_if.then, %bn_mod_bn_div_bn_digits_for.cond
  %519 = load i32, i32* %507, align 4
  %520 = add nsw i32 %519, 1
  br label %bn_mod_bn_div_entry.split

bn_mod_bn_div_entry.split:                        ; preds = %bn_mod_bn_div_bn_digits_for.end
  store i32 %520, i32* %501, align 4
  %521 = load i32, i32* %501, align 4
  %522 = icmp eq i32 %521, 0
  br i1 %522, label %bn_mod_bn_div_if.then, label %bn_mod_bn_div_if.end

bn_mod_bn_div_if.then:                            ; preds = %bn_mod_bn_div_entry.split
  br label %bn_mod_bn_div_return

bn_mod_bn_div_if.end:                             ; preds = %bn_mod_bn_div_entry.split
  %523 = load i32*, i32** %490, align 4
  %524 = load i32, i32* %501, align 4
  %525 = sub i32 %524, 1
  %526 = getelementptr inbounds i32, i32* %523, i32 %525
  %527 = load i32, i32* %526, align 4
  %528 = call i32 @bn_digit_bits(i32 %527)
  %529 = sub i32 32, %528
  store i32 %529, i32* %502, align 4
  %530 = load i32, i32* %501, align 4
  %531 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7

bn_mod_bn_div_bn_assign_zero_entry7:              ; preds = %bn_mod_bn_div_if.end
  %532 = alloca i32, align 4
  %533 = alloca i32*, align 4
  %534 = alloca i32, align 4
  store i32 %530, i32* %532, align 4
  store i32* %531, i32** %533, align 4
  store i32 0, i32* %534, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.cond8:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc10, %bn_mod_bn_div_bn_assign_zero_entry7
  %535 = load i32, i32* %534, align 4
  %536 = load i32, i32* %532, align 4
  %537 = icmp ult i32 %535, %536
  br i1 %537, label %bn_mod_bn_div_bn_assign_zero_for.body9, label %bn_mod_bn_div_bn_assign_zero_for.end11

bn_mod_bn_div_bn_assign_zero_for.body9:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  %538 = load i32*, i32** %533, align 4
  %539 = load i32, i32* %534, align 4
  %540 = getelementptr inbounds i32, i32* %538, i32 %539
  store i32 0, i32* %540, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc10

bn_mod_bn_div_bn_assign_zero_for.inc10:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.body9
  %541 = load i32, i32* %534, align 4
  %542 = add i32 %541, 1
  store i32 %542, i32* %534, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.end11:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  br label %bn_mod_bn_div_if.end.split6

bn_mod_bn_div_if.end.split6:                      ; preds = %bn_mod_bn_div_bn_assign_zero_for.end11
  %543 = load i32, i32* %491, align 4
  %544 = load i32, i32* %502, align 4
  %545 = load i32*, i32** %492, align 4
  %546 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 0
  %547 = call i32 @bn_shift_l(i32* %546, i32* %545, i32 %544, i32 %543)
  %548 = load i32, i32* %491, align 4
  %549 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %548
  store i32 %547, i32* %549, align 4
  %550 = load i32, i32* %501, align 4
  %551 = load i32, i32* %502, align 4
  %552 = load i32*, i32** %490, align 4
  %553 = getelementptr inbounds [65 x i32], [65 x i32]* %499, i32 0, i32 0
  %554 = call i32 @bn_shift_l(i32* %553, i32* %552, i32 %551, i32 %550)
  %555 = load i32, i32* %501, align 4
  %556 = sub i32 %555, 1
  %557 = getelementptr inbounds [65 x i32], [65 x i32]* %499, i32 0, i32 %556
  %558 = load i32, i32* %557, align 4
  store i32 %558, i32* %497, align 4
  %559 = load i32, i32* %491, align 4
  %560 = load i32*, i32** %494, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1

bn_mod_bn_div_bn_assign_zero_entry1:              ; preds = %bn_mod_bn_div_if.end.split6
  %561 = alloca i32, align 4
  %562 = alloca i32*, align 4
  %563 = alloca i32, align 4
  store i32 %559, i32* %561, align 4
  store i32* %560, i32** %562, align 4
  store i32 0, i32* %563, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.cond2:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc4, %bn_mod_bn_div_bn_assign_zero_entry1
  %564 = load i32, i32* %563, align 4
  %565 = load i32, i32* %561, align 4
  %566 = icmp ult i32 %564, %565
  br i1 %566, label %bn_mod_bn_div_bn_assign_zero_for.body3, label %bn_mod_bn_div_bn_assign_zero_for.end5

bn_mod_bn_div_bn_assign_zero_for.body3:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  %567 = load i32*, i32** %562, align 4
  %568 = load i32, i32* %563, align 4
  %569 = getelementptr inbounds i32, i32* %567, i32 %568
  store i32 0, i32* %569, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc4

bn_mod_bn_div_bn_assign_zero_for.inc4:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.body3
  %570 = load i32, i32* %563, align 4
  %571 = add i32 %570, 1
  store i32 %571, i32* %563, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.end5:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  br label %bn_mod_bn_div_if.end.split

bn_mod_bn_div_if.end.split:                       ; preds = %bn_mod_bn_div_bn_assign_zero_for.end5
  %572 = load i32, i32* %491, align 4
  %573 = load i32, i32* %501, align 4
  %574 = sub i32 %572, %573
  store i32 %574, i32* %500, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.cond:                           ; preds = %bn_mod_bn_div_for.inc, %bn_mod_bn_div_if.end.split
  %575 = load i32, i32* %500, align 4
  %576 = icmp sge i32 %575, 0
  br i1 %576, label %bn_mod_bn_div_for.body, label %bn_mod_bn_div_for.end

bn_mod_bn_div_for.body:                           ; preds = %bn_mod_bn_div_for.cond
  %577 = load i32, i32* %497, align 4
  %578 = icmp eq i32 %577, -1
  br i1 %578, label %bn_mod_bn_div_if.then13, label %bn_mod_bn_div_if.else

bn_mod_bn_div_if.then13:                          ; preds = %bn_mod_bn_div_for.body
  %579 = load i32, i32* %500, align 4
  %580 = load i32, i32* %501, align 4
  %581 = add i32 %579, %580
  %582 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %581
  %583 = load i32, i32* %582, align 4
  store i32 %583, i32* %496, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.else:                            ; preds = %bn_mod_bn_div_for.body
  %584 = load i32, i32* %500, align 4
  %585 = load i32, i32* %501, align 4
  %586 = add i32 %584, %585
  %587 = sub i32 %586, 1
  %588 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %587
  %589 = load i32, i32* %588, align 4
  %590 = zext i32 %589 to i64
  store i64 %590, i64* %495, align 8
  %591 = load i32, i32* %500, align 4
  %592 = load i32, i32* %501, align 4
  %593 = add i32 %591, %592
  %594 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %593
  %595 = load i32, i32* %594, align 4
  %596 = zext i32 %595 to i64
  %597 = shl i64 %596, 32
  %598 = load i64, i64* %495, align 8
  %599 = add i64 %598, %597
  store i64 %599, i64* %495, align 8
  %600 = load i64, i64* %495, align 8
  %601 = load i32, i32* %497, align 4
  %602 = add i32 %601, 1
  %603 = zext i32 %602 to i64
  %604 = udiv i64 %600, %603
  %605 = trunc i64 %604 to i32
  store i32 %605, i32* %496, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.end25:                           ; preds = %bn_mod_bn_div_if.else, %bn_mod_bn_div_if.then13
  %606 = load i32, i32* %501, align 4
  %607 = getelementptr inbounds [65 x i32], [65 x i32]* %499, i32 0, i32 0
  %608 = load i32, i32* %496, align 4
  %609 = load i32, i32* %500, align 4
  %610 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %609
  %611 = load i32, i32* %500, align 4
  %612 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %611
  %613 = call i32 @bn_sub_digit_mul(i32* %612, i32* %610, i32 %608, i32* %607, i32 %606)
  %614 = load i32, i32* %500, align 4
  %615 = load i32, i32* %501, align 4
  %616 = add i32 %614, %615
  %617 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %616
  %618 = load i32, i32* %617, align 4
  %619 = sub i32 %618, %613
  store i32 %619, i32* %617, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.cond:                         ; preds = %bn_mod_bn_div_while.body.split, %bn_mod_bn_div_if.end25
  %620 = load i32, i32* %500, align 4
  %621 = load i32, i32* %501, align 4
  %622 = add i32 %620, %621
  %623 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %622
  %624 = load i32, i32* %623, align 4
  %625 = icmp ne i32 %624, 0
  br i1 %625, label %bn_mod_bn_div_lor.end, label %bn_mod_bn_div_lor.rhs

bn_mod_bn_div_lor.rhs:                            ; preds = %bn_mod_bn_div_while.cond
  %626 = load i32, i32* %501, align 4
  %627 = getelementptr inbounds [65 x i32], [65 x i32]* %499, i32 0, i32 0
  %628 = load i32, i32* %500, align 4
  %629 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %628
  br label %bn_mod_bn_cmp_entry

bn_mod_bn_cmp_entry:                              ; preds = %bn_mod_bn_div_lor.rhs
  %630 = alloca i32, align 4
  %631 = alloca i32, align 4
  %632 = alloca i32*, align 4
  %633 = alloca i32*, align 4
  %634 = alloca i32, align 4
  store i32 %626, i32* %631, align 4
  store i32* %627, i32** %632, align 4
  store i32* %629, i32** %633, align 4
  %635 = load i32, i32* %631, align 4
  %636 = sub i32 %635, 1
  store i32 %636, i32* %634, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.cond:                           ; preds = %bn_mod_bn_cmp_for.inc, %bn_mod_bn_cmp_entry
  %637 = load i32, i32* %634, align 4
  %638 = icmp sge i32 %637, 0
  br i1 %638, label %bn_mod_bn_cmp_for.body, label %bn_mod_bn_cmp_for.end

bn_mod_bn_cmp_for.body:                           ; preds = %bn_mod_bn_cmp_for.cond
  %639 = load i32*, i32** %633, align 4
  %640 = load i32, i32* %634, align 4
  %641 = getelementptr inbounds i32, i32* %639, i32 %640
  %642 = load i32, i32* %641, align 4
  %643 = load i32*, i32** %632, align 4
  %644 = load i32, i32* %634, align 4
  %645 = getelementptr inbounds i32, i32* %643, i32 %644
  %646 = load i32, i32* %645, align 4
  %647 = icmp ugt i32 %642, %646
  br i1 %647, label %bn_mod_bn_cmp_if.then, label %bn_mod_bn_cmp_if.end

bn_mod_bn_cmp_if.then:                            ; preds = %bn_mod_bn_cmp_for.body
  store i32 1, i32* %630, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end:                             ; preds = %bn_mod_bn_cmp_for.body
  %648 = load i32*, i32** %633, align 4
  %649 = load i32, i32* %634, align 4
  %650 = getelementptr inbounds i32, i32* %648, i32 %649
  %651 = load i32, i32* %650, align 4
  %652 = load i32*, i32** %632, align 4
  %653 = load i32, i32* %634, align 4
  %654 = getelementptr inbounds i32, i32* %652, i32 %653
  %655 = load i32, i32* %654, align 4
  %656 = icmp ult i32 %651, %655
  br i1 %656, label %bn_mod_bn_cmp_if.then6, label %bn_mod_bn_cmp_if.end7

bn_mod_bn_cmp_if.then6:                           ; preds = %bn_mod_bn_cmp_if.end
  store i32 -1, i32* %630, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end7:                            ; preds = %bn_mod_bn_cmp_if.end
  br label %bn_mod_bn_cmp_for.inc

bn_mod_bn_cmp_for.inc:                            ; preds = %bn_mod_bn_cmp_if.end7
  %657 = load i32, i32* %634, align 4
  %658 = add nsw i32 %657, -1
  store i32 %658, i32* %634, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.end:                            ; preds = %bn_mod_bn_cmp_for.cond
  store i32 0, i32* %630, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_return:                             ; preds = %bn_mod_bn_cmp_for.end, %bn_mod_bn_cmp_if.then6, %bn_mod_bn_cmp_if.then
  %659 = load i32, i32* %630, align 4
  br label %bn_mod_bn_div_lor.rhs.split

bn_mod_bn_div_lor.rhs.split:                      ; preds = %bn_mod_bn_cmp_return
  %660 = icmp sge i32 %659, 0
  br label %bn_mod_bn_div_lor.end

bn_mod_bn_div_lor.end:                            ; preds = %bn_mod_bn_div_lor.rhs.split, %bn_mod_bn_div_while.cond
  %661 = phi i1 [ true, %bn_mod_bn_div_while.cond ], [ %660, %bn_mod_bn_div_lor.rhs.split ]
  br i1 %661, label %bn_mod_bn_div_while.body, label %bn_mod_bn_div_while.end

bn_mod_bn_div_while.body:                         ; preds = %bn_mod_bn_div_lor.end
  %662 = load i32, i32* %496, align 4
  %663 = add i32 %662, 1
  store i32 %663, i32* %496, align 4
  %664 = load i32, i32* %501, align 4
  %665 = getelementptr inbounds [65 x i32], [65 x i32]* %499, i32 0, i32 0
  %666 = load i32, i32* %500, align 4
  %667 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %666
  %668 = load i32, i32* %500, align 4
  %669 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %668
  br label %bn_mod_bn_div_bn_sub_entry

bn_mod_bn_div_bn_sub_entry:                       ; preds = %bn_mod_bn_div_while.body
  %670 = alloca i32, align 4
  %671 = alloca i32*, align 4
  %672 = alloca i32*, align 4
  %673 = alloca i32*, align 4
  %674 = alloca i32, align 4
  %675 = alloca i32, align 4
  %676 = alloca i32, align 4
  store i32 %664, i32* %670, align 4
  store i32* %665, i32** %671, align 4
  store i32* %667, i32** %672, align 4
  store i32* %669, i32** %673, align 4
  store i32 0, i32* %675, align 4
  store i32 0, i32* %676, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.cond:                    ; preds = %bn_mod_bn_div_bn_sub_for.inc, %bn_mod_bn_div_bn_sub_entry
  %677 = load i32, i32* %676, align 4
  %678 = load i32, i32* %670, align 4
  %679 = icmp ult i32 %677, %678
  br i1 %679, label %bn_mod_bn_div_bn_sub_for.body, label %bn_mod_bn_div_bn_sub_for.end

bn_mod_bn_div_bn_sub_for.body:                    ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %680 = load i32*, i32** %672, align 4
  %681 = load i32, i32* %676, align 4
  %682 = getelementptr inbounds i32, i32* %680, i32 %681
  %683 = load i32, i32* %682, align 4
  %684 = load i32, i32* %675, align 4
  %685 = sub i32 %683, %684
  store i32 %685, i32* %674, align 4
  %686 = load i32, i32* %675, align 4
  %687 = sub i32 -1, %686
  %688 = icmp ugt i32 %685, %687
  br i1 %688, label %bn_mod_bn_div_bn_sub_if.then, label %bn_mod_bn_div_bn_sub_if.else

bn_mod_bn_div_bn_sub_if.then:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %689 = load i32*, i32** %671, align 4
  %690 = load i32, i32* %676, align 4
  %691 = getelementptr inbounds i32, i32* %689, i32 %690
  %692 = load i32, i32* %691, align 4
  %693 = sub i32 -1, %692
  store i32 %693, i32* %674, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.else:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %694 = load i32*, i32** %671, align 4
  %695 = load i32, i32* %676, align 4
  %696 = getelementptr inbounds i32, i32* %694, i32 %695
  %697 = load i32, i32* %696, align 4
  %698 = load i32, i32* %674, align 4
  %699 = sub i32 %698, %697
  store i32 %699, i32* %674, align 4
  %700 = load i32*, i32** %671, align 4
  %701 = load i32, i32* %676, align 4
  %702 = getelementptr inbounds i32, i32* %700, i32 %701
  %703 = load i32, i32* %702, align 4
  %704 = sub i32 -1, %703
  %705 = icmp ugt i32 %699, %704
  br i1 %705, label %bn_mod_bn_div_bn_sub_if.then10, label %bn_mod_bn_div_bn_sub_if.else11

bn_mod_bn_div_bn_sub_if.then10:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 1, i32* %675, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.else11:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 0, i32* %675, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.end:                      ; preds = %bn_mod_bn_div_bn_sub_if.else11, %bn_mod_bn_div_bn_sub_if.then10
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.end12:                    ; preds = %bn_mod_bn_div_bn_sub_if.end, %bn_mod_bn_div_bn_sub_if.then
  %706 = load i32, i32* %674, align 4
  %707 = load i32*, i32** %673, align 4
  %708 = load i32, i32* %676, align 4
  %709 = getelementptr inbounds i32, i32* %707, i32 %708
  store i32 %706, i32* %709, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc

bn_mod_bn_div_bn_sub_for.inc:                     ; preds = %bn_mod_bn_div_bn_sub_if.end12
  %710 = load i32, i32* %676, align 4
  %711 = add i32 %710, 1
  store i32 %711, i32* %676, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.end:                     ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %712 = load i32, i32* %675, align 4
  br label %bn_mod_bn_div_while.body.split

bn_mod_bn_div_while.body.split:                   ; preds = %bn_mod_bn_div_bn_sub_for.end
  %713 = load i32, i32* %500, align 4
  %714 = load i32, i32* %501, align 4
  %715 = add i32 %713, %714
  %716 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 %715
  %717 = load i32, i32* %716, align 4
  %718 = sub i32 %717, %712
  store i32 %718, i32* %716, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.end:                          ; preds = %bn_mod_bn_div_lor.end
  %719 = load i32, i32* %496, align 4
  %720 = load i32*, i32** %494, align 4
  %721 = load i32, i32* %500, align 4
  %722 = getelementptr inbounds i32, i32* %720, i32 %721
  store i32 %719, i32* %722, align 4
  br label %bn_mod_bn_div_for.inc

bn_mod_bn_div_for.inc:                            ; preds = %bn_mod_bn_div_while.end
  %723 = load i32, i32* %500, align 4
  %724 = add nsw i32 %723, -1
  store i32 %724, i32* %500, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.end:                            ; preds = %bn_mod_bn_div_for.cond
  %725 = load i32, i32* %489, align 4
  %726 = load i32*, i32** %493, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry

bn_mod_bn_div_bn_assign_zero_entry:               ; preds = %bn_mod_bn_div_for.end
  %727 = alloca i32, align 4
  %728 = alloca i32*, align 4
  %729 = alloca i32, align 4
  store i32 %725, i32* %727, align 4
  store i32* %726, i32** %728, align 4
  store i32 0, i32* %729, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.cond:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc, %bn_mod_bn_div_bn_assign_zero_entry
  %730 = load i32, i32* %729, align 4
  %731 = load i32, i32* %727, align 4
  %732 = icmp ult i32 %730, %731
  br i1 %732, label %bn_mod_bn_div_bn_assign_zero_for.body, label %bn_mod_bn_div_bn_assign_zero_for.end

bn_mod_bn_div_bn_assign_zero_for.body:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  %733 = load i32*, i32** %728, align 4
  %734 = load i32, i32* %729, align 4
  %735 = getelementptr inbounds i32, i32* %733, i32 %734
  store i32 0, i32* %735, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc

bn_mod_bn_div_bn_assign_zero_for.inc:             ; preds = %bn_mod_bn_div_bn_assign_zero_for.body
  %736 = load i32, i32* %729, align 4
  %737 = add i32 %736, 1
  store i32 %737, i32* %729, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.end:             ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  br label %bn_mod_bn_div_for.end.split

bn_mod_bn_div_for.end.split:                      ; preds = %bn_mod_bn_div_bn_assign_zero_for.end
  %738 = load i32, i32* %501, align 4
  %739 = load i32, i32* %502, align 4
  %740 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 0
  %741 = load i32*, i32** %493, align 4
  %742 = call i32 @bn_shift_r(i32* %741, i32* %740, i32 %739, i32 %738)
  %743 = getelementptr inbounds [131 x i32], [131 x i32]* %498, i32 0, i32 0
  %744 = bitcast i32* %743 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %744, i8 0, i32 524, i1 false)
  %745 = getelementptr inbounds [65 x i32], [65 x i32]* %499, i32 0, i32 0
  %746 = bitcast i32* %745 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %746, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return

bn_mod_bn_div_return:                             ; preds = %bn_mod_bn_div_for.end.split, %bn_mod_bn_div_if.then
  br label %bn_mod_entry.split

bn_mod_entry.split:                               ; preds = %bn_mod_bn_div_return
  %747 = getelementptr inbounds [130 x i32], [130 x i32]* %481, i32 0, i32 0
  %748 = bitcast i32* %747 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %748, i8 0, i32 520, i1 false)
  br label %entry.split.split.split23.split101

entry.split.split.split23.split101:               ; preds = %bn_mod_entry.split
  %749 = load i32, i32* %digits.addr, align 4
  %arraydecay12 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %750 = load i32*, i32** %a.addr, align 4
  %751 = load i32*, i32** %a.addr, align 4
  br label %bn_sub_entry58

bn_sub_entry58:                                   ; preds = %entry.split.split.split23.split101
  %752 = alloca i32, align 4
  %753 = alloca i32*, align 4
  %754 = alloca i32*, align 4
  %755 = alloca i32*, align 4
  %756 = alloca i32, align 4
  %757 = alloca i32, align 4
  %758 = alloca i32, align 4
  store i32 %749, i32* %752, align 4
  store i32* %arraydecay12, i32** %753, align 4
  store i32* %750, i32** %754, align 4
  store i32* %751, i32** %755, align 4
  store i32 0, i32* %757, align 4
  store i32 0, i32* %758, align 4
  br label %bn_sub_for.cond59

bn_sub_for.cond59:                                ; preds = %bn_sub_for.inc67, %bn_sub_entry58
  %759 = load i32, i32* %758, align 4
  %760 = load i32, i32* %752, align 4
  %761 = icmp ult i32 %759, %760
  br i1 %761, label %bn_sub_for.body60, label %bn_sub_for.end68

bn_sub_for.body60:                                ; preds = %bn_sub_for.cond59
  %762 = load i32*, i32** %754, align 4
  %763 = load i32, i32* %758, align 4
  %764 = getelementptr inbounds i32, i32* %762, i32 %763
  %765 = load i32, i32* %764, align 4
  %766 = load i32, i32* %757, align 4
  %767 = sub i32 %765, %766
  store i32 %767, i32* %756, align 4
  %768 = load i32, i32* %757, align 4
  %769 = sub i32 -1, %768
  %770 = icmp ugt i32 %767, %769
  br i1 %770, label %bn_sub_if.then61, label %bn_sub_if.else62

bn_sub_if.then61:                                 ; preds = %bn_sub_for.body60
  %771 = load i32*, i32** %753, align 4
  %772 = load i32, i32* %758, align 4
  %773 = getelementptr inbounds i32, i32* %771, i32 %772
  %774 = load i32, i32* %773, align 4
  %775 = sub i32 -1, %774
  store i32 %775, i32* %756, align 4
  br label %bn_sub_if.end1266

bn_sub_if.else62:                                 ; preds = %bn_sub_for.body60
  %776 = load i32*, i32** %753, align 4
  %777 = load i32, i32* %758, align 4
  %778 = getelementptr inbounds i32, i32* %776, i32 %777
  %779 = load i32, i32* %778, align 4
  %780 = load i32, i32* %756, align 4
  %781 = sub i32 %780, %779
  store i32 %781, i32* %756, align 4
  %782 = load i32*, i32** %753, align 4
  %783 = load i32, i32* %758, align 4
  %784 = getelementptr inbounds i32, i32* %782, i32 %783
  %785 = load i32, i32* %784, align 4
  %786 = sub i32 -1, %785
  %787 = icmp ugt i32 %781, %786
  br i1 %787, label %bn_sub_if.then1063, label %bn_sub_if.else1164

bn_sub_if.then1063:                               ; preds = %bn_sub_if.else62
  store i32 1, i32* %757, align 4
  br label %bn_sub_if.end65

bn_sub_if.else1164:                               ; preds = %bn_sub_if.else62
  store i32 0, i32* %757, align 4
  br label %bn_sub_if.end65

bn_sub_if.end65:                                  ; preds = %bn_sub_if.else1164, %bn_sub_if.then1063
  br label %bn_sub_if.end1266

bn_sub_if.end1266:                                ; preds = %bn_sub_if.end65, %bn_sub_if.then61
  %788 = load i32, i32* %756, align 4
  %789 = load i32*, i32** %755, align 4
  %790 = load i32, i32* %758, align 4
  %791 = getelementptr inbounds i32, i32* %789, i32 %790
  store i32 %788, i32* %791, align 4
  br label %bn_sub_for.inc67

bn_sub_for.inc67:                                 ; preds = %bn_sub_if.end1266
  %792 = load i32, i32* %758, align 4
  %793 = add i32 %792, 1
  store i32 %793, i32* %758, align 4
  br label %bn_sub_for.cond59

bn_sub_for.end68:                                 ; preds = %bn_sub_for.cond59
  %794 = load i32, i32* %757, align 4
  br label %entry.split.split.split23.split

entry.split.split.split23.split:                  ; preds = %bn_sub_for.end68
  %795 = load i32, i32* %digits.addr, align 4
  %arraydecay14 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %796 = load i32*, i32** %a.addr, align 4
  %797 = load i32*, i32** %a.addr, align 4
  br label %bn_add_entry12

bn_add_entry12:                                   ; preds = %entry.split.split.split23.split
  %798 = alloca i32, align 4
  %799 = alloca i32*, align 4
  %800 = alloca i32*, align 4
  %801 = alloca i32*, align 4
  %802 = alloca i32, align 4
  %803 = alloca i32, align 4
  %804 = alloca i32, align 4
  store i32 %795, i32* %798, align 4
  store i32* %arraydecay14, i32** %799, align 4
  store i32* %796, i32** %800, align 4
  store i32* %797, i32** %801, align 4
  store i32 0, i32* %803, align 4
  store i32 0, i32* %804, align 4
  br label %bn_add_for.cond13

bn_add_for.cond13:                                ; preds = %bn_add_for.inc21, %bn_add_entry12
  %805 = load i32, i32* %804, align 4
  %806 = load i32, i32* %798, align 4
  %807 = icmp ult i32 %805, %806
  br i1 %807, label %bn_add_for.body14, label %bn_add_for.end22

bn_add_for.body14:                                ; preds = %bn_add_for.cond13
  %808 = load i32*, i32** %800, align 4
  %809 = load i32, i32* %804, align 4
  %810 = getelementptr inbounds i32, i32* %808, i32 %809
  %811 = load i32, i32* %810, align 4
  %812 = load i32, i32* %803, align 4
  %813 = add i32 %811, %812
  store i32 %813, i32* %802, align 4
  %814 = load i32, i32* %803, align 4
  %815 = icmp ult i32 %813, %814
  br i1 %815, label %bn_add_if.then15, label %bn_add_if.else16

bn_add_if.then15:                                 ; preds = %bn_add_for.body14
  %816 = load i32*, i32** %799, align 4
  %817 = load i32, i32* %804, align 4
  %818 = getelementptr inbounds i32, i32* %816, i32 %817
  %819 = load i32, i32* %818, align 4
  store i32 %819, i32* %802, align 4
  br label %bn_add_if.end920

bn_add_if.else16:                                 ; preds = %bn_add_for.body14
  %820 = load i32*, i32** %799, align 4
  %821 = load i32, i32* %804, align 4
  %822 = getelementptr inbounds i32, i32* %820, i32 %821
  %823 = load i32, i32* %822, align 4
  %824 = load i32, i32* %802, align 4
  %825 = add i32 %824, %823
  store i32 %825, i32* %802, align 4
  %826 = load i32*, i32** %799, align 4
  %827 = load i32, i32* %804, align 4
  %828 = getelementptr inbounds i32, i32* %826, i32 %827
  %829 = load i32, i32* %828, align 4
  %830 = icmp ult i32 %825, %829
  br i1 %830, label %bn_add_if.then717, label %bn_add_if.else818

bn_add_if.then717:                                ; preds = %bn_add_if.else16
  store i32 1, i32* %803, align 4
  br label %bn_add_if.end19

bn_add_if.else818:                                ; preds = %bn_add_if.else16
  store i32 0, i32* %803, align 4
  br label %bn_add_if.end19

bn_add_if.end19:                                  ; preds = %bn_add_if.else818, %bn_add_if.then717
  br label %bn_add_if.end920

bn_add_if.end920:                                 ; preds = %bn_add_if.end19, %bn_add_if.then15
  %831 = load i32, i32* %802, align 4
  %832 = load i32*, i32** %801, align 4
  %833 = load i32, i32* %804, align 4
  %834 = getelementptr inbounds i32, i32* %832, i32 %833
  store i32 %831, i32* %834, align 4
  br label %bn_add_for.inc21

bn_add_for.inc21:                                 ; preds = %bn_add_if.end920
  %835 = load i32, i32* %804, align 4
  %836 = add i32 %835, 1
  store i32 %836, i32* %804, align 4
  br label %bn_add_for.cond13

bn_add_for.end22:                                 ; preds = %bn_add_for.cond13
  %837 = load i32, i32* %803, align 4
  br label %entry.split.split.split

entry.split.split.split:                          ; preds = %bn_add_for.end22
  %838 = load i32, i32* %digits.addr, align 4
  %839 = load i32*, i32** %lower.addr, align 4
  %840 = load i32*, i32** %a.addr, align 4
  br label %bn_cmp_entry91

bn_cmp_entry91:                                   ; preds = %entry.split.split.split
  %841 = alloca i32, align 4
  %842 = alloca i32, align 4
  %843 = alloca i32*, align 4
  %844 = alloca i32*, align 4
  %845 = alloca i32, align 4
  store i32 %838, i32* %842, align 4
  store i32* %839, i32** %843, align 4
  store i32* %840, i32** %844, align 4
  %846 = load i32, i32* %842, align 4
  %847 = sub i32 %846, 1
  store i32 %847, i32* %845, align 4
  br label %bn_cmp_for.cond92

bn_cmp_for.cond92:                                ; preds = %bn_cmp_for.inc98, %bn_cmp_entry91
  %848 = load i32, i32* %845, align 4
  %849 = icmp sge i32 %848, 0
  br i1 %849, label %bn_cmp_for.body93, label %bn_cmp_for.end99

bn_cmp_for.body93:                                ; preds = %bn_cmp_for.cond92
  %850 = load i32*, i32** %844, align 4
  %851 = load i32, i32* %845, align 4
  %852 = getelementptr inbounds i32, i32* %850, i32 %851
  %853 = load i32, i32* %852, align 4
  %854 = load i32*, i32** %843, align 4
  %855 = load i32, i32* %845, align 4
  %856 = getelementptr inbounds i32, i32* %854, i32 %855
  %857 = load i32, i32* %856, align 4
  %858 = icmp ugt i32 %853, %857
  br i1 %858, label %bn_cmp_if.then94, label %bn_cmp_if.end95

bn_cmp_if.then94:                                 ; preds = %bn_cmp_for.body93
  store i32 1, i32* %841, align 4
  br label %bn_cmp_return100

bn_cmp_if.end95:                                  ; preds = %bn_cmp_for.body93
  %859 = load i32*, i32** %844, align 4
  %860 = load i32, i32* %845, align 4
  %861 = getelementptr inbounds i32, i32* %859, i32 %860
  %862 = load i32, i32* %861, align 4
  %863 = load i32*, i32** %843, align 4
  %864 = load i32, i32* %845, align 4
  %865 = getelementptr inbounds i32, i32* %863, i32 %864
  %866 = load i32, i32* %865, align 4
  %867 = icmp ult i32 %862, %866
  br i1 %867, label %bn_cmp_if.then696, label %bn_cmp_if.end797

bn_cmp_if.then696:                                ; preds = %bn_cmp_if.end95
  store i32 -1, i32* %841, align 4
  br label %bn_cmp_return100

bn_cmp_if.end797:                                 ; preds = %bn_cmp_if.end95
  br label %bn_cmp_for.inc98

bn_cmp_for.inc98:                                 ; preds = %bn_cmp_if.end797
  %868 = load i32, i32* %845, align 4
  %869 = add nsw i32 %868, -1
  store i32 %869, i32* %845, align 4
  br label %bn_cmp_for.cond92

bn_cmp_for.end99:                                 ; preds = %bn_cmp_for.cond92
  store i32 0, i32* %841, align 4
  br label %bn_cmp_return100

bn_cmp_return100:                                 ; preds = %bn_cmp_for.end99, %bn_cmp_if.then696, %bn_cmp_if.then94
  %870 = load i32, i32* %841, align 4
  br label %entry.split.split.split.split

entry.split.split.split.split:                    ; preds = %bn_cmp_return100
  %cmp = icmp slt i32 %870, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry.split.split.split.split
  %871 = load i32, i32* %digits.addr, align 4
  %872 = load i32*, i32** %d.addr, align 4
  %873 = load i32*, i32** %a.addr, align 4
  %874 = load i32*, i32** %a.addr, align 4
  br label %bn_add_entry1

bn_add_entry1:                                    ; preds = %if.then
  %875 = alloca i32, align 4
  %876 = alloca i32*, align 4
  %877 = alloca i32*, align 4
  %878 = alloca i32*, align 4
  %879 = alloca i32, align 4
  %880 = alloca i32, align 4
  %881 = alloca i32, align 4
  store i32 %871, i32* %875, align 4
  store i32* %872, i32** %876, align 4
  store i32* %873, i32** %877, align 4
  store i32* %874, i32** %878, align 4
  store i32 0, i32* %880, align 4
  store i32 0, i32* %881, align 4
  br label %bn_add_for.cond2

bn_add_for.cond2:                                 ; preds = %bn_add_for.inc10, %bn_add_entry1
  %882 = load i32, i32* %881, align 4
  %883 = load i32, i32* %875, align 4
  %884 = icmp ult i32 %882, %883
  br i1 %884, label %bn_add_for.body3, label %bn_add_for.end11

bn_add_for.body3:                                 ; preds = %bn_add_for.cond2
  %885 = load i32*, i32** %877, align 4
  %886 = load i32, i32* %881, align 4
  %887 = getelementptr inbounds i32, i32* %885, i32 %886
  %888 = load i32, i32* %887, align 4
  %889 = load i32, i32* %880, align 4
  %890 = add i32 %888, %889
  store i32 %890, i32* %879, align 4
  %891 = load i32, i32* %880, align 4
  %892 = icmp ult i32 %890, %891
  br i1 %892, label %bn_add_if.then4, label %bn_add_if.else5

bn_add_if.then4:                                  ; preds = %bn_add_for.body3
  %893 = load i32*, i32** %876, align 4
  %894 = load i32, i32* %881, align 4
  %895 = getelementptr inbounds i32, i32* %893, i32 %894
  %896 = load i32, i32* %895, align 4
  store i32 %896, i32* %879, align 4
  br label %bn_add_if.end99

bn_add_if.else5:                                  ; preds = %bn_add_for.body3
  %897 = load i32*, i32** %876, align 4
  %898 = load i32, i32* %881, align 4
  %899 = getelementptr inbounds i32, i32* %897, i32 %898
  %900 = load i32, i32* %899, align 4
  %901 = load i32, i32* %879, align 4
  %902 = add i32 %901, %900
  store i32 %902, i32* %879, align 4
  %903 = load i32*, i32** %876, align 4
  %904 = load i32, i32* %881, align 4
  %905 = getelementptr inbounds i32, i32* %903, i32 %904
  %906 = load i32, i32* %905, align 4
  %907 = icmp ult i32 %902, %906
  br i1 %907, label %bn_add_if.then76, label %bn_add_if.else87

bn_add_if.then76:                                 ; preds = %bn_add_if.else5
  store i32 1, i32* %880, align 4
  br label %bn_add_if.end8

bn_add_if.else87:                                 ; preds = %bn_add_if.else5
  store i32 0, i32* %880, align 4
  br label %bn_add_if.end8

bn_add_if.end8:                                   ; preds = %bn_add_if.else87, %bn_add_if.then76
  br label %bn_add_if.end99

bn_add_if.end99:                                  ; preds = %bn_add_if.end8, %bn_add_if.then4
  %908 = load i32, i32* %879, align 4
  %909 = load i32*, i32** %878, align 4
  %910 = load i32, i32* %881, align 4
  %911 = getelementptr inbounds i32, i32* %909, i32 %910
  store i32 %908, i32* %911, align 4
  br label %bn_add_for.inc10

bn_add_for.inc10:                                 ; preds = %bn_add_if.end99
  %912 = load i32, i32* %881, align 4
  %913 = add i32 %912, 1
  store i32 %913, i32* %881, align 4
  br label %bn_add_for.cond2

bn_add_for.end11:                                 ; preds = %bn_add_for.cond2
  %914 = load i32, i32* %880, align 4
  br label %if.then.split

if.then.split:                                    ; preds = %bn_add_for.end11
  br label %if.end

if.end:                                           ; preds = %if.then.split, %entry.split.split.split.split
  %915 = load i32, i32* %digits.addr, align 4
  %916 = load i32*, i32** %upper.addr, align 4
  %917 = load i32*, i32** %a.addr, align 4
  br label %bn_cmp_entry81

bn_cmp_entry81:                                   ; preds = %if.end
  %918 = alloca i32, align 4
  %919 = alloca i32, align 4
  %920 = alloca i32*, align 4
  %921 = alloca i32*, align 4
  %922 = alloca i32, align 4
  store i32 %915, i32* %919, align 4
  store i32* %916, i32** %920, align 4
  store i32* %917, i32** %921, align 4
  %923 = load i32, i32* %919, align 4
  %924 = sub i32 %923, 1
  store i32 %924, i32* %922, align 4
  br label %bn_cmp_for.cond82

bn_cmp_for.cond82:                                ; preds = %bn_cmp_for.inc88, %bn_cmp_entry81
  %925 = load i32, i32* %922, align 4
  %926 = icmp sge i32 %925, 0
  br i1 %926, label %bn_cmp_for.body83, label %bn_cmp_for.end89

bn_cmp_for.body83:                                ; preds = %bn_cmp_for.cond82
  %927 = load i32*, i32** %921, align 4
  %928 = load i32, i32* %922, align 4
  %929 = getelementptr inbounds i32, i32* %927, i32 %928
  %930 = load i32, i32* %929, align 4
  %931 = load i32*, i32** %920, align 4
  %932 = load i32, i32* %922, align 4
  %933 = getelementptr inbounds i32, i32* %931, i32 %932
  %934 = load i32, i32* %933, align 4
  %935 = icmp ugt i32 %930, %934
  br i1 %935, label %bn_cmp_if.then84, label %bn_cmp_if.end85

bn_cmp_if.then84:                                 ; preds = %bn_cmp_for.body83
  store i32 1, i32* %918, align 4
  br label %bn_cmp_return90

bn_cmp_if.end85:                                  ; preds = %bn_cmp_for.body83
  %936 = load i32*, i32** %921, align 4
  %937 = load i32, i32* %922, align 4
  %938 = getelementptr inbounds i32, i32* %936, i32 %937
  %939 = load i32, i32* %938, align 4
  %940 = load i32*, i32** %920, align 4
  %941 = load i32, i32* %922, align 4
  %942 = getelementptr inbounds i32, i32* %940, i32 %941
  %943 = load i32, i32* %942, align 4
  %944 = icmp ult i32 %939, %943
  br i1 %944, label %bn_cmp_if.then686, label %bn_cmp_if.end787

bn_cmp_if.then686:                                ; preds = %bn_cmp_if.end85
  store i32 -1, i32* %918, align 4
  br label %bn_cmp_return90

bn_cmp_if.end787:                                 ; preds = %bn_cmp_if.end85
  br label %bn_cmp_for.inc88

bn_cmp_for.inc88:                                 ; preds = %bn_cmp_if.end787
  %945 = load i32, i32* %922, align 4
  %946 = add nsw i32 %945, -1
  store i32 %946, i32* %922, align 4
  br label %bn_cmp_for.cond82

bn_cmp_for.end89:                                 ; preds = %bn_cmp_for.cond82
  store i32 0, i32* %918, align 4
  br label %bn_cmp_return90

bn_cmp_return90:                                  ; preds = %bn_cmp_for.end89, %bn_cmp_if.then686, %bn_cmp_if.then84
  %947 = load i32, i32* %918, align 4
  br label %if.end.split

if.end.split:                                     ; preds = %bn_cmp_return90
  %cmp19 = icmp sgt i32 %947, 0
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end.split
  %948 = load i32, i32* %digits.addr, align 4
  %949 = load i32*, i32** %d.addr, align 4
  %950 = load i32*, i32** %a.addr, align 4
  %951 = load i32*, i32** %a.addr, align 4
  br label %bn_sub_entry47

bn_sub_entry47:                                   ; preds = %if.then20
  %952 = alloca i32, align 4
  %953 = alloca i32*, align 4
  %954 = alloca i32*, align 4
  %955 = alloca i32*, align 4
  %956 = alloca i32, align 4
  %957 = alloca i32, align 4
  %958 = alloca i32, align 4
  store i32 %948, i32* %952, align 4
  store i32* %949, i32** %953, align 4
  store i32* %950, i32** %954, align 4
  store i32* %951, i32** %955, align 4
  store i32 0, i32* %957, align 4
  store i32 0, i32* %958, align 4
  br label %bn_sub_for.cond48

bn_sub_for.cond48:                                ; preds = %bn_sub_for.inc56, %bn_sub_entry47
  %959 = load i32, i32* %958, align 4
  %960 = load i32, i32* %952, align 4
  %961 = icmp ult i32 %959, %960
  br i1 %961, label %bn_sub_for.body49, label %bn_sub_for.end57

bn_sub_for.body49:                                ; preds = %bn_sub_for.cond48
  %962 = load i32*, i32** %954, align 4
  %963 = load i32, i32* %958, align 4
  %964 = getelementptr inbounds i32, i32* %962, i32 %963
  %965 = load i32, i32* %964, align 4
  %966 = load i32, i32* %957, align 4
  %967 = sub i32 %965, %966
  store i32 %967, i32* %956, align 4
  %968 = load i32, i32* %957, align 4
  %969 = sub i32 -1, %968
  %970 = icmp ugt i32 %967, %969
  br i1 %970, label %bn_sub_if.then50, label %bn_sub_if.else51

bn_sub_if.then50:                                 ; preds = %bn_sub_for.body49
  %971 = load i32*, i32** %953, align 4
  %972 = load i32, i32* %958, align 4
  %973 = getelementptr inbounds i32, i32* %971, i32 %972
  %974 = load i32, i32* %973, align 4
  %975 = sub i32 -1, %974
  store i32 %975, i32* %956, align 4
  br label %bn_sub_if.end1255

bn_sub_if.else51:                                 ; preds = %bn_sub_for.body49
  %976 = load i32*, i32** %953, align 4
  %977 = load i32, i32* %958, align 4
  %978 = getelementptr inbounds i32, i32* %976, i32 %977
  %979 = load i32, i32* %978, align 4
  %980 = load i32, i32* %956, align 4
  %981 = sub i32 %980, %979
  store i32 %981, i32* %956, align 4
  %982 = load i32*, i32** %953, align 4
  %983 = load i32, i32* %958, align 4
  %984 = getelementptr inbounds i32, i32* %982, i32 %983
  %985 = load i32, i32* %984, align 4
  %986 = sub i32 -1, %985
  %987 = icmp ugt i32 %981, %986
  br i1 %987, label %bn_sub_if.then1052, label %bn_sub_if.else1153

bn_sub_if.then1052:                               ; preds = %bn_sub_if.else51
  store i32 1, i32* %957, align 4
  br label %bn_sub_if.end54

bn_sub_if.else1153:                               ; preds = %bn_sub_if.else51
  store i32 0, i32* %957, align 4
  br label %bn_sub_if.end54

bn_sub_if.end54:                                  ; preds = %bn_sub_if.else1153, %bn_sub_if.then1052
  br label %bn_sub_if.end1255

bn_sub_if.end1255:                                ; preds = %bn_sub_if.end54, %bn_sub_if.then50
  %988 = load i32, i32* %956, align 4
  %989 = load i32*, i32** %955, align 4
  %990 = load i32, i32* %958, align 4
  %991 = getelementptr inbounds i32, i32* %989, i32 %990
  store i32 %988, i32* %991, align 4
  br label %bn_sub_for.inc56

bn_sub_for.inc56:                                 ; preds = %bn_sub_if.end1255
  %992 = load i32, i32* %958, align 4
  %993 = add i32 %992, 1
  store i32 %993, i32* %958, align 4
  br label %bn_sub_for.cond48

bn_sub_for.end57:                                 ; preds = %bn_sub_for.cond48
  %994 = load i32, i32* %957, align 4
  br label %if.then20.split

if.then20.split:                                  ; preds = %bn_sub_for.end57
  br label %if.end22

if.end22:                                         ; preds = %if.then20.split, %if.end.split
  %995 = load i32, i32* %digits.addr, align 4
  %996 = load i32*, i32** %upper.addr, align 4
  %arraydecay23 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_entry

bn_assign_entry:                                  ; preds = %if.end22
  %997 = alloca i32, align 4
  %998 = alloca i32*, align 4
  %999 = alloca i32*, align 4
  %1000 = alloca i32, align 4
  store i32 %995, i32* %997, align 4
  store i32* %996, i32** %998, align 4
  store i32* %arraydecay23, i32** %999, align 4
  store i32 0, i32* %1000, align 4
  br label %bn_assign_for.cond

bn_assign_for.cond:                               ; preds = %bn_assign_for.inc, %bn_assign_entry
  %1001 = load i32, i32* %1000, align 4
  %1002 = load i32, i32* %997, align 4
  %1003 = icmp ult i32 %1001, %1002
  br i1 %1003, label %bn_assign_for.body, label %bn_assign_for.end

bn_assign_for.body:                               ; preds = %bn_assign_for.cond
  %1004 = load i32*, i32** %998, align 4
  %1005 = load i32, i32* %1000, align 4
  %1006 = getelementptr inbounds i32, i32* %1004, i32 %1005
  %1007 = load i32, i32* %1006, align 4
  %1008 = load i32*, i32** %999, align 4
  %1009 = load i32, i32* %1000, align 4
  %1010 = getelementptr inbounds i32, i32* %1008, i32 %1009
  store i32 %1007, i32* %1010, align 4
  br label %bn_assign_for.inc

bn_assign_for.inc:                                ; preds = %bn_assign_for.body
  %1011 = load i32, i32* %1000, align 4
  %1012 = add i32 %1011, 1
  store i32 %1012, i32* %1000, align 4
  br label %bn_assign_for.cond

bn_assign_for.end:                                ; preds = %bn_assign_for.cond
  br label %if.end22.split

if.end22.split:                                   ; preds = %bn_assign_for.end
  %1013 = load i32, i32* %digits.addr, align 4
  %1014 = load i32*, i32** %d.addr, align 4
  %arraydecay24 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_sub_entry

bn_sub_entry:                                     ; preds = %if.end22.split
  %1015 = alloca i32, align 4
  %1016 = alloca i32*, align 4
  %1017 = alloca i32*, align 4
  %1018 = alloca i32*, align 4
  %1019 = alloca i32, align 4
  %1020 = alloca i32, align 4
  %1021 = alloca i32, align 4
  store i32 %1013, i32* %1015, align 4
  store i32* %1014, i32** %1016, align 4
  store i32* %arraydecay24, i32** %1017, align 4
  store i32* %arraydecay25, i32** %1018, align 4
  store i32 0, i32* %1020, align 4
  store i32 0, i32* %1021, align 4
  br label %bn_sub_for.cond

bn_sub_for.cond:                                  ; preds = %bn_sub_for.inc, %bn_sub_entry
  %1022 = load i32, i32* %1021, align 4
  %1023 = load i32, i32* %1015, align 4
  %1024 = icmp ult i32 %1022, %1023
  br i1 %1024, label %bn_sub_for.body, label %bn_sub_for.end

bn_sub_for.body:                                  ; preds = %bn_sub_for.cond
  %1025 = load i32*, i32** %1017, align 4
  %1026 = load i32, i32* %1021, align 4
  %1027 = getelementptr inbounds i32, i32* %1025, i32 %1026
  %1028 = load i32, i32* %1027, align 4
  %1029 = load i32, i32* %1020, align 4
  %1030 = sub i32 %1028, %1029
  store i32 %1030, i32* %1019, align 4
  %1031 = load i32, i32* %1020, align 4
  %1032 = sub i32 -1, %1031
  %1033 = icmp ugt i32 %1030, %1032
  br i1 %1033, label %bn_sub_if.then, label %bn_sub_if.else

bn_sub_if.then:                                   ; preds = %bn_sub_for.body
  %1034 = load i32*, i32** %1016, align 4
  %1035 = load i32, i32* %1021, align 4
  %1036 = getelementptr inbounds i32, i32* %1034, i32 %1035
  %1037 = load i32, i32* %1036, align 4
  %1038 = sub i32 -1, %1037
  store i32 %1038, i32* %1019, align 4
  br label %bn_sub_if.end12

bn_sub_if.else:                                   ; preds = %bn_sub_for.body
  %1039 = load i32*, i32** %1016, align 4
  %1040 = load i32, i32* %1021, align 4
  %1041 = getelementptr inbounds i32, i32* %1039, i32 %1040
  %1042 = load i32, i32* %1041, align 4
  %1043 = load i32, i32* %1019, align 4
  %1044 = sub i32 %1043, %1042
  store i32 %1044, i32* %1019, align 4
  %1045 = load i32*, i32** %1016, align 4
  %1046 = load i32, i32* %1021, align 4
  %1047 = getelementptr inbounds i32, i32* %1045, i32 %1046
  %1048 = load i32, i32* %1047, align 4
  %1049 = sub i32 -1, %1048
  %1050 = icmp ugt i32 %1044, %1049
  br i1 %1050, label %bn_sub_if.then10, label %bn_sub_if.else11

bn_sub_if.then10:                                 ; preds = %bn_sub_if.else
  store i32 1, i32* %1020, align 4
  br label %bn_sub_if.end

bn_sub_if.else11:                                 ; preds = %bn_sub_if.else
  store i32 0, i32* %1020, align 4
  br label %bn_sub_if.end

bn_sub_if.end:                                    ; preds = %bn_sub_if.else11, %bn_sub_if.then10
  br label %bn_sub_if.end12

bn_sub_if.end12:                                  ; preds = %bn_sub_if.end, %bn_sub_if.then
  %1051 = load i32, i32* %1019, align 4
  %1052 = load i32*, i32** %1018, align 4
  %1053 = load i32, i32* %1021, align 4
  %1054 = getelementptr inbounds i32, i32* %1052, i32 %1053
  store i32 %1051, i32* %1054, align 4
  br label %bn_sub_for.inc

bn_sub_for.inc:                                   ; preds = %bn_sub_if.end12
  %1055 = load i32, i32* %1021, align 4
  %1056 = add i32 %1055, 1
  store i32 %1056, i32* %1021, align 4
  br label %bn_sub_for.cond

bn_sub_for.end:                                   ; preds = %bn_sub_for.cond
  %1057 = load i32, i32* %1020, align 4
  br label %if.end22.split.split

if.end22.split.split:                             ; preds = %bn_sub_for.end
  br label %while.cond

while.cond:                                       ; preds = %if.end32.split, %if.end22.split.split
  %1058 = load i32, i32* %digits.addr, align 4
  %1059 = load i32*, i32** %a.addr, align 4
  %call27 = call i32 @probable_prime(i32* %1059, i32 %1058)
  %tobool = icmp ne i32 %call27, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1060 = load i32, i32* %digits.addr, align 4
  %arraydecay28 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %1061 = load i32*, i32** %a.addr, align 4
  br label %bn_cmp_entry

bn_cmp_entry:                                     ; preds = %while.body
  %1062 = alloca i32, align 4
  %1063 = alloca i32, align 4
  %1064 = alloca i32*, align 4
  %1065 = alloca i32*, align 4
  %1066 = alloca i32, align 4
  store i32 %1060, i32* %1063, align 4
  store i32* %arraydecay28, i32** %1064, align 4
  store i32* %1061, i32** %1065, align 4
  %1067 = load i32, i32* %1063, align 4
  %1068 = sub i32 %1067, 1
  store i32 %1068, i32* %1066, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.cond:                                  ; preds = %bn_cmp_for.inc, %bn_cmp_entry
  %1069 = load i32, i32* %1066, align 4
  %1070 = icmp sge i32 %1069, 0
  br i1 %1070, label %bn_cmp_for.body, label %bn_cmp_for.end

bn_cmp_for.body:                                  ; preds = %bn_cmp_for.cond
  %1071 = load i32*, i32** %1065, align 4
  %1072 = load i32, i32* %1066, align 4
  %1073 = getelementptr inbounds i32, i32* %1071, i32 %1072
  %1074 = load i32, i32* %1073, align 4
  %1075 = load i32*, i32** %1064, align 4
  %1076 = load i32, i32* %1066, align 4
  %1077 = getelementptr inbounds i32, i32* %1075, i32 %1076
  %1078 = load i32, i32* %1077, align 4
  %1079 = icmp ugt i32 %1074, %1078
  br i1 %1079, label %bn_cmp_if.then, label %bn_cmp_if.end

bn_cmp_if.then:                                   ; preds = %bn_cmp_for.body
  store i32 1, i32* %1062, align 4
  br label %bn_cmp_return

bn_cmp_if.end:                                    ; preds = %bn_cmp_for.body
  %1080 = load i32*, i32** %1065, align 4
  %1081 = load i32, i32* %1066, align 4
  %1082 = getelementptr inbounds i32, i32* %1080, i32 %1081
  %1083 = load i32, i32* %1082, align 4
  %1084 = load i32*, i32** %1064, align 4
  %1085 = load i32, i32* %1066, align 4
  %1086 = getelementptr inbounds i32, i32* %1084, i32 %1085
  %1087 = load i32, i32* %1086, align 4
  %1088 = icmp ult i32 %1083, %1087
  br i1 %1088, label %bn_cmp_if.then6, label %bn_cmp_if.end7

bn_cmp_if.then6:                                  ; preds = %bn_cmp_if.end
  store i32 -1, i32* %1062, align 4
  br label %bn_cmp_return

bn_cmp_if.end7:                                   ; preds = %bn_cmp_if.end
  br label %bn_cmp_for.inc

bn_cmp_for.inc:                                   ; preds = %bn_cmp_if.end7
  %1089 = load i32, i32* %1066, align 4
  %1090 = add nsw i32 %1089, -1
  store i32 %1090, i32* %1066, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.end:                                   ; preds = %bn_cmp_for.cond
  store i32 0, i32* %1062, align 4
  br label %bn_cmp_return

bn_cmp_return:                                    ; preds = %bn_cmp_for.end, %bn_cmp_if.then6, %bn_cmp_if.then
  %1091 = load i32, i32* %1062, align 4
  br label %while.body.split

while.body.split:                                 ; preds = %bn_cmp_return
  %cmp30 = icmp sgt i32 %1091, 0
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %while.body.split
  store i32 4097, i32* %retval, align 4
  br label %return

if.end32:                                         ; preds = %while.body.split
  %1092 = load i32, i32* %digits.addr, align 4
  %1093 = load i32*, i32** %d.addr, align 4
  %1094 = load i32*, i32** %a.addr, align 4
  %1095 = load i32*, i32** %a.addr, align 4
  br label %bn_add_entry

bn_add_entry:                                     ; preds = %if.end32
  %1096 = alloca i32, align 4
  %1097 = alloca i32*, align 4
  %1098 = alloca i32*, align 4
  %1099 = alloca i32*, align 4
  %1100 = alloca i32, align 4
  %1101 = alloca i32, align 4
  %1102 = alloca i32, align 4
  store i32 %1092, i32* %1096, align 4
  store i32* %1093, i32** %1097, align 4
  store i32* %1094, i32** %1098, align 4
  store i32* %1095, i32** %1099, align 4
  store i32 0, i32* %1101, align 4
  store i32 0, i32* %1102, align 4
  br label %bn_add_for.cond

bn_add_for.cond:                                  ; preds = %bn_add_for.inc, %bn_add_entry
  %1103 = load i32, i32* %1102, align 4
  %1104 = load i32, i32* %1096, align 4
  %1105 = icmp ult i32 %1103, %1104
  br i1 %1105, label %bn_add_for.body, label %bn_add_for.end

bn_add_for.body:                                  ; preds = %bn_add_for.cond
  %1106 = load i32*, i32** %1098, align 4
  %1107 = load i32, i32* %1102, align 4
  %1108 = getelementptr inbounds i32, i32* %1106, i32 %1107
  %1109 = load i32, i32* %1108, align 4
  %1110 = load i32, i32* %1101, align 4
  %1111 = add i32 %1109, %1110
  store i32 %1111, i32* %1100, align 4
  %1112 = load i32, i32* %1101, align 4
  %1113 = icmp ult i32 %1111, %1112
  br i1 %1113, label %bn_add_if.then, label %bn_add_if.else

bn_add_if.then:                                   ; preds = %bn_add_for.body
  %1114 = load i32*, i32** %1097, align 4
  %1115 = load i32, i32* %1102, align 4
  %1116 = getelementptr inbounds i32, i32* %1114, i32 %1115
  %1117 = load i32, i32* %1116, align 4
  store i32 %1117, i32* %1100, align 4
  br label %bn_add_if.end9

bn_add_if.else:                                   ; preds = %bn_add_for.body
  %1118 = load i32*, i32** %1097, align 4
  %1119 = load i32, i32* %1102, align 4
  %1120 = getelementptr inbounds i32, i32* %1118, i32 %1119
  %1121 = load i32, i32* %1120, align 4
  %1122 = load i32, i32* %1100, align 4
  %1123 = add i32 %1122, %1121
  store i32 %1123, i32* %1100, align 4
  %1124 = load i32*, i32** %1097, align 4
  %1125 = load i32, i32* %1102, align 4
  %1126 = getelementptr inbounds i32, i32* %1124, i32 %1125
  %1127 = load i32, i32* %1126, align 4
  %1128 = icmp ult i32 %1123, %1127
  br i1 %1128, label %bn_add_if.then7, label %bn_add_if.else8

bn_add_if.then7:                                  ; preds = %bn_add_if.else
  store i32 1, i32* %1101, align 4
  br label %bn_add_if.end

bn_add_if.else8:                                  ; preds = %bn_add_if.else
  store i32 0, i32* %1101, align 4
  br label %bn_add_if.end

bn_add_if.end:                                    ; preds = %bn_add_if.else8, %bn_add_if.then7
  br label %bn_add_if.end9

bn_add_if.end9:                                   ; preds = %bn_add_if.end, %bn_add_if.then
  %1129 = load i32, i32* %1100, align 4
  %1130 = load i32*, i32** %1099, align 4
  %1131 = load i32, i32* %1102, align 4
  %1132 = getelementptr inbounds i32, i32* %1130, i32 %1131
  store i32 %1129, i32* %1132, align 4
  br label %bn_add_for.inc

bn_add_for.inc:                                   ; preds = %bn_add_if.end9
  %1133 = load i32, i32* %1102, align 4
  %1134 = add i32 %1133, 1
  store i32 %1134, i32* %1102, align 4
  br label %bn_add_for.cond

bn_add_for.end:                                   ; preds = %bn_add_for.cond
  %1135 = load i32, i32* %1101, align 4
  br label %if.end32.split

if.end32.split:                                   ; preds = %bn_add_for.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then31
  %1136 = load i32, i32* %retval, align 4
  ret i32 %1136
}

; Function Attrs: noinline optnone
define internal i32 @probable_prime(i32* %a, i32 %digits) #2 {
entry:
  %digits.addr = alloca i32, align 4
  %a.addr = alloca i32*, align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %digits.addr, align 4
  %1 = load i32*, i32** %a.addr, align 4
  %call = call i32 @small_factor(i32* %1, i32 %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %2 = load i32, i32* %digits.addr, align 4
  %3 = load i32*, i32** %a.addr, align 4
  %call1 = call i32 @fermat_test(i32* %3, i32 %2)
  %tobool2 = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline optnone
define internal i32 @small_factor(i32* %a, i32 %digits) #2 {
entry:
  %digits.addr = alloca i32, align 4
  %a.addr = alloca i32*, align 4
  %status = alloca i32, align 4
  %t = alloca [1 x i32], align 4
  %i = alloca i32, align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  store i32 0, i32* %status, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [1 x i32], [1 x i32]* %t, i32 0, i32 0
  br label %bn_assign_zero_entry

bn_assign_zero_entry:                             ; preds = %for.body
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 4
  %3 = alloca i32, align 4
  store i32 1, i32* %1, align 4
  store i32* %arraydecay, i32** %2, align 4
  store i32 0, i32* %3, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.cond:                          ; preds = %bn_assign_zero_for.inc, %bn_assign_zero_entry
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %1, align 4
  %6 = icmp ult i32 %4, %5
  br i1 %6, label %bn_assign_zero_for.body, label %bn_assign_zero_for.end

bn_assign_zero_for.body:                          ; preds = %bn_assign_zero_for.cond
  %7 = load i32*, i32** %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 0, i32* %9, align 4
  br label %bn_assign_zero_for.inc

bn_assign_zero_for.inc:                           ; preds = %bn_assign_zero_for.body
  %10 = load i32, i32* %3, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %3, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.end:                           ; preds = %bn_assign_zero_for.cond
  br label %for.body.split

for.body.split:                                   ; preds = %bn_assign_zero_for.end
  %12 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* @SMALL_PRIMES, i32 0, i32 %12
  %13 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %13 to i32
  %arrayidx1 = getelementptr inbounds [1 x i32], [1 x i32]* %t, i32 0, i32 0
  store i32 %conv, i32* %arrayidx1, align 4
  %14 = load i32, i32* %digits.addr, align 4
  %cmp2 = icmp eq i32 %14, 1
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.split
  %arraydecay4 = getelementptr inbounds [1 x i32], [1 x i32]* %t, i32 0, i32 0
  %15 = load i32*, i32** %a.addr, align 4
  br label %bn_cmp_entry

bn_cmp_entry:                                     ; preds = %land.lhs.true
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 4
  %19 = alloca i32*, align 4
  %20 = alloca i32, align 4
  store i32 1, i32* %17, align 4
  store i32* %arraydecay4, i32** %18, align 4
  store i32* %15, i32** %19, align 4
  %21 = load i32, i32* %17, align 4
  %22 = sub i32 %21, 1
  store i32 %22, i32* %20, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.cond:                                  ; preds = %bn_cmp_for.inc, %bn_cmp_entry
  %23 = load i32, i32* %20, align 4
  %24 = icmp sge i32 %23, 0
  br i1 %24, label %bn_cmp_for.body, label %bn_cmp_for.end

bn_cmp_for.body:                                  ; preds = %bn_cmp_for.cond
  %25 = load i32*, i32** %19, align 4
  %26 = load i32, i32* %20, align 4
  %27 = getelementptr inbounds i32, i32* %25, i32 %26
  %28 = load i32, i32* %27, align 4
  %29 = load i32*, i32** %18, align 4
  %30 = load i32, i32* %20, align 4
  %31 = getelementptr inbounds i32, i32* %29, i32 %30
  %32 = load i32, i32* %31, align 4
  %33 = icmp ugt i32 %28, %32
  br i1 %33, label %bn_cmp_if.then, label %bn_cmp_if.end

bn_cmp_if.then:                                   ; preds = %bn_cmp_for.body
  store i32 1, i32* %16, align 4
  br label %bn_cmp_return

bn_cmp_if.end:                                    ; preds = %bn_cmp_for.body
  %34 = load i32*, i32** %19, align 4
  %35 = load i32, i32* %20, align 4
  %36 = getelementptr inbounds i32, i32* %34, i32 %35
  %37 = load i32, i32* %36, align 4
  %38 = load i32*, i32** %18, align 4
  %39 = load i32, i32* %20, align 4
  %40 = getelementptr inbounds i32, i32* %38, i32 %39
  %41 = load i32, i32* %40, align 4
  %42 = icmp ult i32 %37, %41
  br i1 %42, label %bn_cmp_if.then6, label %bn_cmp_if.end7

bn_cmp_if.then6:                                  ; preds = %bn_cmp_if.end
  store i32 -1, i32* %16, align 4
  br label %bn_cmp_return

bn_cmp_if.end7:                                   ; preds = %bn_cmp_if.end
  br label %bn_cmp_for.inc

bn_cmp_for.inc:                                   ; preds = %bn_cmp_if.end7
  %43 = load i32, i32* %20, align 4
  %44 = add nsw i32 %43, -1
  store i32 %44, i32* %20, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.end:                                   ; preds = %bn_cmp_for.cond
  store i32 0, i32* %16, align 4
  br label %bn_cmp_return

bn_cmp_return:                                    ; preds = %bn_cmp_for.end, %bn_cmp_if.then6, %bn_cmp_if.then
  %45 = load i32, i32* %16, align 4
  br label %land.lhs.true.split

land.lhs.true.split:                              ; preds = %bn_cmp_return
  %tobool = icmp ne i32 %45, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true.split
  br label %for.end

if.end:                                           ; preds = %land.lhs.true.split, %for.body.split
  %arraydecay5 = getelementptr inbounds [1 x i32], [1 x i32]* %t, i32 0, i32 0
  %46 = load i32, i32* %digits.addr, align 4
  %47 = load i32*, i32** %a.addr, align 4
  %arraydecay6 = getelementptr inbounds [1 x i32], [1 x i32]* %t, i32 0, i32 0
  br label %bn_mod_entry

bn_mod_entry:                                     ; preds = %if.end
  %48 = alloca i32, align 4
  %49 = alloca i32*, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32*, align 4
  %52 = alloca i32*, align 4
  %53 = alloca [130 x i32], align 4
  store i32 1, i32* %48, align 4
  store i32* %arraydecay5, i32** %49, align 4
  store i32 %46, i32* %50, align 4
  store i32* %47, i32** %51, align 4
  store i32* %arraydecay6, i32** %52, align 4
  %54 = bitcast [130 x i32]* %53 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %54, i8 0, i32 520, i1 false)
  %55 = load i32, i32* %48, align 4
  %56 = load i32*, i32** %49, align 4
  %57 = load i32, i32* %50, align 4
  %58 = load i32*, i32** %51, align 4
  %59 = load i32*, i32** %52, align 4
  %60 = getelementptr inbounds [130 x i32], [130 x i32]* %53, i32 0, i32 0
  br label %bn_mod_bn_div_entry

bn_mod_bn_div_entry:                              ; preds = %bn_mod_entry
  %61 = alloca i32, align 4
  %62 = alloca i32*, align 4
  %63 = alloca i32, align 4
  %64 = alloca i32*, align 4
  %65 = alloca i32*, align 4
  %66 = alloca i32*, align 4
  %67 = alloca i64, align 8
  %68 = alloca i32, align 4
  %69 = alloca i32, align 4
  %70 = alloca [131 x i32], align 4
  %71 = alloca [65 x i32], align 4
  %72 = alloca i32, align 4
  %73 = alloca i32, align 4
  %74 = alloca i32, align 4
  store i32 %55, i32* %61, align 4
  store i32* %56, i32** %62, align 4
  store i32 %57, i32* %63, align 4
  store i32* %58, i32** %64, align 4
  store i32* %59, i32** %65, align 4
  store i32* %60, i32** %66, align 4
  %75 = load i32, i32* %61, align 4
  %76 = load i32*, i32** %62, align 4
  br label %bn_mod_bn_div_bn_digits_entry

bn_mod_bn_div_bn_digits_entry:                    ; preds = %bn_mod_bn_div_entry
  %77 = alloca i32, align 4
  %78 = alloca i32*, align 4
  %79 = alloca i32, align 4
  store i32 %75, i32* %77, align 4
  store i32* %76, i32** %78, align 4
  %80 = load i32, i32* %77, align 4
  %81 = sub i32 %80, 1
  store i32 %81, i32* %79, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.cond:                 ; preds = %bn_mod_bn_div_bn_digits_for.inc, %bn_mod_bn_div_bn_digits_entry
  %82 = load i32, i32* %79, align 4
  %83 = icmp sge i32 %82, 0
  br i1 %83, label %bn_mod_bn_div_bn_digits_for.body, label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_for.body:                 ; preds = %bn_mod_bn_div_bn_digits_for.cond
  %84 = load i32*, i32** %78, align 4
  %85 = load i32, i32* %79, align 4
  %86 = getelementptr inbounds i32, i32* %84, i32 %85
  %87 = load i32, i32* %86, align 4
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %bn_mod_bn_div_bn_digits_if.then, label %bn_mod_bn_div_bn_digits_if.end

bn_mod_bn_div_bn_digits_if.then:                  ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_if.end:                   ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.inc

bn_mod_bn_div_bn_digits_for.inc:                  ; preds = %bn_mod_bn_div_bn_digits_if.end
  %89 = load i32, i32* %79, align 4
  %90 = add nsw i32 %89, -1
  store i32 %90, i32* %79, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.end:                  ; preds = %bn_mod_bn_div_bn_digits_if.then, %bn_mod_bn_div_bn_digits_for.cond
  %91 = load i32, i32* %79, align 4
  %92 = add nsw i32 %91, 1
  br label %bn_mod_bn_div_entry.split

bn_mod_bn_div_entry.split:                        ; preds = %bn_mod_bn_div_bn_digits_for.end
  store i32 %92, i32* %73, align 4
  %93 = load i32, i32* %73, align 4
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %bn_mod_bn_div_if.then, label %bn_mod_bn_div_if.end

bn_mod_bn_div_if.then:                            ; preds = %bn_mod_bn_div_entry.split
  br label %bn_mod_bn_div_return

bn_mod_bn_div_if.end:                             ; preds = %bn_mod_bn_div_entry.split
  %95 = load i32*, i32** %62, align 4
  %96 = load i32, i32* %73, align 4
  %97 = sub i32 %96, 1
  %98 = getelementptr inbounds i32, i32* %95, i32 %97
  %99 = load i32, i32* %98, align 4
  %100 = call i32 @bn_digit_bits(i32 %99)
  %101 = sub i32 32, %100
  store i32 %101, i32* %74, align 4
  %102 = load i32, i32* %73, align 4
  %103 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7

bn_mod_bn_div_bn_assign_zero_entry7:              ; preds = %bn_mod_bn_div_if.end
  %104 = alloca i32, align 4
  %105 = alloca i32*, align 4
  %106 = alloca i32, align 4
  store i32 %102, i32* %104, align 4
  store i32* %103, i32** %105, align 4
  store i32 0, i32* %106, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.cond8:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc10, %bn_mod_bn_div_bn_assign_zero_entry7
  %107 = load i32, i32* %106, align 4
  %108 = load i32, i32* %104, align 4
  %109 = icmp ult i32 %107, %108
  br i1 %109, label %bn_mod_bn_div_bn_assign_zero_for.body9, label %bn_mod_bn_div_bn_assign_zero_for.end11

bn_mod_bn_div_bn_assign_zero_for.body9:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  %110 = load i32*, i32** %105, align 4
  %111 = load i32, i32* %106, align 4
  %112 = getelementptr inbounds i32, i32* %110, i32 %111
  store i32 0, i32* %112, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc10

bn_mod_bn_div_bn_assign_zero_for.inc10:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.body9
  %113 = load i32, i32* %106, align 4
  %114 = add i32 %113, 1
  store i32 %114, i32* %106, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.end11:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  br label %bn_mod_bn_div_if.end.split6

bn_mod_bn_div_if.end.split6:                      ; preds = %bn_mod_bn_div_bn_assign_zero_for.end11
  %115 = load i32, i32* %63, align 4
  %116 = load i32, i32* %74, align 4
  %117 = load i32*, i32** %64, align 4
  %118 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 0
  %119 = call i32 @bn_shift_l(i32* %118, i32* %117, i32 %116, i32 %115)
  %120 = load i32, i32* %63, align 4
  %121 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %120
  store i32 %119, i32* %121, align 4
  %122 = load i32, i32* %73, align 4
  %123 = load i32, i32* %74, align 4
  %124 = load i32*, i32** %62, align 4
  %125 = getelementptr inbounds [65 x i32], [65 x i32]* %71, i32 0, i32 0
  %126 = call i32 @bn_shift_l(i32* %125, i32* %124, i32 %123, i32 %122)
  %127 = load i32, i32* %73, align 4
  %128 = sub i32 %127, 1
  %129 = getelementptr inbounds [65 x i32], [65 x i32]* %71, i32 0, i32 %128
  %130 = load i32, i32* %129, align 4
  store i32 %130, i32* %69, align 4
  %131 = load i32, i32* %63, align 4
  %132 = load i32*, i32** %66, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1

bn_mod_bn_div_bn_assign_zero_entry1:              ; preds = %bn_mod_bn_div_if.end.split6
  %133 = alloca i32, align 4
  %134 = alloca i32*, align 4
  %135 = alloca i32, align 4
  store i32 %131, i32* %133, align 4
  store i32* %132, i32** %134, align 4
  store i32 0, i32* %135, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.cond2:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc4, %bn_mod_bn_div_bn_assign_zero_entry1
  %136 = load i32, i32* %135, align 4
  %137 = load i32, i32* %133, align 4
  %138 = icmp ult i32 %136, %137
  br i1 %138, label %bn_mod_bn_div_bn_assign_zero_for.body3, label %bn_mod_bn_div_bn_assign_zero_for.end5

bn_mod_bn_div_bn_assign_zero_for.body3:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  %139 = load i32*, i32** %134, align 4
  %140 = load i32, i32* %135, align 4
  %141 = getelementptr inbounds i32, i32* %139, i32 %140
  store i32 0, i32* %141, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc4

bn_mod_bn_div_bn_assign_zero_for.inc4:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.body3
  %142 = load i32, i32* %135, align 4
  %143 = add i32 %142, 1
  store i32 %143, i32* %135, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.end5:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  br label %bn_mod_bn_div_if.end.split

bn_mod_bn_div_if.end.split:                       ; preds = %bn_mod_bn_div_bn_assign_zero_for.end5
  %144 = load i32, i32* %63, align 4
  %145 = load i32, i32* %73, align 4
  %146 = sub i32 %144, %145
  store i32 %146, i32* %72, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.cond:                           ; preds = %bn_mod_bn_div_for.inc, %bn_mod_bn_div_if.end.split
  %147 = load i32, i32* %72, align 4
  %148 = icmp sge i32 %147, 0
  br i1 %148, label %bn_mod_bn_div_for.body, label %bn_mod_bn_div_for.end

bn_mod_bn_div_for.body:                           ; preds = %bn_mod_bn_div_for.cond
  %149 = load i32, i32* %69, align 4
  %150 = icmp eq i32 %149, -1
  br i1 %150, label %bn_mod_bn_div_if.then13, label %bn_mod_bn_div_if.else

bn_mod_bn_div_if.then13:                          ; preds = %bn_mod_bn_div_for.body
  %151 = load i32, i32* %72, align 4
  %152 = load i32, i32* %73, align 4
  %153 = add i32 %151, %152
  %154 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %153
  %155 = load i32, i32* %154, align 4
  store i32 %155, i32* %68, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.else:                            ; preds = %bn_mod_bn_div_for.body
  %156 = load i32, i32* %72, align 4
  %157 = load i32, i32* %73, align 4
  %158 = add i32 %156, %157
  %159 = sub i32 %158, 1
  %160 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %159
  %161 = load i32, i32* %160, align 4
  %162 = zext i32 %161 to i64
  store i64 %162, i64* %67, align 8
  %163 = load i32, i32* %72, align 4
  %164 = load i32, i32* %73, align 4
  %165 = add i32 %163, %164
  %166 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %165
  %167 = load i32, i32* %166, align 4
  %168 = zext i32 %167 to i64
  %169 = shl i64 %168, 32
  %170 = load i64, i64* %67, align 8
  %171 = add i64 %170, %169
  store i64 %171, i64* %67, align 8
  %172 = load i64, i64* %67, align 8
  %173 = load i32, i32* %69, align 4
  %174 = add i32 %173, 1
  %175 = zext i32 %174 to i64
  %176 = udiv i64 %172, %175
  %177 = trunc i64 %176 to i32
  store i32 %177, i32* %68, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.end25:                           ; preds = %bn_mod_bn_div_if.else, %bn_mod_bn_div_if.then13
  %178 = load i32, i32* %73, align 4
  %179 = getelementptr inbounds [65 x i32], [65 x i32]* %71, i32 0, i32 0
  %180 = load i32, i32* %68, align 4
  %181 = load i32, i32* %72, align 4
  %182 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %181
  %183 = load i32, i32* %72, align 4
  %184 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %183
  %185 = call i32 @bn_sub_digit_mul(i32* %184, i32* %182, i32 %180, i32* %179, i32 %178)
  %186 = load i32, i32* %72, align 4
  %187 = load i32, i32* %73, align 4
  %188 = add i32 %186, %187
  %189 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %188
  %190 = load i32, i32* %189, align 4
  %191 = sub i32 %190, %185
  store i32 %191, i32* %189, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.cond:                         ; preds = %bn_mod_bn_div_while.body.split, %bn_mod_bn_div_if.end25
  %192 = load i32, i32* %72, align 4
  %193 = load i32, i32* %73, align 4
  %194 = add i32 %192, %193
  %195 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %194
  %196 = load i32, i32* %195, align 4
  %197 = icmp ne i32 %196, 0
  br i1 %197, label %bn_mod_bn_div_lor.end, label %bn_mod_bn_div_lor.rhs

bn_mod_bn_div_lor.rhs:                            ; preds = %bn_mod_bn_div_while.cond
  %198 = load i32, i32* %73, align 4
  %199 = getelementptr inbounds [65 x i32], [65 x i32]* %71, i32 0, i32 0
  %200 = load i32, i32* %72, align 4
  %201 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %200
  br label %bn_mod_bn_cmp_entry

bn_mod_bn_cmp_entry:                              ; preds = %bn_mod_bn_div_lor.rhs
  %202 = alloca i32, align 4
  %203 = alloca i32, align 4
  %204 = alloca i32*, align 4
  %205 = alloca i32*, align 4
  %206 = alloca i32, align 4
  store i32 %198, i32* %203, align 4
  store i32* %199, i32** %204, align 4
  store i32* %201, i32** %205, align 4
  %207 = load i32, i32* %203, align 4
  %208 = sub i32 %207, 1
  store i32 %208, i32* %206, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.cond:                           ; preds = %bn_mod_bn_cmp_for.inc, %bn_mod_bn_cmp_entry
  %209 = load i32, i32* %206, align 4
  %210 = icmp sge i32 %209, 0
  br i1 %210, label %bn_mod_bn_cmp_for.body, label %bn_mod_bn_cmp_for.end

bn_mod_bn_cmp_for.body:                           ; preds = %bn_mod_bn_cmp_for.cond
  %211 = load i32*, i32** %205, align 4
  %212 = load i32, i32* %206, align 4
  %213 = getelementptr inbounds i32, i32* %211, i32 %212
  %214 = load i32, i32* %213, align 4
  %215 = load i32*, i32** %204, align 4
  %216 = load i32, i32* %206, align 4
  %217 = getelementptr inbounds i32, i32* %215, i32 %216
  %218 = load i32, i32* %217, align 4
  %219 = icmp ugt i32 %214, %218
  br i1 %219, label %bn_mod_bn_cmp_if.then, label %bn_mod_bn_cmp_if.end

bn_mod_bn_cmp_if.then:                            ; preds = %bn_mod_bn_cmp_for.body
  store i32 1, i32* %202, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end:                             ; preds = %bn_mod_bn_cmp_for.body
  %220 = load i32*, i32** %205, align 4
  %221 = load i32, i32* %206, align 4
  %222 = getelementptr inbounds i32, i32* %220, i32 %221
  %223 = load i32, i32* %222, align 4
  %224 = load i32*, i32** %204, align 4
  %225 = load i32, i32* %206, align 4
  %226 = getelementptr inbounds i32, i32* %224, i32 %225
  %227 = load i32, i32* %226, align 4
  %228 = icmp ult i32 %223, %227
  br i1 %228, label %bn_mod_bn_cmp_if.then6, label %bn_mod_bn_cmp_if.end7

bn_mod_bn_cmp_if.then6:                           ; preds = %bn_mod_bn_cmp_if.end
  store i32 -1, i32* %202, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end7:                            ; preds = %bn_mod_bn_cmp_if.end
  br label %bn_mod_bn_cmp_for.inc

bn_mod_bn_cmp_for.inc:                            ; preds = %bn_mod_bn_cmp_if.end7
  %229 = load i32, i32* %206, align 4
  %230 = add nsw i32 %229, -1
  store i32 %230, i32* %206, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.end:                            ; preds = %bn_mod_bn_cmp_for.cond
  store i32 0, i32* %202, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_return:                             ; preds = %bn_mod_bn_cmp_for.end, %bn_mod_bn_cmp_if.then6, %bn_mod_bn_cmp_if.then
  %231 = load i32, i32* %202, align 4
  br label %bn_mod_bn_div_lor.rhs.split

bn_mod_bn_div_lor.rhs.split:                      ; preds = %bn_mod_bn_cmp_return
  %232 = icmp sge i32 %231, 0
  br label %bn_mod_bn_div_lor.end

bn_mod_bn_div_lor.end:                            ; preds = %bn_mod_bn_div_lor.rhs.split, %bn_mod_bn_div_while.cond
  %233 = phi i1 [ true, %bn_mod_bn_div_while.cond ], [ %232, %bn_mod_bn_div_lor.rhs.split ]
  br i1 %233, label %bn_mod_bn_div_while.body, label %bn_mod_bn_div_while.end

bn_mod_bn_div_while.body:                         ; preds = %bn_mod_bn_div_lor.end
  %234 = load i32, i32* %68, align 4
  %235 = add i32 %234, 1
  store i32 %235, i32* %68, align 4
  %236 = load i32, i32* %73, align 4
  %237 = getelementptr inbounds [65 x i32], [65 x i32]* %71, i32 0, i32 0
  %238 = load i32, i32* %72, align 4
  %239 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %238
  %240 = load i32, i32* %72, align 4
  %241 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %240
  br label %bn_mod_bn_div_bn_sub_entry

bn_mod_bn_div_bn_sub_entry:                       ; preds = %bn_mod_bn_div_while.body
  %242 = alloca i32, align 4
  %243 = alloca i32*, align 4
  %244 = alloca i32*, align 4
  %245 = alloca i32*, align 4
  %246 = alloca i32, align 4
  %247 = alloca i32, align 4
  %248 = alloca i32, align 4
  store i32 %236, i32* %242, align 4
  store i32* %237, i32** %243, align 4
  store i32* %239, i32** %244, align 4
  store i32* %241, i32** %245, align 4
  store i32 0, i32* %247, align 4
  store i32 0, i32* %248, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.cond:                    ; preds = %bn_mod_bn_div_bn_sub_for.inc, %bn_mod_bn_div_bn_sub_entry
  %249 = load i32, i32* %248, align 4
  %250 = load i32, i32* %242, align 4
  %251 = icmp ult i32 %249, %250
  br i1 %251, label %bn_mod_bn_div_bn_sub_for.body, label %bn_mod_bn_div_bn_sub_for.end

bn_mod_bn_div_bn_sub_for.body:                    ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %252 = load i32*, i32** %244, align 4
  %253 = load i32, i32* %248, align 4
  %254 = getelementptr inbounds i32, i32* %252, i32 %253
  %255 = load i32, i32* %254, align 4
  %256 = load i32, i32* %247, align 4
  %257 = sub i32 %255, %256
  store i32 %257, i32* %246, align 4
  %258 = load i32, i32* %247, align 4
  %259 = sub i32 -1, %258
  %260 = icmp ugt i32 %257, %259
  br i1 %260, label %bn_mod_bn_div_bn_sub_if.then, label %bn_mod_bn_div_bn_sub_if.else

bn_mod_bn_div_bn_sub_if.then:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %261 = load i32*, i32** %243, align 4
  %262 = load i32, i32* %248, align 4
  %263 = getelementptr inbounds i32, i32* %261, i32 %262
  %264 = load i32, i32* %263, align 4
  %265 = sub i32 -1, %264
  store i32 %265, i32* %246, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.else:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %266 = load i32*, i32** %243, align 4
  %267 = load i32, i32* %248, align 4
  %268 = getelementptr inbounds i32, i32* %266, i32 %267
  %269 = load i32, i32* %268, align 4
  %270 = load i32, i32* %246, align 4
  %271 = sub i32 %270, %269
  store i32 %271, i32* %246, align 4
  %272 = load i32*, i32** %243, align 4
  %273 = load i32, i32* %248, align 4
  %274 = getelementptr inbounds i32, i32* %272, i32 %273
  %275 = load i32, i32* %274, align 4
  %276 = sub i32 -1, %275
  %277 = icmp ugt i32 %271, %276
  br i1 %277, label %bn_mod_bn_div_bn_sub_if.then10, label %bn_mod_bn_div_bn_sub_if.else11

bn_mod_bn_div_bn_sub_if.then10:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 1, i32* %247, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.else11:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 0, i32* %247, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.end:                      ; preds = %bn_mod_bn_div_bn_sub_if.else11, %bn_mod_bn_div_bn_sub_if.then10
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.end12:                    ; preds = %bn_mod_bn_div_bn_sub_if.end, %bn_mod_bn_div_bn_sub_if.then
  %278 = load i32, i32* %246, align 4
  %279 = load i32*, i32** %245, align 4
  %280 = load i32, i32* %248, align 4
  %281 = getelementptr inbounds i32, i32* %279, i32 %280
  store i32 %278, i32* %281, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc

bn_mod_bn_div_bn_sub_for.inc:                     ; preds = %bn_mod_bn_div_bn_sub_if.end12
  %282 = load i32, i32* %248, align 4
  %283 = add i32 %282, 1
  store i32 %283, i32* %248, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.end:                     ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %284 = load i32, i32* %247, align 4
  br label %bn_mod_bn_div_while.body.split

bn_mod_bn_div_while.body.split:                   ; preds = %bn_mod_bn_div_bn_sub_for.end
  %285 = load i32, i32* %72, align 4
  %286 = load i32, i32* %73, align 4
  %287 = add i32 %285, %286
  %288 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 %287
  %289 = load i32, i32* %288, align 4
  %290 = sub i32 %289, %284
  store i32 %290, i32* %288, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.end:                          ; preds = %bn_mod_bn_div_lor.end
  %291 = load i32, i32* %68, align 4
  %292 = load i32*, i32** %66, align 4
  %293 = load i32, i32* %72, align 4
  %294 = getelementptr inbounds i32, i32* %292, i32 %293
  store i32 %291, i32* %294, align 4
  br label %bn_mod_bn_div_for.inc

bn_mod_bn_div_for.inc:                            ; preds = %bn_mod_bn_div_while.end
  %295 = load i32, i32* %72, align 4
  %296 = add nsw i32 %295, -1
  store i32 %296, i32* %72, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.end:                            ; preds = %bn_mod_bn_div_for.cond
  %297 = load i32, i32* %61, align 4
  %298 = load i32*, i32** %65, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry

bn_mod_bn_div_bn_assign_zero_entry:               ; preds = %bn_mod_bn_div_for.end
  %299 = alloca i32, align 4
  %300 = alloca i32*, align 4
  %301 = alloca i32, align 4
  store i32 %297, i32* %299, align 4
  store i32* %298, i32** %300, align 4
  store i32 0, i32* %301, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.cond:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc, %bn_mod_bn_div_bn_assign_zero_entry
  %302 = load i32, i32* %301, align 4
  %303 = load i32, i32* %299, align 4
  %304 = icmp ult i32 %302, %303
  br i1 %304, label %bn_mod_bn_div_bn_assign_zero_for.body, label %bn_mod_bn_div_bn_assign_zero_for.end

bn_mod_bn_div_bn_assign_zero_for.body:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  %305 = load i32*, i32** %300, align 4
  %306 = load i32, i32* %301, align 4
  %307 = getelementptr inbounds i32, i32* %305, i32 %306
  store i32 0, i32* %307, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc

bn_mod_bn_div_bn_assign_zero_for.inc:             ; preds = %bn_mod_bn_div_bn_assign_zero_for.body
  %308 = load i32, i32* %301, align 4
  %309 = add i32 %308, 1
  store i32 %309, i32* %301, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.end:             ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  br label %bn_mod_bn_div_for.end.split

bn_mod_bn_div_for.end.split:                      ; preds = %bn_mod_bn_div_bn_assign_zero_for.end
  %310 = load i32, i32* %73, align 4
  %311 = load i32, i32* %74, align 4
  %312 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 0
  %313 = load i32*, i32** %65, align 4
  %314 = call i32 @bn_shift_r(i32* %313, i32* %312, i32 %311, i32 %310)
  %315 = getelementptr inbounds [131 x i32], [131 x i32]* %70, i32 0, i32 0
  %316 = bitcast i32* %315 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %316, i8 0, i32 524, i1 false)
  %317 = getelementptr inbounds [65 x i32], [65 x i32]* %71, i32 0, i32 0
  %318 = bitcast i32* %317 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %318, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return

bn_mod_bn_div_return:                             ; preds = %bn_mod_bn_div_for.end.split, %bn_mod_bn_div_if.then
  br label %bn_mod_entry.split

bn_mod_entry.split:                               ; preds = %bn_mod_bn_div_return
  %319 = getelementptr inbounds [130 x i32], [130 x i32]* %53, i32 0, i32 0
  %320 = bitcast i32* %319 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %320, i8 0, i32 520, i1 false)
  br label %if.end.split

if.end.split:                                     ; preds = %bn_mod_entry.split
  %arraydecay7 = getelementptr inbounds [1 x i32], [1 x i32]* %t, i32 0, i32 0
  %call8 = call i32 @bn_is_zero(i32* %arraydecay7, i32 1)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end.split
  store i32 1, i32* %status, align 4
  br label %for.end

if.end11:                                         ; preds = %if.end.split
  br label %for.inc

for.inc:                                          ; preds = %if.end11
  %321 = load i32, i32* %i, align 4
  %inc = add i32 %321, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then10, %if.then, %for.cond
  store i32 0, i32* %i, align 4
  %arraydecay12 = getelementptr inbounds [1 x i32], [1 x i32]* %t, i32 0, i32 0
  %322 = bitcast i32* %arraydecay12 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %322, i8 0, i32 4, i1 false)
  %323 = load i32, i32* %status, align 4
  ret i32 %323
}

; Function Attrs: noinline optnone
define internal i32 @fermat_test(i32* %a, i32 %digits) #2 {
entry:
  %digits.addr = alloca i32, align 4
  %a.addr = alloca i32*, align 4
  %status = alloca i32, align 4
  %t = alloca [65 x i32], align 4
  %u = alloca [65 x i32], align 4
  store i32 %digits, i32* %digits.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %digits.addr, align 4
  %arraydecay = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_zero_entry

bn_assign_zero_entry:                             ; preds = %entry
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %1, align 4
  store i32* %arraydecay, i32** %2, align 4
  store i32 0, i32* %3, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.cond:                          ; preds = %bn_assign_zero_for.inc, %bn_assign_zero_entry
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %1, align 4
  %6 = icmp ult i32 %4, %5
  br i1 %6, label %bn_assign_zero_for.body, label %bn_assign_zero_for.end

bn_assign_zero_for.body:                          ; preds = %bn_assign_zero_for.cond
  %7 = load i32*, i32** %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 0, i32* %9, align 4
  br label %bn_assign_zero_for.inc

bn_assign_zero_for.inc:                           ; preds = %bn_assign_zero_for.body
  %10 = load i32, i32* %3, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %3, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.end:                           ; preds = %bn_assign_zero_for.cond
  br label %entry.split

entry.split:                                      ; preds = %bn_assign_zero_for.end
  %arrayidx = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  store i32 2, i32* %arrayidx, align 4
  %12 = load i32, i32* %digits.addr, align 4
  %13 = load i32*, i32** %a.addr, align 4
  %14 = load i32, i32* %digits.addr, align 4
  %15 = load i32*, i32** %a.addr, align 4
  %arraydecay1 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_mod_exp_entry

bn_mod_exp_entry:                                 ; preds = %entry.split
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32*, align 4
  %20 = alloca i32*, align 4
  %21 = alloca i32*, align 4
  %22 = alloca [3 x [65 x i32]], align 4
  %23 = alloca i32, align 4
  %24 = alloca [65 x i32], align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  store i32 %12, i32* %16, align 4
  store i32* %13, i32** %17, align 4
  store i32 %14, i32* %18, align 4
  store i32* %15, i32** %19, align 4
  store i32* %arraydecay1, i32** %20, align 4
  store i32* %arraydecay2, i32** %21, align 4
  %29 = load i32, i32* %16, align 4
  %30 = load i32*, i32** %20, align 4
  %31 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %22, i32 0, i32 0
  %32 = getelementptr inbounds [65 x i32], [65 x i32]* %31, i32 0, i32 0
  br label %bn_mod_exp_bn_assign_entry1

bn_mod_exp_bn_assign_entry1:                      ; preds = %bn_mod_exp_entry
  %33 = alloca i32, align 4
  %34 = alloca i32*, align 4
  %35 = alloca i32*, align 4
  %36 = alloca i32, align 4
  store i32 %29, i32* %33, align 4
  store i32* %30, i32** %34, align 4
  store i32* %32, i32** %35, align 4
  store i32 0, i32* %36, align 4
  br label %bn_mod_exp_bn_assign_for.cond2

bn_mod_exp_bn_assign_for.cond2:                   ; preds = %bn_mod_exp_bn_assign_for.inc4, %bn_mod_exp_bn_assign_entry1
  %37 = load i32, i32* %36, align 4
  %38 = load i32, i32* %33, align 4
  %39 = icmp ult i32 %37, %38
  br i1 %39, label %bn_mod_exp_bn_assign_for.body3, label %bn_mod_exp_bn_assign_for.end5

bn_mod_exp_bn_assign_for.body3:                   ; preds = %bn_mod_exp_bn_assign_for.cond2
  %40 = load i32*, i32** %34, align 4
  %41 = load i32, i32* %36, align 4
  %42 = getelementptr inbounds i32, i32* %40, i32 %41
  %43 = load i32, i32* %42, align 4
  %44 = load i32*, i32** %35, align 4
  %45 = load i32, i32* %36, align 4
  %46 = getelementptr inbounds i32, i32* %44, i32 %45
  store i32 %43, i32* %46, align 4
  br label %bn_mod_exp_bn_assign_for.inc4

bn_mod_exp_bn_assign_for.inc4:                    ; preds = %bn_mod_exp_bn_assign_for.body3
  %47 = load i32, i32* %36, align 4
  %48 = add i32 %47, 1
  store i32 %48, i32* %36, align 4
  br label %bn_mod_exp_bn_assign_for.cond2

bn_mod_exp_bn_assign_for.end5:                    ; preds = %bn_mod_exp_bn_assign_for.cond2
  br label %bn_mod_exp_entry.split

bn_mod_exp_entry.split:                           ; preds = %bn_mod_exp_bn_assign_for.end5
  %49 = load i32, i32* %16, align 4
  %50 = load i32*, i32** %17, align 4
  %51 = load i32*, i32** %20, align 4
  %52 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %22, i32 0, i32 0
  %53 = getelementptr inbounds [65 x i32], [65 x i32]* %52, i32 0, i32 0
  %54 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %22, i32 0, i32 1
  %55 = getelementptr inbounds [65 x i32], [65 x i32]* %54, i32 0, i32 0
  call void @bn_mod_mul(i32* %55, i32* %53, i32* %51, i32* %50, i32 %49)
  %56 = load i32, i32* %16, align 4
  %57 = load i32*, i32** %17, align 4
  %58 = load i32*, i32** %20, align 4
  %59 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %22, i32 0, i32 1
  %60 = getelementptr inbounds [65 x i32], [65 x i32]* %59, i32 0, i32 0
  %61 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %22, i32 0, i32 2
  %62 = getelementptr inbounds [65 x i32], [65 x i32]* %61, i32 0, i32 0
  call void @bn_mod_mul(i32* %62, i32* %60, i32* %58, i32* %57, i32 %56)
  %63 = load i32, i32* %16, align 4
  %64 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  br label %bn_mod_exp_bn_assign_zero_entry

bn_mod_exp_bn_assign_zero_entry:                  ; preds = %bn_mod_exp_entry.split
  %65 = alloca i32, align 4
  %66 = alloca i32*, align 4
  %67 = alloca i32, align 4
  store i32 %63, i32* %65, align 4
  store i32* %64, i32** %66, align 4
  store i32 0, i32* %67, align 4
  br label %bn_mod_exp_bn_assign_zero_for.cond

bn_mod_exp_bn_assign_zero_for.cond:               ; preds = %bn_mod_exp_bn_assign_zero_for.inc, %bn_mod_exp_bn_assign_zero_entry
  %68 = load i32, i32* %67, align 4
  %69 = load i32, i32* %65, align 4
  %70 = icmp ult i32 %68, %69
  br i1 %70, label %bn_mod_exp_bn_assign_zero_for.body, label %bn_mod_exp_bn_assign_zero_for.end

bn_mod_exp_bn_assign_zero_for.body:               ; preds = %bn_mod_exp_bn_assign_zero_for.cond
  %71 = load i32*, i32** %66, align 4
  %72 = load i32, i32* %67, align 4
  %73 = getelementptr inbounds i32, i32* %71, i32 %72
  store i32 0, i32* %73, align 4
  br label %bn_mod_exp_bn_assign_zero_for.inc

bn_mod_exp_bn_assign_zero_for.inc:                ; preds = %bn_mod_exp_bn_assign_zero_for.body
  %74 = load i32, i32* %67, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %67, align 4
  br label %bn_mod_exp_bn_assign_zero_for.cond

bn_mod_exp_bn_assign_zero_for.end:                ; preds = %bn_mod_exp_bn_assign_zero_for.cond
  br label %bn_mod_exp_entry.split.split

bn_mod_exp_entry.split.split:                     ; preds = %bn_mod_exp_bn_assign_zero_for.end
  %76 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  store i32 1, i32* %76, align 4
  %77 = load i32, i32* %18, align 4
  %78 = load i32*, i32** %19, align 4
  br label %bn_mod_exp_bn_digits_entry

bn_mod_exp_bn_digits_entry:                       ; preds = %bn_mod_exp_entry.split.split
  %79 = alloca i32, align 4
  %80 = alloca i32*, align 4
  %81 = alloca i32, align 4
  store i32 %77, i32* %79, align 4
  store i32* %78, i32** %80, align 4
  %82 = load i32, i32* %79, align 4
  %83 = sub i32 %82, 1
  store i32 %83, i32* %81, align 4
  br label %bn_mod_exp_bn_digits_for.cond

bn_mod_exp_bn_digits_for.cond:                    ; preds = %bn_mod_exp_bn_digits_for.inc, %bn_mod_exp_bn_digits_entry
  %84 = load i32, i32* %81, align 4
  %85 = icmp sge i32 %84, 0
  br i1 %85, label %bn_mod_exp_bn_digits_for.body, label %bn_mod_exp_bn_digits_for.end

bn_mod_exp_bn_digits_for.body:                    ; preds = %bn_mod_exp_bn_digits_for.cond
  %86 = load i32*, i32** %80, align 4
  %87 = load i32, i32* %81, align 4
  %88 = getelementptr inbounds i32, i32* %86, i32 %87
  %89 = load i32, i32* %88, align 4
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %bn_mod_exp_bn_digits_if.then, label %bn_mod_exp_bn_digits_if.end

bn_mod_exp_bn_digits_if.then:                     ; preds = %bn_mod_exp_bn_digits_for.body
  br label %bn_mod_exp_bn_digits_for.end

bn_mod_exp_bn_digits_if.end:                      ; preds = %bn_mod_exp_bn_digits_for.body
  br label %bn_mod_exp_bn_digits_for.inc

bn_mod_exp_bn_digits_for.inc:                     ; preds = %bn_mod_exp_bn_digits_if.end
  %91 = load i32, i32* %81, align 4
  %92 = add nsw i32 %91, -1
  store i32 %92, i32* %81, align 4
  br label %bn_mod_exp_bn_digits_for.cond

bn_mod_exp_bn_digits_for.end:                     ; preds = %bn_mod_exp_bn_digits_if.then, %bn_mod_exp_bn_digits_for.cond
  %93 = load i32, i32* %81, align 4
  %94 = add nsw i32 %93, 1
  br label %bn_mod_exp_entry.split.split.split

bn_mod_exp_entry.split.split.split:               ; preds = %bn_mod_exp_bn_digits_for.end
  store i32 %94, i32* %18, align 4
  %95 = load i32, i32* %18, align 4
  %96 = sub i32 %95, 1
  store i32 %96, i32* %25, align 4
  br label %bn_mod_exp_for.cond

bn_mod_exp_for.cond:                              ; preds = %bn_mod_exp_for.inc35, %bn_mod_exp_entry.split.split.split
  %97 = load i32, i32* %25, align 4
  %98 = icmp sge i32 %97, 0
  br i1 %98, label %bn_mod_exp_for.body, label %bn_mod_exp_for.end36

bn_mod_exp_for.body:                              ; preds = %bn_mod_exp_for.cond
  %99 = load i32*, i32** %19, align 4
  %100 = load i32, i32* %25, align 4
  %101 = getelementptr inbounds i32, i32* %99, i32 %100
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %23, align 4
  store i32 32, i32* %26, align 4
  %103 = load i32, i32* %25, align 4
  %104 = load i32, i32* %18, align 4
  %105 = sub i32 %104, 1
  %106 = icmp eq i32 %103, %105
  br i1 %106, label %bn_mod_exp_if.then, label %bn_mod_exp_if.end

bn_mod_exp_if.then:                               ; preds = %bn_mod_exp_for.body
  br label %bn_mod_exp_while.cond

bn_mod_exp_while.cond:                            ; preds = %bn_mod_exp_while.body, %bn_mod_exp_if.then
  %107 = load i32, i32* %23, align 4
  %108 = lshr i32 %107, 30
  %109 = and i32 %108, 3
  %110 = icmp ne i32 %109, 0
  %111 = xor i1 %110, true
  br i1 %111, label %bn_mod_exp_while.body, label %bn_mod_exp_while.end

bn_mod_exp_while.body:                            ; preds = %bn_mod_exp_while.cond
  %112 = load i32, i32* %23, align 4
  %113 = shl i32 %112, 2
  store i32 %113, i32* %23, align 4
  %114 = load i32, i32* %26, align 4
  %115 = sub i32 %114, 2
  store i32 %115, i32* %26, align 4
  br label %bn_mod_exp_while.cond

bn_mod_exp_while.end:                             ; preds = %bn_mod_exp_while.cond
  br label %bn_mod_exp_if.end

bn_mod_exp_if.end:                                ; preds = %bn_mod_exp_while.end, %bn_mod_exp_for.body
  store i32 0, i32* %27, align 4
  br label %bn_mod_exp_for.cond15

bn_mod_exp_for.cond15:                            ; preds = %bn_mod_exp_for.inc, %bn_mod_exp_if.end
  %116 = load i32, i32* %27, align 4
  %117 = load i32, i32* %26, align 4
  %118 = icmp ult i32 %116, %117
  br i1 %118, label %bn_mod_exp_for.body17, label %bn_mod_exp_for.end

bn_mod_exp_for.body17:                            ; preds = %bn_mod_exp_for.cond15
  %119 = load i32, i32* %16, align 4
  %120 = load i32*, i32** %17, align 4
  %121 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  %122 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  %123 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  call void @bn_mod_mul(i32* %123, i32* %122, i32* %121, i32* %120, i32 %119)
  %124 = load i32, i32* %16, align 4
  %125 = load i32*, i32** %17, align 4
  %126 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  %127 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  %128 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  call void @bn_mod_mul(i32* %128, i32* %127, i32* %126, i32* %125, i32 %124)
  %129 = load i32, i32* %23, align 4
  %130 = lshr i32 %129, 30
  %131 = and i32 %130, 3
  store i32 %131, i32* %28, align 4
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %bn_mod_exp_if.then27, label %bn_mod_exp_if.end33

bn_mod_exp_if.then27:                             ; preds = %bn_mod_exp_for.body17
  %133 = load i32, i32* %16, align 4
  %134 = load i32*, i32** %17, align 4
  %135 = load i32, i32* %28, align 4
  %136 = sub i32 %135, 1
  %137 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %22, i32 0, i32 %136
  %138 = getelementptr inbounds [65 x i32], [65 x i32]* %137, i32 0, i32 0
  %139 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  %140 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  call void @bn_mod_mul(i32* %140, i32* %139, i32* %138, i32* %134, i32 %133)
  br label %bn_mod_exp_if.end33

bn_mod_exp_if.end33:                              ; preds = %bn_mod_exp_if.then27, %bn_mod_exp_for.body17
  %141 = load i32, i32* %23, align 4
  %142 = shl i32 %141, 2
  store i32 %142, i32* %23, align 4
  br label %bn_mod_exp_for.inc

bn_mod_exp_for.inc:                               ; preds = %bn_mod_exp_if.end33
  %143 = load i32, i32* %27, align 4
  %144 = add i32 %143, 2
  store i32 %144, i32* %27, align 4
  br label %bn_mod_exp_for.cond15

bn_mod_exp_for.end:                               ; preds = %bn_mod_exp_for.cond15
  br label %bn_mod_exp_for.inc35

bn_mod_exp_for.inc35:                             ; preds = %bn_mod_exp_for.end
  %145 = load i32, i32* %25, align 4
  %146 = add nsw i32 %145, -1
  store i32 %146, i32* %25, align 4
  br label %bn_mod_exp_for.cond

bn_mod_exp_for.end36:                             ; preds = %bn_mod_exp_for.cond
  %147 = load i32, i32* %16, align 4
  %148 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  %149 = load i32*, i32** %21, align 4
  br label %bn_mod_exp_bn_assign_entry

bn_mod_exp_bn_assign_entry:                       ; preds = %bn_mod_exp_for.end36
  %150 = alloca i32, align 4
  %151 = alloca i32*, align 4
  %152 = alloca i32*, align 4
  %153 = alloca i32, align 4
  store i32 %147, i32* %150, align 4
  store i32* %148, i32** %151, align 4
  store i32* %149, i32** %152, align 4
  store i32 0, i32* %153, align 4
  br label %bn_mod_exp_bn_assign_for.cond

bn_mod_exp_bn_assign_for.cond:                    ; preds = %bn_mod_exp_bn_assign_for.inc, %bn_mod_exp_bn_assign_entry
  %154 = load i32, i32* %153, align 4
  %155 = load i32, i32* %150, align 4
  %156 = icmp ult i32 %154, %155
  br i1 %156, label %bn_mod_exp_bn_assign_for.body, label %bn_mod_exp_bn_assign_for.end

bn_mod_exp_bn_assign_for.body:                    ; preds = %bn_mod_exp_bn_assign_for.cond
  %157 = load i32*, i32** %151, align 4
  %158 = load i32, i32* %153, align 4
  %159 = getelementptr inbounds i32, i32* %157, i32 %158
  %160 = load i32, i32* %159, align 4
  %161 = load i32*, i32** %152, align 4
  %162 = load i32, i32* %153, align 4
  %163 = getelementptr inbounds i32, i32* %161, i32 %162
  store i32 %160, i32* %163, align 4
  br label %bn_mod_exp_bn_assign_for.inc

bn_mod_exp_bn_assign_for.inc:                     ; preds = %bn_mod_exp_bn_assign_for.body
  %164 = load i32, i32* %153, align 4
  %165 = add i32 %164, 1
  store i32 %165, i32* %153, align 4
  br label %bn_mod_exp_bn_assign_for.cond

bn_mod_exp_bn_assign_for.end:                     ; preds = %bn_mod_exp_bn_assign_for.cond
  br label %bn_mod_exp_for.end36.split

bn_mod_exp_for.end36.split:                       ; preds = %bn_mod_exp_bn_assign_for.end
  %166 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %22, i32 0, i32 0
  %167 = bitcast [65 x i32]* %166 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %167, i8 0, i32 780, i1 false)
  %168 = getelementptr inbounds [65 x i32], [65 x i32]* %24, i32 0, i32 0
  %169 = bitcast i32* %168 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %169, i8 0, i32 260, i1 false)
  br label %entry.split.split1

entry.split.split1:                               ; preds = %bn_mod_exp_for.end36.split
  %170 = load i32, i32* %digits.addr, align 4
  %arraydecay3 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_cmp_entry

bn_cmp_entry:                                     ; preds = %entry.split.split1
  %171 = alloca i32, align 4
  %172 = alloca i32, align 4
  %173 = alloca i32*, align 4
  %174 = alloca i32*, align 4
  %175 = alloca i32, align 4
  store i32 %170, i32* %172, align 4
  store i32* %arraydecay3, i32** %173, align 4
  store i32* %arraydecay4, i32** %174, align 4
  %176 = load i32, i32* %172, align 4
  %177 = sub i32 %176, 1
  store i32 %177, i32* %175, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.cond:                                  ; preds = %bn_cmp_for.inc, %bn_cmp_entry
  %178 = load i32, i32* %175, align 4
  %179 = icmp sge i32 %178, 0
  br i1 %179, label %bn_cmp_for.body, label %bn_cmp_for.end

bn_cmp_for.body:                                  ; preds = %bn_cmp_for.cond
  %180 = load i32*, i32** %174, align 4
  %181 = load i32, i32* %175, align 4
  %182 = getelementptr inbounds i32, i32* %180, i32 %181
  %183 = load i32, i32* %182, align 4
  %184 = load i32*, i32** %173, align 4
  %185 = load i32, i32* %175, align 4
  %186 = getelementptr inbounds i32, i32* %184, i32 %185
  %187 = load i32, i32* %186, align 4
  %188 = icmp ugt i32 %183, %187
  br i1 %188, label %bn_cmp_if.then, label %bn_cmp_if.end

bn_cmp_if.then:                                   ; preds = %bn_cmp_for.body
  store i32 1, i32* %171, align 4
  br label %bn_cmp_return

bn_cmp_if.end:                                    ; preds = %bn_cmp_for.body
  %189 = load i32*, i32** %174, align 4
  %190 = load i32, i32* %175, align 4
  %191 = getelementptr inbounds i32, i32* %189, i32 %190
  %192 = load i32, i32* %191, align 4
  %193 = load i32*, i32** %173, align 4
  %194 = load i32, i32* %175, align 4
  %195 = getelementptr inbounds i32, i32* %193, i32 %194
  %196 = load i32, i32* %195, align 4
  %197 = icmp ult i32 %192, %196
  br i1 %197, label %bn_cmp_if.then6, label %bn_cmp_if.end7

bn_cmp_if.then6:                                  ; preds = %bn_cmp_if.end
  store i32 -1, i32* %171, align 4
  br label %bn_cmp_return

bn_cmp_if.end7:                                   ; preds = %bn_cmp_if.end
  br label %bn_cmp_for.inc

bn_cmp_for.inc:                                   ; preds = %bn_cmp_if.end7
  %198 = load i32, i32* %175, align 4
  %199 = add nsw i32 %198, -1
  store i32 %199, i32* %175, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.end:                                   ; preds = %bn_cmp_for.cond
  store i32 0, i32* %171, align 4
  br label %bn_cmp_return

bn_cmp_return:                                    ; preds = %bn_cmp_for.end, %bn_cmp_if.then6, %bn_cmp_if.then
  %200 = load i32, i32* %171, align 4
  br label %entry.split.split

entry.split.split:                                ; preds = %bn_cmp_return
  %tobool = icmp ne i32 %200, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %status, align 4
  %arraydecay5 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %201 = bitcast i32* %arraydecay5 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %201, i8 0, i32 260, i1 false)
  %202 = load i32, i32* %status, align 4
  ret i32 %202
}

; Function Attrs: noinline optnone
define dso_local i32 @rsa_get_sk_from_file(i8* %file, %struct.rsa_sk_t* %sk) #2 {
entry:
  %retval = alloca i32, align 4
  %sk.addr = alloca %struct.rsa_sk_t*, align 4
  %file.addr = alloca i8*, align 4
  %fp = alloca %struct._iobuf*, align 4
  store %struct.rsa_sk_t* %sk, %struct.rsa_sk_t** %sk.addr, align 4
  store i8* %file, i8** %file.addr, align 4
  %0 = load i8*, i8** %file.addr, align 4
  %call = call %struct._iobuf* @fopen(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01KDCPPGHE@r?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call, %struct._iobuf** %fp, align 4
  %1 = load %struct._iobuf*, %struct._iobuf** %fp, align 4
  %cmp = icmp eq %struct._iobuf* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._iobuf*, %struct._iobuf** %fp, align 4
  %3 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %4 = bitcast %struct.rsa_sk_t* %3 to i8*
  %call1 = call i32 @fread(i8* %4, i32 1, i32 1412, %struct._iobuf* %2)
  %5 = load %struct._iobuf*, %struct._iobuf** %fp, align 4
  %call2 = call i32 @fclose(%struct._iobuf* %5)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

declare dllimport i32 @fread(i8*, i32, i32, %struct._iobuf*) #3

; Function Attrs: noinline optnone
define dso_local i32 @rsa_generate_keys(%struct.rsa_pk_t* %pk, %struct.rsa_sk_t* %sk, i32 %key_bits) #2 {
entry:
  %retval = alloca i32, align 4
  %key_bits.addr = alloca i32, align 4
  %sk.addr = alloca %struct.rsa_sk_t*, align 4
  %pk.addr = alloca %struct.rsa_pk_t*, align 4
  %status = alloca i32, align 4
  %ndigits = alloca i32, align 4
  %pbits = alloca i32, align 4
  %pdigits = alloca i32, align 4
  %qbits = alloca i32, align 4
  %n = alloca [65 x i32], align 4
  %d = alloca [65 x i32], align 4
  %e = alloca [65 x i32], align 4
  %p = alloca [65 x i32], align 4
  %q = alloca [65 x i32], align 4
  %dp = alloca [65 x i32], align 4
  %dq = alloca [65 x i32], align 4
  %phi_n = alloca [65 x i32], align 4
  %q_inv = alloca [65 x i32], align 4
  %p_minus1 = alloca [65 x i32], align 4
  %q_minus1 = alloca [65 x i32], align 4
  %t = alloca [65 x i32], align 4
  %u = alloca [65 x i32], align 4
  %v = alloca [65 x i32], align 4
  store i32 %key_bits, i32* %key_bits.addr, align 4
  store %struct.rsa_sk_t* %sk, %struct.rsa_sk_t** %sk.addr, align 4
  store %struct.rsa_pk_t* %pk, %struct.rsa_pk_t** %pk.addr, align 4
  %0 = load i32, i32* %key_bits.addr, align 4
  %cmp = icmp ult i32 %0, 508
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %key_bits.addr, align 4
  %cmp1 = icmp ugt i32 %1, 2048
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 4098, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i32, i32* %key_bits.addr, align 4
  %add = add i32 %2, 32
  %sub = sub i32 %add, 1
  %div = udiv i32 %sub, 32
  store i32 %div, i32* %ndigits, align 4
  %3 = load i32, i32* %ndigits, align 4
  %add2 = add i32 %3, 1
  %div3 = udiv i32 %add2, 2
  store i32 %div3, i32* %pdigits, align 4
  %4 = load i32, i32* %key_bits.addr, align 4
  %add4 = add i32 %4, 1
  %div5 = udiv i32 %add4, 2
  store i32 %div5, i32* %pbits, align 4
  %5 = load i32, i32* %key_bits.addr, align 4
  %6 = load i32, i32* %pbits, align 4
  %sub6 = sub i32 %5, %6
  store i32 %sub6, i32* %qbits, align 4
  call void @initialize_rand()
  %7 = load i32, i32* %ndigits, align 4
  %arraydecay = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  br label %bn_assign_zero_entry165

bn_assign_zero_entry165:                          ; preds = %if.end
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 4
  %10 = alloca i32, align 4
  store i32 %7, i32* %8, align 4
  store i32* %arraydecay, i32** %9, align 4
  store i32 0, i32* %10, align 4
  br label %bn_assign_zero_for.cond166

bn_assign_zero_for.cond166:                       ; preds = %bn_assign_zero_for.inc168, %bn_assign_zero_entry165
  %11 = load i32, i32* %10, align 4
  %12 = load i32, i32* %8, align 4
  %13 = icmp ult i32 %11, %12
  br i1 %13, label %bn_assign_zero_for.body167, label %bn_assign_zero_for.end169

bn_assign_zero_for.body167:                       ; preds = %bn_assign_zero_for.cond166
  %14 = load i32*, i32** %9, align 4
  %15 = load i32, i32* %10, align 4
  %16 = getelementptr inbounds i32, i32* %14, i32 %15
  store i32 0, i32* %16, align 4
  br label %bn_assign_zero_for.inc168

bn_assign_zero_for.inc168:                        ; preds = %bn_assign_zero_for.body167
  %17 = load i32, i32* %10, align 4
  %18 = add i32 %17, 1
  store i32 %18, i32* %10, align 4
  br label %bn_assign_zero_for.cond166

bn_assign_zero_for.end169:                        ; preds = %bn_assign_zero_for.cond166
  br label %if.end.split164

if.end.split164:                                  ; preds = %bn_assign_zero_for.end169
  %arrayidx = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  store i32 65537, i32* %arrayidx, align 4
  %19 = load i32, i32* %pdigits, align 4
  %20 = load i32, i32* %pbits, align 4
  %sub7 = sub i32 %20, 1
  %arraydecay8 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_2exp_entry193

bn_assign_2exp_entry193:                          ; preds = %if.end.split164
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32*, align 4
  store i32 %19, i32* %21, align 4
  store i32 %sub7, i32* %22, align 4
  store i32* %arraydecay8, i32** %23, align 4
  %24 = load i32, i32* %21, align 4
  %25 = load i32*, i32** %23, align 4
  br label %bn_assign_2exp_bn_assign_zero_entry194

bn_assign_2exp_bn_assign_zero_entry194:           ; preds = %bn_assign_2exp_entry193
  %26 = alloca i32, align 4
  %27 = alloca i32*, align 4
  %28 = alloca i32, align 4
  store i32 %24, i32* %26, align 4
  store i32* %25, i32** %27, align 4
  store i32 0, i32* %28, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.cond195

bn_assign_2exp_bn_assign_zero_for.cond195:        ; preds = %bn_assign_2exp_bn_assign_zero_for.inc197, %bn_assign_2exp_bn_assign_zero_entry194
  %29 = load i32, i32* %28, align 4
  %30 = load i32, i32* %26, align 4
  %31 = icmp ult i32 %29, %30
  br i1 %31, label %bn_assign_2exp_bn_assign_zero_for.body196, label %bn_assign_2exp_bn_assign_zero_for.end198

bn_assign_2exp_bn_assign_zero_for.body196:        ; preds = %bn_assign_2exp_bn_assign_zero_for.cond195
  %32 = load i32*, i32** %27, align 4
  %33 = load i32, i32* %28, align 4
  %34 = getelementptr inbounds i32, i32* %32, i32 %33
  store i32 0, i32* %34, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.inc197

bn_assign_2exp_bn_assign_zero_for.inc197:         ; preds = %bn_assign_2exp_bn_assign_zero_for.body196
  %35 = load i32, i32* %28, align 4
  %36 = add i32 %35, 1
  store i32 %36, i32* %28, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.cond195

bn_assign_2exp_bn_assign_zero_for.end198:         ; preds = %bn_assign_2exp_bn_assign_zero_for.cond195
  br label %bn_assign_2exp_entry.split199

bn_assign_2exp_entry.split199:                    ; preds = %bn_assign_2exp_bn_assign_zero_for.end198
  %37 = load i32, i32* %22, align 4
  %38 = load i32, i32* %21, align 4
  %39 = mul i32 %38, 32
  %40 = icmp uge i32 %37, %39
  br i1 %40, label %bn_assign_2exp_if.then200, label %bn_assign_2exp_if.end201

bn_assign_2exp_if.then200:                        ; preds = %bn_assign_2exp_entry.split199
  br label %bn_assign_2exp_return202

bn_assign_2exp_if.end201:                         ; preds = %bn_assign_2exp_entry.split199
  %41 = load i32, i32* %22, align 4
  %42 = urem i32 %41, 32
  %43 = shl i32 1, %42
  %44 = load i32*, i32** %23, align 4
  %45 = load i32, i32* %22, align 4
  %46 = udiv i32 %45, 32
  %47 = getelementptr inbounds i32, i32* %44, i32 %46
  store i32 %43, i32* %47, align 4
  br label %bn_assign_2exp_return202

bn_assign_2exp_return202:                         ; preds = %bn_assign_2exp_if.end201, %bn_assign_2exp_if.then200
  br label %if.end.split164.split192

if.end.split164.split192:                         ; preds = %bn_assign_2exp_return202
  %48 = load i32, i32* %pdigits, align 4
  %49 = load i32, i32* %pbits, align 4
  %sub9 = sub i32 %49, 2
  %arraydecay10 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_assign_2exp_entry182

bn_assign_2exp_entry182:                          ; preds = %if.end.split164.split192
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i32*, align 4
  store i32 %48, i32* %50, align 4
  store i32 %sub9, i32* %51, align 4
  store i32* %arraydecay10, i32** %52, align 4
  %53 = load i32, i32* %50, align 4
  %54 = load i32*, i32** %52, align 4
  br label %bn_assign_2exp_bn_assign_zero_entry183

bn_assign_2exp_bn_assign_zero_entry183:           ; preds = %bn_assign_2exp_entry182
  %55 = alloca i32, align 4
  %56 = alloca i32*, align 4
  %57 = alloca i32, align 4
  store i32 %53, i32* %55, align 4
  store i32* %54, i32** %56, align 4
  store i32 0, i32* %57, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.cond184

bn_assign_2exp_bn_assign_zero_for.cond184:        ; preds = %bn_assign_2exp_bn_assign_zero_for.inc186, %bn_assign_2exp_bn_assign_zero_entry183
  %58 = load i32, i32* %57, align 4
  %59 = load i32, i32* %55, align 4
  %60 = icmp ult i32 %58, %59
  br i1 %60, label %bn_assign_2exp_bn_assign_zero_for.body185, label %bn_assign_2exp_bn_assign_zero_for.end187

bn_assign_2exp_bn_assign_zero_for.body185:        ; preds = %bn_assign_2exp_bn_assign_zero_for.cond184
  %61 = load i32*, i32** %56, align 4
  %62 = load i32, i32* %57, align 4
  %63 = getelementptr inbounds i32, i32* %61, i32 %62
  store i32 0, i32* %63, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.inc186

bn_assign_2exp_bn_assign_zero_for.inc186:         ; preds = %bn_assign_2exp_bn_assign_zero_for.body185
  %64 = load i32, i32* %57, align 4
  %65 = add i32 %64, 1
  store i32 %65, i32* %57, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.cond184

bn_assign_2exp_bn_assign_zero_for.end187:         ; preds = %bn_assign_2exp_bn_assign_zero_for.cond184
  br label %bn_assign_2exp_entry.split188

bn_assign_2exp_entry.split188:                    ; preds = %bn_assign_2exp_bn_assign_zero_for.end187
  %66 = load i32, i32* %51, align 4
  %67 = load i32, i32* %50, align 4
  %68 = mul i32 %67, 32
  %69 = icmp uge i32 %66, %68
  br i1 %69, label %bn_assign_2exp_if.then189, label %bn_assign_2exp_if.end190

bn_assign_2exp_if.then189:                        ; preds = %bn_assign_2exp_entry.split188
  br label %bn_assign_2exp_return191

bn_assign_2exp_if.end190:                         ; preds = %bn_assign_2exp_entry.split188
  %70 = load i32, i32* %51, align 4
  %71 = urem i32 %70, 32
  %72 = shl i32 1, %71
  %73 = load i32*, i32** %52, align 4
  %74 = load i32, i32* %51, align 4
  %75 = udiv i32 %74, 32
  %76 = getelementptr inbounds i32, i32* %73, i32 %75
  store i32 %72, i32* %76, align 4
  br label %bn_assign_2exp_return191

bn_assign_2exp_return191:                         ; preds = %bn_assign_2exp_if.end190, %bn_assign_2exp_if.then189
  br label %if.end.split164.split

if.end.split164.split:                            ; preds = %bn_assign_2exp_return191
  %77 = load i32, i32* %pdigits, align 4
  %arraydecay11 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_add_entry225

bn_add_entry225:                                  ; preds = %if.end.split164.split
  %78 = alloca i32, align 4
  %79 = alloca i32*, align 4
  %80 = alloca i32*, align 4
  %81 = alloca i32*, align 4
  %82 = alloca i32, align 4
  %83 = alloca i32, align 4
  %84 = alloca i32, align 4
  store i32 %77, i32* %78, align 4
  store i32* %arraydecay11, i32** %79, align 4
  store i32* %arraydecay12, i32** %80, align 4
  store i32* %arraydecay13, i32** %81, align 4
  store i32 0, i32* %83, align 4
  store i32 0, i32* %84, align 4
  br label %bn_add_for.cond226

bn_add_for.cond226:                               ; preds = %bn_add_for.inc234, %bn_add_entry225
  %85 = load i32, i32* %84, align 4
  %86 = load i32, i32* %78, align 4
  %87 = icmp ult i32 %85, %86
  br i1 %87, label %bn_add_for.body227, label %bn_add_for.end235

bn_add_for.body227:                               ; preds = %bn_add_for.cond226
  %88 = load i32*, i32** %80, align 4
  %89 = load i32, i32* %84, align 4
  %90 = getelementptr inbounds i32, i32* %88, i32 %89
  %91 = load i32, i32* %90, align 4
  %92 = load i32, i32* %83, align 4
  %93 = add i32 %91, %92
  store i32 %93, i32* %82, align 4
  %94 = load i32, i32* %83, align 4
  %95 = icmp ult i32 %93, %94
  br i1 %95, label %bn_add_if.then228, label %bn_add_if.else229

bn_add_if.then228:                                ; preds = %bn_add_for.body227
  %96 = load i32*, i32** %79, align 4
  %97 = load i32, i32* %84, align 4
  %98 = getelementptr inbounds i32, i32* %96, i32 %97
  %99 = load i32, i32* %98, align 4
  store i32 %99, i32* %82, align 4
  br label %bn_add_if.end9233

bn_add_if.else229:                                ; preds = %bn_add_for.body227
  %100 = load i32*, i32** %79, align 4
  %101 = load i32, i32* %84, align 4
  %102 = getelementptr inbounds i32, i32* %100, i32 %101
  %103 = load i32, i32* %102, align 4
  %104 = load i32, i32* %82, align 4
  %105 = add i32 %104, %103
  store i32 %105, i32* %82, align 4
  %106 = load i32*, i32** %79, align 4
  %107 = load i32, i32* %84, align 4
  %108 = getelementptr inbounds i32, i32* %106, i32 %107
  %109 = load i32, i32* %108, align 4
  %110 = icmp ult i32 %105, %109
  br i1 %110, label %bn_add_if.then7230, label %bn_add_if.else8231

bn_add_if.then7230:                               ; preds = %bn_add_if.else229
  store i32 1, i32* %83, align 4
  br label %bn_add_if.end232

bn_add_if.else8231:                               ; preds = %bn_add_if.else229
  store i32 0, i32* %83, align 4
  br label %bn_add_if.end232

bn_add_if.end232:                                 ; preds = %bn_add_if.else8231, %bn_add_if.then7230
  br label %bn_add_if.end9233

bn_add_if.end9233:                                ; preds = %bn_add_if.end232, %bn_add_if.then228
  %111 = load i32, i32* %82, align 4
  %112 = load i32*, i32** %81, align 4
  %113 = load i32, i32* %84, align 4
  %114 = getelementptr inbounds i32, i32* %112, i32 %113
  store i32 %111, i32* %114, align 4
  br label %bn_add_for.inc234

bn_add_for.inc234:                                ; preds = %bn_add_if.end9233
  %115 = load i32, i32* %84, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* %84, align 4
  br label %bn_add_for.cond226

bn_add_for.end235:                                ; preds = %bn_add_for.cond226
  %117 = load i32, i32* %83, align 4
  br label %if.end.split164.split.split

if.end.split164.split.split:                      ; preds = %bn_add_for.end235
  %118 = load i32, i32* %pdigits, align 4
  %arraydecay14 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  br label %bn_assign_zero_entry159

bn_assign_zero_entry159:                          ; preds = %if.end.split164.split.split
  %119 = alloca i32, align 4
  %120 = alloca i32*, align 4
  %121 = alloca i32, align 4
  store i32 %118, i32* %119, align 4
  store i32* %arraydecay14, i32** %120, align 4
  store i32 0, i32* %121, align 4
  br label %bn_assign_zero_for.cond160

bn_assign_zero_for.cond160:                       ; preds = %bn_assign_zero_for.inc162, %bn_assign_zero_entry159
  %122 = load i32, i32* %121, align 4
  %123 = load i32, i32* %119, align 4
  %124 = icmp ult i32 %122, %123
  br i1 %124, label %bn_assign_zero_for.body161, label %bn_assign_zero_for.end163

bn_assign_zero_for.body161:                       ; preds = %bn_assign_zero_for.cond160
  %125 = load i32*, i32** %120, align 4
  %126 = load i32, i32* %121, align 4
  %127 = getelementptr inbounds i32, i32* %125, i32 %126
  store i32 0, i32* %127, align 4
  br label %bn_assign_zero_for.inc162

bn_assign_zero_for.inc162:                        ; preds = %bn_assign_zero_for.body161
  %128 = load i32, i32* %121, align 4
  %129 = add i32 %128, 1
  store i32 %129, i32* %121, align 4
  br label %bn_assign_zero_for.cond160

bn_assign_zero_for.end163:                        ; preds = %bn_assign_zero_for.cond160
  br label %if.end.split158

if.end.split158:                                  ; preds = %bn_assign_zero_for.end163
  %arrayidx15 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  store i32 1, i32* %arrayidx15, align 4
  %130 = load i32, i32* %pdigits, align 4
  %arraydecay16 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay18 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  br label %bn_sub_entry261

bn_sub_entry261:                                  ; preds = %if.end.split158
  %131 = alloca i32, align 4
  %132 = alloca i32*, align 4
  %133 = alloca i32*, align 4
  %134 = alloca i32*, align 4
  %135 = alloca i32, align 4
  %136 = alloca i32, align 4
  %137 = alloca i32, align 4
  store i32 %130, i32* %131, align 4
  store i32* %arraydecay16, i32** %132, align 4
  store i32* %arraydecay17, i32** %133, align 4
  store i32* %arraydecay18, i32** %134, align 4
  store i32 0, i32* %136, align 4
  store i32 0, i32* %137, align 4
  br label %bn_sub_for.cond262

bn_sub_for.cond262:                               ; preds = %bn_sub_for.inc270, %bn_sub_entry261
  %138 = load i32, i32* %137, align 4
  %139 = load i32, i32* %131, align 4
  %140 = icmp ult i32 %138, %139
  br i1 %140, label %bn_sub_for.body263, label %bn_sub_for.end271

bn_sub_for.body263:                               ; preds = %bn_sub_for.cond262
  %141 = load i32*, i32** %133, align 4
  %142 = load i32, i32* %137, align 4
  %143 = getelementptr inbounds i32, i32* %141, i32 %142
  %144 = load i32, i32* %143, align 4
  %145 = load i32, i32* %136, align 4
  %146 = sub i32 %144, %145
  store i32 %146, i32* %135, align 4
  %147 = load i32, i32* %136, align 4
  %148 = sub i32 -1, %147
  %149 = icmp ugt i32 %146, %148
  br i1 %149, label %bn_sub_if.then264, label %bn_sub_if.else265

bn_sub_if.then264:                                ; preds = %bn_sub_for.body263
  %150 = load i32*, i32** %132, align 4
  %151 = load i32, i32* %137, align 4
  %152 = getelementptr inbounds i32, i32* %150, i32 %151
  %153 = load i32, i32* %152, align 4
  %154 = sub i32 -1, %153
  store i32 %154, i32* %135, align 4
  br label %bn_sub_if.end12269

bn_sub_if.else265:                                ; preds = %bn_sub_for.body263
  %155 = load i32*, i32** %132, align 4
  %156 = load i32, i32* %137, align 4
  %157 = getelementptr inbounds i32, i32* %155, i32 %156
  %158 = load i32, i32* %157, align 4
  %159 = load i32, i32* %135, align 4
  %160 = sub i32 %159, %158
  store i32 %160, i32* %135, align 4
  %161 = load i32*, i32** %132, align 4
  %162 = load i32, i32* %137, align 4
  %163 = getelementptr inbounds i32, i32* %161, i32 %162
  %164 = load i32, i32* %163, align 4
  %165 = sub i32 -1, %164
  %166 = icmp ugt i32 %160, %165
  br i1 %166, label %bn_sub_if.then10266, label %bn_sub_if.else11267

bn_sub_if.then10266:                              ; preds = %bn_sub_if.else265
  store i32 1, i32* %136, align 4
  br label %bn_sub_if.end268

bn_sub_if.else11267:                              ; preds = %bn_sub_if.else265
  store i32 0, i32* %136, align 4
  br label %bn_sub_if.end268

bn_sub_if.end268:                                 ; preds = %bn_sub_if.else11267, %bn_sub_if.then10266
  br label %bn_sub_if.end12269

bn_sub_if.end12269:                               ; preds = %bn_sub_if.end268, %bn_sub_if.then264
  %167 = load i32, i32* %135, align 4
  %168 = load i32*, i32** %134, align 4
  %169 = load i32, i32* %137, align 4
  %170 = getelementptr inbounds i32, i32* %168, i32 %169
  store i32 %167, i32* %170, align 4
  br label %bn_sub_for.inc270

bn_sub_for.inc270:                                ; preds = %bn_sub_if.end12269
  %171 = load i32, i32* %137, align 4
  %172 = add i32 %171, 1
  store i32 %172, i32* %137, align 4
  br label %bn_sub_for.cond262

bn_sub_for.end271:                                ; preds = %bn_sub_for.cond262
  %173 = load i32, i32* %136, align 4
  br label %if.end.split158.split260

if.end.split158.split260:                         ; preds = %bn_sub_for.end271
  %174 = load i32, i32* %pdigits, align 4
  %arraydecay20 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %arraydecay21 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay22 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_add_entry214

bn_add_entry214:                                  ; preds = %if.end.split158.split260
  %175 = alloca i32, align 4
  %176 = alloca i32*, align 4
  %177 = alloca i32*, align 4
  %178 = alloca i32*, align 4
  %179 = alloca i32, align 4
  %180 = alloca i32, align 4
  %181 = alloca i32, align 4
  store i32 %174, i32* %175, align 4
  store i32* %arraydecay20, i32** %176, align 4
  store i32* %arraydecay21, i32** %177, align 4
  store i32* %arraydecay22, i32** %178, align 4
  store i32 0, i32* %180, align 4
  store i32 0, i32* %181, align 4
  br label %bn_add_for.cond215

bn_add_for.cond215:                               ; preds = %bn_add_for.inc223, %bn_add_entry214
  %182 = load i32, i32* %181, align 4
  %183 = load i32, i32* %175, align 4
  %184 = icmp ult i32 %182, %183
  br i1 %184, label %bn_add_for.body216, label %bn_add_for.end224

bn_add_for.body216:                               ; preds = %bn_add_for.cond215
  %185 = load i32*, i32** %177, align 4
  %186 = load i32, i32* %181, align 4
  %187 = getelementptr inbounds i32, i32* %185, i32 %186
  %188 = load i32, i32* %187, align 4
  %189 = load i32, i32* %180, align 4
  %190 = add i32 %188, %189
  store i32 %190, i32* %179, align 4
  %191 = load i32, i32* %180, align 4
  %192 = icmp ult i32 %190, %191
  br i1 %192, label %bn_add_if.then217, label %bn_add_if.else218

bn_add_if.then217:                                ; preds = %bn_add_for.body216
  %193 = load i32*, i32** %176, align 4
  %194 = load i32, i32* %181, align 4
  %195 = getelementptr inbounds i32, i32* %193, i32 %194
  %196 = load i32, i32* %195, align 4
  store i32 %196, i32* %179, align 4
  br label %bn_add_if.end9222

bn_add_if.else218:                                ; preds = %bn_add_for.body216
  %197 = load i32*, i32** %176, align 4
  %198 = load i32, i32* %181, align 4
  %199 = getelementptr inbounds i32, i32* %197, i32 %198
  %200 = load i32, i32* %199, align 4
  %201 = load i32, i32* %179, align 4
  %202 = add i32 %201, %200
  store i32 %202, i32* %179, align 4
  %203 = load i32*, i32** %176, align 4
  %204 = load i32, i32* %181, align 4
  %205 = getelementptr inbounds i32, i32* %203, i32 %204
  %206 = load i32, i32* %205, align 4
  %207 = icmp ult i32 %202, %206
  br i1 %207, label %bn_add_if.then7219, label %bn_add_if.else8220

bn_add_if.then7219:                               ; preds = %bn_add_if.else218
  store i32 1, i32* %180, align 4
  br label %bn_add_if.end221

bn_add_if.else8220:                               ; preds = %bn_add_if.else218
  store i32 0, i32* %180, align 4
  br label %bn_add_if.end221

bn_add_if.end221:                                 ; preds = %bn_add_if.else8220, %bn_add_if.then7219
  br label %bn_add_if.end9222

bn_add_if.end9222:                                ; preds = %bn_add_if.end221, %bn_add_if.then217
  %208 = load i32, i32* %179, align 4
  %209 = load i32*, i32** %178, align 4
  %210 = load i32, i32* %181, align 4
  %211 = getelementptr inbounds i32, i32* %209, i32 %210
  store i32 %208, i32* %211, align 4
  br label %bn_add_for.inc223

bn_add_for.inc223:                                ; preds = %bn_add_if.end9222
  %212 = load i32, i32* %181, align 4
  %213 = add i32 %212, 1
  store i32 %213, i32* %181, align 4
  br label %bn_add_for.cond215

bn_add_for.end224:                                ; preds = %bn_add_for.cond215
  %214 = load i32, i32* %180, align 4
  br label %if.end.split158.split

if.end.split158.split:                            ; preds = %bn_add_for.end224
  %215 = load i32, i32* %pdigits, align 4
  %arraydecay24 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  br label %bn_assign_zero_entry153

bn_assign_zero_entry153:                          ; preds = %if.end.split158.split
  %216 = alloca i32, align 4
  %217 = alloca i32*, align 4
  %218 = alloca i32, align 4
  store i32 %215, i32* %216, align 4
  store i32* %arraydecay24, i32** %217, align 4
  store i32 0, i32* %218, align 4
  br label %bn_assign_zero_for.cond154

bn_assign_zero_for.cond154:                       ; preds = %bn_assign_zero_for.inc156, %bn_assign_zero_entry153
  %219 = load i32, i32* %218, align 4
  %220 = load i32, i32* %216, align 4
  %221 = icmp ult i32 %219, %220
  br i1 %221, label %bn_assign_zero_for.body155, label %bn_assign_zero_for.end157

bn_assign_zero_for.body155:                       ; preds = %bn_assign_zero_for.cond154
  %222 = load i32*, i32** %217, align 4
  %223 = load i32, i32* %218, align 4
  %224 = getelementptr inbounds i32, i32* %222, i32 %223
  store i32 0, i32* %224, align 4
  br label %bn_assign_zero_for.inc156

bn_assign_zero_for.inc156:                        ; preds = %bn_assign_zero_for.body155
  %225 = load i32, i32* %218, align 4
  %226 = add i32 %225, 1
  store i32 %226, i32* %218, align 4
  br label %bn_assign_zero_for.cond154

bn_assign_zero_for.end157:                        ; preds = %bn_assign_zero_for.cond154
  br label %if.end.split

if.end.split:                                     ; preds = %bn_assign_zero_for.end157
  %arrayidx25 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  store i32 2, i32* %arrayidx25, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.split
  %227 = load i32, i32* %pdigits, align 4
  %arraydecay26 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay28 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay29 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %call30 = call i32 @generate_prime(i32* %arraydecay29, i32* %arraydecay28, i32* %arraydecay27, i32* %arraydecay26, i32 %227)
  store i32 %call30, i32* %status, align 4
  %228 = load i32, i32* %status, align 4
  %cmp31 = icmp ne i32 %228, 0
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %do.body
  %229 = load i32, i32* %status, align 4
  store i32 %229, i32* %retval, align 4
  br label %return

if.end33:                                         ; preds = %do.body
  br label %do.cond

do.cond:                                          ; preds = %if.end33
  %arraydecay34 = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  %230 = load i32, i32* %pdigits, align 4
  %arraydecay35 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %call36 = call i32 @rsa_filter(i32* %arraydecay35, i32 %230, i32* %arraydecay34, i32 1)
  %tobool = icmp ne i32 %call36, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %231 = load i32, i32* %pdigits, align 4
  %232 = load i32, i32* %qbits, align 4
  %sub37 = sub i32 %232, 1
  %arraydecay38 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_2exp_entry172

bn_assign_2exp_entry172:                          ; preds = %do.end
  %233 = alloca i32, align 4
  %234 = alloca i32, align 4
  %235 = alloca i32*, align 4
  store i32 %231, i32* %233, align 4
  store i32 %sub37, i32* %234, align 4
  store i32* %arraydecay38, i32** %235, align 4
  %236 = load i32, i32* %233, align 4
  %237 = load i32*, i32** %235, align 4
  br label %bn_assign_2exp_bn_assign_zero_entry173

bn_assign_2exp_bn_assign_zero_entry173:           ; preds = %bn_assign_2exp_entry172
  %238 = alloca i32, align 4
  %239 = alloca i32*, align 4
  %240 = alloca i32, align 4
  store i32 %236, i32* %238, align 4
  store i32* %237, i32** %239, align 4
  store i32 0, i32* %240, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.cond174

bn_assign_2exp_bn_assign_zero_for.cond174:        ; preds = %bn_assign_2exp_bn_assign_zero_for.inc176, %bn_assign_2exp_bn_assign_zero_entry173
  %241 = load i32, i32* %240, align 4
  %242 = load i32, i32* %238, align 4
  %243 = icmp ult i32 %241, %242
  br i1 %243, label %bn_assign_2exp_bn_assign_zero_for.body175, label %bn_assign_2exp_bn_assign_zero_for.end177

bn_assign_2exp_bn_assign_zero_for.body175:        ; preds = %bn_assign_2exp_bn_assign_zero_for.cond174
  %244 = load i32*, i32** %239, align 4
  %245 = load i32, i32* %240, align 4
  %246 = getelementptr inbounds i32, i32* %244, i32 %245
  store i32 0, i32* %246, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.inc176

bn_assign_2exp_bn_assign_zero_for.inc176:         ; preds = %bn_assign_2exp_bn_assign_zero_for.body175
  %247 = load i32, i32* %240, align 4
  %248 = add i32 %247, 1
  store i32 %248, i32* %240, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.cond174

bn_assign_2exp_bn_assign_zero_for.end177:         ; preds = %bn_assign_2exp_bn_assign_zero_for.cond174
  br label %bn_assign_2exp_entry.split178

bn_assign_2exp_entry.split178:                    ; preds = %bn_assign_2exp_bn_assign_zero_for.end177
  %249 = load i32, i32* %234, align 4
  %250 = load i32, i32* %233, align 4
  %251 = mul i32 %250, 32
  %252 = icmp uge i32 %249, %251
  br i1 %252, label %bn_assign_2exp_if.then179, label %bn_assign_2exp_if.end180

bn_assign_2exp_if.then179:                        ; preds = %bn_assign_2exp_entry.split178
  br label %bn_assign_2exp_return181

bn_assign_2exp_if.end180:                         ; preds = %bn_assign_2exp_entry.split178
  %253 = load i32, i32* %234, align 4
  %254 = urem i32 %253, 32
  %255 = shl i32 1, %254
  %256 = load i32*, i32** %235, align 4
  %257 = load i32, i32* %234, align 4
  %258 = udiv i32 %257, 32
  %259 = getelementptr inbounds i32, i32* %256, i32 %258
  store i32 %255, i32* %259, align 4
  br label %bn_assign_2exp_return181

bn_assign_2exp_return181:                         ; preds = %bn_assign_2exp_if.end180, %bn_assign_2exp_if.then179
  br label %do.end.split171

do.end.split171:                                  ; preds = %bn_assign_2exp_return181
  %260 = load i32, i32* %pdigits, align 4
  %261 = load i32, i32* %qbits, align 4
  %sub39 = sub i32 %261, 2
  %arraydecay40 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_assign_2exp_entry

bn_assign_2exp_entry:                             ; preds = %do.end.split171
  %262 = alloca i32, align 4
  %263 = alloca i32, align 4
  %264 = alloca i32*, align 4
  store i32 %260, i32* %262, align 4
  store i32 %sub39, i32* %263, align 4
  store i32* %arraydecay40, i32** %264, align 4
  %265 = load i32, i32* %262, align 4
  %266 = load i32*, i32** %264, align 4
  br label %bn_assign_2exp_bn_assign_zero_entry

bn_assign_2exp_bn_assign_zero_entry:              ; preds = %bn_assign_2exp_entry
  %267 = alloca i32, align 4
  %268 = alloca i32*, align 4
  %269 = alloca i32, align 4
  store i32 %265, i32* %267, align 4
  store i32* %266, i32** %268, align 4
  store i32 0, i32* %269, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.cond

bn_assign_2exp_bn_assign_zero_for.cond:           ; preds = %bn_assign_2exp_bn_assign_zero_for.inc, %bn_assign_2exp_bn_assign_zero_entry
  %270 = load i32, i32* %269, align 4
  %271 = load i32, i32* %267, align 4
  %272 = icmp ult i32 %270, %271
  br i1 %272, label %bn_assign_2exp_bn_assign_zero_for.body, label %bn_assign_2exp_bn_assign_zero_for.end

bn_assign_2exp_bn_assign_zero_for.body:           ; preds = %bn_assign_2exp_bn_assign_zero_for.cond
  %273 = load i32*, i32** %268, align 4
  %274 = load i32, i32* %269, align 4
  %275 = getelementptr inbounds i32, i32* %273, i32 %274
  store i32 0, i32* %275, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.inc

bn_assign_2exp_bn_assign_zero_for.inc:            ; preds = %bn_assign_2exp_bn_assign_zero_for.body
  %276 = load i32, i32* %269, align 4
  %277 = add i32 %276, 1
  store i32 %277, i32* %269, align 4
  br label %bn_assign_2exp_bn_assign_zero_for.cond

bn_assign_2exp_bn_assign_zero_for.end:            ; preds = %bn_assign_2exp_bn_assign_zero_for.cond
  br label %bn_assign_2exp_entry.split

bn_assign_2exp_entry.split:                       ; preds = %bn_assign_2exp_bn_assign_zero_for.end
  %278 = load i32, i32* %263, align 4
  %279 = load i32, i32* %262, align 4
  %280 = mul i32 %279, 32
  %281 = icmp uge i32 %278, %280
  br i1 %281, label %bn_assign_2exp_if.then, label %bn_assign_2exp_if.end

bn_assign_2exp_if.then:                           ; preds = %bn_assign_2exp_entry.split
  br label %bn_assign_2exp_return

bn_assign_2exp_if.end:                            ; preds = %bn_assign_2exp_entry.split
  %282 = load i32, i32* %263, align 4
  %283 = urem i32 %282, 32
  %284 = shl i32 1, %283
  %285 = load i32*, i32** %264, align 4
  %286 = load i32, i32* %263, align 4
  %287 = udiv i32 %286, 32
  %288 = getelementptr inbounds i32, i32* %285, i32 %287
  store i32 %284, i32* %288, align 4
  br label %bn_assign_2exp_return

bn_assign_2exp_return:                            ; preds = %bn_assign_2exp_if.end, %bn_assign_2exp_if.then
  br label %do.end.split170

do.end.split170:                                  ; preds = %bn_assign_2exp_return
  %289 = load i32, i32* %pdigits, align 4
  %arraydecay41 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay42 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay43 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_add_entry203

bn_add_entry203:                                  ; preds = %do.end.split170
  %290 = alloca i32, align 4
  %291 = alloca i32*, align 4
  %292 = alloca i32*, align 4
  %293 = alloca i32*, align 4
  %294 = alloca i32, align 4
  %295 = alloca i32, align 4
  %296 = alloca i32, align 4
  store i32 %289, i32* %290, align 4
  store i32* %arraydecay41, i32** %291, align 4
  store i32* %arraydecay42, i32** %292, align 4
  store i32* %arraydecay43, i32** %293, align 4
  store i32 0, i32* %295, align 4
  store i32 0, i32* %296, align 4
  br label %bn_add_for.cond204

bn_add_for.cond204:                               ; preds = %bn_add_for.inc212, %bn_add_entry203
  %297 = load i32, i32* %296, align 4
  %298 = load i32, i32* %290, align 4
  %299 = icmp ult i32 %297, %298
  br i1 %299, label %bn_add_for.body205, label %bn_add_for.end213

bn_add_for.body205:                               ; preds = %bn_add_for.cond204
  %300 = load i32*, i32** %292, align 4
  %301 = load i32, i32* %296, align 4
  %302 = getelementptr inbounds i32, i32* %300, i32 %301
  %303 = load i32, i32* %302, align 4
  %304 = load i32, i32* %295, align 4
  %305 = add i32 %303, %304
  store i32 %305, i32* %294, align 4
  %306 = load i32, i32* %295, align 4
  %307 = icmp ult i32 %305, %306
  br i1 %307, label %bn_add_if.then206, label %bn_add_if.else207

bn_add_if.then206:                                ; preds = %bn_add_for.body205
  %308 = load i32*, i32** %291, align 4
  %309 = load i32, i32* %296, align 4
  %310 = getelementptr inbounds i32, i32* %308, i32 %309
  %311 = load i32, i32* %310, align 4
  store i32 %311, i32* %294, align 4
  br label %bn_add_if.end9211

bn_add_if.else207:                                ; preds = %bn_add_for.body205
  %312 = load i32*, i32** %291, align 4
  %313 = load i32, i32* %296, align 4
  %314 = getelementptr inbounds i32, i32* %312, i32 %313
  %315 = load i32, i32* %314, align 4
  %316 = load i32, i32* %294, align 4
  %317 = add i32 %316, %315
  store i32 %317, i32* %294, align 4
  %318 = load i32*, i32** %291, align 4
  %319 = load i32, i32* %296, align 4
  %320 = getelementptr inbounds i32, i32* %318, i32 %319
  %321 = load i32, i32* %320, align 4
  %322 = icmp ult i32 %317, %321
  br i1 %322, label %bn_add_if.then7208, label %bn_add_if.else8209

bn_add_if.then7208:                               ; preds = %bn_add_if.else207
  store i32 1, i32* %295, align 4
  br label %bn_add_if.end210

bn_add_if.else8209:                               ; preds = %bn_add_if.else207
  store i32 0, i32* %295, align 4
  br label %bn_add_if.end210

bn_add_if.end210:                                 ; preds = %bn_add_if.else8209, %bn_add_if.then7208
  br label %bn_add_if.end9211

bn_add_if.end9211:                                ; preds = %bn_add_if.end210, %bn_add_if.then206
  %323 = load i32, i32* %294, align 4
  %324 = load i32*, i32** %293, align 4
  %325 = load i32, i32* %296, align 4
  %326 = getelementptr inbounds i32, i32* %324, i32 %325
  store i32 %323, i32* %326, align 4
  br label %bn_add_for.inc212

bn_add_for.inc212:                                ; preds = %bn_add_if.end9211
  %327 = load i32, i32* %296, align 4
  %328 = add i32 %327, 1
  store i32 %328, i32* %296, align 4
  br label %bn_add_for.cond204

bn_add_for.end213:                                ; preds = %bn_add_for.cond204
  %329 = load i32, i32* %295, align 4
  br label %do.end.split170.split

do.end.split170.split:                            ; preds = %bn_add_for.end213
  %330 = load i32, i32* %pdigits, align 4
  %arraydecay45 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  br label %bn_assign_zero_entry148

bn_assign_zero_entry148:                          ; preds = %do.end.split170.split
  %331 = alloca i32, align 4
  %332 = alloca i32*, align 4
  %333 = alloca i32, align 4
  store i32 %330, i32* %331, align 4
  store i32* %arraydecay45, i32** %332, align 4
  store i32 0, i32* %333, align 4
  br label %bn_assign_zero_for.cond149

bn_assign_zero_for.cond149:                       ; preds = %bn_assign_zero_for.inc151, %bn_assign_zero_entry148
  %334 = load i32, i32* %333, align 4
  %335 = load i32, i32* %331, align 4
  %336 = icmp ult i32 %334, %335
  br i1 %336, label %bn_assign_zero_for.body150, label %bn_assign_zero_for.end152

bn_assign_zero_for.body150:                       ; preds = %bn_assign_zero_for.cond149
  %337 = load i32*, i32** %332, align 4
  %338 = load i32, i32* %333, align 4
  %339 = getelementptr inbounds i32, i32* %337, i32 %338
  store i32 0, i32* %339, align 4
  br label %bn_assign_zero_for.inc151

bn_assign_zero_for.inc151:                        ; preds = %bn_assign_zero_for.body150
  %340 = load i32, i32* %333, align 4
  %341 = add i32 %340, 1
  store i32 %341, i32* %333, align 4
  br label %bn_assign_zero_for.cond149

bn_assign_zero_for.end152:                        ; preds = %bn_assign_zero_for.cond149
  br label %do.end.split147

do.end.split147:                                  ; preds = %bn_assign_zero_for.end152
  %arrayidx46 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  store i32 1, i32* %arrayidx46, align 4
  %342 = load i32, i32* %pdigits, align 4
  %arraydecay47 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %arraydecay48 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay49 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  br label %bn_sub_entry249

bn_sub_entry249:                                  ; preds = %do.end.split147
  %343 = alloca i32, align 4
  %344 = alloca i32*, align 4
  %345 = alloca i32*, align 4
  %346 = alloca i32*, align 4
  %347 = alloca i32, align 4
  %348 = alloca i32, align 4
  %349 = alloca i32, align 4
  store i32 %342, i32* %343, align 4
  store i32* %arraydecay47, i32** %344, align 4
  store i32* %arraydecay48, i32** %345, align 4
  store i32* %arraydecay49, i32** %346, align 4
  store i32 0, i32* %348, align 4
  store i32 0, i32* %349, align 4
  br label %bn_sub_for.cond250

bn_sub_for.cond250:                               ; preds = %bn_sub_for.inc258, %bn_sub_entry249
  %350 = load i32, i32* %349, align 4
  %351 = load i32, i32* %343, align 4
  %352 = icmp ult i32 %350, %351
  br i1 %352, label %bn_sub_for.body251, label %bn_sub_for.end259

bn_sub_for.body251:                               ; preds = %bn_sub_for.cond250
  %353 = load i32*, i32** %345, align 4
  %354 = load i32, i32* %349, align 4
  %355 = getelementptr inbounds i32, i32* %353, i32 %354
  %356 = load i32, i32* %355, align 4
  %357 = load i32, i32* %348, align 4
  %358 = sub i32 %356, %357
  store i32 %358, i32* %347, align 4
  %359 = load i32, i32* %348, align 4
  %360 = sub i32 -1, %359
  %361 = icmp ugt i32 %358, %360
  br i1 %361, label %bn_sub_if.then252, label %bn_sub_if.else253

bn_sub_if.then252:                                ; preds = %bn_sub_for.body251
  %362 = load i32*, i32** %344, align 4
  %363 = load i32, i32* %349, align 4
  %364 = getelementptr inbounds i32, i32* %362, i32 %363
  %365 = load i32, i32* %364, align 4
  %366 = sub i32 -1, %365
  store i32 %366, i32* %347, align 4
  br label %bn_sub_if.end12257

bn_sub_if.else253:                                ; preds = %bn_sub_for.body251
  %367 = load i32*, i32** %344, align 4
  %368 = load i32, i32* %349, align 4
  %369 = getelementptr inbounds i32, i32* %367, i32 %368
  %370 = load i32, i32* %369, align 4
  %371 = load i32, i32* %347, align 4
  %372 = sub i32 %371, %370
  store i32 %372, i32* %347, align 4
  %373 = load i32*, i32** %344, align 4
  %374 = load i32, i32* %349, align 4
  %375 = getelementptr inbounds i32, i32* %373, i32 %374
  %376 = load i32, i32* %375, align 4
  %377 = sub i32 -1, %376
  %378 = icmp ugt i32 %372, %377
  br i1 %378, label %bn_sub_if.then10254, label %bn_sub_if.else11255

bn_sub_if.then10254:                              ; preds = %bn_sub_if.else253
  store i32 1, i32* %348, align 4
  br label %bn_sub_if.end256

bn_sub_if.else11255:                              ; preds = %bn_sub_if.else253
  store i32 0, i32* %348, align 4
  br label %bn_sub_if.end256

bn_sub_if.end256:                                 ; preds = %bn_sub_if.else11255, %bn_sub_if.then10254
  br label %bn_sub_if.end12257

bn_sub_if.end12257:                               ; preds = %bn_sub_if.end256, %bn_sub_if.then252
  %379 = load i32, i32* %347, align 4
  %380 = load i32*, i32** %346, align 4
  %381 = load i32, i32* %349, align 4
  %382 = getelementptr inbounds i32, i32* %380, i32 %381
  store i32 %379, i32* %382, align 4
  br label %bn_sub_for.inc258

bn_sub_for.inc258:                                ; preds = %bn_sub_if.end12257
  %383 = load i32, i32* %349, align 4
  %384 = add i32 %383, 1
  store i32 %384, i32* %349, align 4
  br label %bn_sub_for.cond250

bn_sub_for.end259:                                ; preds = %bn_sub_for.cond250
  %385 = load i32, i32* %348, align 4
  br label %do.end.split147.split248

do.end.split147.split248:                         ; preds = %bn_sub_for.end259
  %386 = load i32, i32* %pdigits, align 4
  %arraydecay51 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %arraydecay52 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay53 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_add_entry

bn_add_entry:                                     ; preds = %do.end.split147.split248
  %387 = alloca i32, align 4
  %388 = alloca i32*, align 4
  %389 = alloca i32*, align 4
  %390 = alloca i32*, align 4
  %391 = alloca i32, align 4
  %392 = alloca i32, align 4
  %393 = alloca i32, align 4
  store i32 %386, i32* %387, align 4
  store i32* %arraydecay51, i32** %388, align 4
  store i32* %arraydecay52, i32** %389, align 4
  store i32* %arraydecay53, i32** %390, align 4
  store i32 0, i32* %392, align 4
  store i32 0, i32* %393, align 4
  br label %bn_add_for.cond

bn_add_for.cond:                                  ; preds = %bn_add_for.inc, %bn_add_entry
  %394 = load i32, i32* %393, align 4
  %395 = load i32, i32* %387, align 4
  %396 = icmp ult i32 %394, %395
  br i1 %396, label %bn_add_for.body, label %bn_add_for.end

bn_add_for.body:                                  ; preds = %bn_add_for.cond
  %397 = load i32*, i32** %389, align 4
  %398 = load i32, i32* %393, align 4
  %399 = getelementptr inbounds i32, i32* %397, i32 %398
  %400 = load i32, i32* %399, align 4
  %401 = load i32, i32* %392, align 4
  %402 = add i32 %400, %401
  store i32 %402, i32* %391, align 4
  %403 = load i32, i32* %392, align 4
  %404 = icmp ult i32 %402, %403
  br i1 %404, label %bn_add_if.then, label %bn_add_if.else

bn_add_if.then:                                   ; preds = %bn_add_for.body
  %405 = load i32*, i32** %388, align 4
  %406 = load i32, i32* %393, align 4
  %407 = getelementptr inbounds i32, i32* %405, i32 %406
  %408 = load i32, i32* %407, align 4
  store i32 %408, i32* %391, align 4
  br label %bn_add_if.end9

bn_add_if.else:                                   ; preds = %bn_add_for.body
  %409 = load i32*, i32** %388, align 4
  %410 = load i32, i32* %393, align 4
  %411 = getelementptr inbounds i32, i32* %409, i32 %410
  %412 = load i32, i32* %411, align 4
  %413 = load i32, i32* %391, align 4
  %414 = add i32 %413, %412
  store i32 %414, i32* %391, align 4
  %415 = load i32*, i32** %388, align 4
  %416 = load i32, i32* %393, align 4
  %417 = getelementptr inbounds i32, i32* %415, i32 %416
  %418 = load i32, i32* %417, align 4
  %419 = icmp ult i32 %414, %418
  br i1 %419, label %bn_add_if.then7, label %bn_add_if.else8

bn_add_if.then7:                                  ; preds = %bn_add_if.else
  store i32 1, i32* %392, align 4
  br label %bn_add_if.end

bn_add_if.else8:                                  ; preds = %bn_add_if.else
  store i32 0, i32* %392, align 4
  br label %bn_add_if.end

bn_add_if.end:                                    ; preds = %bn_add_if.else8, %bn_add_if.then7
  br label %bn_add_if.end9

bn_add_if.end9:                                   ; preds = %bn_add_if.end, %bn_add_if.then
  %420 = load i32, i32* %391, align 4
  %421 = load i32*, i32** %390, align 4
  %422 = load i32, i32* %393, align 4
  %423 = getelementptr inbounds i32, i32* %421, i32 %422
  store i32 %420, i32* %423, align 4
  br label %bn_add_for.inc

bn_add_for.inc:                                   ; preds = %bn_add_if.end9
  %424 = load i32, i32* %393, align 4
  %425 = add i32 %424, 1
  store i32 %425, i32* %393, align 4
  br label %bn_add_for.cond

bn_add_for.end:                                   ; preds = %bn_add_for.cond
  %426 = load i32, i32* %392, align 4
  br label %do.end.split147.split

do.end.split147.split:                            ; preds = %bn_add_for.end
  %427 = load i32, i32* %pdigits, align 4
  %arraydecay55 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  br label %bn_assign_zero_entry142

bn_assign_zero_entry142:                          ; preds = %do.end.split147.split
  %428 = alloca i32, align 4
  %429 = alloca i32*, align 4
  %430 = alloca i32, align 4
  store i32 %427, i32* %428, align 4
  store i32* %arraydecay55, i32** %429, align 4
  store i32 0, i32* %430, align 4
  br label %bn_assign_zero_for.cond143

bn_assign_zero_for.cond143:                       ; preds = %bn_assign_zero_for.inc145, %bn_assign_zero_entry142
  %431 = load i32, i32* %430, align 4
  %432 = load i32, i32* %428, align 4
  %433 = icmp ult i32 %431, %432
  br i1 %433, label %bn_assign_zero_for.body144, label %bn_assign_zero_for.end146

bn_assign_zero_for.body144:                       ; preds = %bn_assign_zero_for.cond143
  %434 = load i32*, i32** %429, align 4
  %435 = load i32, i32* %430, align 4
  %436 = getelementptr inbounds i32, i32* %434, i32 %435
  store i32 0, i32* %436, align 4
  br label %bn_assign_zero_for.inc145

bn_assign_zero_for.inc145:                        ; preds = %bn_assign_zero_for.body144
  %437 = load i32, i32* %430, align 4
  %438 = add i32 %437, 1
  store i32 %438, i32* %430, align 4
  br label %bn_assign_zero_for.cond143

bn_assign_zero_for.end146:                        ; preds = %bn_assign_zero_for.cond143
  br label %do.end.split

do.end.split:                                     ; preds = %bn_assign_zero_for.end146
  %arrayidx56 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  store i32 2, i32* %arrayidx56, align 4
  br label %do.body57

do.body57:                                        ; preds = %do.cond66, %do.end.split
  %439 = load i32, i32* %pdigits, align 4
  %arraydecay58 = getelementptr inbounds [65 x i32], [65 x i32]* %v, i32 0, i32 0
  %arraydecay59 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay60 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay61 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %call62 = call i32 @generate_prime(i32* %arraydecay61, i32* %arraydecay60, i32* %arraydecay59, i32* %arraydecay58, i32 %439)
  store i32 %call62, i32* %status, align 4
  %440 = load i32, i32* %status, align 4
  %cmp63 = icmp ne i32 %440, 0
  br i1 %cmp63, label %if.then64, label %if.end65

if.then64:                                        ; preds = %do.body57
  %441 = load i32, i32* %status, align 4
  store i32 %441, i32* %retval, align 4
  br label %return

if.end65:                                         ; preds = %do.body57
  br label %do.cond66

do.cond66:                                        ; preds = %if.end65
  %arraydecay67 = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  %442 = load i32, i32* %pdigits, align 4
  %arraydecay68 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %call69 = call i32 @rsa_filter(i32* %arraydecay68, i32 %442, i32* %arraydecay67, i32 1)
  %tobool70 = icmp ne i32 %call69, 0
  %lnot71 = xor i1 %tobool70, true
  br i1 %lnot71, label %do.body57, label %do.end72

do.end72:                                         ; preds = %do.cond66
  %443 = load i32, i32* %pdigits, align 4
  %arraydecay73 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %arraydecay74 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  br label %bn_cmp_entry

bn_cmp_entry:                                     ; preds = %do.end72
  %444 = alloca i32, align 4
  %445 = alloca i32, align 4
  %446 = alloca i32*, align 4
  %447 = alloca i32*, align 4
  %448 = alloca i32, align 4
  store i32 %443, i32* %445, align 4
  store i32* %arraydecay73, i32** %446, align 4
  store i32* %arraydecay74, i32** %447, align 4
  %449 = load i32, i32* %445, align 4
  %450 = sub i32 %449, 1
  store i32 %450, i32* %448, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.cond:                                  ; preds = %bn_cmp_for.inc, %bn_cmp_entry
  %451 = load i32, i32* %448, align 4
  %452 = icmp sge i32 %451, 0
  br i1 %452, label %bn_cmp_for.body, label %bn_cmp_for.end

bn_cmp_for.body:                                  ; preds = %bn_cmp_for.cond
  %453 = load i32*, i32** %447, align 4
  %454 = load i32, i32* %448, align 4
  %455 = getelementptr inbounds i32, i32* %453, i32 %454
  %456 = load i32, i32* %455, align 4
  %457 = load i32*, i32** %446, align 4
  %458 = load i32, i32* %448, align 4
  %459 = getelementptr inbounds i32, i32* %457, i32 %458
  %460 = load i32, i32* %459, align 4
  %461 = icmp ugt i32 %456, %460
  br i1 %461, label %bn_cmp_if.then, label %bn_cmp_if.end

bn_cmp_if.then:                                   ; preds = %bn_cmp_for.body
  store i32 1, i32* %444, align 4
  br label %bn_cmp_return

bn_cmp_if.end:                                    ; preds = %bn_cmp_for.body
  %462 = load i32*, i32** %447, align 4
  %463 = load i32, i32* %448, align 4
  %464 = getelementptr inbounds i32, i32* %462, i32 %463
  %465 = load i32, i32* %464, align 4
  %466 = load i32*, i32** %446, align 4
  %467 = load i32, i32* %448, align 4
  %468 = getelementptr inbounds i32, i32* %466, i32 %467
  %469 = load i32, i32* %468, align 4
  %470 = icmp ult i32 %465, %469
  br i1 %470, label %bn_cmp_if.then6, label %bn_cmp_if.end7

bn_cmp_if.then6:                                  ; preds = %bn_cmp_if.end
  store i32 -1, i32* %444, align 4
  br label %bn_cmp_return

bn_cmp_if.end7:                                   ; preds = %bn_cmp_if.end
  br label %bn_cmp_for.inc

bn_cmp_for.inc:                                   ; preds = %bn_cmp_if.end7
  %471 = load i32, i32* %448, align 4
  %472 = add nsw i32 %471, -1
  store i32 %472, i32* %448, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.end:                                   ; preds = %bn_cmp_for.cond
  store i32 0, i32* %444, align 4
  br label %bn_cmp_return

bn_cmp_return:                                    ; preds = %bn_cmp_for.end, %bn_cmp_if.then6, %bn_cmp_if.then
  %473 = load i32, i32* %444, align 4
  br label %do.end72.split

do.end72.split:                                   ; preds = %bn_cmp_return
  %cmp76 = icmp slt i32 %473, 0
  br i1 %cmp76, label %if.then77, label %if.end84

if.then77:                                        ; preds = %do.end72.split
  %474 = load i32, i32* %pdigits, align 4
  %arraydecay78 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %arraydecay79 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_entry136

bn_assign_entry136:                               ; preds = %if.then77
  %475 = alloca i32, align 4
  %476 = alloca i32*, align 4
  %477 = alloca i32*, align 4
  %478 = alloca i32, align 4
  store i32 %474, i32* %475, align 4
  store i32* %arraydecay78, i32** %476, align 4
  store i32* %arraydecay79, i32** %477, align 4
  store i32 0, i32* %478, align 4
  br label %bn_assign_for.cond137

bn_assign_for.cond137:                            ; preds = %bn_assign_for.inc139, %bn_assign_entry136
  %479 = load i32, i32* %478, align 4
  %480 = load i32, i32* %475, align 4
  %481 = icmp ult i32 %479, %480
  br i1 %481, label %bn_assign_for.body138, label %bn_assign_for.end140

bn_assign_for.body138:                            ; preds = %bn_assign_for.cond137
  %482 = load i32*, i32** %476, align 4
  %483 = load i32, i32* %478, align 4
  %484 = getelementptr inbounds i32, i32* %482, i32 %483
  %485 = load i32, i32* %484, align 4
  %486 = load i32*, i32** %477, align 4
  %487 = load i32, i32* %478, align 4
  %488 = getelementptr inbounds i32, i32* %486, i32 %487
  store i32 %485, i32* %488, align 4
  br label %bn_assign_for.inc139

bn_assign_for.inc139:                             ; preds = %bn_assign_for.body138
  %489 = load i32, i32* %478, align 4
  %490 = add i32 %489, 1
  store i32 %490, i32* %478, align 4
  br label %bn_assign_for.cond137

bn_assign_for.end140:                             ; preds = %bn_assign_for.cond137
  br label %if.then77.split135

if.then77.split135:                               ; preds = %bn_assign_for.end140
  %491 = load i32, i32* %pdigits, align 4
  %arraydecay80 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %arraydecay81 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  br label %bn_assign_entry130

bn_assign_entry130:                               ; preds = %if.then77.split135
  %492 = alloca i32, align 4
  %493 = alloca i32*, align 4
  %494 = alloca i32*, align 4
  %495 = alloca i32, align 4
  store i32 %491, i32* %492, align 4
  store i32* %arraydecay80, i32** %493, align 4
  store i32* %arraydecay81, i32** %494, align 4
  store i32 0, i32* %495, align 4
  br label %bn_assign_for.cond131

bn_assign_for.cond131:                            ; preds = %bn_assign_for.inc133, %bn_assign_entry130
  %496 = load i32, i32* %495, align 4
  %497 = load i32, i32* %492, align 4
  %498 = icmp ult i32 %496, %497
  br i1 %498, label %bn_assign_for.body132, label %bn_assign_for.end134

bn_assign_for.body132:                            ; preds = %bn_assign_for.cond131
  %499 = load i32*, i32** %493, align 4
  %500 = load i32, i32* %495, align 4
  %501 = getelementptr inbounds i32, i32* %499, i32 %500
  %502 = load i32, i32* %501, align 4
  %503 = load i32*, i32** %494, align 4
  %504 = load i32, i32* %495, align 4
  %505 = getelementptr inbounds i32, i32* %503, i32 %504
  store i32 %502, i32* %505, align 4
  br label %bn_assign_for.inc133

bn_assign_for.inc133:                             ; preds = %bn_assign_for.body132
  %506 = load i32, i32* %495, align 4
  %507 = add i32 %506, 1
  store i32 %507, i32* %495, align 4
  br label %bn_assign_for.cond131

bn_assign_for.end134:                             ; preds = %bn_assign_for.cond131
  br label %if.then77.split129

if.then77.split129:                               ; preds = %bn_assign_for.end134
  %508 = load i32, i32* %pdigits, align 4
  %arraydecay82 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay83 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  br label %bn_assign_entry

bn_assign_entry:                                  ; preds = %if.then77.split129
  %509 = alloca i32, align 4
  %510 = alloca i32*, align 4
  %511 = alloca i32*, align 4
  %512 = alloca i32, align 4
  store i32 %508, i32* %509, align 4
  store i32* %arraydecay82, i32** %510, align 4
  store i32* %arraydecay83, i32** %511, align 4
  store i32 0, i32* %512, align 4
  br label %bn_assign_for.cond

bn_assign_for.cond:                               ; preds = %bn_assign_for.inc, %bn_assign_entry
  %513 = load i32, i32* %512, align 4
  %514 = load i32, i32* %509, align 4
  %515 = icmp ult i32 %513, %514
  br i1 %515, label %bn_assign_for.body, label %bn_assign_for.end

bn_assign_for.body:                               ; preds = %bn_assign_for.cond
  %516 = load i32*, i32** %510, align 4
  %517 = load i32, i32* %512, align 4
  %518 = getelementptr inbounds i32, i32* %516, i32 %517
  %519 = load i32, i32* %518, align 4
  %520 = load i32*, i32** %511, align 4
  %521 = load i32, i32* %512, align 4
  %522 = getelementptr inbounds i32, i32* %520, i32 %521
  store i32 %519, i32* %522, align 4
  br label %bn_assign_for.inc

bn_assign_for.inc:                                ; preds = %bn_assign_for.body
  %523 = load i32, i32* %512, align 4
  %524 = add i32 %523, 1
  store i32 %524, i32* %512, align 4
  br label %bn_assign_for.cond

bn_assign_for.end:                                ; preds = %bn_assign_for.cond
  br label %if.then77.split

if.then77.split:                                  ; preds = %bn_assign_for.end
  br label %if.end84

if.end84:                                         ; preds = %if.then77.split, %do.end72.split
  %525 = load i32, i32* %pdigits, align 4
  %arraydecay85 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %arraydecay86 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %arraydecay87 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  br label %bn_mul_entry273

bn_mul_entry273:                                  ; preds = %if.end84
  %526 = alloca i32, align 4
  %527 = alloca i32*, align 4
  %528 = alloca i32*, align 4
  %529 = alloca i32*, align 4
  %530 = alloca [130 x i32], align 4
  %531 = alloca i32, align 4
  %532 = alloca i32, align 4
  %533 = alloca i32, align 4
  store i32 %525, i32* %526, align 4
  store i32* %arraydecay85, i32** %527, align 4
  store i32* %arraydecay86, i32** %528, align 4
  store i32* %arraydecay87, i32** %529, align 4
  %534 = load i32, i32* %526, align 4
  %535 = mul i32 2, %534
  %536 = getelementptr inbounds [130 x i32], [130 x i32]* %530, i32 0, i32 0
  br label %bn_mul_bn_assign_zero_entry274

bn_mul_bn_assign_zero_entry274:                   ; preds = %bn_mul_entry273
  %537 = alloca i32, align 4
  %538 = alloca i32*, align 4
  %539 = alloca i32, align 4
  store i32 %535, i32* %537, align 4
  store i32* %536, i32** %538, align 4
  store i32 0, i32* %539, align 4
  br label %bn_mul_bn_assign_zero_for.cond275

bn_mul_bn_assign_zero_for.cond275:                ; preds = %bn_mul_bn_assign_zero_for.inc277, %bn_mul_bn_assign_zero_entry274
  %540 = load i32, i32* %539, align 4
  %541 = load i32, i32* %537, align 4
  %542 = icmp ult i32 %540, %541
  br i1 %542, label %bn_mul_bn_assign_zero_for.body276, label %bn_mul_bn_assign_zero_for.end278

bn_mul_bn_assign_zero_for.body276:                ; preds = %bn_mul_bn_assign_zero_for.cond275
  %543 = load i32*, i32** %538, align 4
  %544 = load i32, i32* %539, align 4
  %545 = getelementptr inbounds i32, i32* %543, i32 %544
  store i32 0, i32* %545, align 4
  br label %bn_mul_bn_assign_zero_for.inc277

bn_mul_bn_assign_zero_for.inc277:                 ; preds = %bn_mul_bn_assign_zero_for.body276
  %546 = load i32, i32* %539, align 4
  %547 = add i32 %546, 1
  store i32 %547, i32* %539, align 4
  br label %bn_mul_bn_assign_zero_for.cond275

bn_mul_bn_assign_zero_for.end278:                 ; preds = %bn_mul_bn_assign_zero_for.cond275
  br label %bn_mul_entry.split279

bn_mul_entry.split279:                            ; preds = %bn_mul_bn_assign_zero_for.end278
  %548 = load i32, i32* %526, align 4
  %549 = load i32*, i32** %528, align 4
  br label %bn_digits_entry291

bn_digits_entry291:                               ; preds = %bn_mul_entry.split279
  %550 = alloca i32, align 4
  %551 = alloca i32*, align 4
  %552 = alloca i32, align 4
  store i32 %548, i32* %550, align 4
  store i32* %549, i32** %551, align 4
  %553 = load i32, i32* %550, align 4
  %554 = sub i32 %553, 1
  store i32 %554, i32* %552, align 4
  br label %bn_digits_for.cond292

bn_digits_for.cond292:                            ; preds = %bn_digits_for.inc296, %bn_digits_entry291
  %555 = load i32, i32* %552, align 4
  %556 = icmp sge i32 %555, 0
  br i1 %556, label %bn_digits_for.body293, label %bn_digits_for.end297

bn_digits_for.body293:                            ; preds = %bn_digits_for.cond292
  %557 = load i32*, i32** %551, align 4
  %558 = load i32, i32* %552, align 4
  %559 = getelementptr inbounds i32, i32* %557, i32 %558
  %560 = load i32, i32* %559, align 4
  %561 = icmp ne i32 %560, 0
  br i1 %561, label %bn_digits_if.then294, label %bn_digits_if.end295

bn_digits_if.then294:                             ; preds = %bn_digits_for.body293
  br label %bn_digits_for.end297

bn_digits_if.end295:                              ; preds = %bn_digits_for.body293
  br label %bn_digits_for.inc296

bn_digits_for.inc296:                             ; preds = %bn_digits_if.end295
  %562 = load i32, i32* %552, align 4
  %563 = add nsw i32 %562, -1
  store i32 %563, i32* %552, align 4
  br label %bn_digits_for.cond292

bn_digits_for.end297:                             ; preds = %bn_digits_if.then294, %bn_digits_for.cond292
  %564 = load i32, i32* %552, align 4
  %565 = add nsw i32 %564, 1
  br label %bn_mul_entry.split279.split290

bn_mul_entry.split279.split290:                   ; preds = %bn_digits_for.end297
  store i32 %565, i32* %531, align 4
  %566 = load i32, i32* %526, align 4
  %567 = load i32*, i32** %527, align 4
  br label %bn_digits_entry

bn_digits_entry:                                  ; preds = %bn_mul_entry.split279.split290
  %568 = alloca i32, align 4
  %569 = alloca i32*, align 4
  %570 = alloca i32, align 4
  store i32 %566, i32* %568, align 4
  store i32* %567, i32** %569, align 4
  %571 = load i32, i32* %568, align 4
  %572 = sub i32 %571, 1
  store i32 %572, i32* %570, align 4
  br label %bn_digits_for.cond

bn_digits_for.cond:                               ; preds = %bn_digits_for.inc, %bn_digits_entry
  %573 = load i32, i32* %570, align 4
  %574 = icmp sge i32 %573, 0
  br i1 %574, label %bn_digits_for.body, label %bn_digits_for.end

bn_digits_for.body:                               ; preds = %bn_digits_for.cond
  %575 = load i32*, i32** %569, align 4
  %576 = load i32, i32* %570, align 4
  %577 = getelementptr inbounds i32, i32* %575, i32 %576
  %578 = load i32, i32* %577, align 4
  %579 = icmp ne i32 %578, 0
  br i1 %579, label %bn_digits_if.then, label %bn_digits_if.end

bn_digits_if.then:                                ; preds = %bn_digits_for.body
  br label %bn_digits_for.end

bn_digits_if.end:                                 ; preds = %bn_digits_for.body
  br label %bn_digits_for.inc

bn_digits_for.inc:                                ; preds = %bn_digits_if.end
  %580 = load i32, i32* %570, align 4
  %581 = add nsw i32 %580, -1
  store i32 %581, i32* %570, align 4
  br label %bn_digits_for.cond

bn_digits_for.end:                                ; preds = %bn_digits_if.then, %bn_digits_for.cond
  %582 = load i32, i32* %570, align 4
  %583 = add nsw i32 %582, 1
  br label %bn_mul_entry.split279.split

bn_mul_entry.split279.split:                      ; preds = %bn_digits_for.end
  store i32 %583, i32* %532, align 4
  store i32 0, i32* %533, align 4
  br label %bn_mul_for.cond280

bn_mul_for.cond280:                               ; preds = %bn_mul_for.inc282, %bn_mul_entry.split279.split
  %584 = load i32, i32* %533, align 4
  %585 = load i32, i32* %531, align 4
  %586 = icmp ult i32 %584, %585
  br i1 %586, label %bn_mul_for.body281, label %bn_mul_for.end283

bn_mul_for.body281:                               ; preds = %bn_mul_for.cond280
  %587 = load i32, i32* %532, align 4
  %588 = load i32*, i32** %527, align 4
  %589 = load i32*, i32** %528, align 4
  %590 = load i32, i32* %533, align 4
  %591 = getelementptr inbounds i32, i32* %589, i32 %590
  %592 = load i32, i32* %591, align 4
  %593 = load i32, i32* %533, align 4
  %594 = getelementptr inbounds [130 x i32], [130 x i32]* %530, i32 0, i32 %593
  %595 = load i32, i32* %533, align 4
  %596 = getelementptr inbounds [130 x i32], [130 x i32]* %530, i32 0, i32 %595
  br label %bn_add_digit_mul_entry

bn_add_digit_mul_entry:                           ; preds = %bn_mul_for.body281
  %597 = alloca i32, align 4
  %598 = alloca i32, align 4
  %599 = alloca i32*, align 4
  %600 = alloca i32, align 4
  %601 = alloca i32*, align 4
  %602 = alloca i32*, align 4
  %603 = alloca i64, align 8
  %604 = alloca i32, align 4
  %605 = alloca i32, align 4
  %606 = alloca i32, align 4
  %607 = alloca i32, align 4
  store i32 %587, i32* %598, align 4
  store i32* %588, i32** %599, align 4
  store i32 %592, i32* %600, align 4
  store i32* %594, i32** %601, align 4
  store i32* %596, i32** %602, align 4
  %608 = load i32, i32* %600, align 4
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %bn_add_digit_mul_if.then, label %bn_add_digit_mul_if.end

bn_add_digit_mul_if.then:                         ; preds = %bn_add_digit_mul_entry
  store i32 0, i32* %597, align 4
  br label %bn_add_digit_mul_return

bn_add_digit_mul_if.end:                          ; preds = %bn_add_digit_mul_entry
  store i32 0, i32* %604, align 4
  store i32 0, i32* %607, align 4
  br label %bn_add_digit_mul_for.cond

bn_add_digit_mul_for.cond:                        ; preds = %bn_add_digit_mul_for.inc, %bn_add_digit_mul_if.end
  %610 = load i32, i32* %607, align 4
  %611 = load i32, i32* %598, align 4
  %612 = icmp ult i32 %610, %611
  br i1 %612, label %bn_add_digit_mul_for.body, label %bn_add_digit_mul_for.end

bn_add_digit_mul_for.body:                        ; preds = %bn_add_digit_mul_for.cond
  %613 = load i32, i32* %600, align 4
  %614 = zext i32 %613 to i64
  %615 = load i32*, i32** %599, align 4
  %616 = load i32, i32* %607, align 4
  %617 = getelementptr inbounds i32, i32* %615, i32 %616
  %618 = load i32, i32* %617, align 4
  %619 = zext i32 %618 to i64
  %620 = mul i64 %614, %619
  store i64 %620, i64* %603, align 8
  %621 = load i64, i64* %603, align 8
  %622 = and i64 %621, 4294967295
  %623 = trunc i64 %622 to i32
  store i32 %623, i32* %606, align 4
  %624 = load i64, i64* %603, align 8
  %625 = lshr i64 %624, 32
  %626 = and i64 %625, 4294967295
  %627 = trunc i64 %626 to i32
  store i32 %627, i32* %605, align 4
  %628 = load i32*, i32** %601, align 4
  %629 = load i32, i32* %607, align 4
  %630 = getelementptr inbounds i32, i32* %628, i32 %629
  %631 = load i32, i32* %630, align 4
  %632 = load i32, i32* %604, align 4
  %633 = add i32 %631, %632
  %634 = load i32*, i32** %602, align 4
  %635 = load i32, i32* %607, align 4
  %636 = getelementptr inbounds i32, i32* %634, i32 %635
  store i32 %633, i32* %636, align 4
  %637 = load i32, i32* %604, align 4
  %638 = icmp ult i32 %633, %637
  br i1 %638, label %bn_add_digit_mul_if.then10, label %bn_add_digit_mul_if.else

bn_add_digit_mul_if.then10:                       ; preds = %bn_add_digit_mul_for.body
  store i32 1, i32* %604, align 4
  br label %bn_add_digit_mul_if.end11

bn_add_digit_mul_if.else:                         ; preds = %bn_add_digit_mul_for.body
  store i32 0, i32* %604, align 4
  br label %bn_add_digit_mul_if.end11

bn_add_digit_mul_if.end11:                        ; preds = %bn_add_digit_mul_if.else, %bn_add_digit_mul_if.then10
  %639 = load i32, i32* %606, align 4
  %640 = load i32*, i32** %602, align 4
  %641 = load i32, i32* %607, align 4
  %642 = getelementptr inbounds i32, i32* %640, i32 %641
  %643 = load i32, i32* %642, align 4
  %644 = add i32 %643, %639
  store i32 %644, i32* %642, align 4
  %645 = load i32, i32* %606, align 4
  %646 = icmp ult i32 %644, %645
  br i1 %646, label %bn_add_digit_mul_if.then16, label %bn_add_digit_mul_if.end17

bn_add_digit_mul_if.then16:                       ; preds = %bn_add_digit_mul_if.end11
  %647 = load i32, i32* %604, align 4
  %648 = add i32 %647, 1
  store i32 %648, i32* %604, align 4
  br label %bn_add_digit_mul_if.end17

bn_add_digit_mul_if.end17:                        ; preds = %bn_add_digit_mul_if.then16, %bn_add_digit_mul_if.end11
  %649 = load i32, i32* %605, align 4
  %650 = load i32, i32* %604, align 4
  %651 = add i32 %650, %649
  store i32 %651, i32* %604, align 4
  br label %bn_add_digit_mul_for.inc

bn_add_digit_mul_for.inc:                         ; preds = %bn_add_digit_mul_if.end17
  %652 = load i32, i32* %607, align 4
  %653 = add i32 %652, 1
  store i32 %653, i32* %607, align 4
  br label %bn_add_digit_mul_for.cond

bn_add_digit_mul_for.end:                         ; preds = %bn_add_digit_mul_for.cond
  %654 = load i32, i32* %604, align 4
  store i32 %654, i32* %597, align 4
  br label %bn_add_digit_mul_return

bn_add_digit_mul_return:                          ; preds = %bn_add_digit_mul_for.end, %bn_add_digit_mul_if.then
  %655 = load i32, i32* %597, align 4
  br label %bn_mul_for.body281.split

bn_mul_for.body281.split:                         ; preds = %bn_add_digit_mul_return
  %656 = load i32, i32* %533, align 4
  %657 = load i32, i32* %532, align 4
  %658 = add i32 %656, %657
  %659 = getelementptr inbounds [130 x i32], [130 x i32]* %530, i32 0, i32 %658
  %660 = load i32, i32* %659, align 4
  %661 = add i32 %660, %655
  store i32 %661, i32* %659, align 4
  br label %bn_mul_for.inc282

bn_mul_for.inc282:                                ; preds = %bn_mul_for.body281.split
  %662 = load i32, i32* %533, align 4
  %663 = add i32 %662, 1
  store i32 %663, i32* %533, align 4
  br label %bn_mul_for.cond280

bn_mul_for.end283:                                ; preds = %bn_mul_for.cond280
  %664 = load i32, i32* %526, align 4
  %665 = mul i32 2, %664
  %666 = getelementptr inbounds [130 x i32], [130 x i32]* %530, i32 0, i32 0
  %667 = load i32*, i32** %529, align 4
  br label %bn_mul_bn_assign_entry284

bn_mul_bn_assign_entry284:                        ; preds = %bn_mul_for.end283
  %668 = alloca i32, align 4
  %669 = alloca i32*, align 4
  %670 = alloca i32*, align 4
  %671 = alloca i32, align 4
  store i32 %665, i32* %668, align 4
  store i32* %666, i32** %669, align 4
  store i32* %667, i32** %670, align 4
  store i32 0, i32* %671, align 4
  br label %bn_mul_bn_assign_for.cond285

bn_mul_bn_assign_for.cond285:                     ; preds = %bn_mul_bn_assign_for.inc287, %bn_mul_bn_assign_entry284
  %672 = load i32, i32* %671, align 4
  %673 = load i32, i32* %668, align 4
  %674 = icmp ult i32 %672, %673
  br i1 %674, label %bn_mul_bn_assign_for.body286, label %bn_mul_bn_assign_for.end288

bn_mul_bn_assign_for.body286:                     ; preds = %bn_mul_bn_assign_for.cond285
  %675 = load i32*, i32** %669, align 4
  %676 = load i32, i32* %671, align 4
  %677 = getelementptr inbounds i32, i32* %675, i32 %676
  %678 = load i32, i32* %677, align 4
  %679 = load i32*, i32** %670, align 4
  %680 = load i32, i32* %671, align 4
  %681 = getelementptr inbounds i32, i32* %679, i32 %680
  store i32 %678, i32* %681, align 4
  br label %bn_mul_bn_assign_for.inc287

bn_mul_bn_assign_for.inc287:                      ; preds = %bn_mul_bn_assign_for.body286
  %682 = load i32, i32* %671, align 4
  %683 = add i32 %682, 1
  store i32 %683, i32* %671, align 4
  br label %bn_mul_bn_assign_for.cond285

bn_mul_bn_assign_for.end288:                      ; preds = %bn_mul_bn_assign_for.cond285
  br label %bn_mul_for.end.split289

bn_mul_for.end.split289:                          ; preds = %bn_mul_bn_assign_for.end288
  %684 = getelementptr inbounds [130 x i32], [130 x i32]* %530, i32 0, i32 0
  %685 = bitcast i32* %684 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %685, i8 0, i32 520, i1 false)
  br label %if.end84.split272

if.end84.split272:                                ; preds = %bn_mul_for.end.split289
  %686 = load i32, i32* %pdigits, align 4
  %arraydecay88 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %arraydecay89 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %arraydecay90 = getelementptr inbounds [65 x i32], [65 x i32]* %q_inv, i32 0, i32 0
  call void @bn_mod_inv(i32* %arraydecay90, i32* %arraydecay89, i32* %arraydecay88, i32 %686)
  %687 = load i32, i32* %pdigits, align 4
  %arraydecay91 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_zero_entry

bn_assign_zero_entry:                             ; preds = %if.end84.split272
  %688 = alloca i32, align 4
  %689 = alloca i32*, align 4
  %690 = alloca i32, align 4
  store i32 %687, i32* %688, align 4
  store i32* %arraydecay91, i32** %689, align 4
  store i32 0, i32* %690, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.cond:                          ; preds = %bn_assign_zero_for.inc, %bn_assign_zero_entry
  %691 = load i32, i32* %690, align 4
  %692 = load i32, i32* %688, align 4
  %693 = icmp ult i32 %691, %692
  br i1 %693, label %bn_assign_zero_for.body, label %bn_assign_zero_for.end

bn_assign_zero_for.body:                          ; preds = %bn_assign_zero_for.cond
  %694 = load i32*, i32** %689, align 4
  %695 = load i32, i32* %690, align 4
  %696 = getelementptr inbounds i32, i32* %694, i32 %695
  store i32 0, i32* %696, align 4
  br label %bn_assign_zero_for.inc

bn_assign_zero_for.inc:                           ; preds = %bn_assign_zero_for.body
  %697 = load i32, i32* %690, align 4
  %698 = add i32 %697, 1
  store i32 %698, i32* %690, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.end:                           ; preds = %bn_assign_zero_for.cond
  br label %if.end84.split141

if.end84.split141:                                ; preds = %bn_assign_zero_for.end
  %arrayidx92 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  store i32 1, i32* %arrayidx92, align 4
  %699 = load i32, i32* %pdigits, align 4
  %arraydecay93 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay94 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %arraydecay95 = getelementptr inbounds [65 x i32], [65 x i32]* %p_minus1, i32 0, i32 0
  br label %bn_sub_entry237

bn_sub_entry237:                                  ; preds = %if.end84.split141
  %700 = alloca i32, align 4
  %701 = alloca i32*, align 4
  %702 = alloca i32*, align 4
  %703 = alloca i32*, align 4
  %704 = alloca i32, align 4
  %705 = alloca i32, align 4
  %706 = alloca i32, align 4
  store i32 %699, i32* %700, align 4
  store i32* %arraydecay93, i32** %701, align 4
  store i32* %arraydecay94, i32** %702, align 4
  store i32* %arraydecay95, i32** %703, align 4
  store i32 0, i32* %705, align 4
  store i32 0, i32* %706, align 4
  br label %bn_sub_for.cond238

bn_sub_for.cond238:                               ; preds = %bn_sub_for.inc246, %bn_sub_entry237
  %707 = load i32, i32* %706, align 4
  %708 = load i32, i32* %700, align 4
  %709 = icmp ult i32 %707, %708
  br i1 %709, label %bn_sub_for.body239, label %bn_sub_for.end247

bn_sub_for.body239:                               ; preds = %bn_sub_for.cond238
  %710 = load i32*, i32** %702, align 4
  %711 = load i32, i32* %706, align 4
  %712 = getelementptr inbounds i32, i32* %710, i32 %711
  %713 = load i32, i32* %712, align 4
  %714 = load i32, i32* %705, align 4
  %715 = sub i32 %713, %714
  store i32 %715, i32* %704, align 4
  %716 = load i32, i32* %705, align 4
  %717 = sub i32 -1, %716
  %718 = icmp ugt i32 %715, %717
  br i1 %718, label %bn_sub_if.then240, label %bn_sub_if.else241

bn_sub_if.then240:                                ; preds = %bn_sub_for.body239
  %719 = load i32*, i32** %701, align 4
  %720 = load i32, i32* %706, align 4
  %721 = getelementptr inbounds i32, i32* %719, i32 %720
  %722 = load i32, i32* %721, align 4
  %723 = sub i32 -1, %722
  store i32 %723, i32* %704, align 4
  br label %bn_sub_if.end12245

bn_sub_if.else241:                                ; preds = %bn_sub_for.body239
  %724 = load i32*, i32** %701, align 4
  %725 = load i32, i32* %706, align 4
  %726 = getelementptr inbounds i32, i32* %724, i32 %725
  %727 = load i32, i32* %726, align 4
  %728 = load i32, i32* %704, align 4
  %729 = sub i32 %728, %727
  store i32 %729, i32* %704, align 4
  %730 = load i32*, i32** %701, align 4
  %731 = load i32, i32* %706, align 4
  %732 = getelementptr inbounds i32, i32* %730, i32 %731
  %733 = load i32, i32* %732, align 4
  %734 = sub i32 -1, %733
  %735 = icmp ugt i32 %729, %734
  br i1 %735, label %bn_sub_if.then10242, label %bn_sub_if.else11243

bn_sub_if.then10242:                              ; preds = %bn_sub_if.else241
  store i32 1, i32* %705, align 4
  br label %bn_sub_if.end244

bn_sub_if.else11243:                              ; preds = %bn_sub_if.else241
  store i32 0, i32* %705, align 4
  br label %bn_sub_if.end244

bn_sub_if.end244:                                 ; preds = %bn_sub_if.else11243, %bn_sub_if.then10242
  br label %bn_sub_if.end12245

bn_sub_if.end12245:                               ; preds = %bn_sub_if.end244, %bn_sub_if.then240
  %736 = load i32, i32* %704, align 4
  %737 = load i32*, i32** %703, align 4
  %738 = load i32, i32* %706, align 4
  %739 = getelementptr inbounds i32, i32* %737, i32 %738
  store i32 %736, i32* %739, align 4
  br label %bn_sub_for.inc246

bn_sub_for.inc246:                                ; preds = %bn_sub_if.end12245
  %740 = load i32, i32* %706, align 4
  %741 = add i32 %740, 1
  store i32 %741, i32* %706, align 4
  br label %bn_sub_for.cond238

bn_sub_for.end247:                                ; preds = %bn_sub_for.cond238
  %742 = load i32, i32* %705, align 4
  br label %if.end84.split141.split236

if.end84.split141.split236:                       ; preds = %bn_sub_for.end247
  %743 = load i32, i32* %pdigits, align 4
  %arraydecay97 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay98 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %arraydecay99 = getelementptr inbounds [65 x i32], [65 x i32]* %q_minus1, i32 0, i32 0
  br label %bn_sub_entry

bn_sub_entry:                                     ; preds = %if.end84.split141.split236
  %744 = alloca i32, align 4
  %745 = alloca i32*, align 4
  %746 = alloca i32*, align 4
  %747 = alloca i32*, align 4
  %748 = alloca i32, align 4
  %749 = alloca i32, align 4
  %750 = alloca i32, align 4
  store i32 %743, i32* %744, align 4
  store i32* %arraydecay97, i32** %745, align 4
  store i32* %arraydecay98, i32** %746, align 4
  store i32* %arraydecay99, i32** %747, align 4
  store i32 0, i32* %749, align 4
  store i32 0, i32* %750, align 4
  br label %bn_sub_for.cond

bn_sub_for.cond:                                  ; preds = %bn_sub_for.inc, %bn_sub_entry
  %751 = load i32, i32* %750, align 4
  %752 = load i32, i32* %744, align 4
  %753 = icmp ult i32 %751, %752
  br i1 %753, label %bn_sub_for.body, label %bn_sub_for.end

bn_sub_for.body:                                  ; preds = %bn_sub_for.cond
  %754 = load i32*, i32** %746, align 4
  %755 = load i32, i32* %750, align 4
  %756 = getelementptr inbounds i32, i32* %754, i32 %755
  %757 = load i32, i32* %756, align 4
  %758 = load i32, i32* %749, align 4
  %759 = sub i32 %757, %758
  store i32 %759, i32* %748, align 4
  %760 = load i32, i32* %749, align 4
  %761 = sub i32 -1, %760
  %762 = icmp ugt i32 %759, %761
  br i1 %762, label %bn_sub_if.then, label %bn_sub_if.else

bn_sub_if.then:                                   ; preds = %bn_sub_for.body
  %763 = load i32*, i32** %745, align 4
  %764 = load i32, i32* %750, align 4
  %765 = getelementptr inbounds i32, i32* %763, i32 %764
  %766 = load i32, i32* %765, align 4
  %767 = sub i32 -1, %766
  store i32 %767, i32* %748, align 4
  br label %bn_sub_if.end12

bn_sub_if.else:                                   ; preds = %bn_sub_for.body
  %768 = load i32*, i32** %745, align 4
  %769 = load i32, i32* %750, align 4
  %770 = getelementptr inbounds i32, i32* %768, i32 %769
  %771 = load i32, i32* %770, align 4
  %772 = load i32, i32* %748, align 4
  %773 = sub i32 %772, %771
  store i32 %773, i32* %748, align 4
  %774 = load i32*, i32** %745, align 4
  %775 = load i32, i32* %750, align 4
  %776 = getelementptr inbounds i32, i32* %774, i32 %775
  %777 = load i32, i32* %776, align 4
  %778 = sub i32 -1, %777
  %779 = icmp ugt i32 %773, %778
  br i1 %779, label %bn_sub_if.then10, label %bn_sub_if.else11

bn_sub_if.then10:                                 ; preds = %bn_sub_if.else
  store i32 1, i32* %749, align 4
  br label %bn_sub_if.end

bn_sub_if.else11:                                 ; preds = %bn_sub_if.else
  store i32 0, i32* %749, align 4
  br label %bn_sub_if.end

bn_sub_if.end:                                    ; preds = %bn_sub_if.else11, %bn_sub_if.then10
  br label %bn_sub_if.end12

bn_sub_if.end12:                                  ; preds = %bn_sub_if.end, %bn_sub_if.then
  %780 = load i32, i32* %748, align 4
  %781 = load i32*, i32** %747, align 4
  %782 = load i32, i32* %750, align 4
  %783 = getelementptr inbounds i32, i32* %781, i32 %782
  store i32 %780, i32* %783, align 4
  br label %bn_sub_for.inc

bn_sub_for.inc:                                   ; preds = %bn_sub_if.end12
  %784 = load i32, i32* %750, align 4
  %785 = add i32 %784, 1
  store i32 %785, i32* %750, align 4
  br label %bn_sub_for.cond

bn_sub_for.end:                                   ; preds = %bn_sub_for.cond
  %786 = load i32, i32* %749, align 4
  br label %if.end84.split141.split

if.end84.split141.split:                          ; preds = %bn_sub_for.end
  %787 = load i32, i32* %pdigits, align 4
  %arraydecay101 = getelementptr inbounds [65 x i32], [65 x i32]* %q_minus1, i32 0, i32 0
  %arraydecay102 = getelementptr inbounds [65 x i32], [65 x i32]* %p_minus1, i32 0, i32 0
  %arraydecay103 = getelementptr inbounds [65 x i32], [65 x i32]* %phi_n, i32 0, i32 0
  br label %bn_mul_entry

bn_mul_entry:                                     ; preds = %if.end84.split141.split
  %788 = alloca i32, align 4
  %789 = alloca i32*, align 4
  %790 = alloca i32*, align 4
  %791 = alloca i32*, align 4
  %792 = alloca [130 x i32], align 4
  %793 = alloca i32, align 4
  %794 = alloca i32, align 4
  %795 = alloca i32, align 4
  store i32 %787, i32* %788, align 4
  store i32* %arraydecay101, i32** %789, align 4
  store i32* %arraydecay102, i32** %790, align 4
  store i32* %arraydecay103, i32** %791, align 4
  %796 = load i32, i32* %788, align 4
  %797 = mul i32 2, %796
  %798 = getelementptr inbounds [130 x i32], [130 x i32]* %792, i32 0, i32 0
  br label %bn_mul_bn_assign_zero_entry

bn_mul_bn_assign_zero_entry:                      ; preds = %bn_mul_entry
  %799 = alloca i32, align 4
  %800 = alloca i32*, align 4
  %801 = alloca i32, align 4
  store i32 %797, i32* %799, align 4
  store i32* %798, i32** %800, align 4
  store i32 0, i32* %801, align 4
  br label %bn_mul_bn_assign_zero_for.cond

bn_mul_bn_assign_zero_for.cond:                   ; preds = %bn_mul_bn_assign_zero_for.inc, %bn_mul_bn_assign_zero_entry
  %802 = load i32, i32* %801, align 4
  %803 = load i32, i32* %799, align 4
  %804 = icmp ult i32 %802, %803
  br i1 %804, label %bn_mul_bn_assign_zero_for.body, label %bn_mul_bn_assign_zero_for.end

bn_mul_bn_assign_zero_for.body:                   ; preds = %bn_mul_bn_assign_zero_for.cond
  %805 = load i32*, i32** %800, align 4
  %806 = load i32, i32* %801, align 4
  %807 = getelementptr inbounds i32, i32* %805, i32 %806
  store i32 0, i32* %807, align 4
  br label %bn_mul_bn_assign_zero_for.inc

bn_mul_bn_assign_zero_for.inc:                    ; preds = %bn_mul_bn_assign_zero_for.body
  %808 = load i32, i32* %801, align 4
  %809 = add i32 %808, 1
  store i32 %809, i32* %801, align 4
  br label %bn_mul_bn_assign_zero_for.cond

bn_mul_bn_assign_zero_for.end:                    ; preds = %bn_mul_bn_assign_zero_for.cond
  br label %bn_mul_entry.split

bn_mul_entry.split:                               ; preds = %bn_mul_bn_assign_zero_for.end
  %810 = load i32, i32* %788, align 4
  %811 = load i32*, i32** %790, align 4
  br label %bn_digits_entry306

bn_digits_entry306:                               ; preds = %bn_mul_entry.split
  %812 = alloca i32, align 4
  %813 = alloca i32*, align 4
  %814 = alloca i32, align 4
  store i32 %810, i32* %812, align 4
  store i32* %811, i32** %813, align 4
  %815 = load i32, i32* %812, align 4
  %816 = sub i32 %815, 1
  store i32 %816, i32* %814, align 4
  br label %bn_digits_for.cond307

bn_digits_for.cond307:                            ; preds = %bn_digits_for.inc311, %bn_digits_entry306
  %817 = load i32, i32* %814, align 4
  %818 = icmp sge i32 %817, 0
  br i1 %818, label %bn_digits_for.body308, label %bn_digits_for.end312

bn_digits_for.body308:                            ; preds = %bn_digits_for.cond307
  %819 = load i32*, i32** %813, align 4
  %820 = load i32, i32* %814, align 4
  %821 = getelementptr inbounds i32, i32* %819, i32 %820
  %822 = load i32, i32* %821, align 4
  %823 = icmp ne i32 %822, 0
  br i1 %823, label %bn_digits_if.then309, label %bn_digits_if.end310

bn_digits_if.then309:                             ; preds = %bn_digits_for.body308
  br label %bn_digits_for.end312

bn_digits_if.end310:                              ; preds = %bn_digits_for.body308
  br label %bn_digits_for.inc311

bn_digits_for.inc311:                             ; preds = %bn_digits_if.end310
  %824 = load i32, i32* %814, align 4
  %825 = add nsw i32 %824, -1
  store i32 %825, i32* %814, align 4
  br label %bn_digits_for.cond307

bn_digits_for.end312:                             ; preds = %bn_digits_if.then309, %bn_digits_for.cond307
  %826 = load i32, i32* %814, align 4
  %827 = add nsw i32 %826, 1
  br label %bn_mul_entry.split.split305

bn_mul_entry.split.split305:                      ; preds = %bn_digits_for.end312
  store i32 %827, i32* %793, align 4
  %828 = load i32, i32* %788, align 4
  %829 = load i32*, i32** %789, align 4
  br label %bn_digits_entry298

bn_digits_entry298:                               ; preds = %bn_mul_entry.split.split305
  %830 = alloca i32, align 4
  %831 = alloca i32*, align 4
  %832 = alloca i32, align 4
  store i32 %828, i32* %830, align 4
  store i32* %829, i32** %831, align 4
  %833 = load i32, i32* %830, align 4
  %834 = sub i32 %833, 1
  store i32 %834, i32* %832, align 4
  br label %bn_digits_for.cond299

bn_digits_for.cond299:                            ; preds = %bn_digits_for.inc303, %bn_digits_entry298
  %835 = load i32, i32* %832, align 4
  %836 = icmp sge i32 %835, 0
  br i1 %836, label %bn_digits_for.body300, label %bn_digits_for.end304

bn_digits_for.body300:                            ; preds = %bn_digits_for.cond299
  %837 = load i32*, i32** %831, align 4
  %838 = load i32, i32* %832, align 4
  %839 = getelementptr inbounds i32, i32* %837, i32 %838
  %840 = load i32, i32* %839, align 4
  %841 = icmp ne i32 %840, 0
  br i1 %841, label %bn_digits_if.then301, label %bn_digits_if.end302

bn_digits_if.then301:                             ; preds = %bn_digits_for.body300
  br label %bn_digits_for.end304

bn_digits_if.end302:                              ; preds = %bn_digits_for.body300
  br label %bn_digits_for.inc303

bn_digits_for.inc303:                             ; preds = %bn_digits_if.end302
  %842 = load i32, i32* %832, align 4
  %843 = add nsw i32 %842, -1
  store i32 %843, i32* %832, align 4
  br label %bn_digits_for.cond299

bn_digits_for.end304:                             ; preds = %bn_digits_if.then301, %bn_digits_for.cond299
  %844 = load i32, i32* %832, align 4
  %845 = add nsw i32 %844, 1
  br label %bn_mul_entry.split.split

bn_mul_entry.split.split:                         ; preds = %bn_digits_for.end304
  store i32 %845, i32* %794, align 4
  store i32 0, i32* %795, align 4
  br label %bn_mul_for.cond

bn_mul_for.cond:                                  ; preds = %bn_mul_for.inc, %bn_mul_entry.split.split
  %846 = load i32, i32* %795, align 4
  %847 = load i32, i32* %793, align 4
  %848 = icmp ult i32 %846, %847
  br i1 %848, label %bn_mul_for.body, label %bn_mul_for.end

bn_mul_for.body:                                  ; preds = %bn_mul_for.cond
  %849 = load i32, i32* %794, align 4
  %850 = load i32*, i32** %789, align 4
  %851 = load i32*, i32** %790, align 4
  %852 = load i32, i32* %795, align 4
  %853 = getelementptr inbounds i32, i32* %851, i32 %852
  %854 = load i32, i32* %853, align 4
  %855 = load i32, i32* %795, align 4
  %856 = getelementptr inbounds [130 x i32], [130 x i32]* %792, i32 0, i32 %855
  %857 = load i32, i32* %795, align 4
  %858 = getelementptr inbounds [130 x i32], [130 x i32]* %792, i32 0, i32 %857
  br label %bn_add_digit_mul_entry313

bn_add_digit_mul_entry313:                        ; preds = %bn_mul_for.body
  %859 = alloca i32, align 4
  %860 = alloca i32, align 4
  %861 = alloca i32*, align 4
  %862 = alloca i32, align 4
  %863 = alloca i32*, align 4
  %864 = alloca i32*, align 4
  %865 = alloca i64, align 8
  %866 = alloca i32, align 4
  %867 = alloca i32, align 4
  %868 = alloca i32, align 4
  %869 = alloca i32, align 4
  store i32 %849, i32* %860, align 4
  store i32* %850, i32** %861, align 4
  store i32 %854, i32* %862, align 4
  store i32* %856, i32** %863, align 4
  store i32* %858, i32** %864, align 4
  %870 = load i32, i32* %862, align 4
  %871 = icmp eq i32 %870, 0
  br i1 %871, label %bn_add_digit_mul_if.then314, label %bn_add_digit_mul_if.end315

bn_add_digit_mul_if.then314:                      ; preds = %bn_add_digit_mul_entry313
  store i32 0, i32* %859, align 4
  br label %bn_add_digit_mul_return325

bn_add_digit_mul_if.end315:                       ; preds = %bn_add_digit_mul_entry313
  store i32 0, i32* %866, align 4
  store i32 0, i32* %869, align 4
  br label %bn_add_digit_mul_for.cond316

bn_add_digit_mul_for.cond316:                     ; preds = %bn_add_digit_mul_for.inc323, %bn_add_digit_mul_if.end315
  %872 = load i32, i32* %869, align 4
  %873 = load i32, i32* %860, align 4
  %874 = icmp ult i32 %872, %873
  br i1 %874, label %bn_add_digit_mul_for.body317, label %bn_add_digit_mul_for.end324

bn_add_digit_mul_for.body317:                     ; preds = %bn_add_digit_mul_for.cond316
  %875 = load i32, i32* %862, align 4
  %876 = zext i32 %875 to i64
  %877 = load i32*, i32** %861, align 4
  %878 = load i32, i32* %869, align 4
  %879 = getelementptr inbounds i32, i32* %877, i32 %878
  %880 = load i32, i32* %879, align 4
  %881 = zext i32 %880 to i64
  %882 = mul i64 %876, %881
  store i64 %882, i64* %865, align 8
  %883 = load i64, i64* %865, align 8
  %884 = and i64 %883, 4294967295
  %885 = trunc i64 %884 to i32
  store i32 %885, i32* %868, align 4
  %886 = load i64, i64* %865, align 8
  %887 = lshr i64 %886, 32
  %888 = and i64 %887, 4294967295
  %889 = trunc i64 %888 to i32
  store i32 %889, i32* %867, align 4
  %890 = load i32*, i32** %863, align 4
  %891 = load i32, i32* %869, align 4
  %892 = getelementptr inbounds i32, i32* %890, i32 %891
  %893 = load i32, i32* %892, align 4
  %894 = load i32, i32* %866, align 4
  %895 = add i32 %893, %894
  %896 = load i32*, i32** %864, align 4
  %897 = load i32, i32* %869, align 4
  %898 = getelementptr inbounds i32, i32* %896, i32 %897
  store i32 %895, i32* %898, align 4
  %899 = load i32, i32* %866, align 4
  %900 = icmp ult i32 %895, %899
  br i1 %900, label %bn_add_digit_mul_if.then10318, label %bn_add_digit_mul_if.else319

bn_add_digit_mul_if.then10318:                    ; preds = %bn_add_digit_mul_for.body317
  store i32 1, i32* %866, align 4
  br label %bn_add_digit_mul_if.end11320

bn_add_digit_mul_if.else319:                      ; preds = %bn_add_digit_mul_for.body317
  store i32 0, i32* %866, align 4
  br label %bn_add_digit_mul_if.end11320

bn_add_digit_mul_if.end11320:                     ; preds = %bn_add_digit_mul_if.else319, %bn_add_digit_mul_if.then10318
  %901 = load i32, i32* %868, align 4
  %902 = load i32*, i32** %864, align 4
  %903 = load i32, i32* %869, align 4
  %904 = getelementptr inbounds i32, i32* %902, i32 %903
  %905 = load i32, i32* %904, align 4
  %906 = add i32 %905, %901
  store i32 %906, i32* %904, align 4
  %907 = load i32, i32* %868, align 4
  %908 = icmp ult i32 %906, %907
  br i1 %908, label %bn_add_digit_mul_if.then16321, label %bn_add_digit_mul_if.end17322

bn_add_digit_mul_if.then16321:                    ; preds = %bn_add_digit_mul_if.end11320
  %909 = load i32, i32* %866, align 4
  %910 = add i32 %909, 1
  store i32 %910, i32* %866, align 4
  br label %bn_add_digit_mul_if.end17322

bn_add_digit_mul_if.end17322:                     ; preds = %bn_add_digit_mul_if.then16321, %bn_add_digit_mul_if.end11320
  %911 = load i32, i32* %867, align 4
  %912 = load i32, i32* %866, align 4
  %913 = add i32 %912, %911
  store i32 %913, i32* %866, align 4
  br label %bn_add_digit_mul_for.inc323

bn_add_digit_mul_for.inc323:                      ; preds = %bn_add_digit_mul_if.end17322
  %914 = load i32, i32* %869, align 4
  %915 = add i32 %914, 1
  store i32 %915, i32* %869, align 4
  br label %bn_add_digit_mul_for.cond316

bn_add_digit_mul_for.end324:                      ; preds = %bn_add_digit_mul_for.cond316
  %916 = load i32, i32* %866, align 4
  store i32 %916, i32* %859, align 4
  br label %bn_add_digit_mul_return325

bn_add_digit_mul_return325:                       ; preds = %bn_add_digit_mul_for.end324, %bn_add_digit_mul_if.then314
  %917 = load i32, i32* %859, align 4
  br label %bn_mul_for.body.split

bn_mul_for.body.split:                            ; preds = %bn_add_digit_mul_return325
  %918 = load i32, i32* %795, align 4
  %919 = load i32, i32* %794, align 4
  %920 = add i32 %918, %919
  %921 = getelementptr inbounds [130 x i32], [130 x i32]* %792, i32 0, i32 %920
  %922 = load i32, i32* %921, align 4
  %923 = add i32 %922, %917
  store i32 %923, i32* %921, align 4
  br label %bn_mul_for.inc

bn_mul_for.inc:                                   ; preds = %bn_mul_for.body.split
  %924 = load i32, i32* %795, align 4
  %925 = add i32 %924, 1
  store i32 %925, i32* %795, align 4
  br label %bn_mul_for.cond

bn_mul_for.end:                                   ; preds = %bn_mul_for.cond
  %926 = load i32, i32* %788, align 4
  %927 = mul i32 2, %926
  %928 = getelementptr inbounds [130 x i32], [130 x i32]* %792, i32 0, i32 0
  %929 = load i32*, i32** %791, align 4
  br label %bn_mul_bn_assign_entry

bn_mul_bn_assign_entry:                           ; preds = %bn_mul_for.end
  %930 = alloca i32, align 4
  %931 = alloca i32*, align 4
  %932 = alloca i32*, align 4
  %933 = alloca i32, align 4
  store i32 %927, i32* %930, align 4
  store i32* %928, i32** %931, align 4
  store i32* %929, i32** %932, align 4
  store i32 0, i32* %933, align 4
  br label %bn_mul_bn_assign_for.cond

bn_mul_bn_assign_for.cond:                        ; preds = %bn_mul_bn_assign_for.inc, %bn_mul_bn_assign_entry
  %934 = load i32, i32* %933, align 4
  %935 = load i32, i32* %930, align 4
  %936 = icmp ult i32 %934, %935
  br i1 %936, label %bn_mul_bn_assign_for.body, label %bn_mul_bn_assign_for.end

bn_mul_bn_assign_for.body:                        ; preds = %bn_mul_bn_assign_for.cond
  %937 = load i32*, i32** %931, align 4
  %938 = load i32, i32* %933, align 4
  %939 = getelementptr inbounds i32, i32* %937, i32 %938
  %940 = load i32, i32* %939, align 4
  %941 = load i32*, i32** %932, align 4
  %942 = load i32, i32* %933, align 4
  %943 = getelementptr inbounds i32, i32* %941, i32 %942
  store i32 %940, i32* %943, align 4
  br label %bn_mul_bn_assign_for.inc

bn_mul_bn_assign_for.inc:                         ; preds = %bn_mul_bn_assign_for.body
  %944 = load i32, i32* %933, align 4
  %945 = add i32 %944, 1
  store i32 %945, i32* %933, align 4
  br label %bn_mul_bn_assign_for.cond

bn_mul_bn_assign_for.end:                         ; preds = %bn_mul_bn_assign_for.cond
  br label %bn_mul_for.end.split

bn_mul_for.end.split:                             ; preds = %bn_mul_bn_assign_for.end
  %946 = getelementptr inbounds [130 x i32], [130 x i32]* %792, i32 0, i32 0
  %947 = bitcast i32* %946 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %947, i8 0, i32 520, i1 false)
  br label %if.end84.split141.split.split

if.end84.split141.split.split:                    ; preds = %bn_mul_for.end.split
  %948 = load i32, i32* %ndigits, align 4
  %arraydecay104 = getelementptr inbounds [65 x i32], [65 x i32]* %phi_n, i32 0, i32 0
  %arraydecay105 = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  %arraydecay106 = getelementptr inbounds [65 x i32], [65 x i32]* %d, i32 0, i32 0
  call void @bn_mod_inv(i32* %arraydecay106, i32* %arraydecay105, i32* %arraydecay104, i32 %948)
  %949 = load i32, i32* %pdigits, align 4
  %arraydecay107 = getelementptr inbounds [65 x i32], [65 x i32]* %p_minus1, i32 0, i32 0
  %950 = load i32, i32* %ndigits, align 4
  %arraydecay108 = getelementptr inbounds [65 x i32], [65 x i32]* %d, i32 0, i32 0
  %arraydecay109 = getelementptr inbounds [65 x i32], [65 x i32]* %dp, i32 0, i32 0
  br label %bn_mod_entry327

bn_mod_entry327:                                  ; preds = %if.end84.split141.split.split
  %951 = alloca i32, align 4
  %952 = alloca i32*, align 4
  %953 = alloca i32, align 4
  %954 = alloca i32*, align 4
  %955 = alloca i32*, align 4
  %956 = alloca [130 x i32], align 4
  store i32 %949, i32* %951, align 4
  store i32* %arraydecay107, i32** %952, align 4
  store i32 %950, i32* %953, align 4
  store i32* %arraydecay108, i32** %954, align 4
  store i32* %arraydecay109, i32** %955, align 4
  %957 = bitcast [130 x i32]* %956 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %957, i8 0, i32 520, i1 false)
  %958 = load i32, i32* %951, align 4
  %959 = load i32*, i32** %952, align 4
  %960 = load i32, i32* %953, align 4
  %961 = load i32*, i32** %954, align 4
  %962 = load i32*, i32** %955, align 4
  %963 = getelementptr inbounds [130 x i32], [130 x i32]* %956, i32 0, i32 0
  br label %bn_mod_bn_div_entry328

bn_mod_bn_div_entry328:                           ; preds = %bn_mod_entry327
  %964 = alloca i32, align 4
  %965 = alloca i32*, align 4
  %966 = alloca i32, align 4
  %967 = alloca i32*, align 4
  %968 = alloca i32*, align 4
  %969 = alloca i32*, align 4
  %970 = alloca i64, align 8
  %971 = alloca i32, align 4
  %972 = alloca i32, align 4
  %973 = alloca [131 x i32], align 4
  %974 = alloca [65 x i32], align 4
  %975 = alloca i32, align 4
  %976 = alloca i32, align 4
  %977 = alloca i32, align 4
  store i32 %958, i32* %964, align 4
  store i32* %959, i32** %965, align 4
  store i32 %960, i32* %966, align 4
  store i32* %961, i32** %967, align 4
  store i32* %962, i32** %968, align 4
  store i32* %963, i32** %969, align 4
  %978 = load i32, i32* %964, align 4
  %979 = load i32*, i32** %965, align 4
  br label %bn_mod_bn_div_bn_digits_entry329

bn_mod_bn_div_bn_digits_entry329:                 ; preds = %bn_mod_bn_div_entry328
  %980 = alloca i32, align 4
  %981 = alloca i32*, align 4
  %982 = alloca i32, align 4
  store i32 %978, i32* %980, align 4
  store i32* %979, i32** %981, align 4
  %983 = load i32, i32* %980, align 4
  %984 = sub i32 %983, 1
  store i32 %984, i32* %982, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond330

bn_mod_bn_div_bn_digits_for.cond330:              ; preds = %bn_mod_bn_div_bn_digits_for.inc334, %bn_mod_bn_div_bn_digits_entry329
  %985 = load i32, i32* %982, align 4
  %986 = icmp sge i32 %985, 0
  br i1 %986, label %bn_mod_bn_div_bn_digits_for.body331, label %bn_mod_bn_div_bn_digits_for.end335

bn_mod_bn_div_bn_digits_for.body331:              ; preds = %bn_mod_bn_div_bn_digits_for.cond330
  %987 = load i32*, i32** %981, align 4
  %988 = load i32, i32* %982, align 4
  %989 = getelementptr inbounds i32, i32* %987, i32 %988
  %990 = load i32, i32* %989, align 4
  %991 = icmp ne i32 %990, 0
  br i1 %991, label %bn_mod_bn_div_bn_digits_if.then332, label %bn_mod_bn_div_bn_digits_if.end333

bn_mod_bn_div_bn_digits_if.then332:               ; preds = %bn_mod_bn_div_bn_digits_for.body331
  br label %bn_mod_bn_div_bn_digits_for.end335

bn_mod_bn_div_bn_digits_if.end333:                ; preds = %bn_mod_bn_div_bn_digits_for.body331
  br label %bn_mod_bn_div_bn_digits_for.inc334

bn_mod_bn_div_bn_digits_for.inc334:               ; preds = %bn_mod_bn_div_bn_digits_if.end333
  %992 = load i32, i32* %982, align 4
  %993 = add nsw i32 %992, -1
  store i32 %993, i32* %982, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond330

bn_mod_bn_div_bn_digits_for.end335:               ; preds = %bn_mod_bn_div_bn_digits_if.then332, %bn_mod_bn_div_bn_digits_for.cond330
  %994 = load i32, i32* %982, align 4
  %995 = add nsw i32 %994, 1
  br label %bn_mod_bn_div_entry.split336

bn_mod_bn_div_entry.split336:                     ; preds = %bn_mod_bn_div_bn_digits_for.end335
  store i32 %995, i32* %976, align 4
  %996 = load i32, i32* %976, align 4
  %997 = icmp eq i32 %996, 0
  br i1 %997, label %bn_mod_bn_div_if.then337, label %bn_mod_bn_div_if.end338

bn_mod_bn_div_if.then337:                         ; preds = %bn_mod_bn_div_entry.split336
  br label %bn_mod_bn_div_return392

bn_mod_bn_div_if.end338:                          ; preds = %bn_mod_bn_div_entry.split336
  %998 = load i32*, i32** %965, align 4
  %999 = load i32, i32* %976, align 4
  %1000 = sub i32 %999, 1
  %1001 = getelementptr inbounds i32, i32* %998, i32 %1000
  %1002 = load i32, i32* %1001, align 4
  %1003 = call i32 @bn_digit_bits(i32 %1002)
  %1004 = sub i32 32, %1003
  store i32 %1004, i32* %977, align 4
  %1005 = load i32, i32* %976, align 4
  %1006 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7339

bn_mod_bn_div_bn_assign_zero_entry7339:           ; preds = %bn_mod_bn_div_if.end338
  %1007 = alloca i32, align 4
  %1008 = alloca i32*, align 4
  %1009 = alloca i32, align 4
  store i32 %1005, i32* %1007, align 4
  store i32* %1006, i32** %1008, align 4
  store i32 0, i32* %1009, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8340

bn_mod_bn_div_bn_assign_zero_for.cond8340:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc10342, %bn_mod_bn_div_bn_assign_zero_entry7339
  %1010 = load i32, i32* %1009, align 4
  %1011 = load i32, i32* %1007, align 4
  %1012 = icmp ult i32 %1010, %1011
  br i1 %1012, label %bn_mod_bn_div_bn_assign_zero_for.body9341, label %bn_mod_bn_div_bn_assign_zero_for.end11343

bn_mod_bn_div_bn_assign_zero_for.body9341:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8340
  %1013 = load i32*, i32** %1008, align 4
  %1014 = load i32, i32* %1009, align 4
  %1015 = getelementptr inbounds i32, i32* %1013, i32 %1014
  store i32 0, i32* %1015, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc10342

bn_mod_bn_div_bn_assign_zero_for.inc10342:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.body9341
  %1016 = load i32, i32* %1009, align 4
  %1017 = add i32 %1016, 1
  store i32 %1017, i32* %1009, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8340

bn_mod_bn_div_bn_assign_zero_for.end11343:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8340
  br label %bn_mod_bn_div_if.end.split6344

bn_mod_bn_div_if.end.split6344:                   ; preds = %bn_mod_bn_div_bn_assign_zero_for.end11343
  %1018 = load i32, i32* %966, align 4
  %1019 = load i32, i32* %977, align 4
  %1020 = load i32*, i32** %967, align 4
  %1021 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 0
  %1022 = call i32 @bn_shift_l(i32* %1021, i32* %1020, i32 %1019, i32 %1018)
  %1023 = load i32, i32* %966, align 4
  %1024 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1023
  store i32 %1022, i32* %1024, align 4
  %1025 = load i32, i32* %976, align 4
  %1026 = load i32, i32* %977, align 4
  %1027 = load i32*, i32** %965, align 4
  %1028 = getelementptr inbounds [65 x i32], [65 x i32]* %974, i32 0, i32 0
  %1029 = call i32 @bn_shift_l(i32* %1028, i32* %1027, i32 %1026, i32 %1025)
  %1030 = load i32, i32* %976, align 4
  %1031 = sub i32 %1030, 1
  %1032 = getelementptr inbounds [65 x i32], [65 x i32]* %974, i32 0, i32 %1031
  %1033 = load i32, i32* %1032, align 4
  store i32 %1033, i32* %972, align 4
  %1034 = load i32, i32* %966, align 4
  %1035 = load i32*, i32** %969, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1345

bn_mod_bn_div_bn_assign_zero_entry1345:           ; preds = %bn_mod_bn_div_if.end.split6344
  %1036 = alloca i32, align 4
  %1037 = alloca i32*, align 4
  %1038 = alloca i32, align 4
  store i32 %1034, i32* %1036, align 4
  store i32* %1035, i32** %1037, align 4
  store i32 0, i32* %1038, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2346

bn_mod_bn_div_bn_assign_zero_for.cond2346:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc4348, %bn_mod_bn_div_bn_assign_zero_entry1345
  %1039 = load i32, i32* %1038, align 4
  %1040 = load i32, i32* %1036, align 4
  %1041 = icmp ult i32 %1039, %1040
  br i1 %1041, label %bn_mod_bn_div_bn_assign_zero_for.body3347, label %bn_mod_bn_div_bn_assign_zero_for.end5349

bn_mod_bn_div_bn_assign_zero_for.body3347:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2346
  %1042 = load i32*, i32** %1037, align 4
  %1043 = load i32, i32* %1038, align 4
  %1044 = getelementptr inbounds i32, i32* %1042, i32 %1043
  store i32 0, i32* %1044, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc4348

bn_mod_bn_div_bn_assign_zero_for.inc4348:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.body3347
  %1045 = load i32, i32* %1038, align 4
  %1046 = add i32 %1045, 1
  store i32 %1046, i32* %1038, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2346

bn_mod_bn_div_bn_assign_zero_for.end5349:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2346
  br label %bn_mod_bn_div_if.end.split350

bn_mod_bn_div_if.end.split350:                    ; preds = %bn_mod_bn_div_bn_assign_zero_for.end5349
  %1047 = load i32, i32* %966, align 4
  %1048 = load i32, i32* %976, align 4
  %1049 = sub i32 %1047, %1048
  store i32 %1049, i32* %975, align 4
  br label %bn_mod_bn_div_for.cond351

bn_mod_bn_div_for.cond351:                        ; preds = %bn_mod_bn_div_for.inc384, %bn_mod_bn_div_if.end.split350
  %1050 = load i32, i32* %975, align 4
  %1051 = icmp sge i32 %1050, 0
  br i1 %1051, label %bn_mod_bn_div_for.body352, label %bn_mod_bn_div_for.end385

bn_mod_bn_div_for.body352:                        ; preds = %bn_mod_bn_div_for.cond351
  %1052 = load i32, i32* %972, align 4
  %1053 = icmp eq i32 %1052, -1
  br i1 %1053, label %bn_mod_bn_div_if.then13353, label %bn_mod_bn_div_if.else354

bn_mod_bn_div_if.then13353:                       ; preds = %bn_mod_bn_div_for.body352
  %1054 = load i32, i32* %975, align 4
  %1055 = load i32, i32* %976, align 4
  %1056 = add i32 %1054, %1055
  %1057 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1056
  %1058 = load i32, i32* %1057, align 4
  store i32 %1058, i32* %971, align 4
  br label %bn_mod_bn_div_if.end25355

bn_mod_bn_div_if.else354:                         ; preds = %bn_mod_bn_div_for.body352
  %1059 = load i32, i32* %975, align 4
  %1060 = load i32, i32* %976, align 4
  %1061 = add i32 %1059, %1060
  %1062 = sub i32 %1061, 1
  %1063 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1062
  %1064 = load i32, i32* %1063, align 4
  %1065 = zext i32 %1064 to i64
  store i64 %1065, i64* %970, align 8
  %1066 = load i32, i32* %975, align 4
  %1067 = load i32, i32* %976, align 4
  %1068 = add i32 %1066, %1067
  %1069 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1068
  %1070 = load i32, i32* %1069, align 4
  %1071 = zext i32 %1070 to i64
  %1072 = shl i64 %1071, 32
  %1073 = load i64, i64* %970, align 8
  %1074 = add i64 %1073, %1072
  store i64 %1074, i64* %970, align 8
  %1075 = load i64, i64* %970, align 8
  %1076 = load i32, i32* %972, align 4
  %1077 = add i32 %1076, 1
  %1078 = zext i32 %1077 to i64
  %1079 = udiv i64 %1075, %1078
  %1080 = trunc i64 %1079 to i32
  store i32 %1080, i32* %971, align 4
  br label %bn_mod_bn_div_if.end25355

bn_mod_bn_div_if.end25355:                        ; preds = %bn_mod_bn_div_if.else354, %bn_mod_bn_div_if.then13353
  %1081 = load i32, i32* %976, align 4
  %1082 = getelementptr inbounds [65 x i32], [65 x i32]* %974, i32 0, i32 0
  %1083 = load i32, i32* %971, align 4
  %1084 = load i32, i32* %975, align 4
  %1085 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1084
  %1086 = load i32, i32* %975, align 4
  %1087 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1086
  %1088 = call i32 @bn_sub_digit_mul(i32* %1087, i32* %1085, i32 %1083, i32* %1082, i32 %1081)
  %1089 = load i32, i32* %975, align 4
  %1090 = load i32, i32* %976, align 4
  %1091 = add i32 %1089, %1090
  %1092 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1091
  %1093 = load i32, i32* %1092, align 4
  %1094 = sub i32 %1093, %1088
  store i32 %1094, i32* %1092, align 4
  br label %bn_mod_bn_div_while.cond356

bn_mod_bn_div_while.cond356:                      ; preds = %bn_mod_bn_div_while.body.split382, %bn_mod_bn_div_if.end25355
  %1095 = load i32, i32* %975, align 4
  %1096 = load i32, i32* %976, align 4
  %1097 = add i32 %1095, %1096
  %1098 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1097
  %1099 = load i32, i32* %1098, align 4
  %1100 = icmp ne i32 %1099, 0
  br i1 %1100, label %bn_mod_bn_div_lor.end369, label %bn_mod_bn_div_lor.rhs357

bn_mod_bn_div_lor.rhs357:                         ; preds = %bn_mod_bn_div_while.cond356
  %1101 = load i32, i32* %976, align 4
  %1102 = getelementptr inbounds [65 x i32], [65 x i32]* %974, i32 0, i32 0
  %1103 = load i32, i32* %975, align 4
  %1104 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1103
  br label %bn_mod_bn_cmp_entry358

bn_mod_bn_cmp_entry358:                           ; preds = %bn_mod_bn_div_lor.rhs357
  %1105 = alloca i32, align 4
  %1106 = alloca i32, align 4
  %1107 = alloca i32*, align 4
  %1108 = alloca i32*, align 4
  %1109 = alloca i32, align 4
  store i32 %1101, i32* %1106, align 4
  store i32* %1102, i32** %1107, align 4
  store i32* %1104, i32** %1108, align 4
  %1110 = load i32, i32* %1106, align 4
  %1111 = sub i32 %1110, 1
  store i32 %1111, i32* %1109, align 4
  br label %bn_mod_bn_cmp_for.cond359

bn_mod_bn_cmp_for.cond359:                        ; preds = %bn_mod_bn_cmp_for.inc365, %bn_mod_bn_cmp_entry358
  %1112 = load i32, i32* %1109, align 4
  %1113 = icmp sge i32 %1112, 0
  br i1 %1113, label %bn_mod_bn_cmp_for.body360, label %bn_mod_bn_cmp_for.end366

bn_mod_bn_cmp_for.body360:                        ; preds = %bn_mod_bn_cmp_for.cond359
  %1114 = load i32*, i32** %1108, align 4
  %1115 = load i32, i32* %1109, align 4
  %1116 = getelementptr inbounds i32, i32* %1114, i32 %1115
  %1117 = load i32, i32* %1116, align 4
  %1118 = load i32*, i32** %1107, align 4
  %1119 = load i32, i32* %1109, align 4
  %1120 = getelementptr inbounds i32, i32* %1118, i32 %1119
  %1121 = load i32, i32* %1120, align 4
  %1122 = icmp ugt i32 %1117, %1121
  br i1 %1122, label %bn_mod_bn_cmp_if.then361, label %bn_mod_bn_cmp_if.end362

bn_mod_bn_cmp_if.then361:                         ; preds = %bn_mod_bn_cmp_for.body360
  store i32 1, i32* %1105, align 4
  br label %bn_mod_bn_cmp_return367

bn_mod_bn_cmp_if.end362:                          ; preds = %bn_mod_bn_cmp_for.body360
  %1123 = load i32*, i32** %1108, align 4
  %1124 = load i32, i32* %1109, align 4
  %1125 = getelementptr inbounds i32, i32* %1123, i32 %1124
  %1126 = load i32, i32* %1125, align 4
  %1127 = load i32*, i32** %1107, align 4
  %1128 = load i32, i32* %1109, align 4
  %1129 = getelementptr inbounds i32, i32* %1127, i32 %1128
  %1130 = load i32, i32* %1129, align 4
  %1131 = icmp ult i32 %1126, %1130
  br i1 %1131, label %bn_mod_bn_cmp_if.then6363, label %bn_mod_bn_cmp_if.end7364

bn_mod_bn_cmp_if.then6363:                        ; preds = %bn_mod_bn_cmp_if.end362
  store i32 -1, i32* %1105, align 4
  br label %bn_mod_bn_cmp_return367

bn_mod_bn_cmp_if.end7364:                         ; preds = %bn_mod_bn_cmp_if.end362
  br label %bn_mod_bn_cmp_for.inc365

bn_mod_bn_cmp_for.inc365:                         ; preds = %bn_mod_bn_cmp_if.end7364
  %1132 = load i32, i32* %1109, align 4
  %1133 = add nsw i32 %1132, -1
  store i32 %1133, i32* %1109, align 4
  br label %bn_mod_bn_cmp_for.cond359

bn_mod_bn_cmp_for.end366:                         ; preds = %bn_mod_bn_cmp_for.cond359
  store i32 0, i32* %1105, align 4
  br label %bn_mod_bn_cmp_return367

bn_mod_bn_cmp_return367:                          ; preds = %bn_mod_bn_cmp_for.end366, %bn_mod_bn_cmp_if.then6363, %bn_mod_bn_cmp_if.then361
  %1134 = load i32, i32* %1105, align 4
  br label %bn_mod_bn_div_lor.rhs.split368

bn_mod_bn_div_lor.rhs.split368:                   ; preds = %bn_mod_bn_cmp_return367
  %1135 = icmp sge i32 %1134, 0
  br label %bn_mod_bn_div_lor.end369

bn_mod_bn_div_lor.end369:                         ; preds = %bn_mod_bn_div_lor.rhs.split368, %bn_mod_bn_div_while.cond356
  %1136 = phi i1 [ true, %bn_mod_bn_div_while.cond356 ], [ %1135, %bn_mod_bn_div_lor.rhs.split368 ]
  br i1 %1136, label %bn_mod_bn_div_while.body370, label %bn_mod_bn_div_while.end383

bn_mod_bn_div_while.body370:                      ; preds = %bn_mod_bn_div_lor.end369
  %1137 = load i32, i32* %971, align 4
  %1138 = add i32 %1137, 1
  store i32 %1138, i32* %971, align 4
  %1139 = load i32, i32* %976, align 4
  %1140 = getelementptr inbounds [65 x i32], [65 x i32]* %974, i32 0, i32 0
  %1141 = load i32, i32* %975, align 4
  %1142 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1141
  %1143 = load i32, i32* %975, align 4
  %1144 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1143
  br label %bn_mod_bn_div_bn_sub_entry371

bn_mod_bn_div_bn_sub_entry371:                    ; preds = %bn_mod_bn_div_while.body370
  %1145 = alloca i32, align 4
  %1146 = alloca i32*, align 4
  %1147 = alloca i32*, align 4
  %1148 = alloca i32*, align 4
  %1149 = alloca i32, align 4
  %1150 = alloca i32, align 4
  %1151 = alloca i32, align 4
  store i32 %1139, i32* %1145, align 4
  store i32* %1140, i32** %1146, align 4
  store i32* %1142, i32** %1147, align 4
  store i32* %1144, i32** %1148, align 4
  store i32 0, i32* %1150, align 4
  store i32 0, i32* %1151, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond372

bn_mod_bn_div_bn_sub_for.cond372:                 ; preds = %bn_mod_bn_div_bn_sub_for.inc380, %bn_mod_bn_div_bn_sub_entry371
  %1152 = load i32, i32* %1151, align 4
  %1153 = load i32, i32* %1145, align 4
  %1154 = icmp ult i32 %1152, %1153
  br i1 %1154, label %bn_mod_bn_div_bn_sub_for.body373, label %bn_mod_bn_div_bn_sub_for.end381

bn_mod_bn_div_bn_sub_for.body373:                 ; preds = %bn_mod_bn_div_bn_sub_for.cond372
  %1155 = load i32*, i32** %1147, align 4
  %1156 = load i32, i32* %1151, align 4
  %1157 = getelementptr inbounds i32, i32* %1155, i32 %1156
  %1158 = load i32, i32* %1157, align 4
  %1159 = load i32, i32* %1150, align 4
  %1160 = sub i32 %1158, %1159
  store i32 %1160, i32* %1149, align 4
  %1161 = load i32, i32* %1150, align 4
  %1162 = sub i32 -1, %1161
  %1163 = icmp ugt i32 %1160, %1162
  br i1 %1163, label %bn_mod_bn_div_bn_sub_if.then374, label %bn_mod_bn_div_bn_sub_if.else375

bn_mod_bn_div_bn_sub_if.then374:                  ; preds = %bn_mod_bn_div_bn_sub_for.body373
  %1164 = load i32*, i32** %1146, align 4
  %1165 = load i32, i32* %1151, align 4
  %1166 = getelementptr inbounds i32, i32* %1164, i32 %1165
  %1167 = load i32, i32* %1166, align 4
  %1168 = sub i32 -1, %1167
  store i32 %1168, i32* %1149, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12379

bn_mod_bn_div_bn_sub_if.else375:                  ; preds = %bn_mod_bn_div_bn_sub_for.body373
  %1169 = load i32*, i32** %1146, align 4
  %1170 = load i32, i32* %1151, align 4
  %1171 = getelementptr inbounds i32, i32* %1169, i32 %1170
  %1172 = load i32, i32* %1171, align 4
  %1173 = load i32, i32* %1149, align 4
  %1174 = sub i32 %1173, %1172
  store i32 %1174, i32* %1149, align 4
  %1175 = load i32*, i32** %1146, align 4
  %1176 = load i32, i32* %1151, align 4
  %1177 = getelementptr inbounds i32, i32* %1175, i32 %1176
  %1178 = load i32, i32* %1177, align 4
  %1179 = sub i32 -1, %1178
  %1180 = icmp ugt i32 %1174, %1179
  br i1 %1180, label %bn_mod_bn_div_bn_sub_if.then10376, label %bn_mod_bn_div_bn_sub_if.else11377

bn_mod_bn_div_bn_sub_if.then10376:                ; preds = %bn_mod_bn_div_bn_sub_if.else375
  store i32 1, i32* %1150, align 4
  br label %bn_mod_bn_div_bn_sub_if.end378

bn_mod_bn_div_bn_sub_if.else11377:                ; preds = %bn_mod_bn_div_bn_sub_if.else375
  store i32 0, i32* %1150, align 4
  br label %bn_mod_bn_div_bn_sub_if.end378

bn_mod_bn_div_bn_sub_if.end378:                   ; preds = %bn_mod_bn_div_bn_sub_if.else11377, %bn_mod_bn_div_bn_sub_if.then10376
  br label %bn_mod_bn_div_bn_sub_if.end12379

bn_mod_bn_div_bn_sub_if.end12379:                 ; preds = %bn_mod_bn_div_bn_sub_if.end378, %bn_mod_bn_div_bn_sub_if.then374
  %1181 = load i32, i32* %1149, align 4
  %1182 = load i32*, i32** %1148, align 4
  %1183 = load i32, i32* %1151, align 4
  %1184 = getelementptr inbounds i32, i32* %1182, i32 %1183
  store i32 %1181, i32* %1184, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc380

bn_mod_bn_div_bn_sub_for.inc380:                  ; preds = %bn_mod_bn_div_bn_sub_if.end12379
  %1185 = load i32, i32* %1151, align 4
  %1186 = add i32 %1185, 1
  store i32 %1186, i32* %1151, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond372

bn_mod_bn_div_bn_sub_for.end381:                  ; preds = %bn_mod_bn_div_bn_sub_for.cond372
  %1187 = load i32, i32* %1150, align 4
  br label %bn_mod_bn_div_while.body.split382

bn_mod_bn_div_while.body.split382:                ; preds = %bn_mod_bn_div_bn_sub_for.end381
  %1188 = load i32, i32* %975, align 4
  %1189 = load i32, i32* %976, align 4
  %1190 = add i32 %1188, %1189
  %1191 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 %1190
  %1192 = load i32, i32* %1191, align 4
  %1193 = sub i32 %1192, %1187
  store i32 %1193, i32* %1191, align 4
  br label %bn_mod_bn_div_while.cond356

bn_mod_bn_div_while.end383:                       ; preds = %bn_mod_bn_div_lor.end369
  %1194 = load i32, i32* %971, align 4
  %1195 = load i32*, i32** %969, align 4
  %1196 = load i32, i32* %975, align 4
  %1197 = getelementptr inbounds i32, i32* %1195, i32 %1196
  store i32 %1194, i32* %1197, align 4
  br label %bn_mod_bn_div_for.inc384

bn_mod_bn_div_for.inc384:                         ; preds = %bn_mod_bn_div_while.end383
  %1198 = load i32, i32* %975, align 4
  %1199 = add nsw i32 %1198, -1
  store i32 %1199, i32* %975, align 4
  br label %bn_mod_bn_div_for.cond351

bn_mod_bn_div_for.end385:                         ; preds = %bn_mod_bn_div_for.cond351
  %1200 = load i32, i32* %964, align 4
  %1201 = load i32*, i32** %968, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry386

bn_mod_bn_div_bn_assign_zero_entry386:            ; preds = %bn_mod_bn_div_for.end385
  %1202 = alloca i32, align 4
  %1203 = alloca i32*, align 4
  %1204 = alloca i32, align 4
  store i32 %1200, i32* %1202, align 4
  store i32* %1201, i32** %1203, align 4
  store i32 0, i32* %1204, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond387

bn_mod_bn_div_bn_assign_zero_for.cond387:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc389, %bn_mod_bn_div_bn_assign_zero_entry386
  %1205 = load i32, i32* %1204, align 4
  %1206 = load i32, i32* %1202, align 4
  %1207 = icmp ult i32 %1205, %1206
  br i1 %1207, label %bn_mod_bn_div_bn_assign_zero_for.body388, label %bn_mod_bn_div_bn_assign_zero_for.end390

bn_mod_bn_div_bn_assign_zero_for.body388:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond387
  %1208 = load i32*, i32** %1203, align 4
  %1209 = load i32, i32* %1204, align 4
  %1210 = getelementptr inbounds i32, i32* %1208, i32 %1209
  store i32 0, i32* %1210, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc389

bn_mod_bn_div_bn_assign_zero_for.inc389:          ; preds = %bn_mod_bn_div_bn_assign_zero_for.body388
  %1211 = load i32, i32* %1204, align 4
  %1212 = add i32 %1211, 1
  store i32 %1212, i32* %1204, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond387

bn_mod_bn_div_bn_assign_zero_for.end390:          ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond387
  br label %bn_mod_bn_div_for.end.split391

bn_mod_bn_div_for.end.split391:                   ; preds = %bn_mod_bn_div_bn_assign_zero_for.end390
  %1213 = load i32, i32* %976, align 4
  %1214 = load i32, i32* %977, align 4
  %1215 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 0
  %1216 = load i32*, i32** %968, align 4
  %1217 = call i32 @bn_shift_r(i32* %1216, i32* %1215, i32 %1214, i32 %1213)
  %1218 = getelementptr inbounds [131 x i32], [131 x i32]* %973, i32 0, i32 0
  %1219 = bitcast i32* %1218 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1219, i8 0, i32 524, i1 false)
  %1220 = getelementptr inbounds [65 x i32], [65 x i32]* %974, i32 0, i32 0
  %1221 = bitcast i32* %1220 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1221, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return392

bn_mod_bn_div_return392:                          ; preds = %bn_mod_bn_div_for.end.split391, %bn_mod_bn_div_if.then337
  br label %bn_mod_entry.split393

bn_mod_entry.split393:                            ; preds = %bn_mod_bn_div_return392
  %1222 = getelementptr inbounds [130 x i32], [130 x i32]* %956, i32 0, i32 0
  %1223 = bitcast i32* %1222 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1223, i8 0, i32 520, i1 false)
  br label %if.end84.split141.split.split.split326

if.end84.split141.split.split.split326:           ; preds = %bn_mod_entry.split393
  %1224 = load i32, i32* %pdigits, align 4
  %arraydecay110 = getelementptr inbounds [65 x i32], [65 x i32]* %q_minus1, i32 0, i32 0
  %1225 = load i32, i32* %ndigits, align 4
  %arraydecay111 = getelementptr inbounds [65 x i32], [65 x i32]* %d, i32 0, i32 0
  %arraydecay112 = getelementptr inbounds [65 x i32], [65 x i32]* %dq, i32 0, i32 0
  br label %bn_mod_entry

bn_mod_entry:                                     ; preds = %if.end84.split141.split.split.split326
  %1226 = alloca i32, align 4
  %1227 = alloca i32*, align 4
  %1228 = alloca i32, align 4
  %1229 = alloca i32*, align 4
  %1230 = alloca i32*, align 4
  %1231 = alloca [130 x i32], align 4
  store i32 %1224, i32* %1226, align 4
  store i32* %arraydecay110, i32** %1227, align 4
  store i32 %1225, i32* %1228, align 4
  store i32* %arraydecay111, i32** %1229, align 4
  store i32* %arraydecay112, i32** %1230, align 4
  %1232 = bitcast [130 x i32]* %1231 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1232, i8 0, i32 520, i1 false)
  %1233 = load i32, i32* %1226, align 4
  %1234 = load i32*, i32** %1227, align 4
  %1235 = load i32, i32* %1228, align 4
  %1236 = load i32*, i32** %1229, align 4
  %1237 = load i32*, i32** %1230, align 4
  %1238 = getelementptr inbounds [130 x i32], [130 x i32]* %1231, i32 0, i32 0
  br label %bn_mod_bn_div_entry

bn_mod_bn_div_entry:                              ; preds = %bn_mod_entry
  %1239 = alloca i32, align 4
  %1240 = alloca i32*, align 4
  %1241 = alloca i32, align 4
  %1242 = alloca i32*, align 4
  %1243 = alloca i32*, align 4
  %1244 = alloca i32*, align 4
  %1245 = alloca i64, align 8
  %1246 = alloca i32, align 4
  %1247 = alloca i32, align 4
  %1248 = alloca [131 x i32], align 4
  %1249 = alloca [65 x i32], align 4
  %1250 = alloca i32, align 4
  %1251 = alloca i32, align 4
  %1252 = alloca i32, align 4
  store i32 %1233, i32* %1239, align 4
  store i32* %1234, i32** %1240, align 4
  store i32 %1235, i32* %1241, align 4
  store i32* %1236, i32** %1242, align 4
  store i32* %1237, i32** %1243, align 4
  store i32* %1238, i32** %1244, align 4
  %1253 = load i32, i32* %1239, align 4
  %1254 = load i32*, i32** %1240, align 4
  br label %bn_mod_bn_div_bn_digits_entry

bn_mod_bn_div_bn_digits_entry:                    ; preds = %bn_mod_bn_div_entry
  %1255 = alloca i32, align 4
  %1256 = alloca i32*, align 4
  %1257 = alloca i32, align 4
  store i32 %1253, i32* %1255, align 4
  store i32* %1254, i32** %1256, align 4
  %1258 = load i32, i32* %1255, align 4
  %1259 = sub i32 %1258, 1
  store i32 %1259, i32* %1257, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.cond:                 ; preds = %bn_mod_bn_div_bn_digits_for.inc, %bn_mod_bn_div_bn_digits_entry
  %1260 = load i32, i32* %1257, align 4
  %1261 = icmp sge i32 %1260, 0
  br i1 %1261, label %bn_mod_bn_div_bn_digits_for.body, label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_for.body:                 ; preds = %bn_mod_bn_div_bn_digits_for.cond
  %1262 = load i32*, i32** %1256, align 4
  %1263 = load i32, i32* %1257, align 4
  %1264 = getelementptr inbounds i32, i32* %1262, i32 %1263
  %1265 = load i32, i32* %1264, align 4
  %1266 = icmp ne i32 %1265, 0
  br i1 %1266, label %bn_mod_bn_div_bn_digits_if.then, label %bn_mod_bn_div_bn_digits_if.end

bn_mod_bn_div_bn_digits_if.then:                  ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_if.end:                   ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.inc

bn_mod_bn_div_bn_digits_for.inc:                  ; preds = %bn_mod_bn_div_bn_digits_if.end
  %1267 = load i32, i32* %1257, align 4
  %1268 = add nsw i32 %1267, -1
  store i32 %1268, i32* %1257, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.end:                  ; preds = %bn_mod_bn_div_bn_digits_if.then, %bn_mod_bn_div_bn_digits_for.cond
  %1269 = load i32, i32* %1257, align 4
  %1270 = add nsw i32 %1269, 1
  br label %bn_mod_bn_div_entry.split

bn_mod_bn_div_entry.split:                        ; preds = %bn_mod_bn_div_bn_digits_for.end
  store i32 %1270, i32* %1251, align 4
  %1271 = load i32, i32* %1251, align 4
  %1272 = icmp eq i32 %1271, 0
  br i1 %1272, label %bn_mod_bn_div_if.then, label %bn_mod_bn_div_if.end

bn_mod_bn_div_if.then:                            ; preds = %bn_mod_bn_div_entry.split
  br label %bn_mod_bn_div_return

bn_mod_bn_div_if.end:                             ; preds = %bn_mod_bn_div_entry.split
  %1273 = load i32*, i32** %1240, align 4
  %1274 = load i32, i32* %1251, align 4
  %1275 = sub i32 %1274, 1
  %1276 = getelementptr inbounds i32, i32* %1273, i32 %1275
  %1277 = load i32, i32* %1276, align 4
  %1278 = call i32 @bn_digit_bits(i32 %1277)
  %1279 = sub i32 32, %1278
  store i32 %1279, i32* %1252, align 4
  %1280 = load i32, i32* %1251, align 4
  %1281 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7

bn_mod_bn_div_bn_assign_zero_entry7:              ; preds = %bn_mod_bn_div_if.end
  %1282 = alloca i32, align 4
  %1283 = alloca i32*, align 4
  %1284 = alloca i32, align 4
  store i32 %1280, i32* %1282, align 4
  store i32* %1281, i32** %1283, align 4
  store i32 0, i32* %1284, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.cond8:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc10, %bn_mod_bn_div_bn_assign_zero_entry7
  %1285 = load i32, i32* %1284, align 4
  %1286 = load i32, i32* %1282, align 4
  %1287 = icmp ult i32 %1285, %1286
  br i1 %1287, label %bn_mod_bn_div_bn_assign_zero_for.body9, label %bn_mod_bn_div_bn_assign_zero_for.end11

bn_mod_bn_div_bn_assign_zero_for.body9:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  %1288 = load i32*, i32** %1283, align 4
  %1289 = load i32, i32* %1284, align 4
  %1290 = getelementptr inbounds i32, i32* %1288, i32 %1289
  store i32 0, i32* %1290, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc10

bn_mod_bn_div_bn_assign_zero_for.inc10:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.body9
  %1291 = load i32, i32* %1284, align 4
  %1292 = add i32 %1291, 1
  store i32 %1292, i32* %1284, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.end11:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  br label %bn_mod_bn_div_if.end.split6

bn_mod_bn_div_if.end.split6:                      ; preds = %bn_mod_bn_div_bn_assign_zero_for.end11
  %1293 = load i32, i32* %1241, align 4
  %1294 = load i32, i32* %1252, align 4
  %1295 = load i32*, i32** %1242, align 4
  %1296 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 0
  %1297 = call i32 @bn_shift_l(i32* %1296, i32* %1295, i32 %1294, i32 %1293)
  %1298 = load i32, i32* %1241, align 4
  %1299 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1298
  store i32 %1297, i32* %1299, align 4
  %1300 = load i32, i32* %1251, align 4
  %1301 = load i32, i32* %1252, align 4
  %1302 = load i32*, i32** %1240, align 4
  %1303 = getelementptr inbounds [65 x i32], [65 x i32]* %1249, i32 0, i32 0
  %1304 = call i32 @bn_shift_l(i32* %1303, i32* %1302, i32 %1301, i32 %1300)
  %1305 = load i32, i32* %1251, align 4
  %1306 = sub i32 %1305, 1
  %1307 = getelementptr inbounds [65 x i32], [65 x i32]* %1249, i32 0, i32 %1306
  %1308 = load i32, i32* %1307, align 4
  store i32 %1308, i32* %1247, align 4
  %1309 = load i32, i32* %1241, align 4
  %1310 = load i32*, i32** %1244, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1

bn_mod_bn_div_bn_assign_zero_entry1:              ; preds = %bn_mod_bn_div_if.end.split6
  %1311 = alloca i32, align 4
  %1312 = alloca i32*, align 4
  %1313 = alloca i32, align 4
  store i32 %1309, i32* %1311, align 4
  store i32* %1310, i32** %1312, align 4
  store i32 0, i32* %1313, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.cond2:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc4, %bn_mod_bn_div_bn_assign_zero_entry1
  %1314 = load i32, i32* %1313, align 4
  %1315 = load i32, i32* %1311, align 4
  %1316 = icmp ult i32 %1314, %1315
  br i1 %1316, label %bn_mod_bn_div_bn_assign_zero_for.body3, label %bn_mod_bn_div_bn_assign_zero_for.end5

bn_mod_bn_div_bn_assign_zero_for.body3:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  %1317 = load i32*, i32** %1312, align 4
  %1318 = load i32, i32* %1313, align 4
  %1319 = getelementptr inbounds i32, i32* %1317, i32 %1318
  store i32 0, i32* %1319, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc4

bn_mod_bn_div_bn_assign_zero_for.inc4:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.body3
  %1320 = load i32, i32* %1313, align 4
  %1321 = add i32 %1320, 1
  store i32 %1321, i32* %1313, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.end5:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  br label %bn_mod_bn_div_if.end.split

bn_mod_bn_div_if.end.split:                       ; preds = %bn_mod_bn_div_bn_assign_zero_for.end5
  %1322 = load i32, i32* %1241, align 4
  %1323 = load i32, i32* %1251, align 4
  %1324 = sub i32 %1322, %1323
  store i32 %1324, i32* %1250, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.cond:                           ; preds = %bn_mod_bn_div_for.inc, %bn_mod_bn_div_if.end.split
  %1325 = load i32, i32* %1250, align 4
  %1326 = icmp sge i32 %1325, 0
  br i1 %1326, label %bn_mod_bn_div_for.body, label %bn_mod_bn_div_for.end

bn_mod_bn_div_for.body:                           ; preds = %bn_mod_bn_div_for.cond
  %1327 = load i32, i32* %1247, align 4
  %1328 = icmp eq i32 %1327, -1
  br i1 %1328, label %bn_mod_bn_div_if.then13, label %bn_mod_bn_div_if.else

bn_mod_bn_div_if.then13:                          ; preds = %bn_mod_bn_div_for.body
  %1329 = load i32, i32* %1250, align 4
  %1330 = load i32, i32* %1251, align 4
  %1331 = add i32 %1329, %1330
  %1332 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1331
  %1333 = load i32, i32* %1332, align 4
  store i32 %1333, i32* %1246, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.else:                            ; preds = %bn_mod_bn_div_for.body
  %1334 = load i32, i32* %1250, align 4
  %1335 = load i32, i32* %1251, align 4
  %1336 = add i32 %1334, %1335
  %1337 = sub i32 %1336, 1
  %1338 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1337
  %1339 = load i32, i32* %1338, align 4
  %1340 = zext i32 %1339 to i64
  store i64 %1340, i64* %1245, align 8
  %1341 = load i32, i32* %1250, align 4
  %1342 = load i32, i32* %1251, align 4
  %1343 = add i32 %1341, %1342
  %1344 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1343
  %1345 = load i32, i32* %1344, align 4
  %1346 = zext i32 %1345 to i64
  %1347 = shl i64 %1346, 32
  %1348 = load i64, i64* %1245, align 8
  %1349 = add i64 %1348, %1347
  store i64 %1349, i64* %1245, align 8
  %1350 = load i64, i64* %1245, align 8
  %1351 = load i32, i32* %1247, align 4
  %1352 = add i32 %1351, 1
  %1353 = zext i32 %1352 to i64
  %1354 = udiv i64 %1350, %1353
  %1355 = trunc i64 %1354 to i32
  store i32 %1355, i32* %1246, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.end25:                           ; preds = %bn_mod_bn_div_if.else, %bn_mod_bn_div_if.then13
  %1356 = load i32, i32* %1251, align 4
  %1357 = getelementptr inbounds [65 x i32], [65 x i32]* %1249, i32 0, i32 0
  %1358 = load i32, i32* %1246, align 4
  %1359 = load i32, i32* %1250, align 4
  %1360 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1359
  %1361 = load i32, i32* %1250, align 4
  %1362 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1361
  %1363 = call i32 @bn_sub_digit_mul(i32* %1362, i32* %1360, i32 %1358, i32* %1357, i32 %1356)
  %1364 = load i32, i32* %1250, align 4
  %1365 = load i32, i32* %1251, align 4
  %1366 = add i32 %1364, %1365
  %1367 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1366
  %1368 = load i32, i32* %1367, align 4
  %1369 = sub i32 %1368, %1363
  store i32 %1369, i32* %1367, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.cond:                         ; preds = %bn_mod_bn_div_while.body.split, %bn_mod_bn_div_if.end25
  %1370 = load i32, i32* %1250, align 4
  %1371 = load i32, i32* %1251, align 4
  %1372 = add i32 %1370, %1371
  %1373 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1372
  %1374 = load i32, i32* %1373, align 4
  %1375 = icmp ne i32 %1374, 0
  br i1 %1375, label %bn_mod_bn_div_lor.end, label %bn_mod_bn_div_lor.rhs

bn_mod_bn_div_lor.rhs:                            ; preds = %bn_mod_bn_div_while.cond
  %1376 = load i32, i32* %1251, align 4
  %1377 = getelementptr inbounds [65 x i32], [65 x i32]* %1249, i32 0, i32 0
  %1378 = load i32, i32* %1250, align 4
  %1379 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1378
  br label %bn_mod_bn_cmp_entry

bn_mod_bn_cmp_entry:                              ; preds = %bn_mod_bn_div_lor.rhs
  %1380 = alloca i32, align 4
  %1381 = alloca i32, align 4
  %1382 = alloca i32*, align 4
  %1383 = alloca i32*, align 4
  %1384 = alloca i32, align 4
  store i32 %1376, i32* %1381, align 4
  store i32* %1377, i32** %1382, align 4
  store i32* %1379, i32** %1383, align 4
  %1385 = load i32, i32* %1381, align 4
  %1386 = sub i32 %1385, 1
  store i32 %1386, i32* %1384, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.cond:                           ; preds = %bn_mod_bn_cmp_for.inc, %bn_mod_bn_cmp_entry
  %1387 = load i32, i32* %1384, align 4
  %1388 = icmp sge i32 %1387, 0
  br i1 %1388, label %bn_mod_bn_cmp_for.body, label %bn_mod_bn_cmp_for.end

bn_mod_bn_cmp_for.body:                           ; preds = %bn_mod_bn_cmp_for.cond
  %1389 = load i32*, i32** %1383, align 4
  %1390 = load i32, i32* %1384, align 4
  %1391 = getelementptr inbounds i32, i32* %1389, i32 %1390
  %1392 = load i32, i32* %1391, align 4
  %1393 = load i32*, i32** %1382, align 4
  %1394 = load i32, i32* %1384, align 4
  %1395 = getelementptr inbounds i32, i32* %1393, i32 %1394
  %1396 = load i32, i32* %1395, align 4
  %1397 = icmp ugt i32 %1392, %1396
  br i1 %1397, label %bn_mod_bn_cmp_if.then, label %bn_mod_bn_cmp_if.end

bn_mod_bn_cmp_if.then:                            ; preds = %bn_mod_bn_cmp_for.body
  store i32 1, i32* %1380, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end:                             ; preds = %bn_mod_bn_cmp_for.body
  %1398 = load i32*, i32** %1383, align 4
  %1399 = load i32, i32* %1384, align 4
  %1400 = getelementptr inbounds i32, i32* %1398, i32 %1399
  %1401 = load i32, i32* %1400, align 4
  %1402 = load i32*, i32** %1382, align 4
  %1403 = load i32, i32* %1384, align 4
  %1404 = getelementptr inbounds i32, i32* %1402, i32 %1403
  %1405 = load i32, i32* %1404, align 4
  %1406 = icmp ult i32 %1401, %1405
  br i1 %1406, label %bn_mod_bn_cmp_if.then6, label %bn_mod_bn_cmp_if.end7

bn_mod_bn_cmp_if.then6:                           ; preds = %bn_mod_bn_cmp_if.end
  store i32 -1, i32* %1380, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end7:                            ; preds = %bn_mod_bn_cmp_if.end
  br label %bn_mod_bn_cmp_for.inc

bn_mod_bn_cmp_for.inc:                            ; preds = %bn_mod_bn_cmp_if.end7
  %1407 = load i32, i32* %1384, align 4
  %1408 = add nsw i32 %1407, -1
  store i32 %1408, i32* %1384, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.end:                            ; preds = %bn_mod_bn_cmp_for.cond
  store i32 0, i32* %1380, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_return:                             ; preds = %bn_mod_bn_cmp_for.end, %bn_mod_bn_cmp_if.then6, %bn_mod_bn_cmp_if.then
  %1409 = load i32, i32* %1380, align 4
  br label %bn_mod_bn_div_lor.rhs.split

bn_mod_bn_div_lor.rhs.split:                      ; preds = %bn_mod_bn_cmp_return
  %1410 = icmp sge i32 %1409, 0
  br label %bn_mod_bn_div_lor.end

bn_mod_bn_div_lor.end:                            ; preds = %bn_mod_bn_div_lor.rhs.split, %bn_mod_bn_div_while.cond
  %1411 = phi i1 [ true, %bn_mod_bn_div_while.cond ], [ %1410, %bn_mod_bn_div_lor.rhs.split ]
  br i1 %1411, label %bn_mod_bn_div_while.body, label %bn_mod_bn_div_while.end

bn_mod_bn_div_while.body:                         ; preds = %bn_mod_bn_div_lor.end
  %1412 = load i32, i32* %1246, align 4
  %1413 = add i32 %1412, 1
  store i32 %1413, i32* %1246, align 4
  %1414 = load i32, i32* %1251, align 4
  %1415 = getelementptr inbounds [65 x i32], [65 x i32]* %1249, i32 0, i32 0
  %1416 = load i32, i32* %1250, align 4
  %1417 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1416
  %1418 = load i32, i32* %1250, align 4
  %1419 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1418
  br label %bn_mod_bn_div_bn_sub_entry

bn_mod_bn_div_bn_sub_entry:                       ; preds = %bn_mod_bn_div_while.body
  %1420 = alloca i32, align 4
  %1421 = alloca i32*, align 4
  %1422 = alloca i32*, align 4
  %1423 = alloca i32*, align 4
  %1424 = alloca i32, align 4
  %1425 = alloca i32, align 4
  %1426 = alloca i32, align 4
  store i32 %1414, i32* %1420, align 4
  store i32* %1415, i32** %1421, align 4
  store i32* %1417, i32** %1422, align 4
  store i32* %1419, i32** %1423, align 4
  store i32 0, i32* %1425, align 4
  store i32 0, i32* %1426, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.cond:                    ; preds = %bn_mod_bn_div_bn_sub_for.inc, %bn_mod_bn_div_bn_sub_entry
  %1427 = load i32, i32* %1426, align 4
  %1428 = load i32, i32* %1420, align 4
  %1429 = icmp ult i32 %1427, %1428
  br i1 %1429, label %bn_mod_bn_div_bn_sub_for.body, label %bn_mod_bn_div_bn_sub_for.end

bn_mod_bn_div_bn_sub_for.body:                    ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %1430 = load i32*, i32** %1422, align 4
  %1431 = load i32, i32* %1426, align 4
  %1432 = getelementptr inbounds i32, i32* %1430, i32 %1431
  %1433 = load i32, i32* %1432, align 4
  %1434 = load i32, i32* %1425, align 4
  %1435 = sub i32 %1433, %1434
  store i32 %1435, i32* %1424, align 4
  %1436 = load i32, i32* %1425, align 4
  %1437 = sub i32 -1, %1436
  %1438 = icmp ugt i32 %1435, %1437
  br i1 %1438, label %bn_mod_bn_div_bn_sub_if.then, label %bn_mod_bn_div_bn_sub_if.else

bn_mod_bn_div_bn_sub_if.then:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %1439 = load i32*, i32** %1421, align 4
  %1440 = load i32, i32* %1426, align 4
  %1441 = getelementptr inbounds i32, i32* %1439, i32 %1440
  %1442 = load i32, i32* %1441, align 4
  %1443 = sub i32 -1, %1442
  store i32 %1443, i32* %1424, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.else:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %1444 = load i32*, i32** %1421, align 4
  %1445 = load i32, i32* %1426, align 4
  %1446 = getelementptr inbounds i32, i32* %1444, i32 %1445
  %1447 = load i32, i32* %1446, align 4
  %1448 = load i32, i32* %1424, align 4
  %1449 = sub i32 %1448, %1447
  store i32 %1449, i32* %1424, align 4
  %1450 = load i32*, i32** %1421, align 4
  %1451 = load i32, i32* %1426, align 4
  %1452 = getelementptr inbounds i32, i32* %1450, i32 %1451
  %1453 = load i32, i32* %1452, align 4
  %1454 = sub i32 -1, %1453
  %1455 = icmp ugt i32 %1449, %1454
  br i1 %1455, label %bn_mod_bn_div_bn_sub_if.then10, label %bn_mod_bn_div_bn_sub_if.else11

bn_mod_bn_div_bn_sub_if.then10:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 1, i32* %1425, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.else11:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 0, i32* %1425, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.end:                      ; preds = %bn_mod_bn_div_bn_sub_if.else11, %bn_mod_bn_div_bn_sub_if.then10
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.end12:                    ; preds = %bn_mod_bn_div_bn_sub_if.end, %bn_mod_bn_div_bn_sub_if.then
  %1456 = load i32, i32* %1424, align 4
  %1457 = load i32*, i32** %1423, align 4
  %1458 = load i32, i32* %1426, align 4
  %1459 = getelementptr inbounds i32, i32* %1457, i32 %1458
  store i32 %1456, i32* %1459, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc

bn_mod_bn_div_bn_sub_for.inc:                     ; preds = %bn_mod_bn_div_bn_sub_if.end12
  %1460 = load i32, i32* %1426, align 4
  %1461 = add i32 %1460, 1
  store i32 %1461, i32* %1426, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.end:                     ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %1462 = load i32, i32* %1425, align 4
  br label %bn_mod_bn_div_while.body.split

bn_mod_bn_div_while.body.split:                   ; preds = %bn_mod_bn_div_bn_sub_for.end
  %1463 = load i32, i32* %1250, align 4
  %1464 = load i32, i32* %1251, align 4
  %1465 = add i32 %1463, %1464
  %1466 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 %1465
  %1467 = load i32, i32* %1466, align 4
  %1468 = sub i32 %1467, %1462
  store i32 %1468, i32* %1466, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.end:                          ; preds = %bn_mod_bn_div_lor.end
  %1469 = load i32, i32* %1246, align 4
  %1470 = load i32*, i32** %1244, align 4
  %1471 = load i32, i32* %1250, align 4
  %1472 = getelementptr inbounds i32, i32* %1470, i32 %1471
  store i32 %1469, i32* %1472, align 4
  br label %bn_mod_bn_div_for.inc

bn_mod_bn_div_for.inc:                            ; preds = %bn_mod_bn_div_while.end
  %1473 = load i32, i32* %1250, align 4
  %1474 = add nsw i32 %1473, -1
  store i32 %1474, i32* %1250, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.end:                            ; preds = %bn_mod_bn_div_for.cond
  %1475 = load i32, i32* %1239, align 4
  %1476 = load i32*, i32** %1243, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry

bn_mod_bn_div_bn_assign_zero_entry:               ; preds = %bn_mod_bn_div_for.end
  %1477 = alloca i32, align 4
  %1478 = alloca i32*, align 4
  %1479 = alloca i32, align 4
  store i32 %1475, i32* %1477, align 4
  store i32* %1476, i32** %1478, align 4
  store i32 0, i32* %1479, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.cond:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc, %bn_mod_bn_div_bn_assign_zero_entry
  %1480 = load i32, i32* %1479, align 4
  %1481 = load i32, i32* %1477, align 4
  %1482 = icmp ult i32 %1480, %1481
  br i1 %1482, label %bn_mod_bn_div_bn_assign_zero_for.body, label %bn_mod_bn_div_bn_assign_zero_for.end

bn_mod_bn_div_bn_assign_zero_for.body:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  %1483 = load i32*, i32** %1478, align 4
  %1484 = load i32, i32* %1479, align 4
  %1485 = getelementptr inbounds i32, i32* %1483, i32 %1484
  store i32 0, i32* %1485, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc

bn_mod_bn_div_bn_assign_zero_for.inc:             ; preds = %bn_mod_bn_div_bn_assign_zero_for.body
  %1486 = load i32, i32* %1479, align 4
  %1487 = add i32 %1486, 1
  store i32 %1487, i32* %1479, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.end:             ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  br label %bn_mod_bn_div_for.end.split

bn_mod_bn_div_for.end.split:                      ; preds = %bn_mod_bn_div_bn_assign_zero_for.end
  %1488 = load i32, i32* %1251, align 4
  %1489 = load i32, i32* %1252, align 4
  %1490 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 0
  %1491 = load i32*, i32** %1243, align 4
  %1492 = call i32 @bn_shift_r(i32* %1491, i32* %1490, i32 %1489, i32 %1488)
  %1493 = getelementptr inbounds [131 x i32], [131 x i32]* %1248, i32 0, i32 0
  %1494 = bitcast i32* %1493 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1494, i8 0, i32 524, i1 false)
  %1495 = getelementptr inbounds [65 x i32], [65 x i32]* %1249, i32 0, i32 0
  %1496 = bitcast i32* %1495 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1496, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return

bn_mod_bn_div_return:                             ; preds = %bn_mod_bn_div_for.end.split, %bn_mod_bn_div_if.then
  br label %bn_mod_entry.split

bn_mod_entry.split:                               ; preds = %bn_mod_bn_div_return
  %1497 = getelementptr inbounds [130 x i32], [130 x i32]* %1231, i32 0, i32 0
  %1498 = bitcast i32* %1497 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1498, i8 0, i32 520, i1 false)
  br label %if.end84.split141.split.split.split

if.end84.split141.split.split.split:              ; preds = %bn_mod_entry.split
  %1499 = load i32, i32* %key_bits.addr, align 4
  %1500 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1500, i32 0, i32 0
  store i32 %1499, i32* %bits, align 4
  %1501 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %bits113 = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %1501, i32 0, i32 0
  store i32 %1499, i32* %bits113, align 4
  %1502 = load i32, i32* %ndigits, align 4
  %arraydecay114 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  %1503 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %modulus = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %1503, i32 0, i32 1
  %arraydecay115 = getelementptr inbounds [256 x i8], [256 x i8]* %modulus, i32 0, i32 0
  br label %bn_encode_entry112

bn_encode_entry112:                               ; preds = %if.end84.split141.split.split.split
  %1504 = alloca i32, align 4
  %1505 = alloca i32*, align 4
  %1506 = alloca i32, align 4
  %1507 = alloca i8*, align 4
  %1508 = alloca i32, align 4
  %1509 = alloca i32, align 4
  %1510 = alloca i32, align 4
  %1511 = alloca i32, align 4
  store i32 %1502, i32* %1504, align 4
  store i32* %arraydecay114, i32** %1505, align 4
  store i32 256, i32* %1506, align 4
  store i8* %arraydecay115, i8** %1507, align 4
  store i32 0, i32* %1510, align 4
  %1512 = load i32, i32* %1506, align 4
  %1513 = sub i32 %1512, 1
  store i32 %1513, i32* %1509, align 4
  br label %bn_encode_for.cond113

bn_encode_for.cond113:                            ; preds = %bn_encode_for.inc9123, %bn_encode_entry112
  %1514 = load i32, i32* %1510, align 4
  %1515 = load i32, i32* %1504, align 4
  %1516 = icmp ult i32 %1514, %1515
  br i1 %1516, label %bn_encode_land.rhs114, label %bn_encode_land.end115

bn_encode_land.rhs114:                            ; preds = %bn_encode_for.cond113
  %1517 = load i32, i32* %1509, align 4
  %1518 = icmp sge i32 %1517, 0
  br label %bn_encode_land.end115

bn_encode_land.end115:                            ; preds = %bn_encode_land.rhs114, %bn_encode_for.cond113
  %1519 = phi i1 [ false, %bn_encode_for.cond113 ], [ %1518, %bn_encode_land.rhs114 ]
  br i1 %1519, label %bn_encode_for.body116, label %bn_encode_for.end10124

bn_encode_for.body116:                            ; preds = %bn_encode_land.end115
  %1520 = load i32*, i32** %1505, align 4
  %1521 = load i32, i32* %1510, align 4
  %1522 = getelementptr inbounds i32, i32* %1520, i32 %1521
  %1523 = load i32, i32* %1522, align 4
  store i32 %1523, i32* %1508, align 4
  store i32 0, i32* %1511, align 4
  br label %bn_encode_for.cond2117

bn_encode_for.cond2117:                           ; preds = %bn_encode_for.inc121, %bn_encode_for.body116
  %1524 = load i32, i32* %1509, align 4
  %1525 = icmp sge i32 %1524, 0
  br i1 %1525, label %bn_encode_land.rhs4118, label %bn_encode_land.end6119

bn_encode_land.rhs4118:                           ; preds = %bn_encode_for.cond2117
  %1526 = load i32, i32* %1511, align 4
  %1527 = icmp ult i32 %1526, 32
  br label %bn_encode_land.end6119

bn_encode_land.end6119:                           ; preds = %bn_encode_land.rhs4118, %bn_encode_for.cond2117
  %1528 = phi i1 [ false, %bn_encode_for.cond2117 ], [ %1527, %bn_encode_land.rhs4118 ]
  br i1 %1528, label %bn_encode_for.body7120, label %bn_encode_for.end122

bn_encode_for.body7120:                           ; preds = %bn_encode_land.end6119
  %1529 = load i32, i32* %1508, align 4
  %1530 = load i32, i32* %1511, align 4
  %1531 = lshr i32 %1529, %1530
  %1532 = trunc i32 %1531 to i8
  %1533 = load i8*, i8** %1507, align 4
  %1534 = load i32, i32* %1509, align 4
  %1535 = getelementptr inbounds i8, i8* %1533, i32 %1534
  store i8 %1532, i8* %1535, align 1
  br label %bn_encode_for.inc121

bn_encode_for.inc121:                             ; preds = %bn_encode_for.body7120
  %1536 = load i32, i32* %1509, align 4
  %1537 = add nsw i32 %1536, -1
  store i32 %1537, i32* %1509, align 4
  %1538 = load i32, i32* %1511, align 4
  %1539 = add i32 %1538, 8
  store i32 %1539, i32* %1511, align 4
  br label %bn_encode_for.cond2117

bn_encode_for.end122:                             ; preds = %bn_encode_land.end6119
  br label %bn_encode_for.inc9123

bn_encode_for.inc9123:                            ; preds = %bn_encode_for.end122
  %1540 = load i32, i32* %1510, align 4
  %1541 = add i32 %1540, 1
  store i32 %1541, i32* %1510, align 4
  br label %bn_encode_for.cond113

bn_encode_for.end10124:                           ; preds = %bn_encode_land.end115
  br label %bn_encode_for.cond11125

bn_encode_for.cond11125:                          ; preds = %bn_encode_for.inc16127, %bn_encode_for.end10124
  %1542 = load i32, i32* %1509, align 4
  %1543 = icmp sge i32 %1542, 0
  br i1 %1543, label %bn_encode_for.body14126, label %bn_encode_for.end18128

bn_encode_for.body14126:                          ; preds = %bn_encode_for.cond11125
  %1544 = load i8*, i8** %1507, align 4
  %1545 = load i32, i32* %1509, align 4
  %1546 = getelementptr inbounds i8, i8* %1544, i32 %1545
  store i8 0, i8* %1546, align 1
  br label %bn_encode_for.inc16127

bn_encode_for.inc16127:                           ; preds = %bn_encode_for.body14126
  %1547 = load i32, i32* %1509, align 4
  %1548 = add nsw i32 %1547, -1
  store i32 %1548, i32* %1509, align 4
  br label %bn_encode_for.cond11125

bn_encode_for.end18128:                           ; preds = %bn_encode_for.cond11125
  br label %if.end84.split111

if.end84.split111:                                ; preds = %bn_encode_for.end18128
  %arraydecay116 = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  %1549 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %exponent = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %1549, i32 0, i32 2
  %arraydecay117 = getelementptr inbounds [256 x i8], [256 x i8]* %exponent, i32 0, i32 0
  br label %bn_encode_entry94

bn_encode_entry94:                                ; preds = %if.end84.split111
  %1550 = alloca i32, align 4
  %1551 = alloca i32*, align 4
  %1552 = alloca i32, align 4
  %1553 = alloca i8*, align 4
  %1554 = alloca i32, align 4
  %1555 = alloca i32, align 4
  %1556 = alloca i32, align 4
  %1557 = alloca i32, align 4
  store i32 1, i32* %1550, align 4
  store i32* %arraydecay116, i32** %1551, align 4
  store i32 256, i32* %1552, align 4
  store i8* %arraydecay117, i8** %1553, align 4
  store i32 0, i32* %1556, align 4
  %1558 = load i32, i32* %1552, align 4
  %1559 = sub i32 %1558, 1
  store i32 %1559, i32* %1555, align 4
  br label %bn_encode_for.cond95

bn_encode_for.cond95:                             ; preds = %bn_encode_for.inc9105, %bn_encode_entry94
  %1560 = load i32, i32* %1556, align 4
  %1561 = load i32, i32* %1550, align 4
  %1562 = icmp ult i32 %1560, %1561
  br i1 %1562, label %bn_encode_land.rhs96, label %bn_encode_land.end97

bn_encode_land.rhs96:                             ; preds = %bn_encode_for.cond95
  %1563 = load i32, i32* %1555, align 4
  %1564 = icmp sge i32 %1563, 0
  br label %bn_encode_land.end97

bn_encode_land.end97:                             ; preds = %bn_encode_land.rhs96, %bn_encode_for.cond95
  %1565 = phi i1 [ false, %bn_encode_for.cond95 ], [ %1564, %bn_encode_land.rhs96 ]
  br i1 %1565, label %bn_encode_for.body98, label %bn_encode_for.end10106

bn_encode_for.body98:                             ; preds = %bn_encode_land.end97
  %1566 = load i32*, i32** %1551, align 4
  %1567 = load i32, i32* %1556, align 4
  %1568 = getelementptr inbounds i32, i32* %1566, i32 %1567
  %1569 = load i32, i32* %1568, align 4
  store i32 %1569, i32* %1554, align 4
  store i32 0, i32* %1557, align 4
  br label %bn_encode_for.cond299

bn_encode_for.cond299:                            ; preds = %bn_encode_for.inc103, %bn_encode_for.body98
  %1570 = load i32, i32* %1555, align 4
  %1571 = icmp sge i32 %1570, 0
  br i1 %1571, label %bn_encode_land.rhs4100, label %bn_encode_land.end6101

bn_encode_land.rhs4100:                           ; preds = %bn_encode_for.cond299
  %1572 = load i32, i32* %1557, align 4
  %1573 = icmp ult i32 %1572, 32
  br label %bn_encode_land.end6101

bn_encode_land.end6101:                           ; preds = %bn_encode_land.rhs4100, %bn_encode_for.cond299
  %1574 = phi i1 [ false, %bn_encode_for.cond299 ], [ %1573, %bn_encode_land.rhs4100 ]
  br i1 %1574, label %bn_encode_for.body7102, label %bn_encode_for.end104

bn_encode_for.body7102:                           ; preds = %bn_encode_land.end6101
  %1575 = load i32, i32* %1554, align 4
  %1576 = load i32, i32* %1557, align 4
  %1577 = lshr i32 %1575, %1576
  %1578 = trunc i32 %1577 to i8
  %1579 = load i8*, i8** %1553, align 4
  %1580 = load i32, i32* %1555, align 4
  %1581 = getelementptr inbounds i8, i8* %1579, i32 %1580
  store i8 %1578, i8* %1581, align 1
  br label %bn_encode_for.inc103

bn_encode_for.inc103:                             ; preds = %bn_encode_for.body7102
  %1582 = load i32, i32* %1555, align 4
  %1583 = add nsw i32 %1582, -1
  store i32 %1583, i32* %1555, align 4
  %1584 = load i32, i32* %1557, align 4
  %1585 = add i32 %1584, 8
  store i32 %1585, i32* %1557, align 4
  br label %bn_encode_for.cond299

bn_encode_for.end104:                             ; preds = %bn_encode_land.end6101
  br label %bn_encode_for.inc9105

bn_encode_for.inc9105:                            ; preds = %bn_encode_for.end104
  %1586 = load i32, i32* %1556, align 4
  %1587 = add i32 %1586, 1
  store i32 %1587, i32* %1556, align 4
  br label %bn_encode_for.cond95

bn_encode_for.end10106:                           ; preds = %bn_encode_land.end97
  br label %bn_encode_for.cond11107

bn_encode_for.cond11107:                          ; preds = %bn_encode_for.inc16109, %bn_encode_for.end10106
  %1588 = load i32, i32* %1555, align 4
  %1589 = icmp sge i32 %1588, 0
  br i1 %1589, label %bn_encode_for.body14108, label %bn_encode_for.end18110

bn_encode_for.body14108:                          ; preds = %bn_encode_for.cond11107
  %1590 = load i8*, i8** %1553, align 4
  %1591 = load i32, i32* %1555, align 4
  %1592 = getelementptr inbounds i8, i8* %1590, i32 %1591
  store i8 0, i8* %1592, align 1
  br label %bn_encode_for.inc16109

bn_encode_for.inc16109:                           ; preds = %bn_encode_for.body14108
  %1593 = load i32, i32* %1555, align 4
  %1594 = add nsw i32 %1593, -1
  store i32 %1594, i32* %1555, align 4
  br label %bn_encode_for.cond11107

bn_encode_for.end18110:                           ; preds = %bn_encode_for.cond11107
  br label %if.end84.split93

if.end84.split93:                                 ; preds = %bn_encode_for.end18110
  %1595 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %modulus118 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1595, i32 0, i32 1
  %arraydecay119 = getelementptr inbounds [256 x i8], [256 x i8]* %modulus118, i32 0, i32 0
  %1596 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %modulus120 = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %1596, i32 0, i32 1
  %arraydecay121 = getelementptr inbounds [256 x i8], [256 x i8]* %modulus120, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay119, i8* align 4 %arraydecay121, i32 256, i1 false)
  %1597 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %public_exponet = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1597, i32 0, i32 2
  %arraydecay122 = getelementptr inbounds [256 x i8], [256 x i8]* %public_exponet, i32 0, i32 0
  %1598 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %exponent123 = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %1598, i32 0, i32 2
  %arraydecay124 = getelementptr inbounds [256 x i8], [256 x i8]* %exponent123, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %arraydecay122, i8* align 4 %arraydecay124, i32 256, i1 false)
  %1599 = load i32, i32* %ndigits, align 4
  %arraydecay125 = getelementptr inbounds [65 x i32], [65 x i32]* %d, i32 0, i32 0
  %1600 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %exponent126 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1600, i32 0, i32 3
  %arraydecay127 = getelementptr inbounds [256 x i8], [256 x i8]* %exponent126, i32 0, i32 0
  br label %bn_encode_entry76

bn_encode_entry76:                                ; preds = %if.end84.split93
  %1601 = alloca i32, align 4
  %1602 = alloca i32*, align 4
  %1603 = alloca i32, align 4
  %1604 = alloca i8*, align 4
  %1605 = alloca i32, align 4
  %1606 = alloca i32, align 4
  %1607 = alloca i32, align 4
  %1608 = alloca i32, align 4
  store i32 %1599, i32* %1601, align 4
  store i32* %arraydecay125, i32** %1602, align 4
  store i32 256, i32* %1603, align 4
  store i8* %arraydecay127, i8** %1604, align 4
  store i32 0, i32* %1607, align 4
  %1609 = load i32, i32* %1603, align 4
  %1610 = sub i32 %1609, 1
  store i32 %1610, i32* %1606, align 4
  br label %bn_encode_for.cond77

bn_encode_for.cond77:                             ; preds = %bn_encode_for.inc987, %bn_encode_entry76
  %1611 = load i32, i32* %1607, align 4
  %1612 = load i32, i32* %1601, align 4
  %1613 = icmp ult i32 %1611, %1612
  br i1 %1613, label %bn_encode_land.rhs78, label %bn_encode_land.end79

bn_encode_land.rhs78:                             ; preds = %bn_encode_for.cond77
  %1614 = load i32, i32* %1606, align 4
  %1615 = icmp sge i32 %1614, 0
  br label %bn_encode_land.end79

bn_encode_land.end79:                             ; preds = %bn_encode_land.rhs78, %bn_encode_for.cond77
  %1616 = phi i1 [ false, %bn_encode_for.cond77 ], [ %1615, %bn_encode_land.rhs78 ]
  br i1 %1616, label %bn_encode_for.body80, label %bn_encode_for.end1088

bn_encode_for.body80:                             ; preds = %bn_encode_land.end79
  %1617 = load i32*, i32** %1602, align 4
  %1618 = load i32, i32* %1607, align 4
  %1619 = getelementptr inbounds i32, i32* %1617, i32 %1618
  %1620 = load i32, i32* %1619, align 4
  store i32 %1620, i32* %1605, align 4
  store i32 0, i32* %1608, align 4
  br label %bn_encode_for.cond281

bn_encode_for.cond281:                            ; preds = %bn_encode_for.inc85, %bn_encode_for.body80
  %1621 = load i32, i32* %1606, align 4
  %1622 = icmp sge i32 %1621, 0
  br i1 %1622, label %bn_encode_land.rhs482, label %bn_encode_land.end683

bn_encode_land.rhs482:                            ; preds = %bn_encode_for.cond281
  %1623 = load i32, i32* %1608, align 4
  %1624 = icmp ult i32 %1623, 32
  br label %bn_encode_land.end683

bn_encode_land.end683:                            ; preds = %bn_encode_land.rhs482, %bn_encode_for.cond281
  %1625 = phi i1 [ false, %bn_encode_for.cond281 ], [ %1624, %bn_encode_land.rhs482 ]
  br i1 %1625, label %bn_encode_for.body784, label %bn_encode_for.end86

bn_encode_for.body784:                            ; preds = %bn_encode_land.end683
  %1626 = load i32, i32* %1605, align 4
  %1627 = load i32, i32* %1608, align 4
  %1628 = lshr i32 %1626, %1627
  %1629 = trunc i32 %1628 to i8
  %1630 = load i8*, i8** %1604, align 4
  %1631 = load i32, i32* %1606, align 4
  %1632 = getelementptr inbounds i8, i8* %1630, i32 %1631
  store i8 %1629, i8* %1632, align 1
  br label %bn_encode_for.inc85

bn_encode_for.inc85:                              ; preds = %bn_encode_for.body784
  %1633 = load i32, i32* %1606, align 4
  %1634 = add nsw i32 %1633, -1
  store i32 %1634, i32* %1606, align 4
  %1635 = load i32, i32* %1608, align 4
  %1636 = add i32 %1635, 8
  store i32 %1636, i32* %1608, align 4
  br label %bn_encode_for.cond281

bn_encode_for.end86:                              ; preds = %bn_encode_land.end683
  br label %bn_encode_for.inc987

bn_encode_for.inc987:                             ; preds = %bn_encode_for.end86
  %1637 = load i32, i32* %1607, align 4
  %1638 = add i32 %1637, 1
  store i32 %1638, i32* %1607, align 4
  br label %bn_encode_for.cond77

bn_encode_for.end1088:                            ; preds = %bn_encode_land.end79
  br label %bn_encode_for.cond1189

bn_encode_for.cond1189:                           ; preds = %bn_encode_for.inc1691, %bn_encode_for.end1088
  %1639 = load i32, i32* %1606, align 4
  %1640 = icmp sge i32 %1639, 0
  br i1 %1640, label %bn_encode_for.body1490, label %bn_encode_for.end1892

bn_encode_for.body1490:                           ; preds = %bn_encode_for.cond1189
  %1641 = load i8*, i8** %1604, align 4
  %1642 = load i32, i32* %1606, align 4
  %1643 = getelementptr inbounds i8, i8* %1641, i32 %1642
  store i8 0, i8* %1643, align 1
  br label %bn_encode_for.inc1691

bn_encode_for.inc1691:                            ; preds = %bn_encode_for.body1490
  %1644 = load i32, i32* %1606, align 4
  %1645 = add nsw i32 %1644, -1
  store i32 %1645, i32* %1606, align 4
  br label %bn_encode_for.cond1189

bn_encode_for.end1892:                            ; preds = %bn_encode_for.cond1189
  br label %if.end84.split75

if.end84.split75:                                 ; preds = %bn_encode_for.end1892
  %1646 = load i32, i32* %pdigits, align 4
  %arraydecay128 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %1647 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime1 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1647, i32 0, i32 4
  %arraydecay129 = getelementptr inbounds [128 x i8], [128 x i8]* %prime1, i32 0, i32 0
  br label %bn_encode_entry58

bn_encode_entry58:                                ; preds = %if.end84.split75
  %1648 = alloca i32, align 4
  %1649 = alloca i32*, align 4
  %1650 = alloca i32, align 4
  %1651 = alloca i8*, align 4
  %1652 = alloca i32, align 4
  %1653 = alloca i32, align 4
  %1654 = alloca i32, align 4
  %1655 = alloca i32, align 4
  store i32 %1646, i32* %1648, align 4
  store i32* %arraydecay128, i32** %1649, align 4
  store i32 128, i32* %1650, align 4
  store i8* %arraydecay129, i8** %1651, align 4
  store i32 0, i32* %1654, align 4
  %1656 = load i32, i32* %1650, align 4
  %1657 = sub i32 %1656, 1
  store i32 %1657, i32* %1653, align 4
  br label %bn_encode_for.cond59

bn_encode_for.cond59:                             ; preds = %bn_encode_for.inc969, %bn_encode_entry58
  %1658 = load i32, i32* %1654, align 4
  %1659 = load i32, i32* %1648, align 4
  %1660 = icmp ult i32 %1658, %1659
  br i1 %1660, label %bn_encode_land.rhs60, label %bn_encode_land.end61

bn_encode_land.rhs60:                             ; preds = %bn_encode_for.cond59
  %1661 = load i32, i32* %1653, align 4
  %1662 = icmp sge i32 %1661, 0
  br label %bn_encode_land.end61

bn_encode_land.end61:                             ; preds = %bn_encode_land.rhs60, %bn_encode_for.cond59
  %1663 = phi i1 [ false, %bn_encode_for.cond59 ], [ %1662, %bn_encode_land.rhs60 ]
  br i1 %1663, label %bn_encode_for.body62, label %bn_encode_for.end1070

bn_encode_for.body62:                             ; preds = %bn_encode_land.end61
  %1664 = load i32*, i32** %1649, align 4
  %1665 = load i32, i32* %1654, align 4
  %1666 = getelementptr inbounds i32, i32* %1664, i32 %1665
  %1667 = load i32, i32* %1666, align 4
  store i32 %1667, i32* %1652, align 4
  store i32 0, i32* %1655, align 4
  br label %bn_encode_for.cond263

bn_encode_for.cond263:                            ; preds = %bn_encode_for.inc67, %bn_encode_for.body62
  %1668 = load i32, i32* %1653, align 4
  %1669 = icmp sge i32 %1668, 0
  br i1 %1669, label %bn_encode_land.rhs464, label %bn_encode_land.end665

bn_encode_land.rhs464:                            ; preds = %bn_encode_for.cond263
  %1670 = load i32, i32* %1655, align 4
  %1671 = icmp ult i32 %1670, 32
  br label %bn_encode_land.end665

bn_encode_land.end665:                            ; preds = %bn_encode_land.rhs464, %bn_encode_for.cond263
  %1672 = phi i1 [ false, %bn_encode_for.cond263 ], [ %1671, %bn_encode_land.rhs464 ]
  br i1 %1672, label %bn_encode_for.body766, label %bn_encode_for.end68

bn_encode_for.body766:                            ; preds = %bn_encode_land.end665
  %1673 = load i32, i32* %1652, align 4
  %1674 = load i32, i32* %1655, align 4
  %1675 = lshr i32 %1673, %1674
  %1676 = trunc i32 %1675 to i8
  %1677 = load i8*, i8** %1651, align 4
  %1678 = load i32, i32* %1653, align 4
  %1679 = getelementptr inbounds i8, i8* %1677, i32 %1678
  store i8 %1676, i8* %1679, align 1
  br label %bn_encode_for.inc67

bn_encode_for.inc67:                              ; preds = %bn_encode_for.body766
  %1680 = load i32, i32* %1653, align 4
  %1681 = add nsw i32 %1680, -1
  store i32 %1681, i32* %1653, align 4
  %1682 = load i32, i32* %1655, align 4
  %1683 = add i32 %1682, 8
  store i32 %1683, i32* %1655, align 4
  br label %bn_encode_for.cond263

bn_encode_for.end68:                              ; preds = %bn_encode_land.end665
  br label %bn_encode_for.inc969

bn_encode_for.inc969:                             ; preds = %bn_encode_for.end68
  %1684 = load i32, i32* %1654, align 4
  %1685 = add i32 %1684, 1
  store i32 %1685, i32* %1654, align 4
  br label %bn_encode_for.cond59

bn_encode_for.end1070:                            ; preds = %bn_encode_land.end61
  br label %bn_encode_for.cond1171

bn_encode_for.cond1171:                           ; preds = %bn_encode_for.inc1673, %bn_encode_for.end1070
  %1686 = load i32, i32* %1653, align 4
  %1687 = icmp sge i32 %1686, 0
  br i1 %1687, label %bn_encode_for.body1472, label %bn_encode_for.end1874

bn_encode_for.body1472:                           ; preds = %bn_encode_for.cond1171
  %1688 = load i8*, i8** %1651, align 4
  %1689 = load i32, i32* %1653, align 4
  %1690 = getelementptr inbounds i8, i8* %1688, i32 %1689
  store i8 0, i8* %1690, align 1
  br label %bn_encode_for.inc1673

bn_encode_for.inc1673:                            ; preds = %bn_encode_for.body1472
  %1691 = load i32, i32* %1653, align 4
  %1692 = add nsw i32 %1691, -1
  store i32 %1692, i32* %1653, align 4
  br label %bn_encode_for.cond1171

bn_encode_for.end1874:                            ; preds = %bn_encode_for.cond1171
  br label %if.end84.split57

if.end84.split57:                                 ; preds = %bn_encode_for.end1874
  %1693 = load i32, i32* %pdigits, align 4
  %arraydecay130 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %1694 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1694, i32 0, i32 5
  %arraydecay131 = getelementptr inbounds [128 x i8], [128 x i8]* %prime2, i32 0, i32 0
  br label %bn_encode_entry40

bn_encode_entry40:                                ; preds = %if.end84.split57
  %1695 = alloca i32, align 4
  %1696 = alloca i32*, align 4
  %1697 = alloca i32, align 4
  %1698 = alloca i8*, align 4
  %1699 = alloca i32, align 4
  %1700 = alloca i32, align 4
  %1701 = alloca i32, align 4
  %1702 = alloca i32, align 4
  store i32 %1693, i32* %1695, align 4
  store i32* %arraydecay130, i32** %1696, align 4
  store i32 128, i32* %1697, align 4
  store i8* %arraydecay131, i8** %1698, align 4
  store i32 0, i32* %1701, align 4
  %1703 = load i32, i32* %1697, align 4
  %1704 = sub i32 %1703, 1
  store i32 %1704, i32* %1700, align 4
  br label %bn_encode_for.cond41

bn_encode_for.cond41:                             ; preds = %bn_encode_for.inc951, %bn_encode_entry40
  %1705 = load i32, i32* %1701, align 4
  %1706 = load i32, i32* %1695, align 4
  %1707 = icmp ult i32 %1705, %1706
  br i1 %1707, label %bn_encode_land.rhs42, label %bn_encode_land.end43

bn_encode_land.rhs42:                             ; preds = %bn_encode_for.cond41
  %1708 = load i32, i32* %1700, align 4
  %1709 = icmp sge i32 %1708, 0
  br label %bn_encode_land.end43

bn_encode_land.end43:                             ; preds = %bn_encode_land.rhs42, %bn_encode_for.cond41
  %1710 = phi i1 [ false, %bn_encode_for.cond41 ], [ %1709, %bn_encode_land.rhs42 ]
  br i1 %1710, label %bn_encode_for.body44, label %bn_encode_for.end1052

bn_encode_for.body44:                             ; preds = %bn_encode_land.end43
  %1711 = load i32*, i32** %1696, align 4
  %1712 = load i32, i32* %1701, align 4
  %1713 = getelementptr inbounds i32, i32* %1711, i32 %1712
  %1714 = load i32, i32* %1713, align 4
  store i32 %1714, i32* %1699, align 4
  store i32 0, i32* %1702, align 4
  br label %bn_encode_for.cond245

bn_encode_for.cond245:                            ; preds = %bn_encode_for.inc49, %bn_encode_for.body44
  %1715 = load i32, i32* %1700, align 4
  %1716 = icmp sge i32 %1715, 0
  br i1 %1716, label %bn_encode_land.rhs446, label %bn_encode_land.end647

bn_encode_land.rhs446:                            ; preds = %bn_encode_for.cond245
  %1717 = load i32, i32* %1702, align 4
  %1718 = icmp ult i32 %1717, 32
  br label %bn_encode_land.end647

bn_encode_land.end647:                            ; preds = %bn_encode_land.rhs446, %bn_encode_for.cond245
  %1719 = phi i1 [ false, %bn_encode_for.cond245 ], [ %1718, %bn_encode_land.rhs446 ]
  br i1 %1719, label %bn_encode_for.body748, label %bn_encode_for.end50

bn_encode_for.body748:                            ; preds = %bn_encode_land.end647
  %1720 = load i32, i32* %1699, align 4
  %1721 = load i32, i32* %1702, align 4
  %1722 = lshr i32 %1720, %1721
  %1723 = trunc i32 %1722 to i8
  %1724 = load i8*, i8** %1698, align 4
  %1725 = load i32, i32* %1700, align 4
  %1726 = getelementptr inbounds i8, i8* %1724, i32 %1725
  store i8 %1723, i8* %1726, align 1
  br label %bn_encode_for.inc49

bn_encode_for.inc49:                              ; preds = %bn_encode_for.body748
  %1727 = load i32, i32* %1700, align 4
  %1728 = add nsw i32 %1727, -1
  store i32 %1728, i32* %1700, align 4
  %1729 = load i32, i32* %1702, align 4
  %1730 = add i32 %1729, 8
  store i32 %1730, i32* %1702, align 4
  br label %bn_encode_for.cond245

bn_encode_for.end50:                              ; preds = %bn_encode_land.end647
  br label %bn_encode_for.inc951

bn_encode_for.inc951:                             ; preds = %bn_encode_for.end50
  %1731 = load i32, i32* %1701, align 4
  %1732 = add i32 %1731, 1
  store i32 %1732, i32* %1701, align 4
  br label %bn_encode_for.cond41

bn_encode_for.end1052:                            ; preds = %bn_encode_land.end43
  br label %bn_encode_for.cond1153

bn_encode_for.cond1153:                           ; preds = %bn_encode_for.inc1655, %bn_encode_for.end1052
  %1733 = load i32, i32* %1700, align 4
  %1734 = icmp sge i32 %1733, 0
  br i1 %1734, label %bn_encode_for.body1454, label %bn_encode_for.end1856

bn_encode_for.body1454:                           ; preds = %bn_encode_for.cond1153
  %1735 = load i8*, i8** %1698, align 4
  %1736 = load i32, i32* %1700, align 4
  %1737 = getelementptr inbounds i8, i8* %1735, i32 %1736
  store i8 0, i8* %1737, align 1
  br label %bn_encode_for.inc1655

bn_encode_for.inc1655:                            ; preds = %bn_encode_for.body1454
  %1738 = load i32, i32* %1700, align 4
  %1739 = add nsw i32 %1738, -1
  store i32 %1739, i32* %1700, align 4
  br label %bn_encode_for.cond1153

bn_encode_for.end1856:                            ; preds = %bn_encode_for.cond1153
  br label %if.end84.split39

if.end84.split39:                                 ; preds = %bn_encode_for.end1856
  %1740 = load i32, i32* %pdigits, align 4
  %arraydecay132 = getelementptr inbounds [65 x i32], [65 x i32]* %dp, i32 0, i32 0
  %1741 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime_exponent1 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1741, i32 0, i32 6
  %arraydecay133 = getelementptr inbounds [128 x i8], [128 x i8]* %prime_exponent1, i32 0, i32 0
  br label %bn_encode_entry22

bn_encode_entry22:                                ; preds = %if.end84.split39
  %1742 = alloca i32, align 4
  %1743 = alloca i32*, align 4
  %1744 = alloca i32, align 4
  %1745 = alloca i8*, align 4
  %1746 = alloca i32, align 4
  %1747 = alloca i32, align 4
  %1748 = alloca i32, align 4
  %1749 = alloca i32, align 4
  store i32 %1740, i32* %1742, align 4
  store i32* %arraydecay132, i32** %1743, align 4
  store i32 128, i32* %1744, align 4
  store i8* %arraydecay133, i8** %1745, align 4
  store i32 0, i32* %1748, align 4
  %1750 = load i32, i32* %1744, align 4
  %1751 = sub i32 %1750, 1
  store i32 %1751, i32* %1747, align 4
  br label %bn_encode_for.cond23

bn_encode_for.cond23:                             ; preds = %bn_encode_for.inc933, %bn_encode_entry22
  %1752 = load i32, i32* %1748, align 4
  %1753 = load i32, i32* %1742, align 4
  %1754 = icmp ult i32 %1752, %1753
  br i1 %1754, label %bn_encode_land.rhs24, label %bn_encode_land.end25

bn_encode_land.rhs24:                             ; preds = %bn_encode_for.cond23
  %1755 = load i32, i32* %1747, align 4
  %1756 = icmp sge i32 %1755, 0
  br label %bn_encode_land.end25

bn_encode_land.end25:                             ; preds = %bn_encode_land.rhs24, %bn_encode_for.cond23
  %1757 = phi i1 [ false, %bn_encode_for.cond23 ], [ %1756, %bn_encode_land.rhs24 ]
  br i1 %1757, label %bn_encode_for.body26, label %bn_encode_for.end1034

bn_encode_for.body26:                             ; preds = %bn_encode_land.end25
  %1758 = load i32*, i32** %1743, align 4
  %1759 = load i32, i32* %1748, align 4
  %1760 = getelementptr inbounds i32, i32* %1758, i32 %1759
  %1761 = load i32, i32* %1760, align 4
  store i32 %1761, i32* %1746, align 4
  store i32 0, i32* %1749, align 4
  br label %bn_encode_for.cond227

bn_encode_for.cond227:                            ; preds = %bn_encode_for.inc31, %bn_encode_for.body26
  %1762 = load i32, i32* %1747, align 4
  %1763 = icmp sge i32 %1762, 0
  br i1 %1763, label %bn_encode_land.rhs428, label %bn_encode_land.end629

bn_encode_land.rhs428:                            ; preds = %bn_encode_for.cond227
  %1764 = load i32, i32* %1749, align 4
  %1765 = icmp ult i32 %1764, 32
  br label %bn_encode_land.end629

bn_encode_land.end629:                            ; preds = %bn_encode_land.rhs428, %bn_encode_for.cond227
  %1766 = phi i1 [ false, %bn_encode_for.cond227 ], [ %1765, %bn_encode_land.rhs428 ]
  br i1 %1766, label %bn_encode_for.body730, label %bn_encode_for.end32

bn_encode_for.body730:                            ; preds = %bn_encode_land.end629
  %1767 = load i32, i32* %1746, align 4
  %1768 = load i32, i32* %1749, align 4
  %1769 = lshr i32 %1767, %1768
  %1770 = trunc i32 %1769 to i8
  %1771 = load i8*, i8** %1745, align 4
  %1772 = load i32, i32* %1747, align 4
  %1773 = getelementptr inbounds i8, i8* %1771, i32 %1772
  store i8 %1770, i8* %1773, align 1
  br label %bn_encode_for.inc31

bn_encode_for.inc31:                              ; preds = %bn_encode_for.body730
  %1774 = load i32, i32* %1747, align 4
  %1775 = add nsw i32 %1774, -1
  store i32 %1775, i32* %1747, align 4
  %1776 = load i32, i32* %1749, align 4
  %1777 = add i32 %1776, 8
  store i32 %1777, i32* %1749, align 4
  br label %bn_encode_for.cond227

bn_encode_for.end32:                              ; preds = %bn_encode_land.end629
  br label %bn_encode_for.inc933

bn_encode_for.inc933:                             ; preds = %bn_encode_for.end32
  %1778 = load i32, i32* %1748, align 4
  %1779 = add i32 %1778, 1
  store i32 %1779, i32* %1748, align 4
  br label %bn_encode_for.cond23

bn_encode_for.end1034:                            ; preds = %bn_encode_land.end25
  br label %bn_encode_for.cond1135

bn_encode_for.cond1135:                           ; preds = %bn_encode_for.inc1637, %bn_encode_for.end1034
  %1780 = load i32, i32* %1747, align 4
  %1781 = icmp sge i32 %1780, 0
  br i1 %1781, label %bn_encode_for.body1436, label %bn_encode_for.end1838

bn_encode_for.body1436:                           ; preds = %bn_encode_for.cond1135
  %1782 = load i8*, i8** %1745, align 4
  %1783 = load i32, i32* %1747, align 4
  %1784 = getelementptr inbounds i8, i8* %1782, i32 %1783
  store i8 0, i8* %1784, align 1
  br label %bn_encode_for.inc1637

bn_encode_for.inc1637:                            ; preds = %bn_encode_for.body1436
  %1785 = load i32, i32* %1747, align 4
  %1786 = add nsw i32 %1785, -1
  store i32 %1786, i32* %1747, align 4
  br label %bn_encode_for.cond1135

bn_encode_for.end1838:                            ; preds = %bn_encode_for.cond1135
  br label %if.end84.split21

if.end84.split21:                                 ; preds = %bn_encode_for.end1838
  %1787 = load i32, i32* %pdigits, align 4
  %arraydecay134 = getelementptr inbounds [65 x i32], [65 x i32]* %dq, i32 0, i32 0
  %1788 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime_exponent2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1788, i32 0, i32 7
  %arraydecay135 = getelementptr inbounds [128 x i8], [128 x i8]* %prime_exponent2, i32 0, i32 0
  br label %bn_encode_entry2

bn_encode_entry2:                                 ; preds = %if.end84.split21
  %1789 = alloca i32, align 4
  %1790 = alloca i32*, align 4
  %1791 = alloca i32, align 4
  %1792 = alloca i8*, align 4
  %1793 = alloca i32, align 4
  %1794 = alloca i32, align 4
  %1795 = alloca i32, align 4
  %1796 = alloca i32, align 4
  store i32 %1787, i32* %1789, align 4
  store i32* %arraydecay134, i32** %1790, align 4
  store i32 128, i32* %1791, align 4
  store i8* %arraydecay135, i8** %1792, align 4
  store i32 0, i32* %1795, align 4
  %1797 = load i32, i32* %1791, align 4
  %1798 = sub i32 %1797, 1
  store i32 %1798, i32* %1794, align 4
  br label %bn_encode_for.cond3

bn_encode_for.cond3:                              ; preds = %bn_encode_for.inc915, %bn_encode_entry2
  %1799 = load i32, i32* %1795, align 4
  %1800 = load i32, i32* %1789, align 4
  %1801 = icmp ult i32 %1799, %1800
  br i1 %1801, label %bn_encode_land.rhs5, label %bn_encode_land.end7

bn_encode_land.rhs5:                              ; preds = %bn_encode_for.cond3
  %1802 = load i32, i32* %1794, align 4
  %1803 = icmp sge i32 %1802, 0
  br label %bn_encode_land.end7

bn_encode_land.end7:                              ; preds = %bn_encode_land.rhs5, %bn_encode_for.cond3
  %1804 = phi i1 [ false, %bn_encode_for.cond3 ], [ %1803, %bn_encode_land.rhs5 ]
  br i1 %1804, label %bn_encode_for.body8, label %bn_encode_for.end1016

bn_encode_for.body8:                              ; preds = %bn_encode_land.end7
  %1805 = load i32*, i32** %1790, align 4
  %1806 = load i32, i32* %1795, align 4
  %1807 = getelementptr inbounds i32, i32* %1805, i32 %1806
  %1808 = load i32, i32* %1807, align 4
  store i32 %1808, i32* %1793, align 4
  store i32 0, i32* %1796, align 4
  br label %bn_encode_for.cond29

bn_encode_for.cond29:                             ; preds = %bn_encode_for.inc13, %bn_encode_for.body8
  %1809 = load i32, i32* %1794, align 4
  %1810 = icmp sge i32 %1809, 0
  br i1 %1810, label %bn_encode_land.rhs410, label %bn_encode_land.end611

bn_encode_land.rhs410:                            ; preds = %bn_encode_for.cond29
  %1811 = load i32, i32* %1796, align 4
  %1812 = icmp ult i32 %1811, 32
  br label %bn_encode_land.end611

bn_encode_land.end611:                            ; preds = %bn_encode_land.rhs410, %bn_encode_for.cond29
  %1813 = phi i1 [ false, %bn_encode_for.cond29 ], [ %1812, %bn_encode_land.rhs410 ]
  br i1 %1813, label %bn_encode_for.body712, label %bn_encode_for.end14

bn_encode_for.body712:                            ; preds = %bn_encode_land.end611
  %1814 = load i32, i32* %1793, align 4
  %1815 = load i32, i32* %1796, align 4
  %1816 = lshr i32 %1814, %1815
  %1817 = trunc i32 %1816 to i8
  %1818 = load i8*, i8** %1792, align 4
  %1819 = load i32, i32* %1794, align 4
  %1820 = getelementptr inbounds i8, i8* %1818, i32 %1819
  store i8 %1817, i8* %1820, align 1
  br label %bn_encode_for.inc13

bn_encode_for.inc13:                              ; preds = %bn_encode_for.body712
  %1821 = load i32, i32* %1794, align 4
  %1822 = add nsw i32 %1821, -1
  store i32 %1822, i32* %1794, align 4
  %1823 = load i32, i32* %1796, align 4
  %1824 = add i32 %1823, 8
  store i32 %1824, i32* %1796, align 4
  br label %bn_encode_for.cond29

bn_encode_for.end14:                              ; preds = %bn_encode_land.end611
  br label %bn_encode_for.inc915

bn_encode_for.inc915:                             ; preds = %bn_encode_for.end14
  %1825 = load i32, i32* %1795, align 4
  %1826 = add i32 %1825, 1
  store i32 %1826, i32* %1795, align 4
  br label %bn_encode_for.cond3

bn_encode_for.end1016:                            ; preds = %bn_encode_land.end7
  br label %bn_encode_for.cond1117

bn_encode_for.cond1117:                           ; preds = %bn_encode_for.inc1619, %bn_encode_for.end1016
  %1827 = load i32, i32* %1794, align 4
  %1828 = icmp sge i32 %1827, 0
  br i1 %1828, label %bn_encode_for.body1418, label %bn_encode_for.end1820

bn_encode_for.body1418:                           ; preds = %bn_encode_for.cond1117
  %1829 = load i8*, i8** %1792, align 4
  %1830 = load i32, i32* %1794, align 4
  %1831 = getelementptr inbounds i8, i8* %1829, i32 %1830
  store i8 0, i8* %1831, align 1
  br label %bn_encode_for.inc1619

bn_encode_for.inc1619:                            ; preds = %bn_encode_for.body1418
  %1832 = load i32, i32* %1794, align 4
  %1833 = add nsw i32 %1832, -1
  store i32 %1833, i32* %1794, align 4
  br label %bn_encode_for.cond1117

bn_encode_for.end1820:                            ; preds = %bn_encode_for.cond1117
  br label %if.end84.split1

if.end84.split1:                                  ; preds = %bn_encode_for.end1820
  %1834 = load i32, i32* %pdigits, align 4
  %arraydecay136 = getelementptr inbounds [65 x i32], [65 x i32]* %q_inv, i32 0, i32 0
  %1835 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %coefficient = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1835, i32 0, i32 8
  %arraydecay137 = getelementptr inbounds [128 x i8], [128 x i8]* %coefficient, i32 0, i32 0
  br label %bn_encode_entry

bn_encode_entry:                                  ; preds = %if.end84.split1
  %1836 = alloca i32, align 4
  %1837 = alloca i32*, align 4
  %1838 = alloca i32, align 4
  %1839 = alloca i8*, align 4
  %1840 = alloca i32, align 4
  %1841 = alloca i32, align 4
  %1842 = alloca i32, align 4
  %1843 = alloca i32, align 4
  store i32 %1834, i32* %1836, align 4
  store i32* %arraydecay136, i32** %1837, align 4
  store i32 128, i32* %1838, align 4
  store i8* %arraydecay137, i8** %1839, align 4
  store i32 0, i32* %1842, align 4
  %1844 = load i32, i32* %1838, align 4
  %1845 = sub i32 %1844, 1
  store i32 %1845, i32* %1841, align 4
  br label %bn_encode_for.cond

bn_encode_for.cond:                               ; preds = %bn_encode_for.inc9, %bn_encode_entry
  %1846 = load i32, i32* %1842, align 4
  %1847 = load i32, i32* %1836, align 4
  %1848 = icmp ult i32 %1846, %1847
  br i1 %1848, label %bn_encode_land.rhs, label %bn_encode_land.end

bn_encode_land.rhs:                               ; preds = %bn_encode_for.cond
  %1849 = load i32, i32* %1841, align 4
  %1850 = icmp sge i32 %1849, 0
  br label %bn_encode_land.end

bn_encode_land.end:                               ; preds = %bn_encode_land.rhs, %bn_encode_for.cond
  %1851 = phi i1 [ false, %bn_encode_for.cond ], [ %1850, %bn_encode_land.rhs ]
  br i1 %1851, label %bn_encode_for.body, label %bn_encode_for.end10

bn_encode_for.body:                               ; preds = %bn_encode_land.end
  %1852 = load i32*, i32** %1837, align 4
  %1853 = load i32, i32* %1842, align 4
  %1854 = getelementptr inbounds i32, i32* %1852, i32 %1853
  %1855 = load i32, i32* %1854, align 4
  store i32 %1855, i32* %1840, align 4
  store i32 0, i32* %1843, align 4
  br label %bn_encode_for.cond2

bn_encode_for.cond2:                              ; preds = %bn_encode_for.inc, %bn_encode_for.body
  %1856 = load i32, i32* %1841, align 4
  %1857 = icmp sge i32 %1856, 0
  br i1 %1857, label %bn_encode_land.rhs4, label %bn_encode_land.end6

bn_encode_land.rhs4:                              ; preds = %bn_encode_for.cond2
  %1858 = load i32, i32* %1843, align 4
  %1859 = icmp ult i32 %1858, 32
  br label %bn_encode_land.end6

bn_encode_land.end6:                              ; preds = %bn_encode_land.rhs4, %bn_encode_for.cond2
  %1860 = phi i1 [ false, %bn_encode_for.cond2 ], [ %1859, %bn_encode_land.rhs4 ]
  br i1 %1860, label %bn_encode_for.body7, label %bn_encode_for.end

bn_encode_for.body7:                              ; preds = %bn_encode_land.end6
  %1861 = load i32, i32* %1840, align 4
  %1862 = load i32, i32* %1843, align 4
  %1863 = lshr i32 %1861, %1862
  %1864 = trunc i32 %1863 to i8
  %1865 = load i8*, i8** %1839, align 4
  %1866 = load i32, i32* %1841, align 4
  %1867 = getelementptr inbounds i8, i8* %1865, i32 %1866
  store i8 %1864, i8* %1867, align 1
  br label %bn_encode_for.inc

bn_encode_for.inc:                                ; preds = %bn_encode_for.body7
  %1868 = load i32, i32* %1841, align 4
  %1869 = add nsw i32 %1868, -1
  store i32 %1869, i32* %1841, align 4
  %1870 = load i32, i32* %1843, align 4
  %1871 = add i32 %1870, 8
  store i32 %1871, i32* %1843, align 4
  br label %bn_encode_for.cond2

bn_encode_for.end:                                ; preds = %bn_encode_land.end6
  br label %bn_encode_for.inc9

bn_encode_for.inc9:                               ; preds = %bn_encode_for.end
  %1872 = load i32, i32* %1842, align 4
  %1873 = add i32 %1872, 1
  store i32 %1873, i32* %1842, align 4
  br label %bn_encode_for.cond

bn_encode_for.end10:                              ; preds = %bn_encode_land.end
  br label %bn_encode_for.cond11

bn_encode_for.cond11:                             ; preds = %bn_encode_for.inc16, %bn_encode_for.end10
  %1874 = load i32, i32* %1841, align 4
  %1875 = icmp sge i32 %1874, 0
  br i1 %1875, label %bn_encode_for.body14, label %bn_encode_for.end18

bn_encode_for.body14:                             ; preds = %bn_encode_for.cond11
  %1876 = load i8*, i8** %1839, align 4
  %1877 = load i32, i32* %1841, align 4
  %1878 = getelementptr inbounds i8, i8* %1876, i32 %1877
  store i8 0, i8* %1878, align 1
  br label %bn_encode_for.inc16

bn_encode_for.inc16:                              ; preds = %bn_encode_for.body14
  %1879 = load i32, i32* %1841, align 4
  %1880 = add nsw i32 %1879, -1
  store i32 %1880, i32* %1841, align 4
  br label %bn_encode_for.cond11

bn_encode_for.end18:                              ; preds = %bn_encode_for.cond11
  br label %if.end84.split

if.end84.split:                                   ; preds = %bn_encode_for.end18
  %arraydecay138 = getelementptr inbounds [65 x i32], [65 x i32]* %d, i32 0, i32 0
  %1881 = bitcast i32* %arraydecay138 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1881, i8 0, i32 260, i1 false)
  %arraydecay139 = getelementptr inbounds [65 x i32], [65 x i32]* %dp, i32 0, i32 0
  %1882 = bitcast i32* %arraydecay139 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1882, i8 0, i32 260, i1 false)
  %arraydecay140 = getelementptr inbounds [65 x i32], [65 x i32]* %dq, i32 0, i32 0
  %1883 = bitcast i32* %arraydecay140 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1883, i8 0, i32 260, i1 false)
  %arraydecay141 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %1884 = bitcast i32* %arraydecay141 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1884, i8 0, i32 260, i1 false)
  %arraydecay142 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %1885 = bitcast i32* %arraydecay142 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1885, i8 0, i32 260, i1 false)
  %arraydecay143 = getelementptr inbounds [65 x i32], [65 x i32]* %phi_n, i32 0, i32 0
  %1886 = bitcast i32* %arraydecay143 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1886, i8 0, i32 260, i1 false)
  %arraydecay144 = getelementptr inbounds [65 x i32], [65 x i32]* %q_inv, i32 0, i32 0
  %1887 = bitcast i32* %arraydecay144 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1887, i8 0, i32 260, i1 false)
  %arraydecay145 = getelementptr inbounds [65 x i32], [65 x i32]* %p_minus1, i32 0, i32 0
  %1888 = bitcast i32* %arraydecay145 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1888, i8 0, i32 260, i1 false)
  %arraydecay146 = getelementptr inbounds [65 x i32], [65 x i32]* %q_minus1, i32 0, i32 0
  %1889 = bitcast i32* %arraydecay146 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1889, i8 0, i32 260, i1 false)
  %arraydecay147 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %1890 = bitcast i32* %arraydecay147 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1890, i8 0, i32 260, i1 false)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end84.split, %if.then64, %if.then32, %if.then
  %1891 = load i32, i32* %retval, align 4
  ret i32 %1891
}

; Function Attrs: noinline optnone
define internal i32 @rsa_filter(i32* %a, i32 %adigits, i32* %b, i32 %bdigits) #2 {
entry:
  %bdigits.addr = alloca i32, align 4
  %b.addr = alloca i32*, align 4
  %adigits.addr = alloca i32, align 4
  %a.addr = alloca i32*, align 4
  %status = alloca i32, align 4
  %a_minus1 = alloca [65 x i32], align 4
  %t = alloca [65 x i32], align 4
  store i32 %bdigits, i32* %bdigits.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  store i32 %adigits, i32* %adigits.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %adigits.addr, align 4
  %arraydecay = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_zero_entry

bn_assign_zero_entry:                             ; preds = %entry
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %1, align 4
  store i32* %arraydecay, i32** %2, align 4
  store i32 0, i32* %3, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.cond:                          ; preds = %bn_assign_zero_for.inc, %bn_assign_zero_entry
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %1, align 4
  %6 = icmp ult i32 %4, %5
  br i1 %6, label %bn_assign_zero_for.body, label %bn_assign_zero_for.end

bn_assign_zero_for.body:                          ; preds = %bn_assign_zero_for.cond
  %7 = load i32*, i32** %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 0, i32* %9, align 4
  br label %bn_assign_zero_for.inc

bn_assign_zero_for.inc:                           ; preds = %bn_assign_zero_for.body
  %10 = load i32, i32* %3, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %3, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.end:                           ; preds = %bn_assign_zero_for.cond
  br label %entry.split

entry.split:                                      ; preds = %bn_assign_zero_for.end
  %arrayidx = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  store i32 1, i32* %arrayidx, align 4
  %12 = load i32, i32* %adigits.addr, align 4
  %arraydecay1 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %13 = load i32*, i32** %a.addr, align 4
  %arraydecay2 = getelementptr inbounds [65 x i32], [65 x i32]* %a_minus1, i32 0, i32 0
  br label %bn_sub_entry

bn_sub_entry:                                     ; preds = %entry.split
  %14 = alloca i32, align 4
  %15 = alloca i32*, align 4
  %16 = alloca i32*, align 4
  %17 = alloca i32*, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i32 %12, i32* %14, align 4
  store i32* %arraydecay1, i32** %15, align 4
  store i32* %13, i32** %16, align 4
  store i32* %arraydecay2, i32** %17, align 4
  store i32 0, i32* %19, align 4
  store i32 0, i32* %20, align 4
  br label %bn_sub_for.cond

bn_sub_for.cond:                                  ; preds = %bn_sub_for.inc, %bn_sub_entry
  %21 = load i32, i32* %20, align 4
  %22 = load i32, i32* %14, align 4
  %23 = icmp ult i32 %21, %22
  br i1 %23, label %bn_sub_for.body, label %bn_sub_for.end

bn_sub_for.body:                                  ; preds = %bn_sub_for.cond
  %24 = load i32*, i32** %16, align 4
  %25 = load i32, i32* %20, align 4
  %26 = getelementptr inbounds i32, i32* %24, i32 %25
  %27 = load i32, i32* %26, align 4
  %28 = load i32, i32* %19, align 4
  %29 = sub i32 %27, %28
  store i32 %29, i32* %18, align 4
  %30 = load i32, i32* %19, align 4
  %31 = sub i32 -1, %30
  %32 = icmp ugt i32 %29, %31
  br i1 %32, label %bn_sub_if.then, label %bn_sub_if.else

bn_sub_if.then:                                   ; preds = %bn_sub_for.body
  %33 = load i32*, i32** %15, align 4
  %34 = load i32, i32* %20, align 4
  %35 = getelementptr inbounds i32, i32* %33, i32 %34
  %36 = load i32, i32* %35, align 4
  %37 = sub i32 -1, %36
  store i32 %37, i32* %18, align 4
  br label %bn_sub_if.end12

bn_sub_if.else:                                   ; preds = %bn_sub_for.body
  %38 = load i32*, i32** %15, align 4
  %39 = load i32, i32* %20, align 4
  %40 = getelementptr inbounds i32, i32* %38, i32 %39
  %41 = load i32, i32* %40, align 4
  %42 = load i32, i32* %18, align 4
  %43 = sub i32 %42, %41
  store i32 %43, i32* %18, align 4
  %44 = load i32*, i32** %15, align 4
  %45 = load i32, i32* %20, align 4
  %46 = getelementptr inbounds i32, i32* %44, i32 %45
  %47 = load i32, i32* %46, align 4
  %48 = sub i32 -1, %47
  %49 = icmp ugt i32 %43, %48
  br i1 %49, label %bn_sub_if.then10, label %bn_sub_if.else11

bn_sub_if.then10:                                 ; preds = %bn_sub_if.else
  store i32 1, i32* %19, align 4
  br label %bn_sub_if.end

bn_sub_if.else11:                                 ; preds = %bn_sub_if.else
  store i32 0, i32* %19, align 4
  br label %bn_sub_if.end

bn_sub_if.end:                                    ; preds = %bn_sub_if.else11, %bn_sub_if.then10
  br label %bn_sub_if.end12

bn_sub_if.end12:                                  ; preds = %bn_sub_if.end, %bn_sub_if.then
  %50 = load i32, i32* %18, align 4
  %51 = load i32*, i32** %17, align 4
  %52 = load i32, i32* %20, align 4
  %53 = getelementptr inbounds i32, i32* %51, i32 %52
  store i32 %50, i32* %53, align 4
  br label %bn_sub_for.inc

bn_sub_for.inc:                                   ; preds = %bn_sub_if.end12
  %54 = load i32, i32* %20, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %20, align 4
  br label %bn_sub_for.cond

bn_sub_for.end:                                   ; preds = %bn_sub_for.cond
  %56 = load i32, i32* %19, align 4
  br label %entry.split.split

entry.split.split:                                ; preds = %bn_sub_for.end
  %57 = load i32, i32* %bdigits.addr, align 4
  %58 = load i32*, i32** %b.addr, align 4
  %59 = load i32, i32* %adigits.addr, align 4
  %arraydecay3 = getelementptr inbounds [65 x i32], [65 x i32]* %a_minus1, i32 0, i32 0
  %call4 = call i32 @relatively_prime(i32* %arraydecay3, i32 %59, i32* %58, i32 %57)
  store i32 %call4, i32* %status, align 4
  %arraydecay5 = getelementptr inbounds [65 x i32], [65 x i32]* %a_minus1, i32 0, i32 0
  %60 = bitcast i32* %arraydecay5 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %60, i8 0, i32 260, i1 false)
  %61 = load i32, i32* %status, align 4
  ret i32 %61
}

; Function Attrs: noinline optnone
define internal i32 @relatively_prime(i32* %a, i32 %adigits, i32* %b, i32 %bdigits) #2 {
entry:
  %bdigits.addr = alloca i32, align 4
  %b.addr = alloca i32*, align 4
  %adigits.addr = alloca i32, align 4
  %a.addr = alloca i32*, align 4
  %status = alloca i32, align 4
  %t = alloca [65 x i32], align 4
  %u = alloca [65 x i32], align 4
  store i32 %bdigits, i32* %bdigits.addr, align 4
  store i32* %b, i32** %b.addr, align 4
  store i32 %adigits, i32* %adigits.addr, align 4
  store i32* %a, i32** %a.addr, align 4
  %0 = load i32, i32* %adigits.addr, align 4
  %arraydecay = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_zero_entry2

bn_assign_zero_entry2:                            ; preds = %entry
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %1, align 4
  store i32* %arraydecay, i32** %2, align 4
  store i32 0, i32* %3, align 4
  br label %bn_assign_zero_for.cond3

bn_assign_zero_for.cond3:                         ; preds = %bn_assign_zero_for.inc5, %bn_assign_zero_entry2
  %4 = load i32, i32* %3, align 4
  %5 = load i32, i32* %1, align 4
  %6 = icmp ult i32 %4, %5
  br i1 %6, label %bn_assign_zero_for.body4, label %bn_assign_zero_for.end6

bn_assign_zero_for.body4:                         ; preds = %bn_assign_zero_for.cond3
  %7 = load i32*, i32** %2, align 4
  %8 = load i32, i32* %3, align 4
  %9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 0, i32* %9, align 4
  br label %bn_assign_zero_for.inc5

bn_assign_zero_for.inc5:                          ; preds = %bn_assign_zero_for.body4
  %10 = load i32, i32* %3, align 4
  %11 = add i32 %10, 1
  store i32 %11, i32* %3, align 4
  br label %bn_assign_zero_for.cond3

bn_assign_zero_for.end6:                          ; preds = %bn_assign_zero_for.cond3
  br label %entry.split1

entry.split1:                                     ; preds = %bn_assign_zero_for.end6
  %12 = load i32, i32* %bdigits.addr, align 4
  %13 = load i32*, i32** %b.addr, align 4
  %arraydecay1 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_assign_entry

bn_assign_entry:                                  ; preds = %entry.split1
  %14 = alloca i32, align 4
  %15 = alloca i32*, align 4
  %16 = alloca i32*, align 4
  %17 = alloca i32, align 4
  store i32 %12, i32* %14, align 4
  store i32* %13, i32** %15, align 4
  store i32* %arraydecay1, i32** %16, align 4
  store i32 0, i32* %17, align 4
  br label %bn_assign_for.cond

bn_assign_for.cond:                               ; preds = %bn_assign_for.inc, %bn_assign_entry
  %18 = load i32, i32* %17, align 4
  %19 = load i32, i32* %14, align 4
  %20 = icmp ult i32 %18, %19
  br i1 %20, label %bn_assign_for.body, label %bn_assign_for.end

bn_assign_for.body:                               ; preds = %bn_assign_for.cond
  %21 = load i32*, i32** %15, align 4
  %22 = load i32, i32* %17, align 4
  %23 = getelementptr inbounds i32, i32* %21, i32 %22
  %24 = load i32, i32* %23, align 4
  %25 = load i32*, i32** %16, align 4
  %26 = load i32, i32* %17, align 4
  %27 = getelementptr inbounds i32, i32* %25, i32 %26
  store i32 %24, i32* %27, align 4
  br label %bn_assign_for.inc

bn_assign_for.inc:                                ; preds = %bn_assign_for.body
  %28 = load i32, i32* %17, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %17, align 4
  br label %bn_assign_for.cond

bn_assign_for.end:                                ; preds = %bn_assign_for.cond
  br label %entry.split

entry.split:                                      ; preds = %bn_assign_for.end
  %30 = load i32, i32* %adigits.addr, align 4
  %arraydecay2 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %31 = load i32*, i32** %a.addr, align 4
  %arraydecay3 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  call void @bn_gcd(i32* %arraydecay3, i32* %31, i32* %arraydecay2, i32 %30)
  %32 = load i32, i32* %adigits.addr, align 4
  %arraydecay4 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  br label %bn_assign_zero_entry

bn_assign_zero_entry:                             ; preds = %entry.split
  %33 = alloca i32, align 4
  %34 = alloca i32*, align 4
  %35 = alloca i32, align 4
  store i32 %32, i32* %33, align 4
  store i32* %arraydecay4, i32** %34, align 4
  store i32 0, i32* %35, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.cond:                          ; preds = %bn_assign_zero_for.inc, %bn_assign_zero_entry
  %36 = load i32, i32* %35, align 4
  %37 = load i32, i32* %33, align 4
  %38 = icmp ult i32 %36, %37
  br i1 %38, label %bn_assign_zero_for.body, label %bn_assign_zero_for.end

bn_assign_zero_for.body:                          ; preds = %bn_assign_zero_for.cond
  %39 = load i32*, i32** %34, align 4
  %40 = load i32, i32* %35, align 4
  %41 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 0, i32* %41, align 4
  br label %bn_assign_zero_for.inc

bn_assign_zero_for.inc:                           ; preds = %bn_assign_zero_for.body
  %42 = load i32, i32* %35, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %35, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.end:                           ; preds = %bn_assign_zero_for.cond
  br label %entry.split.split

entry.split.split:                                ; preds = %bn_assign_zero_for.end
  %arrayidx = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  store i32 1, i32* %arrayidx, align 4
  %44 = load i32, i32* %adigits.addr, align 4
  %arraydecay5 = getelementptr inbounds [65 x i32], [65 x i32]* %u, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_cmp_entry

bn_cmp_entry:                                     ; preds = %entry.split.split
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32*, align 4
  %48 = alloca i32*, align 4
  %49 = alloca i32, align 4
  store i32 %44, i32* %46, align 4
  store i32* %arraydecay5, i32** %47, align 4
  store i32* %arraydecay6, i32** %48, align 4
  %50 = load i32, i32* %46, align 4
  %51 = sub i32 %50, 1
  store i32 %51, i32* %49, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.cond:                                  ; preds = %bn_cmp_for.inc, %bn_cmp_entry
  %52 = load i32, i32* %49, align 4
  %53 = icmp sge i32 %52, 0
  br i1 %53, label %bn_cmp_for.body, label %bn_cmp_for.end

bn_cmp_for.body:                                  ; preds = %bn_cmp_for.cond
  %54 = load i32*, i32** %48, align 4
  %55 = load i32, i32* %49, align 4
  %56 = getelementptr inbounds i32, i32* %54, i32 %55
  %57 = load i32, i32* %56, align 4
  %58 = load i32*, i32** %47, align 4
  %59 = load i32, i32* %49, align 4
  %60 = getelementptr inbounds i32, i32* %58, i32 %59
  %61 = load i32, i32* %60, align 4
  %62 = icmp ugt i32 %57, %61
  br i1 %62, label %bn_cmp_if.then, label %bn_cmp_if.end

bn_cmp_if.then:                                   ; preds = %bn_cmp_for.body
  store i32 1, i32* %45, align 4
  br label %bn_cmp_return

bn_cmp_if.end:                                    ; preds = %bn_cmp_for.body
  %63 = load i32*, i32** %48, align 4
  %64 = load i32, i32* %49, align 4
  %65 = getelementptr inbounds i32, i32* %63, i32 %64
  %66 = load i32, i32* %65, align 4
  %67 = load i32*, i32** %47, align 4
  %68 = load i32, i32* %49, align 4
  %69 = getelementptr inbounds i32, i32* %67, i32 %68
  %70 = load i32, i32* %69, align 4
  %71 = icmp ult i32 %66, %70
  br i1 %71, label %bn_cmp_if.then6, label %bn_cmp_if.end7

bn_cmp_if.then6:                                  ; preds = %bn_cmp_if.end
  store i32 -1, i32* %45, align 4
  br label %bn_cmp_return

bn_cmp_if.end7:                                   ; preds = %bn_cmp_if.end
  br label %bn_cmp_for.inc

bn_cmp_for.inc:                                   ; preds = %bn_cmp_if.end7
  %72 = load i32, i32* %49, align 4
  %73 = add nsw i32 %72, -1
  store i32 %73, i32* %49, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.end:                                   ; preds = %bn_cmp_for.cond
  store i32 0, i32* %45, align 4
  br label %bn_cmp_return

bn_cmp_return:                                    ; preds = %bn_cmp_for.end, %bn_cmp_if.then6, %bn_cmp_if.then
  %74 = load i32, i32* %45, align 4
  br label %entry.split.split.split

entry.split.split.split:                          ; preds = %bn_cmp_return
  %tobool = icmp ne i32 %74, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %status, align 4
  %arraydecay7 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %75 = bitcast i32* %arraydecay7 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %75, i8 0, i32 260, i1 false)
  %76 = load i32, i32* %status, align 4
  ret i32 %76
}

; Function Attrs: noinline optnone
define dso_local i32 @rsa_public_encrypt(i8* %out, i32* %out_len, i8* %in, i32 %in_len, %struct.rsa_pk_t* %pk) #2 {
entry:
  %retval = alloca i32, align 4
  %pk.addr = alloca %struct.rsa_pk_t*, align 4
  %in_len.addr = alloca i32, align 4
  %in.addr = alloca i8*, align 4
  %out_len.addr = alloca i32*, align 4
  %out.addr = alloca i8*, align 4
  %status = alloca i32, align 4
  %byte = alloca i8, align 1
  %pkcs_block = alloca [256 x i8], align 1
  %i = alloca i32, align 4
  %modulus_len = alloca i32, align 4
  store %struct.rsa_pk_t* %pk, %struct.rsa_pk_t** %pk.addr, align 4
  store i32 %in_len, i32* %in_len.addr, align 4
  store i8* %in, i8** %in.addr, align 4
  store i32* %out_len, i32** %out_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %0, i32 0, i32 0
  %1 = load i32, i32* %bits, align 4
  %add = add i32 %1, 7
  %div = udiv i32 %add, 8
  store i32 %div, i32* %modulus_len, align 4
  %2 = load i32, i32* %in_len.addr, align 4
  %add1 = add i32 %2, 11
  %3 = load i32, i32* %modulus_len, align 4
  %cmp = icmp ugt i32 %add1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 4098, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  store i8 0, i8* %arrayidx, align 1
  %arrayidx2 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 1
  store i8 2, i8* %arrayidx2, align 1
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %modulus_len, align 4
  %6 = load i32, i32* %in_len.addr, align 4
  %sub = sub i32 %5, %6
  %sub3 = sub i32 %sub, 1
  %cmp4 = icmp ult i32 %4, %sub3
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %do.cond, %for.body
  call void @generate_rand(i8* %byte, i32 1)
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %7 = load i8, i8* %byte, align 1
  %conv = zext i8 %7 to i32
  %cmp5 = icmp eq i32 %conv, 0
  br i1 %cmp5, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %8 = load i8, i8* %byte, align 1
  %9 = load i32, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %9
  store i8 %8, i8* %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %10 = load i32, i32* %i, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %i, align 4
  %inc8 = add i32 %11, 1
  store i32 %inc8, i32* %i, align 4
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %11
  store i8 0, i8* %arrayidx9, align 1
  %12 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %12
  %13 = load i8*, i8** %in.addr, align 4
  %14 = load i32, i32* %in_len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arrayidx10, i8* align 1 %13, i32 %14, i1 false)
  %15 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %16 = load i32, i32* %modulus_len, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  %17 = load i32*, i32** %out_len.addr, align 4
  %18 = load i8*, i8** %out.addr, align 4
  %call = call i32 @public_block_operation(i8* %18, i32* %17, i8* %arraydecay, i32 %16, %struct.rsa_pk_t* %15)
  store i32 %call, i32* %status, align 4
  store i8 0, i8* %byte, align 1
  %arraydecay11 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay11, i8 0, i32 256, i1 false)
  %19 = load i32, i32* %status, align 4
  store i32 %19, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline optnone
define internal i32 @public_block_operation(i8* %out, i32* %out_len, i8* %in, i32 %in_len, %struct.rsa_pk_t* %pk) #2 {
entry:
  %retval = alloca i32, align 4
  %pk.addr = alloca %struct.rsa_pk_t*, align 4
  %in_len.addr = alloca i32, align 4
  %in.addr = alloca i8*, align 4
  %out_len.addr = alloca i32*, align 4
  %out.addr = alloca i8*, align 4
  %edigits = alloca i32, align 4
  %ndigits = alloca i32, align 4
  %c = alloca [65 x i32], align 4
  %e = alloca [65 x i32], align 4
  %m = alloca [65 x i32], align 4
  %n = alloca [65 x i32], align 4
  store %struct.rsa_pk_t* %pk, %struct.rsa_pk_t** %pk.addr, align 4
  store i32 %in_len, i32* %in_len.addr, align 4
  store i8* %in, i8** %in.addr, align 4
  store i32* %out_len, i32** %out_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i32, i32* %in_len.addr, align 4
  %1 = load i8*, i8** %in.addr, align 4
  %arraydecay = getelementptr inbounds [65 x i32], [65 x i32]* %m, i32 0, i32 0
  br label %bn_decode_entry22

bn_decode_entry22:                                ; preds = %entry
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* %1, i8** %3, align 4
  store i32 65, i32* %4, align 4
  store i32* %arraydecay, i32** %5, align 4
  store i32 0, i32* %8, align 4
  %10 = load i32, i32* %2, align 4
  %11 = sub i32 %10, 1
  store i32 %11, i32* %7, align 4
  br label %bn_decode_for.cond23

bn_decode_for.cond23:                             ; preds = %bn_decode_for.inc933, %bn_decode_entry22
  %12 = load i32, i32* %8, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %bn_decode_land.rhs24, label %bn_decode_land.end25

bn_decode_land.rhs24:                             ; preds = %bn_decode_for.cond23
  %15 = load i32, i32* %7, align 4
  %16 = icmp sge i32 %15, 0
  br label %bn_decode_land.end25

bn_decode_land.end25:                             ; preds = %bn_decode_land.rhs24, %bn_decode_for.cond23
  %17 = phi i1 [ false, %bn_decode_for.cond23 ], [ %16, %bn_decode_land.rhs24 ]
  br i1 %17, label %bn_decode_for.body26, label %bn_decode_for.end1034

bn_decode_for.body26:                             ; preds = %bn_decode_land.end25
  store i32 0, i32* %6, align 4
  store i32 0, i32* %9, align 4
  br label %bn_decode_for.cond227

bn_decode_for.cond227:                            ; preds = %bn_decode_for.inc31, %bn_decode_for.body26
  %18 = load i32, i32* %7, align 4
  %19 = icmp sge i32 %18, 0
  br i1 %19, label %bn_decode_land.rhs428, label %bn_decode_land.end629

bn_decode_land.rhs428:                            ; preds = %bn_decode_for.cond227
  %20 = load i32, i32* %9, align 4
  %21 = icmp ult i32 %20, 32
  br label %bn_decode_land.end629

bn_decode_land.end629:                            ; preds = %bn_decode_land.rhs428, %bn_decode_for.cond227
  %22 = phi i1 [ false, %bn_decode_for.cond227 ], [ %21, %bn_decode_land.rhs428 ]
  br i1 %22, label %bn_decode_for.body730, label %bn_decode_for.end32

bn_decode_for.body730:                            ; preds = %bn_decode_land.end629
  %23 = load i8*, i8** %3, align 4
  %24 = load i32, i32* %7, align 4
  %25 = getelementptr inbounds i8, i8* %23, i32 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = load i32, i32* %9, align 4
  %29 = shl i32 %27, %28
  %30 = load i32, i32* %6, align 4
  %31 = or i32 %30, %29
  store i32 %31, i32* %6, align 4
  br label %bn_decode_for.inc31

bn_decode_for.inc31:                              ; preds = %bn_decode_for.body730
  %32 = load i32, i32* %7, align 4
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %7, align 4
  %34 = load i32, i32* %9, align 4
  %35 = add i32 %34, 8
  store i32 %35, i32* %9, align 4
  br label %bn_decode_for.cond227

bn_decode_for.end32:                              ; preds = %bn_decode_land.end629
  %36 = load i32, i32* %6, align 4
  %37 = load i32*, i32** %5, align 4
  %38 = load i32, i32* %8, align 4
  %39 = getelementptr inbounds i32, i32* %37, i32 %38
  store i32 %36, i32* %39, align 4
  br label %bn_decode_for.inc933

bn_decode_for.inc933:                             ; preds = %bn_decode_for.end32
  %40 = load i32, i32* %8, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %8, align 4
  br label %bn_decode_for.cond23

bn_decode_for.end1034:                            ; preds = %bn_decode_land.end25
  br label %bn_decode_for.cond1135

bn_decode_for.cond1135:                           ; preds = %bn_decode_for.inc1637, %bn_decode_for.end1034
  %42 = load i32, i32* %8, align 4
  %43 = load i32, i32* %4, align 4
  %44 = icmp ult i32 %42, %43
  br i1 %44, label %bn_decode_for.body1436, label %bn_decode_for.end1838

bn_decode_for.body1436:                           ; preds = %bn_decode_for.cond1135
  %45 = load i32*, i32** %5, align 4
  %46 = load i32, i32* %8, align 4
  %47 = getelementptr inbounds i32, i32* %45, i32 %46
  store i32 0, i32* %47, align 4
  br label %bn_decode_for.inc1637

bn_decode_for.inc1637:                            ; preds = %bn_decode_for.body1436
  %48 = load i32, i32* %8, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %8, align 4
  br label %bn_decode_for.cond1135

bn_decode_for.end1838:                            ; preds = %bn_decode_for.cond1135
  br label %entry.split21

entry.split21:                                    ; preds = %bn_decode_for.end1838
  %50 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %modulus = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %50, i32 0, i32 1
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %modulus, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  br label %bn_decode_entry2

bn_decode_entry2:                                 ; preds = %entry.split21
  %51 = alloca i32, align 4
  %52 = alloca i8*, align 4
  %53 = alloca i32, align 4
  %54 = alloca i32*, align 4
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca i32, align 4
  store i32 256, i32* %51, align 4
  store i8* %arraydecay1, i8** %52, align 4
  store i32 65, i32* %53, align 4
  store i32* %arraydecay2, i32** %54, align 4
  store i32 0, i32* %57, align 4
  %59 = load i32, i32* %51, align 4
  %60 = sub i32 %59, 1
  store i32 %60, i32* %56, align 4
  br label %bn_decode_for.cond3

bn_decode_for.cond3:                              ; preds = %bn_decode_for.inc915, %bn_decode_entry2
  %61 = load i32, i32* %57, align 4
  %62 = load i32, i32* %53, align 4
  %63 = icmp ult i32 %61, %62
  br i1 %63, label %bn_decode_land.rhs5, label %bn_decode_land.end7

bn_decode_land.rhs5:                              ; preds = %bn_decode_for.cond3
  %64 = load i32, i32* %56, align 4
  %65 = icmp sge i32 %64, 0
  br label %bn_decode_land.end7

bn_decode_land.end7:                              ; preds = %bn_decode_land.rhs5, %bn_decode_for.cond3
  %66 = phi i1 [ false, %bn_decode_for.cond3 ], [ %65, %bn_decode_land.rhs5 ]
  br i1 %66, label %bn_decode_for.body8, label %bn_decode_for.end1016

bn_decode_for.body8:                              ; preds = %bn_decode_land.end7
  store i32 0, i32* %55, align 4
  store i32 0, i32* %58, align 4
  br label %bn_decode_for.cond29

bn_decode_for.cond29:                             ; preds = %bn_decode_for.inc13, %bn_decode_for.body8
  %67 = load i32, i32* %56, align 4
  %68 = icmp sge i32 %67, 0
  br i1 %68, label %bn_decode_land.rhs410, label %bn_decode_land.end611

bn_decode_land.rhs410:                            ; preds = %bn_decode_for.cond29
  %69 = load i32, i32* %58, align 4
  %70 = icmp ult i32 %69, 32
  br label %bn_decode_land.end611

bn_decode_land.end611:                            ; preds = %bn_decode_land.rhs410, %bn_decode_for.cond29
  %71 = phi i1 [ false, %bn_decode_for.cond29 ], [ %70, %bn_decode_land.rhs410 ]
  br i1 %71, label %bn_decode_for.body712, label %bn_decode_for.end14

bn_decode_for.body712:                            ; preds = %bn_decode_land.end611
  %72 = load i8*, i8** %52, align 4
  %73 = load i32, i32* %56, align 4
  %74 = getelementptr inbounds i8, i8* %72, i32 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = load i32, i32* %58, align 4
  %78 = shl i32 %76, %77
  %79 = load i32, i32* %55, align 4
  %80 = or i32 %79, %78
  store i32 %80, i32* %55, align 4
  br label %bn_decode_for.inc13

bn_decode_for.inc13:                              ; preds = %bn_decode_for.body712
  %81 = load i32, i32* %56, align 4
  %82 = add nsw i32 %81, -1
  store i32 %82, i32* %56, align 4
  %83 = load i32, i32* %58, align 4
  %84 = add i32 %83, 8
  store i32 %84, i32* %58, align 4
  br label %bn_decode_for.cond29

bn_decode_for.end14:                              ; preds = %bn_decode_land.end611
  %85 = load i32, i32* %55, align 4
  %86 = load i32*, i32** %54, align 4
  %87 = load i32, i32* %57, align 4
  %88 = getelementptr inbounds i32, i32* %86, i32 %87
  store i32 %85, i32* %88, align 4
  br label %bn_decode_for.inc915

bn_decode_for.inc915:                             ; preds = %bn_decode_for.end14
  %89 = load i32, i32* %57, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %57, align 4
  br label %bn_decode_for.cond3

bn_decode_for.end1016:                            ; preds = %bn_decode_land.end7
  br label %bn_decode_for.cond1117

bn_decode_for.cond1117:                           ; preds = %bn_decode_for.inc1619, %bn_decode_for.end1016
  %91 = load i32, i32* %57, align 4
  %92 = load i32, i32* %53, align 4
  %93 = icmp ult i32 %91, %92
  br i1 %93, label %bn_decode_for.body1418, label %bn_decode_for.end1820

bn_decode_for.body1418:                           ; preds = %bn_decode_for.cond1117
  %94 = load i32*, i32** %54, align 4
  %95 = load i32, i32* %57, align 4
  %96 = getelementptr inbounds i32, i32* %94, i32 %95
  store i32 0, i32* %96, align 4
  br label %bn_decode_for.inc1619

bn_decode_for.inc1619:                            ; preds = %bn_decode_for.body1418
  %97 = load i32, i32* %57, align 4
  %98 = add i32 %97, 1
  store i32 %98, i32* %57, align 4
  br label %bn_decode_for.cond1117

bn_decode_for.end1820:                            ; preds = %bn_decode_for.cond1117
  br label %entry.split1

entry.split1:                                     ; preds = %bn_decode_for.end1820
  %99 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %exponent = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %99, i32 0, i32 2
  %arraydecay3 = getelementptr inbounds [256 x i8], [256 x i8]* %exponent, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  br label %bn_decode_entry

bn_decode_entry:                                  ; preds = %entry.split1
  %100 = alloca i32, align 4
  %101 = alloca i8*, align 4
  %102 = alloca i32, align 4
  %103 = alloca i32*, align 4
  %104 = alloca i32, align 4
  %105 = alloca i32, align 4
  %106 = alloca i32, align 4
  %107 = alloca i32, align 4
  store i32 256, i32* %100, align 4
  store i8* %arraydecay3, i8** %101, align 4
  store i32 65, i32* %102, align 4
  store i32* %arraydecay4, i32** %103, align 4
  store i32 0, i32* %106, align 4
  %108 = load i32, i32* %100, align 4
  %109 = sub i32 %108, 1
  store i32 %109, i32* %105, align 4
  br label %bn_decode_for.cond

bn_decode_for.cond:                               ; preds = %bn_decode_for.inc9, %bn_decode_entry
  %110 = load i32, i32* %106, align 4
  %111 = load i32, i32* %102, align 4
  %112 = icmp ult i32 %110, %111
  br i1 %112, label %bn_decode_land.rhs, label %bn_decode_land.end

bn_decode_land.rhs:                               ; preds = %bn_decode_for.cond
  %113 = load i32, i32* %105, align 4
  %114 = icmp sge i32 %113, 0
  br label %bn_decode_land.end

bn_decode_land.end:                               ; preds = %bn_decode_land.rhs, %bn_decode_for.cond
  %115 = phi i1 [ false, %bn_decode_for.cond ], [ %114, %bn_decode_land.rhs ]
  br i1 %115, label %bn_decode_for.body, label %bn_decode_for.end10

bn_decode_for.body:                               ; preds = %bn_decode_land.end
  store i32 0, i32* %104, align 4
  store i32 0, i32* %107, align 4
  br label %bn_decode_for.cond2

bn_decode_for.cond2:                              ; preds = %bn_decode_for.inc, %bn_decode_for.body
  %116 = load i32, i32* %105, align 4
  %117 = icmp sge i32 %116, 0
  br i1 %117, label %bn_decode_land.rhs4, label %bn_decode_land.end6

bn_decode_land.rhs4:                              ; preds = %bn_decode_for.cond2
  %118 = load i32, i32* %107, align 4
  %119 = icmp ult i32 %118, 32
  br label %bn_decode_land.end6

bn_decode_land.end6:                              ; preds = %bn_decode_land.rhs4, %bn_decode_for.cond2
  %120 = phi i1 [ false, %bn_decode_for.cond2 ], [ %119, %bn_decode_land.rhs4 ]
  br i1 %120, label %bn_decode_for.body7, label %bn_decode_for.end

bn_decode_for.body7:                              ; preds = %bn_decode_land.end6
  %121 = load i8*, i8** %101, align 4
  %122 = load i32, i32* %105, align 4
  %123 = getelementptr inbounds i8, i8* %121, i32 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = load i32, i32* %107, align 4
  %127 = shl i32 %125, %126
  %128 = load i32, i32* %104, align 4
  %129 = or i32 %128, %127
  store i32 %129, i32* %104, align 4
  br label %bn_decode_for.inc

bn_decode_for.inc:                                ; preds = %bn_decode_for.body7
  %130 = load i32, i32* %105, align 4
  %131 = add nsw i32 %130, -1
  store i32 %131, i32* %105, align 4
  %132 = load i32, i32* %107, align 4
  %133 = add i32 %132, 8
  store i32 %133, i32* %107, align 4
  br label %bn_decode_for.cond2

bn_decode_for.end:                                ; preds = %bn_decode_land.end6
  %134 = load i32, i32* %104, align 4
  %135 = load i32*, i32** %103, align 4
  %136 = load i32, i32* %106, align 4
  %137 = getelementptr inbounds i32, i32* %135, i32 %136
  store i32 %134, i32* %137, align 4
  br label %bn_decode_for.inc9

bn_decode_for.inc9:                               ; preds = %bn_decode_for.end
  %138 = load i32, i32* %106, align 4
  %139 = add i32 %138, 1
  store i32 %139, i32* %106, align 4
  br label %bn_decode_for.cond

bn_decode_for.end10:                              ; preds = %bn_decode_land.end
  br label %bn_decode_for.cond11

bn_decode_for.cond11:                             ; preds = %bn_decode_for.inc16, %bn_decode_for.end10
  %140 = load i32, i32* %106, align 4
  %141 = load i32, i32* %102, align 4
  %142 = icmp ult i32 %140, %141
  br i1 %142, label %bn_decode_for.body14, label %bn_decode_for.end18

bn_decode_for.body14:                             ; preds = %bn_decode_for.cond11
  %143 = load i32*, i32** %103, align 4
  %144 = load i32, i32* %106, align 4
  %145 = getelementptr inbounds i32, i32* %143, i32 %144
  store i32 0, i32* %145, align 4
  br label %bn_decode_for.inc16

bn_decode_for.inc16:                              ; preds = %bn_decode_for.body14
  %146 = load i32, i32* %106, align 4
  %147 = add i32 %146, 1
  store i32 %147, i32* %106, align 4
  br label %bn_decode_for.cond11

bn_decode_for.end18:                              ; preds = %bn_decode_for.cond11
  br label %entry.split

entry.split:                                      ; preds = %bn_decode_for.end18
  %arraydecay5 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  br label %bn_digits_entry40

bn_digits_entry40:                                ; preds = %entry.split
  %148 = alloca i32, align 4
  %149 = alloca i32*, align 4
  %150 = alloca i32, align 4
  store i32 65, i32* %148, align 4
  store i32* %arraydecay5, i32** %149, align 4
  %151 = load i32, i32* %148, align 4
  %152 = sub i32 %151, 1
  store i32 %152, i32* %150, align 4
  br label %bn_digits_for.cond41

bn_digits_for.cond41:                             ; preds = %bn_digits_for.inc45, %bn_digits_entry40
  %153 = load i32, i32* %150, align 4
  %154 = icmp sge i32 %153, 0
  br i1 %154, label %bn_digits_for.body42, label %bn_digits_for.end46

bn_digits_for.body42:                             ; preds = %bn_digits_for.cond41
  %155 = load i32*, i32** %149, align 4
  %156 = load i32, i32* %150, align 4
  %157 = getelementptr inbounds i32, i32* %155, i32 %156
  %158 = load i32, i32* %157, align 4
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %bn_digits_if.then43, label %bn_digits_if.end44

bn_digits_if.then43:                              ; preds = %bn_digits_for.body42
  br label %bn_digits_for.end46

bn_digits_if.end44:                               ; preds = %bn_digits_for.body42
  br label %bn_digits_for.inc45

bn_digits_for.inc45:                              ; preds = %bn_digits_if.end44
  %160 = load i32, i32* %150, align 4
  %161 = add nsw i32 %160, -1
  store i32 %161, i32* %150, align 4
  br label %bn_digits_for.cond41

bn_digits_for.end46:                              ; preds = %bn_digits_if.then43, %bn_digits_for.cond41
  %162 = load i32, i32* %150, align 4
  %163 = add nsw i32 %162, 1
  br label %entry.split.split39

entry.split.split39:                              ; preds = %bn_digits_for.end46
  store i32 %163, i32* %ndigits, align 4
  %arraydecay6 = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  br label %bn_digits_entry

bn_digits_entry:                                  ; preds = %entry.split.split39
  %164 = alloca i32, align 4
  %165 = alloca i32*, align 4
  %166 = alloca i32, align 4
  store i32 65, i32* %164, align 4
  store i32* %arraydecay6, i32** %165, align 4
  %167 = load i32, i32* %164, align 4
  %168 = sub i32 %167, 1
  store i32 %168, i32* %166, align 4
  br label %bn_digits_for.cond

bn_digits_for.cond:                               ; preds = %bn_digits_for.inc, %bn_digits_entry
  %169 = load i32, i32* %166, align 4
  %170 = icmp sge i32 %169, 0
  br i1 %170, label %bn_digits_for.body, label %bn_digits_for.end

bn_digits_for.body:                               ; preds = %bn_digits_for.cond
  %171 = load i32*, i32** %165, align 4
  %172 = load i32, i32* %166, align 4
  %173 = getelementptr inbounds i32, i32* %171, i32 %172
  %174 = load i32, i32* %173, align 4
  %175 = icmp ne i32 %174, 0
  br i1 %175, label %bn_digits_if.then, label %bn_digits_if.end

bn_digits_if.then:                                ; preds = %bn_digits_for.body
  br label %bn_digits_for.end

bn_digits_if.end:                                 ; preds = %bn_digits_for.body
  br label %bn_digits_for.inc

bn_digits_for.inc:                                ; preds = %bn_digits_if.end
  %176 = load i32, i32* %166, align 4
  %177 = add nsw i32 %176, -1
  store i32 %177, i32* %166, align 4
  br label %bn_digits_for.cond

bn_digits_for.end:                                ; preds = %bn_digits_if.then, %bn_digits_for.cond
  %178 = load i32, i32* %166, align 4
  %179 = add nsw i32 %178, 1
  br label %entry.split.split

entry.split.split:                                ; preds = %bn_digits_for.end
  store i32 %179, i32* %edigits, align 4
  %180 = load i32, i32* %ndigits, align 4
  %arraydecay8 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  %arraydecay9 = getelementptr inbounds [65 x i32], [65 x i32]* %m, i32 0, i32 0
  br label %bn_cmp_entry

bn_cmp_entry:                                     ; preds = %entry.split.split
  %181 = alloca i32, align 4
  %182 = alloca i32, align 4
  %183 = alloca i32*, align 4
  %184 = alloca i32*, align 4
  %185 = alloca i32, align 4
  store i32 %180, i32* %182, align 4
  store i32* %arraydecay8, i32** %183, align 4
  store i32* %arraydecay9, i32** %184, align 4
  %186 = load i32, i32* %182, align 4
  %187 = sub i32 %186, 1
  store i32 %187, i32* %185, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.cond:                                  ; preds = %bn_cmp_for.inc, %bn_cmp_entry
  %188 = load i32, i32* %185, align 4
  %189 = icmp sge i32 %188, 0
  br i1 %189, label %bn_cmp_for.body, label %bn_cmp_for.end

bn_cmp_for.body:                                  ; preds = %bn_cmp_for.cond
  %190 = load i32*, i32** %184, align 4
  %191 = load i32, i32* %185, align 4
  %192 = getelementptr inbounds i32, i32* %190, i32 %191
  %193 = load i32, i32* %192, align 4
  %194 = load i32*, i32** %183, align 4
  %195 = load i32, i32* %185, align 4
  %196 = getelementptr inbounds i32, i32* %194, i32 %195
  %197 = load i32, i32* %196, align 4
  %198 = icmp ugt i32 %193, %197
  br i1 %198, label %bn_cmp_if.then, label %bn_cmp_if.end

bn_cmp_if.then:                                   ; preds = %bn_cmp_for.body
  store i32 1, i32* %181, align 4
  br label %bn_cmp_return

bn_cmp_if.end:                                    ; preds = %bn_cmp_for.body
  %199 = load i32*, i32** %184, align 4
  %200 = load i32, i32* %185, align 4
  %201 = getelementptr inbounds i32, i32* %199, i32 %200
  %202 = load i32, i32* %201, align 4
  %203 = load i32*, i32** %183, align 4
  %204 = load i32, i32* %185, align 4
  %205 = getelementptr inbounds i32, i32* %203, i32 %204
  %206 = load i32, i32* %205, align 4
  %207 = icmp ult i32 %202, %206
  br i1 %207, label %bn_cmp_if.then6, label %bn_cmp_if.end7

bn_cmp_if.then6:                                  ; preds = %bn_cmp_if.end
  store i32 -1, i32* %181, align 4
  br label %bn_cmp_return

bn_cmp_if.end7:                                   ; preds = %bn_cmp_if.end
  br label %bn_cmp_for.inc

bn_cmp_for.inc:                                   ; preds = %bn_cmp_if.end7
  %208 = load i32, i32* %185, align 4
  %209 = add nsw i32 %208, -1
  store i32 %209, i32* %185, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.end:                                   ; preds = %bn_cmp_for.cond
  store i32 0, i32* %181, align 4
  br label %bn_cmp_return

bn_cmp_return:                                    ; preds = %bn_cmp_for.end, %bn_cmp_if.then6, %bn_cmp_if.then
  %210 = load i32, i32* %181, align 4
  br label %entry.split.split.split

entry.split.split.split:                          ; preds = %bn_cmp_return
  %cmp = icmp sge i32 %210, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry.split.split.split
  store i32 4097, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry.split.split.split
  %211 = load i32, i32* %ndigits, align 4
  %arraydecay11 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  %212 = load i32, i32* %edigits, align 4
  %arraydecay12 = getelementptr inbounds [65 x i32], [65 x i32]* %e, i32 0, i32 0
  %arraydecay13 = getelementptr inbounds [65 x i32], [65 x i32]* %m, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  br label %bn_mod_exp_entry

bn_mod_exp_entry:                                 ; preds = %if.end
  %213 = alloca i32, align 4
  %214 = alloca i32*, align 4
  %215 = alloca i32, align 4
  %216 = alloca i32*, align 4
  %217 = alloca i32*, align 4
  %218 = alloca i32*, align 4
  %219 = alloca [3 x [65 x i32]], align 4
  %220 = alloca i32, align 4
  %221 = alloca [65 x i32], align 4
  %222 = alloca i32, align 4
  %223 = alloca i32, align 4
  %224 = alloca i32, align 4
  %225 = alloca i32, align 4
  store i32 %211, i32* %213, align 4
  store i32* %arraydecay11, i32** %214, align 4
  store i32 %212, i32* %215, align 4
  store i32* %arraydecay12, i32** %216, align 4
  store i32* %arraydecay13, i32** %217, align 4
  store i32* %arraydecay14, i32** %218, align 4
  %226 = load i32, i32* %213, align 4
  %227 = load i32*, i32** %217, align 4
  %228 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %219, i32 0, i32 0
  %229 = getelementptr inbounds [65 x i32], [65 x i32]* %228, i32 0, i32 0
  br label %bn_mod_exp_bn_assign_entry1

bn_mod_exp_bn_assign_entry1:                      ; preds = %bn_mod_exp_entry
  %230 = alloca i32, align 4
  %231 = alloca i32*, align 4
  %232 = alloca i32*, align 4
  %233 = alloca i32, align 4
  store i32 %226, i32* %230, align 4
  store i32* %227, i32** %231, align 4
  store i32* %229, i32** %232, align 4
  store i32 0, i32* %233, align 4
  br label %bn_mod_exp_bn_assign_for.cond2

bn_mod_exp_bn_assign_for.cond2:                   ; preds = %bn_mod_exp_bn_assign_for.inc4, %bn_mod_exp_bn_assign_entry1
  %234 = load i32, i32* %233, align 4
  %235 = load i32, i32* %230, align 4
  %236 = icmp ult i32 %234, %235
  br i1 %236, label %bn_mod_exp_bn_assign_for.body3, label %bn_mod_exp_bn_assign_for.end5

bn_mod_exp_bn_assign_for.body3:                   ; preds = %bn_mod_exp_bn_assign_for.cond2
  %237 = load i32*, i32** %231, align 4
  %238 = load i32, i32* %233, align 4
  %239 = getelementptr inbounds i32, i32* %237, i32 %238
  %240 = load i32, i32* %239, align 4
  %241 = load i32*, i32** %232, align 4
  %242 = load i32, i32* %233, align 4
  %243 = getelementptr inbounds i32, i32* %241, i32 %242
  store i32 %240, i32* %243, align 4
  br label %bn_mod_exp_bn_assign_for.inc4

bn_mod_exp_bn_assign_for.inc4:                    ; preds = %bn_mod_exp_bn_assign_for.body3
  %244 = load i32, i32* %233, align 4
  %245 = add i32 %244, 1
  store i32 %245, i32* %233, align 4
  br label %bn_mod_exp_bn_assign_for.cond2

bn_mod_exp_bn_assign_for.end5:                    ; preds = %bn_mod_exp_bn_assign_for.cond2
  br label %bn_mod_exp_entry.split

bn_mod_exp_entry.split:                           ; preds = %bn_mod_exp_bn_assign_for.end5
  %246 = load i32, i32* %213, align 4
  %247 = load i32*, i32** %214, align 4
  %248 = load i32*, i32** %217, align 4
  %249 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %219, i32 0, i32 0
  %250 = getelementptr inbounds [65 x i32], [65 x i32]* %249, i32 0, i32 0
  %251 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %219, i32 0, i32 1
  %252 = getelementptr inbounds [65 x i32], [65 x i32]* %251, i32 0, i32 0
  call void @bn_mod_mul(i32* %252, i32* %250, i32* %248, i32* %247, i32 %246)
  %253 = load i32, i32* %213, align 4
  %254 = load i32*, i32** %214, align 4
  %255 = load i32*, i32** %217, align 4
  %256 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %219, i32 0, i32 1
  %257 = getelementptr inbounds [65 x i32], [65 x i32]* %256, i32 0, i32 0
  %258 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %219, i32 0, i32 2
  %259 = getelementptr inbounds [65 x i32], [65 x i32]* %258, i32 0, i32 0
  call void @bn_mod_mul(i32* %259, i32* %257, i32* %255, i32* %254, i32 %253)
  %260 = load i32, i32* %213, align 4
  %261 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  br label %bn_mod_exp_bn_assign_zero_entry

bn_mod_exp_bn_assign_zero_entry:                  ; preds = %bn_mod_exp_entry.split
  %262 = alloca i32, align 4
  %263 = alloca i32*, align 4
  %264 = alloca i32, align 4
  store i32 %260, i32* %262, align 4
  store i32* %261, i32** %263, align 4
  store i32 0, i32* %264, align 4
  br label %bn_mod_exp_bn_assign_zero_for.cond

bn_mod_exp_bn_assign_zero_for.cond:               ; preds = %bn_mod_exp_bn_assign_zero_for.inc, %bn_mod_exp_bn_assign_zero_entry
  %265 = load i32, i32* %264, align 4
  %266 = load i32, i32* %262, align 4
  %267 = icmp ult i32 %265, %266
  br i1 %267, label %bn_mod_exp_bn_assign_zero_for.body, label %bn_mod_exp_bn_assign_zero_for.end

bn_mod_exp_bn_assign_zero_for.body:               ; preds = %bn_mod_exp_bn_assign_zero_for.cond
  %268 = load i32*, i32** %263, align 4
  %269 = load i32, i32* %264, align 4
  %270 = getelementptr inbounds i32, i32* %268, i32 %269
  store i32 0, i32* %270, align 4
  br label %bn_mod_exp_bn_assign_zero_for.inc

bn_mod_exp_bn_assign_zero_for.inc:                ; preds = %bn_mod_exp_bn_assign_zero_for.body
  %271 = load i32, i32* %264, align 4
  %272 = add i32 %271, 1
  store i32 %272, i32* %264, align 4
  br label %bn_mod_exp_bn_assign_zero_for.cond

bn_mod_exp_bn_assign_zero_for.end:                ; preds = %bn_mod_exp_bn_assign_zero_for.cond
  br label %bn_mod_exp_entry.split.split

bn_mod_exp_entry.split.split:                     ; preds = %bn_mod_exp_bn_assign_zero_for.end
  %273 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  store i32 1, i32* %273, align 4
  %274 = load i32, i32* %215, align 4
  %275 = load i32*, i32** %216, align 4
  br label %bn_mod_exp_bn_digits_entry

bn_mod_exp_bn_digits_entry:                       ; preds = %bn_mod_exp_entry.split.split
  %276 = alloca i32, align 4
  %277 = alloca i32*, align 4
  %278 = alloca i32, align 4
  store i32 %274, i32* %276, align 4
  store i32* %275, i32** %277, align 4
  %279 = load i32, i32* %276, align 4
  %280 = sub i32 %279, 1
  store i32 %280, i32* %278, align 4
  br label %bn_mod_exp_bn_digits_for.cond

bn_mod_exp_bn_digits_for.cond:                    ; preds = %bn_mod_exp_bn_digits_for.inc, %bn_mod_exp_bn_digits_entry
  %281 = load i32, i32* %278, align 4
  %282 = icmp sge i32 %281, 0
  br i1 %282, label %bn_mod_exp_bn_digits_for.body, label %bn_mod_exp_bn_digits_for.end

bn_mod_exp_bn_digits_for.body:                    ; preds = %bn_mod_exp_bn_digits_for.cond
  %283 = load i32*, i32** %277, align 4
  %284 = load i32, i32* %278, align 4
  %285 = getelementptr inbounds i32, i32* %283, i32 %284
  %286 = load i32, i32* %285, align 4
  %287 = icmp ne i32 %286, 0
  br i1 %287, label %bn_mod_exp_bn_digits_if.then, label %bn_mod_exp_bn_digits_if.end

bn_mod_exp_bn_digits_if.then:                     ; preds = %bn_mod_exp_bn_digits_for.body
  br label %bn_mod_exp_bn_digits_for.end

bn_mod_exp_bn_digits_if.end:                      ; preds = %bn_mod_exp_bn_digits_for.body
  br label %bn_mod_exp_bn_digits_for.inc

bn_mod_exp_bn_digits_for.inc:                     ; preds = %bn_mod_exp_bn_digits_if.end
  %288 = load i32, i32* %278, align 4
  %289 = add nsw i32 %288, -1
  store i32 %289, i32* %278, align 4
  br label %bn_mod_exp_bn_digits_for.cond

bn_mod_exp_bn_digits_for.end:                     ; preds = %bn_mod_exp_bn_digits_if.then, %bn_mod_exp_bn_digits_for.cond
  %290 = load i32, i32* %278, align 4
  %291 = add nsw i32 %290, 1
  br label %bn_mod_exp_entry.split.split.split

bn_mod_exp_entry.split.split.split:               ; preds = %bn_mod_exp_bn_digits_for.end
  store i32 %291, i32* %215, align 4
  %292 = load i32, i32* %215, align 4
  %293 = sub i32 %292, 1
  store i32 %293, i32* %222, align 4
  br label %bn_mod_exp_for.cond

bn_mod_exp_for.cond:                              ; preds = %bn_mod_exp_for.inc35, %bn_mod_exp_entry.split.split.split
  %294 = load i32, i32* %222, align 4
  %295 = icmp sge i32 %294, 0
  br i1 %295, label %bn_mod_exp_for.body, label %bn_mod_exp_for.end36

bn_mod_exp_for.body:                              ; preds = %bn_mod_exp_for.cond
  %296 = load i32*, i32** %216, align 4
  %297 = load i32, i32* %222, align 4
  %298 = getelementptr inbounds i32, i32* %296, i32 %297
  %299 = load i32, i32* %298, align 4
  store i32 %299, i32* %220, align 4
  store i32 32, i32* %223, align 4
  %300 = load i32, i32* %222, align 4
  %301 = load i32, i32* %215, align 4
  %302 = sub i32 %301, 1
  %303 = icmp eq i32 %300, %302
  br i1 %303, label %bn_mod_exp_if.then, label %bn_mod_exp_if.end

bn_mod_exp_if.then:                               ; preds = %bn_mod_exp_for.body
  br label %bn_mod_exp_while.cond

bn_mod_exp_while.cond:                            ; preds = %bn_mod_exp_while.body, %bn_mod_exp_if.then
  %304 = load i32, i32* %220, align 4
  %305 = lshr i32 %304, 30
  %306 = and i32 %305, 3
  %307 = icmp ne i32 %306, 0
  %308 = xor i1 %307, true
  br i1 %308, label %bn_mod_exp_while.body, label %bn_mod_exp_while.end

bn_mod_exp_while.body:                            ; preds = %bn_mod_exp_while.cond
  %309 = load i32, i32* %220, align 4
  %310 = shl i32 %309, 2
  store i32 %310, i32* %220, align 4
  %311 = load i32, i32* %223, align 4
  %312 = sub i32 %311, 2
  store i32 %312, i32* %223, align 4
  br label %bn_mod_exp_while.cond

bn_mod_exp_while.end:                             ; preds = %bn_mod_exp_while.cond
  br label %bn_mod_exp_if.end

bn_mod_exp_if.end:                                ; preds = %bn_mod_exp_while.end, %bn_mod_exp_for.body
  store i32 0, i32* %224, align 4
  br label %bn_mod_exp_for.cond15

bn_mod_exp_for.cond15:                            ; preds = %bn_mod_exp_for.inc, %bn_mod_exp_if.end
  %313 = load i32, i32* %224, align 4
  %314 = load i32, i32* %223, align 4
  %315 = icmp ult i32 %313, %314
  br i1 %315, label %bn_mod_exp_for.body17, label %bn_mod_exp_for.end

bn_mod_exp_for.body17:                            ; preds = %bn_mod_exp_for.cond15
  %316 = load i32, i32* %213, align 4
  %317 = load i32*, i32** %214, align 4
  %318 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  %319 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  %320 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  call void @bn_mod_mul(i32* %320, i32* %319, i32* %318, i32* %317, i32 %316)
  %321 = load i32, i32* %213, align 4
  %322 = load i32*, i32** %214, align 4
  %323 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  %324 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  %325 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  call void @bn_mod_mul(i32* %325, i32* %324, i32* %323, i32* %322, i32 %321)
  %326 = load i32, i32* %220, align 4
  %327 = lshr i32 %326, 30
  %328 = and i32 %327, 3
  store i32 %328, i32* %225, align 4
  %329 = icmp ne i32 %328, 0
  br i1 %329, label %bn_mod_exp_if.then27, label %bn_mod_exp_if.end33

bn_mod_exp_if.then27:                             ; preds = %bn_mod_exp_for.body17
  %330 = load i32, i32* %213, align 4
  %331 = load i32*, i32** %214, align 4
  %332 = load i32, i32* %225, align 4
  %333 = sub i32 %332, 1
  %334 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %219, i32 0, i32 %333
  %335 = getelementptr inbounds [65 x i32], [65 x i32]* %334, i32 0, i32 0
  %336 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  %337 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  call void @bn_mod_mul(i32* %337, i32* %336, i32* %335, i32* %331, i32 %330)
  br label %bn_mod_exp_if.end33

bn_mod_exp_if.end33:                              ; preds = %bn_mod_exp_if.then27, %bn_mod_exp_for.body17
  %338 = load i32, i32* %220, align 4
  %339 = shl i32 %338, 2
  store i32 %339, i32* %220, align 4
  br label %bn_mod_exp_for.inc

bn_mod_exp_for.inc:                               ; preds = %bn_mod_exp_if.end33
  %340 = load i32, i32* %224, align 4
  %341 = add i32 %340, 2
  store i32 %341, i32* %224, align 4
  br label %bn_mod_exp_for.cond15

bn_mod_exp_for.end:                               ; preds = %bn_mod_exp_for.cond15
  br label %bn_mod_exp_for.inc35

bn_mod_exp_for.inc35:                             ; preds = %bn_mod_exp_for.end
  %342 = load i32, i32* %222, align 4
  %343 = add nsw i32 %342, -1
  store i32 %343, i32* %222, align 4
  br label %bn_mod_exp_for.cond

bn_mod_exp_for.end36:                             ; preds = %bn_mod_exp_for.cond
  %344 = load i32, i32* %213, align 4
  %345 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  %346 = load i32*, i32** %218, align 4
  br label %bn_mod_exp_bn_assign_entry

bn_mod_exp_bn_assign_entry:                       ; preds = %bn_mod_exp_for.end36
  %347 = alloca i32, align 4
  %348 = alloca i32*, align 4
  %349 = alloca i32*, align 4
  %350 = alloca i32, align 4
  store i32 %344, i32* %347, align 4
  store i32* %345, i32** %348, align 4
  store i32* %346, i32** %349, align 4
  store i32 0, i32* %350, align 4
  br label %bn_mod_exp_bn_assign_for.cond

bn_mod_exp_bn_assign_for.cond:                    ; preds = %bn_mod_exp_bn_assign_for.inc, %bn_mod_exp_bn_assign_entry
  %351 = load i32, i32* %350, align 4
  %352 = load i32, i32* %347, align 4
  %353 = icmp ult i32 %351, %352
  br i1 %353, label %bn_mod_exp_bn_assign_for.body, label %bn_mod_exp_bn_assign_for.end

bn_mod_exp_bn_assign_for.body:                    ; preds = %bn_mod_exp_bn_assign_for.cond
  %354 = load i32*, i32** %348, align 4
  %355 = load i32, i32* %350, align 4
  %356 = getelementptr inbounds i32, i32* %354, i32 %355
  %357 = load i32, i32* %356, align 4
  %358 = load i32*, i32** %349, align 4
  %359 = load i32, i32* %350, align 4
  %360 = getelementptr inbounds i32, i32* %358, i32 %359
  store i32 %357, i32* %360, align 4
  br label %bn_mod_exp_bn_assign_for.inc

bn_mod_exp_bn_assign_for.inc:                     ; preds = %bn_mod_exp_bn_assign_for.body
  %361 = load i32, i32* %350, align 4
  %362 = add i32 %361, 1
  store i32 %362, i32* %350, align 4
  br label %bn_mod_exp_bn_assign_for.cond

bn_mod_exp_bn_assign_for.end:                     ; preds = %bn_mod_exp_bn_assign_for.cond
  br label %bn_mod_exp_for.end36.split

bn_mod_exp_for.end36.split:                       ; preds = %bn_mod_exp_bn_assign_for.end
  %363 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %219, i32 0, i32 0
  %364 = bitcast [65 x i32]* %363 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %364, i8 0, i32 780, i1 false)
  %365 = getelementptr inbounds [65 x i32], [65 x i32]* %221, i32 0, i32 0
  %366 = bitcast i32* %365 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %366, i8 0, i32 260, i1 false)
  br label %if.end.split47

if.end.split47:                                   ; preds = %bn_mod_exp_for.end36.split
  %367 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %367, i32 0, i32 0
  %368 = load i32, i32* %bits, align 4
  %add = add i32 %368, 7
  %div = udiv i32 %add, 8
  %369 = load i32*, i32** %out_len.addr, align 4
  store i32 %div, i32* %369, align 4
  %370 = load i32, i32* %ndigits, align 4
  %arraydecay15 = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  %371 = load i32*, i32** %out_len.addr, align 4
  %372 = load i32, i32* %371, align 4
  %373 = load i8*, i8** %out.addr, align 4
  br label %bn_encode_entry

bn_encode_entry:                                  ; preds = %if.end.split47
  %374 = alloca i32, align 4
  %375 = alloca i32*, align 4
  %376 = alloca i32, align 4
  %377 = alloca i8*, align 4
  %378 = alloca i32, align 4
  %379 = alloca i32, align 4
  %380 = alloca i32, align 4
  %381 = alloca i32, align 4
  store i32 %370, i32* %374, align 4
  store i32* %arraydecay15, i32** %375, align 4
  store i32 %372, i32* %376, align 4
  store i8* %373, i8** %377, align 4
  store i32 0, i32* %380, align 4
  %382 = load i32, i32* %376, align 4
  %383 = sub i32 %382, 1
  store i32 %383, i32* %379, align 4
  br label %bn_encode_for.cond

bn_encode_for.cond:                               ; preds = %bn_encode_for.inc9, %bn_encode_entry
  %384 = load i32, i32* %380, align 4
  %385 = load i32, i32* %374, align 4
  %386 = icmp ult i32 %384, %385
  br i1 %386, label %bn_encode_land.rhs, label %bn_encode_land.end

bn_encode_land.rhs:                               ; preds = %bn_encode_for.cond
  %387 = load i32, i32* %379, align 4
  %388 = icmp sge i32 %387, 0
  br label %bn_encode_land.end

bn_encode_land.end:                               ; preds = %bn_encode_land.rhs, %bn_encode_for.cond
  %389 = phi i1 [ false, %bn_encode_for.cond ], [ %388, %bn_encode_land.rhs ]
  br i1 %389, label %bn_encode_for.body, label %bn_encode_for.end10

bn_encode_for.body:                               ; preds = %bn_encode_land.end
  %390 = load i32*, i32** %375, align 4
  %391 = load i32, i32* %380, align 4
  %392 = getelementptr inbounds i32, i32* %390, i32 %391
  %393 = load i32, i32* %392, align 4
  store i32 %393, i32* %378, align 4
  store i32 0, i32* %381, align 4
  br label %bn_encode_for.cond2

bn_encode_for.cond2:                              ; preds = %bn_encode_for.inc, %bn_encode_for.body
  %394 = load i32, i32* %379, align 4
  %395 = icmp sge i32 %394, 0
  br i1 %395, label %bn_encode_land.rhs4, label %bn_encode_land.end6

bn_encode_land.rhs4:                              ; preds = %bn_encode_for.cond2
  %396 = load i32, i32* %381, align 4
  %397 = icmp ult i32 %396, 32
  br label %bn_encode_land.end6

bn_encode_land.end6:                              ; preds = %bn_encode_land.rhs4, %bn_encode_for.cond2
  %398 = phi i1 [ false, %bn_encode_for.cond2 ], [ %397, %bn_encode_land.rhs4 ]
  br i1 %398, label %bn_encode_for.body7, label %bn_encode_for.end

bn_encode_for.body7:                              ; preds = %bn_encode_land.end6
  %399 = load i32, i32* %378, align 4
  %400 = load i32, i32* %381, align 4
  %401 = lshr i32 %399, %400
  %402 = trunc i32 %401 to i8
  %403 = load i8*, i8** %377, align 4
  %404 = load i32, i32* %379, align 4
  %405 = getelementptr inbounds i8, i8* %403, i32 %404
  store i8 %402, i8* %405, align 1
  br label %bn_encode_for.inc

bn_encode_for.inc:                                ; preds = %bn_encode_for.body7
  %406 = load i32, i32* %379, align 4
  %407 = add nsw i32 %406, -1
  store i32 %407, i32* %379, align 4
  %408 = load i32, i32* %381, align 4
  %409 = add i32 %408, 8
  store i32 %409, i32* %381, align 4
  br label %bn_encode_for.cond2

bn_encode_for.end:                                ; preds = %bn_encode_land.end6
  br label %bn_encode_for.inc9

bn_encode_for.inc9:                               ; preds = %bn_encode_for.end
  %410 = load i32, i32* %380, align 4
  %411 = add i32 %410, 1
  store i32 %411, i32* %380, align 4
  br label %bn_encode_for.cond

bn_encode_for.end10:                              ; preds = %bn_encode_land.end
  br label %bn_encode_for.cond11

bn_encode_for.cond11:                             ; preds = %bn_encode_for.inc16, %bn_encode_for.end10
  %412 = load i32, i32* %379, align 4
  %413 = icmp sge i32 %412, 0
  br i1 %413, label %bn_encode_for.body14, label %bn_encode_for.end18

bn_encode_for.body14:                             ; preds = %bn_encode_for.cond11
  %414 = load i8*, i8** %377, align 4
  %415 = load i32, i32* %379, align 4
  %416 = getelementptr inbounds i8, i8* %414, i32 %415
  store i8 0, i8* %416, align 1
  br label %bn_encode_for.inc16

bn_encode_for.inc16:                              ; preds = %bn_encode_for.body14
  %417 = load i32, i32* %379, align 4
  %418 = add nsw i32 %417, -1
  store i32 %418, i32* %379, align 4
  br label %bn_encode_for.cond11

bn_encode_for.end18:                              ; preds = %bn_encode_for.cond11
  br label %if.end.split

if.end.split:                                     ; preds = %bn_encode_for.end18
  %arraydecay16 = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  %419 = bitcast i32* %arraydecay16 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %419, i8 0, i32 260, i1 false)
  %arraydecay17 = getelementptr inbounds [65 x i32], [65 x i32]* %m, i32 0, i32 0
  %420 = bitcast i32* %arraydecay17 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %420, i8 0, i32 260, i1 false)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end.split, %if.then
  %421 = load i32, i32* %retval, align 4
  ret i32 %421
}

; Function Attrs: noinline optnone
define dso_local i32 @rsa_public_decrypt(i8* %out, i32* %out_len, i8* %in, i32 %in_len, %struct.rsa_pk_t* %pk) #2 {
entry:
  %retval = alloca i32, align 4
  %pk.addr = alloca %struct.rsa_pk_t*, align 4
  %in_len.addr = alloca i32, align 4
  %in.addr = alloca i8*, align 4
  %out_len.addr = alloca i32*, align 4
  %out.addr = alloca i8*, align 4
  %status = alloca i32, align 4
  %pkcs_block = alloca [256 x i8], align 1
  %i = alloca i32, align 4
  %modulus_len = alloca i32, align 4
  %pkcs_block_len = alloca i32, align 4
  store %struct.rsa_pk_t* %pk, %struct.rsa_pk_t** %pk.addr, align 4
  store i32 %in_len, i32* %in_len.addr, align 4
  store i8* %in, i8** %in.addr, align 4
  store i32* %out_len, i32** %out_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_pk_t, %struct.rsa_pk_t* %0, i32 0, i32 0
  %1 = load i32, i32* %bits, align 4
  %add = add i32 %1, 7
  %div = udiv i32 %add, 8
  store i32 %div, i32* %modulus_len, align 4
  %2 = load i32, i32* %in_len.addr, align 4
  %3 = load i32, i32* %modulus_len, align 4
  %cmp = icmp ugt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 4098, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.rsa_pk_t*, %struct.rsa_pk_t** %pk.addr, align 4
  %5 = load i32, i32* %in_len.addr, align 4
  %6 = load i8*, i8** %in.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  %call = call i32 @public_block_operation(i8* %arraydecay, i32* %pkcs_block_len, i8* %6, i32 %5, %struct.rsa_pk_t* %4)
  store i32 %call, i32* %status, align 4
  %7 = load i32, i32* %status, align 4
  %cmp1 = icmp ne i32 %7, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %8 = load i32, i32* %status, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %9 = load i32, i32* %pkcs_block_len, align 4
  %10 = load i32, i32* %modulus_len, align 4
  %cmp4 = icmp ne i32 %9, %10
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store i32 4098, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end3
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %cmp7 = icmp ne i32 %conv, 0
  br i1 %cmp7, label %if.then13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end6
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 1
  %12 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %12 to i32
  %cmp11 = icmp ne i32 %conv10, 1
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false, %if.end6
  store i32 4097, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %modulus_len, align 4
  %sub = sub i32 %14, 1
  %cmp15 = icmp ult i32 %13, %sub
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %16 to i32
  %cmp19 = icmp ne i32 %conv18, 255
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %for.body
  br label %for.end

if.end22:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end22
  %17 = load i32, i32* %i, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then21, %for.cond
  %18 = load i32, i32* %i, align 4
  %inc23 = add i32 %18, 1
  store i32 %inc23, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %18
  %19 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %19 to i32
  %cmp26 = icmp ne i32 %conv25, 0
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %for.end
  store i32 4097, i32* %retval, align 4
  br label %return

if.end29:                                         ; preds = %for.end
  %20 = load i32, i32* %modulus_len, align 4
  %21 = load i32, i32* %i, align 4
  %sub30 = sub i32 %20, %21
  %22 = load i32*, i32** %out_len.addr, align 4
  store i32 %sub30, i32* %22, align 4
  %23 = load i32*, i32** %out_len.addr, align 4
  %24 = load i32, i32* %23, align 4
  %add31 = add i32 %24, 11
  %25 = load i32, i32* %modulus_len, align 4
  %cmp32 = icmp ugt i32 %add31, %25
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end29
  store i32 4097, i32* %retval, align 4
  br label %return

if.end35:                                         ; preds = %if.end29
  %26 = load i8*, i8** %out.addr, align 4
  %27 = load i32, i32* %i, align 4
  %arrayidx36 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %27
  %28 = load i32*, i32** %out_len.addr, align 4
  %29 = load i32, i32* %28, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %26, i8* align 1 %arrayidx36, i32 %29, i1 false)
  %arraydecay37 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay37, i8 0, i32 256, i1 false)
  %30 = load i32, i32* %status, align 4
  store i32 %30, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end35, %if.then34, %if.then28, %if.then13, %if.then5, %if.then2, %if.then
  %31 = load i32, i32* %retval, align 4
  ret i32 %31
}

; Function Attrs: noinline optnone
define dso_local i32 @rsa_private_encrypt(i8* %out, i32* %out_len, i8* %in, i32 %in_len, %struct.rsa_sk_t* %sk) #2 {
entry:
  %retval = alloca i32, align 4
  %sk.addr = alloca %struct.rsa_sk_t*, align 4
  %in_len.addr = alloca i32, align 4
  %in.addr = alloca i8*, align 4
  %out_len.addr = alloca i32*, align 4
  %out.addr = alloca i8*, align 4
  %status = alloca i32, align 4
  %pkcs_block = alloca [256 x i8], align 1
  %i = alloca i32, align 4
  %modulus_len = alloca i32, align 4
  store %struct.rsa_sk_t* %sk, %struct.rsa_sk_t** %sk.addr, align 4
  store i32 %in_len, i32* %in_len.addr, align 4
  store i8* %in, i8** %in.addr, align 4
  store i32* %out_len, i32** %out_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %0, i32 0, i32 0
  %1 = load i32, i32* %bits, align 4
  %add = add i32 %1, 7
  %div = udiv i32 %add, 8
  store i32 %div, i32* %modulus_len, align 4
  %2 = load i32, i32* %in_len.addr, align 4
  %add1 = add i32 %2, 11
  %3 = load i32, i32* %modulus_len, align 4
  %cmp = icmp ugt i32 %add1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 4098, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  store i8 0, i8* %arrayidx, align 1
  %arrayidx2 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 1
  store i8 1, i8* %arrayidx2, align 1
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %modulus_len, align 4
  %6 = load i32, i32* %in_len.addr, align 4
  %sub = sub i32 %5, %6
  %sub3 = sub i32 %sub, 1
  %cmp4 = icmp ult i32 %4, %sub3
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %7
  store i8 -1, i8* %arrayidx5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %i, align 4
  %inc6 = add i32 %9, 1
  store i32 %inc6, i32* %i, align 4
  %arrayidx7 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %9
  store i8 0, i8* %arrayidx7, align 1
  %10 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %10
  %11 = load i8*, i8** %in.addr, align 4
  %12 = load i32, i32* %in_len.addr, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arrayidx8, i8* align 1 %11, i32 %12, i1 false)
  %13 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %14 = load i32, i32* %modulus_len, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  %15 = load i32*, i32** %out_len.addr, align 4
  %16 = load i8*, i8** %out.addr, align 4
  %call = call i32 @private_block_operation(i8* %16, i32* %15, i8* %arraydecay, i32 %14, %struct.rsa_sk_t* %13)
  store i32 %call, i32* %status, align 4
  %arraydecay9 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay9, i8 0, i32 256, i1 false)
  %17 = load i32, i32* %status, align 4
  store i32 %17, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline optnone
define internal i32 @private_block_operation(i8* %out, i32* %out_len, i8* %in, i32 %in_len, %struct.rsa_sk_t* %sk) #2 {
entry:
  %retval = alloca i32, align 4
  %sk.addr = alloca %struct.rsa_sk_t*, align 4
  %in_len.addr = alloca i32, align 4
  %in.addr = alloca i8*, align 4
  %out_len.addr = alloca i32*, align 4
  %out.addr = alloca i8*, align 4
  %cdigits = alloca i32, align 4
  %ndigits = alloca i32, align 4
  %pdigits = alloca i32, align 4
  %c = alloca [65 x i32], align 4
  %cp = alloca [65 x i32], align 4
  %cq = alloca [65 x i32], align 4
  %dp = alloca [65 x i32], align 4
  %dq = alloca [65 x i32], align 4
  %mp = alloca [65 x i32], align 4
  %mq = alloca [65 x i32], align 4
  %n = alloca [65 x i32], align 4
  %p = alloca [65 x i32], align 4
  %q = alloca [65 x i32], align 4
  %q_inv = alloca [65 x i32], align 4
  %t = alloca [65 x i32], align 4
  store %struct.rsa_sk_t* %sk, %struct.rsa_sk_t** %sk.addr, align 4
  store i32 %in_len, i32* %in_len.addr, align 4
  store i8* %in, i8** %in.addr, align 4
  store i32* %out_len, i32** %out_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load i32, i32* %in_len.addr, align 4
  %1 = load i8*, i8** %in.addr, align 4
  %arraydecay = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  br label %bn_decode_entry94

bn_decode_entry94:                                ; preds = %entry
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i8* %1, i8** %3, align 4
  store i32 65, i32* %4, align 4
  store i32* %arraydecay, i32** %5, align 4
  store i32 0, i32* %8, align 4
  %10 = load i32, i32* %2, align 4
  %11 = sub i32 %10, 1
  store i32 %11, i32* %7, align 4
  br label %bn_decode_for.cond95

bn_decode_for.cond95:                             ; preds = %bn_decode_for.inc9105, %bn_decode_entry94
  %12 = load i32, i32* %8, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %bn_decode_land.rhs96, label %bn_decode_land.end97

bn_decode_land.rhs96:                             ; preds = %bn_decode_for.cond95
  %15 = load i32, i32* %7, align 4
  %16 = icmp sge i32 %15, 0
  br label %bn_decode_land.end97

bn_decode_land.end97:                             ; preds = %bn_decode_land.rhs96, %bn_decode_for.cond95
  %17 = phi i1 [ false, %bn_decode_for.cond95 ], [ %16, %bn_decode_land.rhs96 ]
  br i1 %17, label %bn_decode_for.body98, label %bn_decode_for.end10106

bn_decode_for.body98:                             ; preds = %bn_decode_land.end97
  store i32 0, i32* %6, align 4
  store i32 0, i32* %9, align 4
  br label %bn_decode_for.cond299

bn_decode_for.cond299:                            ; preds = %bn_decode_for.inc103, %bn_decode_for.body98
  %18 = load i32, i32* %7, align 4
  %19 = icmp sge i32 %18, 0
  br i1 %19, label %bn_decode_land.rhs4100, label %bn_decode_land.end6101

bn_decode_land.rhs4100:                           ; preds = %bn_decode_for.cond299
  %20 = load i32, i32* %9, align 4
  %21 = icmp ult i32 %20, 32
  br label %bn_decode_land.end6101

bn_decode_land.end6101:                           ; preds = %bn_decode_land.rhs4100, %bn_decode_for.cond299
  %22 = phi i1 [ false, %bn_decode_for.cond299 ], [ %21, %bn_decode_land.rhs4100 ]
  br i1 %22, label %bn_decode_for.body7102, label %bn_decode_for.end104

bn_decode_for.body7102:                           ; preds = %bn_decode_land.end6101
  %23 = load i8*, i8** %3, align 4
  %24 = load i32, i32* %7, align 4
  %25 = getelementptr inbounds i8, i8* %23, i32 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = load i32, i32* %9, align 4
  %29 = shl i32 %27, %28
  %30 = load i32, i32* %6, align 4
  %31 = or i32 %30, %29
  store i32 %31, i32* %6, align 4
  br label %bn_decode_for.inc103

bn_decode_for.inc103:                             ; preds = %bn_decode_for.body7102
  %32 = load i32, i32* %7, align 4
  %33 = add nsw i32 %32, -1
  store i32 %33, i32* %7, align 4
  %34 = load i32, i32* %9, align 4
  %35 = add i32 %34, 8
  store i32 %35, i32* %9, align 4
  br label %bn_decode_for.cond299

bn_decode_for.end104:                             ; preds = %bn_decode_land.end6101
  %36 = load i32, i32* %6, align 4
  %37 = load i32*, i32** %5, align 4
  %38 = load i32, i32* %8, align 4
  %39 = getelementptr inbounds i32, i32* %37, i32 %38
  store i32 %36, i32* %39, align 4
  br label %bn_decode_for.inc9105

bn_decode_for.inc9105:                            ; preds = %bn_decode_for.end104
  %40 = load i32, i32* %8, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* %8, align 4
  br label %bn_decode_for.cond95

bn_decode_for.end10106:                           ; preds = %bn_decode_land.end97
  br label %bn_decode_for.cond11107

bn_decode_for.cond11107:                          ; preds = %bn_decode_for.inc16109, %bn_decode_for.end10106
  %42 = load i32, i32* %8, align 4
  %43 = load i32, i32* %4, align 4
  %44 = icmp ult i32 %42, %43
  br i1 %44, label %bn_decode_for.body14108, label %bn_decode_for.end18110

bn_decode_for.body14108:                          ; preds = %bn_decode_for.cond11107
  %45 = load i32*, i32** %5, align 4
  %46 = load i32, i32* %8, align 4
  %47 = getelementptr inbounds i32, i32* %45, i32 %46
  store i32 0, i32* %47, align 4
  br label %bn_decode_for.inc16109

bn_decode_for.inc16109:                           ; preds = %bn_decode_for.body14108
  %48 = load i32, i32* %8, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %8, align 4
  br label %bn_decode_for.cond11107

bn_decode_for.end18110:                           ; preds = %bn_decode_for.cond11107
  br label %entry.split93

entry.split93:                                    ; preds = %bn_decode_for.end18110
  %50 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %modulus = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %50, i32 0, i32 1
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %modulus, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  br label %bn_decode_entry76

bn_decode_entry76:                                ; preds = %entry.split93
  %51 = alloca i32, align 4
  %52 = alloca i8*, align 4
  %53 = alloca i32, align 4
  %54 = alloca i32*, align 4
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca i32, align 4
  store i32 256, i32* %51, align 4
  store i8* %arraydecay1, i8** %52, align 4
  store i32 65, i32* %53, align 4
  store i32* %arraydecay2, i32** %54, align 4
  store i32 0, i32* %57, align 4
  %59 = load i32, i32* %51, align 4
  %60 = sub i32 %59, 1
  store i32 %60, i32* %56, align 4
  br label %bn_decode_for.cond77

bn_decode_for.cond77:                             ; preds = %bn_decode_for.inc987, %bn_decode_entry76
  %61 = load i32, i32* %57, align 4
  %62 = load i32, i32* %53, align 4
  %63 = icmp ult i32 %61, %62
  br i1 %63, label %bn_decode_land.rhs78, label %bn_decode_land.end79

bn_decode_land.rhs78:                             ; preds = %bn_decode_for.cond77
  %64 = load i32, i32* %56, align 4
  %65 = icmp sge i32 %64, 0
  br label %bn_decode_land.end79

bn_decode_land.end79:                             ; preds = %bn_decode_land.rhs78, %bn_decode_for.cond77
  %66 = phi i1 [ false, %bn_decode_for.cond77 ], [ %65, %bn_decode_land.rhs78 ]
  br i1 %66, label %bn_decode_for.body80, label %bn_decode_for.end1088

bn_decode_for.body80:                             ; preds = %bn_decode_land.end79
  store i32 0, i32* %55, align 4
  store i32 0, i32* %58, align 4
  br label %bn_decode_for.cond281

bn_decode_for.cond281:                            ; preds = %bn_decode_for.inc85, %bn_decode_for.body80
  %67 = load i32, i32* %56, align 4
  %68 = icmp sge i32 %67, 0
  br i1 %68, label %bn_decode_land.rhs482, label %bn_decode_land.end683

bn_decode_land.rhs482:                            ; preds = %bn_decode_for.cond281
  %69 = load i32, i32* %58, align 4
  %70 = icmp ult i32 %69, 32
  br label %bn_decode_land.end683

bn_decode_land.end683:                            ; preds = %bn_decode_land.rhs482, %bn_decode_for.cond281
  %71 = phi i1 [ false, %bn_decode_for.cond281 ], [ %70, %bn_decode_land.rhs482 ]
  br i1 %71, label %bn_decode_for.body784, label %bn_decode_for.end86

bn_decode_for.body784:                            ; preds = %bn_decode_land.end683
  %72 = load i8*, i8** %52, align 4
  %73 = load i32, i32* %56, align 4
  %74 = getelementptr inbounds i8, i8* %72, i32 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = load i32, i32* %58, align 4
  %78 = shl i32 %76, %77
  %79 = load i32, i32* %55, align 4
  %80 = or i32 %79, %78
  store i32 %80, i32* %55, align 4
  br label %bn_decode_for.inc85

bn_decode_for.inc85:                              ; preds = %bn_decode_for.body784
  %81 = load i32, i32* %56, align 4
  %82 = add nsw i32 %81, -1
  store i32 %82, i32* %56, align 4
  %83 = load i32, i32* %58, align 4
  %84 = add i32 %83, 8
  store i32 %84, i32* %58, align 4
  br label %bn_decode_for.cond281

bn_decode_for.end86:                              ; preds = %bn_decode_land.end683
  %85 = load i32, i32* %55, align 4
  %86 = load i32*, i32** %54, align 4
  %87 = load i32, i32* %57, align 4
  %88 = getelementptr inbounds i32, i32* %86, i32 %87
  store i32 %85, i32* %88, align 4
  br label %bn_decode_for.inc987

bn_decode_for.inc987:                             ; preds = %bn_decode_for.end86
  %89 = load i32, i32* %57, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* %57, align 4
  br label %bn_decode_for.cond77

bn_decode_for.end1088:                            ; preds = %bn_decode_land.end79
  br label %bn_decode_for.cond1189

bn_decode_for.cond1189:                           ; preds = %bn_decode_for.inc1691, %bn_decode_for.end1088
  %91 = load i32, i32* %57, align 4
  %92 = load i32, i32* %53, align 4
  %93 = icmp ult i32 %91, %92
  br i1 %93, label %bn_decode_for.body1490, label %bn_decode_for.end1892

bn_decode_for.body1490:                           ; preds = %bn_decode_for.cond1189
  %94 = load i32*, i32** %54, align 4
  %95 = load i32, i32* %57, align 4
  %96 = getelementptr inbounds i32, i32* %94, i32 %95
  store i32 0, i32* %96, align 4
  br label %bn_decode_for.inc1691

bn_decode_for.inc1691:                            ; preds = %bn_decode_for.body1490
  %97 = load i32, i32* %57, align 4
  %98 = add i32 %97, 1
  store i32 %98, i32* %57, align 4
  br label %bn_decode_for.cond1189

bn_decode_for.end1892:                            ; preds = %bn_decode_for.cond1189
  br label %entry.split75

entry.split75:                                    ; preds = %bn_decode_for.end1892
  %99 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime1 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %99, i32 0, i32 4
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %prime1, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  br label %bn_decode_entry58

bn_decode_entry58:                                ; preds = %entry.split75
  %100 = alloca i32, align 4
  %101 = alloca i8*, align 4
  %102 = alloca i32, align 4
  %103 = alloca i32*, align 4
  %104 = alloca i32, align 4
  %105 = alloca i32, align 4
  %106 = alloca i32, align 4
  %107 = alloca i32, align 4
  store i32 128, i32* %100, align 4
  store i8* %arraydecay3, i8** %101, align 4
  store i32 65, i32* %102, align 4
  store i32* %arraydecay4, i32** %103, align 4
  store i32 0, i32* %106, align 4
  %108 = load i32, i32* %100, align 4
  %109 = sub i32 %108, 1
  store i32 %109, i32* %105, align 4
  br label %bn_decode_for.cond59

bn_decode_for.cond59:                             ; preds = %bn_decode_for.inc969, %bn_decode_entry58
  %110 = load i32, i32* %106, align 4
  %111 = load i32, i32* %102, align 4
  %112 = icmp ult i32 %110, %111
  br i1 %112, label %bn_decode_land.rhs60, label %bn_decode_land.end61

bn_decode_land.rhs60:                             ; preds = %bn_decode_for.cond59
  %113 = load i32, i32* %105, align 4
  %114 = icmp sge i32 %113, 0
  br label %bn_decode_land.end61

bn_decode_land.end61:                             ; preds = %bn_decode_land.rhs60, %bn_decode_for.cond59
  %115 = phi i1 [ false, %bn_decode_for.cond59 ], [ %114, %bn_decode_land.rhs60 ]
  br i1 %115, label %bn_decode_for.body62, label %bn_decode_for.end1070

bn_decode_for.body62:                             ; preds = %bn_decode_land.end61
  store i32 0, i32* %104, align 4
  store i32 0, i32* %107, align 4
  br label %bn_decode_for.cond263

bn_decode_for.cond263:                            ; preds = %bn_decode_for.inc67, %bn_decode_for.body62
  %116 = load i32, i32* %105, align 4
  %117 = icmp sge i32 %116, 0
  br i1 %117, label %bn_decode_land.rhs464, label %bn_decode_land.end665

bn_decode_land.rhs464:                            ; preds = %bn_decode_for.cond263
  %118 = load i32, i32* %107, align 4
  %119 = icmp ult i32 %118, 32
  br label %bn_decode_land.end665

bn_decode_land.end665:                            ; preds = %bn_decode_land.rhs464, %bn_decode_for.cond263
  %120 = phi i1 [ false, %bn_decode_for.cond263 ], [ %119, %bn_decode_land.rhs464 ]
  br i1 %120, label %bn_decode_for.body766, label %bn_decode_for.end68

bn_decode_for.body766:                            ; preds = %bn_decode_land.end665
  %121 = load i8*, i8** %101, align 4
  %122 = load i32, i32* %105, align 4
  %123 = getelementptr inbounds i8, i8* %121, i32 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = load i32, i32* %107, align 4
  %127 = shl i32 %125, %126
  %128 = load i32, i32* %104, align 4
  %129 = or i32 %128, %127
  store i32 %129, i32* %104, align 4
  br label %bn_decode_for.inc67

bn_decode_for.inc67:                              ; preds = %bn_decode_for.body766
  %130 = load i32, i32* %105, align 4
  %131 = add nsw i32 %130, -1
  store i32 %131, i32* %105, align 4
  %132 = load i32, i32* %107, align 4
  %133 = add i32 %132, 8
  store i32 %133, i32* %107, align 4
  br label %bn_decode_for.cond263

bn_decode_for.end68:                              ; preds = %bn_decode_land.end665
  %134 = load i32, i32* %104, align 4
  %135 = load i32*, i32** %103, align 4
  %136 = load i32, i32* %106, align 4
  %137 = getelementptr inbounds i32, i32* %135, i32 %136
  store i32 %134, i32* %137, align 4
  br label %bn_decode_for.inc969

bn_decode_for.inc969:                             ; preds = %bn_decode_for.end68
  %138 = load i32, i32* %106, align 4
  %139 = add i32 %138, 1
  store i32 %139, i32* %106, align 4
  br label %bn_decode_for.cond59

bn_decode_for.end1070:                            ; preds = %bn_decode_land.end61
  br label %bn_decode_for.cond1171

bn_decode_for.cond1171:                           ; preds = %bn_decode_for.inc1673, %bn_decode_for.end1070
  %140 = load i32, i32* %106, align 4
  %141 = load i32, i32* %102, align 4
  %142 = icmp ult i32 %140, %141
  br i1 %142, label %bn_decode_for.body1472, label %bn_decode_for.end1874

bn_decode_for.body1472:                           ; preds = %bn_decode_for.cond1171
  %143 = load i32*, i32** %103, align 4
  %144 = load i32, i32* %106, align 4
  %145 = getelementptr inbounds i32, i32* %143, i32 %144
  store i32 0, i32* %145, align 4
  br label %bn_decode_for.inc1673

bn_decode_for.inc1673:                            ; preds = %bn_decode_for.body1472
  %146 = load i32, i32* %106, align 4
  %147 = add i32 %146, 1
  store i32 %147, i32* %106, align 4
  br label %bn_decode_for.cond1171

bn_decode_for.end1874:                            ; preds = %bn_decode_for.cond1171
  br label %entry.split57

entry.split57:                                    ; preds = %bn_decode_for.end1874
  %148 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %148, i32 0, i32 5
  %arraydecay5 = getelementptr inbounds [128 x i8], [128 x i8]* %prime2, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  br label %bn_decode_entry40

bn_decode_entry40:                                ; preds = %entry.split57
  %149 = alloca i32, align 4
  %150 = alloca i8*, align 4
  %151 = alloca i32, align 4
  %152 = alloca i32*, align 4
  %153 = alloca i32, align 4
  %154 = alloca i32, align 4
  %155 = alloca i32, align 4
  %156 = alloca i32, align 4
  store i32 128, i32* %149, align 4
  store i8* %arraydecay5, i8** %150, align 4
  store i32 65, i32* %151, align 4
  store i32* %arraydecay6, i32** %152, align 4
  store i32 0, i32* %155, align 4
  %157 = load i32, i32* %149, align 4
  %158 = sub i32 %157, 1
  store i32 %158, i32* %154, align 4
  br label %bn_decode_for.cond41

bn_decode_for.cond41:                             ; preds = %bn_decode_for.inc951, %bn_decode_entry40
  %159 = load i32, i32* %155, align 4
  %160 = load i32, i32* %151, align 4
  %161 = icmp ult i32 %159, %160
  br i1 %161, label %bn_decode_land.rhs42, label %bn_decode_land.end43

bn_decode_land.rhs42:                             ; preds = %bn_decode_for.cond41
  %162 = load i32, i32* %154, align 4
  %163 = icmp sge i32 %162, 0
  br label %bn_decode_land.end43

bn_decode_land.end43:                             ; preds = %bn_decode_land.rhs42, %bn_decode_for.cond41
  %164 = phi i1 [ false, %bn_decode_for.cond41 ], [ %163, %bn_decode_land.rhs42 ]
  br i1 %164, label %bn_decode_for.body44, label %bn_decode_for.end1052

bn_decode_for.body44:                             ; preds = %bn_decode_land.end43
  store i32 0, i32* %153, align 4
  store i32 0, i32* %156, align 4
  br label %bn_decode_for.cond245

bn_decode_for.cond245:                            ; preds = %bn_decode_for.inc49, %bn_decode_for.body44
  %165 = load i32, i32* %154, align 4
  %166 = icmp sge i32 %165, 0
  br i1 %166, label %bn_decode_land.rhs446, label %bn_decode_land.end647

bn_decode_land.rhs446:                            ; preds = %bn_decode_for.cond245
  %167 = load i32, i32* %156, align 4
  %168 = icmp ult i32 %167, 32
  br label %bn_decode_land.end647

bn_decode_land.end647:                            ; preds = %bn_decode_land.rhs446, %bn_decode_for.cond245
  %169 = phi i1 [ false, %bn_decode_for.cond245 ], [ %168, %bn_decode_land.rhs446 ]
  br i1 %169, label %bn_decode_for.body748, label %bn_decode_for.end50

bn_decode_for.body748:                            ; preds = %bn_decode_land.end647
  %170 = load i8*, i8** %150, align 4
  %171 = load i32, i32* %154, align 4
  %172 = getelementptr inbounds i8, i8* %170, i32 %171
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = load i32, i32* %156, align 4
  %176 = shl i32 %174, %175
  %177 = load i32, i32* %153, align 4
  %178 = or i32 %177, %176
  store i32 %178, i32* %153, align 4
  br label %bn_decode_for.inc49

bn_decode_for.inc49:                              ; preds = %bn_decode_for.body748
  %179 = load i32, i32* %154, align 4
  %180 = add nsw i32 %179, -1
  store i32 %180, i32* %154, align 4
  %181 = load i32, i32* %156, align 4
  %182 = add i32 %181, 8
  store i32 %182, i32* %156, align 4
  br label %bn_decode_for.cond245

bn_decode_for.end50:                              ; preds = %bn_decode_land.end647
  %183 = load i32, i32* %153, align 4
  %184 = load i32*, i32** %152, align 4
  %185 = load i32, i32* %155, align 4
  %186 = getelementptr inbounds i32, i32* %184, i32 %185
  store i32 %183, i32* %186, align 4
  br label %bn_decode_for.inc951

bn_decode_for.inc951:                             ; preds = %bn_decode_for.end50
  %187 = load i32, i32* %155, align 4
  %188 = add i32 %187, 1
  store i32 %188, i32* %155, align 4
  br label %bn_decode_for.cond41

bn_decode_for.end1052:                            ; preds = %bn_decode_land.end43
  br label %bn_decode_for.cond1153

bn_decode_for.cond1153:                           ; preds = %bn_decode_for.inc1655, %bn_decode_for.end1052
  %189 = load i32, i32* %155, align 4
  %190 = load i32, i32* %151, align 4
  %191 = icmp ult i32 %189, %190
  br i1 %191, label %bn_decode_for.body1454, label %bn_decode_for.end1856

bn_decode_for.body1454:                           ; preds = %bn_decode_for.cond1153
  %192 = load i32*, i32** %152, align 4
  %193 = load i32, i32* %155, align 4
  %194 = getelementptr inbounds i32, i32* %192, i32 %193
  store i32 0, i32* %194, align 4
  br label %bn_decode_for.inc1655

bn_decode_for.inc1655:                            ; preds = %bn_decode_for.body1454
  %195 = load i32, i32* %155, align 4
  %196 = add i32 %195, 1
  store i32 %196, i32* %155, align 4
  br label %bn_decode_for.cond1153

bn_decode_for.end1856:                            ; preds = %bn_decode_for.cond1153
  br label %entry.split39

entry.split39:                                    ; preds = %bn_decode_for.end1856
  %197 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime_exponent1 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %197, i32 0, i32 6
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %prime_exponent1, i32 0, i32 0
  %arraydecay8 = getelementptr inbounds [65 x i32], [65 x i32]* %dp, i32 0, i32 0
  br label %bn_decode_entry22

bn_decode_entry22:                                ; preds = %entry.split39
  %198 = alloca i32, align 4
  %199 = alloca i8*, align 4
  %200 = alloca i32, align 4
  %201 = alloca i32*, align 4
  %202 = alloca i32, align 4
  %203 = alloca i32, align 4
  %204 = alloca i32, align 4
  %205 = alloca i32, align 4
  store i32 128, i32* %198, align 4
  store i8* %arraydecay7, i8** %199, align 4
  store i32 65, i32* %200, align 4
  store i32* %arraydecay8, i32** %201, align 4
  store i32 0, i32* %204, align 4
  %206 = load i32, i32* %198, align 4
  %207 = sub i32 %206, 1
  store i32 %207, i32* %203, align 4
  br label %bn_decode_for.cond23

bn_decode_for.cond23:                             ; preds = %bn_decode_for.inc933, %bn_decode_entry22
  %208 = load i32, i32* %204, align 4
  %209 = load i32, i32* %200, align 4
  %210 = icmp ult i32 %208, %209
  br i1 %210, label %bn_decode_land.rhs24, label %bn_decode_land.end25

bn_decode_land.rhs24:                             ; preds = %bn_decode_for.cond23
  %211 = load i32, i32* %203, align 4
  %212 = icmp sge i32 %211, 0
  br label %bn_decode_land.end25

bn_decode_land.end25:                             ; preds = %bn_decode_land.rhs24, %bn_decode_for.cond23
  %213 = phi i1 [ false, %bn_decode_for.cond23 ], [ %212, %bn_decode_land.rhs24 ]
  br i1 %213, label %bn_decode_for.body26, label %bn_decode_for.end1034

bn_decode_for.body26:                             ; preds = %bn_decode_land.end25
  store i32 0, i32* %202, align 4
  store i32 0, i32* %205, align 4
  br label %bn_decode_for.cond227

bn_decode_for.cond227:                            ; preds = %bn_decode_for.inc31, %bn_decode_for.body26
  %214 = load i32, i32* %203, align 4
  %215 = icmp sge i32 %214, 0
  br i1 %215, label %bn_decode_land.rhs428, label %bn_decode_land.end629

bn_decode_land.rhs428:                            ; preds = %bn_decode_for.cond227
  %216 = load i32, i32* %205, align 4
  %217 = icmp ult i32 %216, 32
  br label %bn_decode_land.end629

bn_decode_land.end629:                            ; preds = %bn_decode_land.rhs428, %bn_decode_for.cond227
  %218 = phi i1 [ false, %bn_decode_for.cond227 ], [ %217, %bn_decode_land.rhs428 ]
  br i1 %218, label %bn_decode_for.body730, label %bn_decode_for.end32

bn_decode_for.body730:                            ; preds = %bn_decode_land.end629
  %219 = load i8*, i8** %199, align 4
  %220 = load i32, i32* %203, align 4
  %221 = getelementptr inbounds i8, i8* %219, i32 %220
  %222 = load i8, i8* %221, align 1
  %223 = zext i8 %222 to i32
  %224 = load i32, i32* %205, align 4
  %225 = shl i32 %223, %224
  %226 = load i32, i32* %202, align 4
  %227 = or i32 %226, %225
  store i32 %227, i32* %202, align 4
  br label %bn_decode_for.inc31

bn_decode_for.inc31:                              ; preds = %bn_decode_for.body730
  %228 = load i32, i32* %203, align 4
  %229 = add nsw i32 %228, -1
  store i32 %229, i32* %203, align 4
  %230 = load i32, i32* %205, align 4
  %231 = add i32 %230, 8
  store i32 %231, i32* %205, align 4
  br label %bn_decode_for.cond227

bn_decode_for.end32:                              ; preds = %bn_decode_land.end629
  %232 = load i32, i32* %202, align 4
  %233 = load i32*, i32** %201, align 4
  %234 = load i32, i32* %204, align 4
  %235 = getelementptr inbounds i32, i32* %233, i32 %234
  store i32 %232, i32* %235, align 4
  br label %bn_decode_for.inc933

bn_decode_for.inc933:                             ; preds = %bn_decode_for.end32
  %236 = load i32, i32* %204, align 4
  %237 = add i32 %236, 1
  store i32 %237, i32* %204, align 4
  br label %bn_decode_for.cond23

bn_decode_for.end1034:                            ; preds = %bn_decode_land.end25
  br label %bn_decode_for.cond1135

bn_decode_for.cond1135:                           ; preds = %bn_decode_for.inc1637, %bn_decode_for.end1034
  %238 = load i32, i32* %204, align 4
  %239 = load i32, i32* %200, align 4
  %240 = icmp ult i32 %238, %239
  br i1 %240, label %bn_decode_for.body1436, label %bn_decode_for.end1838

bn_decode_for.body1436:                           ; preds = %bn_decode_for.cond1135
  %241 = load i32*, i32** %201, align 4
  %242 = load i32, i32* %204, align 4
  %243 = getelementptr inbounds i32, i32* %241, i32 %242
  store i32 0, i32* %243, align 4
  br label %bn_decode_for.inc1637

bn_decode_for.inc1637:                            ; preds = %bn_decode_for.body1436
  %244 = load i32, i32* %204, align 4
  %245 = add i32 %244, 1
  store i32 %245, i32* %204, align 4
  br label %bn_decode_for.cond1135

bn_decode_for.end1838:                            ; preds = %bn_decode_for.cond1135
  br label %entry.split21

entry.split21:                                    ; preds = %bn_decode_for.end1838
  %246 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %prime_exponent2 = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %246, i32 0, i32 7
  %arraydecay9 = getelementptr inbounds [128 x i8], [128 x i8]* %prime_exponent2, i32 0, i32 0
  %arraydecay10 = getelementptr inbounds [65 x i32], [65 x i32]* %dq, i32 0, i32 0
  br label %bn_decode_entry2

bn_decode_entry2:                                 ; preds = %entry.split21
  %247 = alloca i32, align 4
  %248 = alloca i8*, align 4
  %249 = alloca i32, align 4
  %250 = alloca i32*, align 4
  %251 = alloca i32, align 4
  %252 = alloca i32, align 4
  %253 = alloca i32, align 4
  %254 = alloca i32, align 4
  store i32 128, i32* %247, align 4
  store i8* %arraydecay9, i8** %248, align 4
  store i32 65, i32* %249, align 4
  store i32* %arraydecay10, i32** %250, align 4
  store i32 0, i32* %253, align 4
  %255 = load i32, i32* %247, align 4
  %256 = sub i32 %255, 1
  store i32 %256, i32* %252, align 4
  br label %bn_decode_for.cond3

bn_decode_for.cond3:                              ; preds = %bn_decode_for.inc915, %bn_decode_entry2
  %257 = load i32, i32* %253, align 4
  %258 = load i32, i32* %249, align 4
  %259 = icmp ult i32 %257, %258
  br i1 %259, label %bn_decode_land.rhs5, label %bn_decode_land.end7

bn_decode_land.rhs5:                              ; preds = %bn_decode_for.cond3
  %260 = load i32, i32* %252, align 4
  %261 = icmp sge i32 %260, 0
  br label %bn_decode_land.end7

bn_decode_land.end7:                              ; preds = %bn_decode_land.rhs5, %bn_decode_for.cond3
  %262 = phi i1 [ false, %bn_decode_for.cond3 ], [ %261, %bn_decode_land.rhs5 ]
  br i1 %262, label %bn_decode_for.body8, label %bn_decode_for.end1016

bn_decode_for.body8:                              ; preds = %bn_decode_land.end7
  store i32 0, i32* %251, align 4
  store i32 0, i32* %254, align 4
  br label %bn_decode_for.cond29

bn_decode_for.cond29:                             ; preds = %bn_decode_for.inc13, %bn_decode_for.body8
  %263 = load i32, i32* %252, align 4
  %264 = icmp sge i32 %263, 0
  br i1 %264, label %bn_decode_land.rhs410, label %bn_decode_land.end611

bn_decode_land.rhs410:                            ; preds = %bn_decode_for.cond29
  %265 = load i32, i32* %254, align 4
  %266 = icmp ult i32 %265, 32
  br label %bn_decode_land.end611

bn_decode_land.end611:                            ; preds = %bn_decode_land.rhs410, %bn_decode_for.cond29
  %267 = phi i1 [ false, %bn_decode_for.cond29 ], [ %266, %bn_decode_land.rhs410 ]
  br i1 %267, label %bn_decode_for.body712, label %bn_decode_for.end14

bn_decode_for.body712:                            ; preds = %bn_decode_land.end611
  %268 = load i8*, i8** %248, align 4
  %269 = load i32, i32* %252, align 4
  %270 = getelementptr inbounds i8, i8* %268, i32 %269
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = load i32, i32* %254, align 4
  %274 = shl i32 %272, %273
  %275 = load i32, i32* %251, align 4
  %276 = or i32 %275, %274
  store i32 %276, i32* %251, align 4
  br label %bn_decode_for.inc13

bn_decode_for.inc13:                              ; preds = %bn_decode_for.body712
  %277 = load i32, i32* %252, align 4
  %278 = add nsw i32 %277, -1
  store i32 %278, i32* %252, align 4
  %279 = load i32, i32* %254, align 4
  %280 = add i32 %279, 8
  store i32 %280, i32* %254, align 4
  br label %bn_decode_for.cond29

bn_decode_for.end14:                              ; preds = %bn_decode_land.end611
  %281 = load i32, i32* %251, align 4
  %282 = load i32*, i32** %250, align 4
  %283 = load i32, i32* %253, align 4
  %284 = getelementptr inbounds i32, i32* %282, i32 %283
  store i32 %281, i32* %284, align 4
  br label %bn_decode_for.inc915

bn_decode_for.inc915:                             ; preds = %bn_decode_for.end14
  %285 = load i32, i32* %253, align 4
  %286 = add i32 %285, 1
  store i32 %286, i32* %253, align 4
  br label %bn_decode_for.cond3

bn_decode_for.end1016:                            ; preds = %bn_decode_land.end7
  br label %bn_decode_for.cond1117

bn_decode_for.cond1117:                           ; preds = %bn_decode_for.inc1619, %bn_decode_for.end1016
  %287 = load i32, i32* %253, align 4
  %288 = load i32, i32* %249, align 4
  %289 = icmp ult i32 %287, %288
  br i1 %289, label %bn_decode_for.body1418, label %bn_decode_for.end1820

bn_decode_for.body1418:                           ; preds = %bn_decode_for.cond1117
  %290 = load i32*, i32** %250, align 4
  %291 = load i32, i32* %253, align 4
  %292 = getelementptr inbounds i32, i32* %290, i32 %291
  store i32 0, i32* %292, align 4
  br label %bn_decode_for.inc1619

bn_decode_for.inc1619:                            ; preds = %bn_decode_for.body1418
  %293 = load i32, i32* %253, align 4
  %294 = add i32 %293, 1
  store i32 %294, i32* %253, align 4
  br label %bn_decode_for.cond1117

bn_decode_for.end1820:                            ; preds = %bn_decode_for.cond1117
  br label %entry.split1

entry.split1:                                     ; preds = %bn_decode_for.end1820
  %295 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %coefficient = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %295, i32 0, i32 8
  %arraydecay11 = getelementptr inbounds [128 x i8], [128 x i8]* %coefficient, i32 0, i32 0
  %arraydecay12 = getelementptr inbounds [65 x i32], [65 x i32]* %q_inv, i32 0, i32 0
  br label %bn_decode_entry

bn_decode_entry:                                  ; preds = %entry.split1
  %296 = alloca i32, align 4
  %297 = alloca i8*, align 4
  %298 = alloca i32, align 4
  %299 = alloca i32*, align 4
  %300 = alloca i32, align 4
  %301 = alloca i32, align 4
  %302 = alloca i32, align 4
  %303 = alloca i32, align 4
  store i32 128, i32* %296, align 4
  store i8* %arraydecay11, i8** %297, align 4
  store i32 65, i32* %298, align 4
  store i32* %arraydecay12, i32** %299, align 4
  store i32 0, i32* %302, align 4
  %304 = load i32, i32* %296, align 4
  %305 = sub i32 %304, 1
  store i32 %305, i32* %301, align 4
  br label %bn_decode_for.cond

bn_decode_for.cond:                               ; preds = %bn_decode_for.inc9, %bn_decode_entry
  %306 = load i32, i32* %302, align 4
  %307 = load i32, i32* %298, align 4
  %308 = icmp ult i32 %306, %307
  br i1 %308, label %bn_decode_land.rhs, label %bn_decode_land.end

bn_decode_land.rhs:                               ; preds = %bn_decode_for.cond
  %309 = load i32, i32* %301, align 4
  %310 = icmp sge i32 %309, 0
  br label %bn_decode_land.end

bn_decode_land.end:                               ; preds = %bn_decode_land.rhs, %bn_decode_for.cond
  %311 = phi i1 [ false, %bn_decode_for.cond ], [ %310, %bn_decode_land.rhs ]
  br i1 %311, label %bn_decode_for.body, label %bn_decode_for.end10

bn_decode_for.body:                               ; preds = %bn_decode_land.end
  store i32 0, i32* %300, align 4
  store i32 0, i32* %303, align 4
  br label %bn_decode_for.cond2

bn_decode_for.cond2:                              ; preds = %bn_decode_for.inc, %bn_decode_for.body
  %312 = load i32, i32* %301, align 4
  %313 = icmp sge i32 %312, 0
  br i1 %313, label %bn_decode_land.rhs4, label %bn_decode_land.end6

bn_decode_land.rhs4:                              ; preds = %bn_decode_for.cond2
  %314 = load i32, i32* %303, align 4
  %315 = icmp ult i32 %314, 32
  br label %bn_decode_land.end6

bn_decode_land.end6:                              ; preds = %bn_decode_land.rhs4, %bn_decode_for.cond2
  %316 = phi i1 [ false, %bn_decode_for.cond2 ], [ %315, %bn_decode_land.rhs4 ]
  br i1 %316, label %bn_decode_for.body7, label %bn_decode_for.end

bn_decode_for.body7:                              ; preds = %bn_decode_land.end6
  %317 = load i8*, i8** %297, align 4
  %318 = load i32, i32* %301, align 4
  %319 = getelementptr inbounds i8, i8* %317, i32 %318
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i32
  %322 = load i32, i32* %303, align 4
  %323 = shl i32 %321, %322
  %324 = load i32, i32* %300, align 4
  %325 = or i32 %324, %323
  store i32 %325, i32* %300, align 4
  br label %bn_decode_for.inc

bn_decode_for.inc:                                ; preds = %bn_decode_for.body7
  %326 = load i32, i32* %301, align 4
  %327 = add nsw i32 %326, -1
  store i32 %327, i32* %301, align 4
  %328 = load i32, i32* %303, align 4
  %329 = add i32 %328, 8
  store i32 %329, i32* %303, align 4
  br label %bn_decode_for.cond2

bn_decode_for.end:                                ; preds = %bn_decode_land.end6
  %330 = load i32, i32* %300, align 4
  %331 = load i32*, i32** %299, align 4
  %332 = load i32, i32* %302, align 4
  %333 = getelementptr inbounds i32, i32* %331, i32 %332
  store i32 %330, i32* %333, align 4
  br label %bn_decode_for.inc9

bn_decode_for.inc9:                               ; preds = %bn_decode_for.end
  %334 = load i32, i32* %302, align 4
  %335 = add i32 %334, 1
  store i32 %335, i32* %302, align 4
  br label %bn_decode_for.cond

bn_decode_for.end10:                              ; preds = %bn_decode_land.end
  br label %bn_decode_for.cond11

bn_decode_for.cond11:                             ; preds = %bn_decode_for.inc16, %bn_decode_for.end10
  %336 = load i32, i32* %302, align 4
  %337 = load i32, i32* %298, align 4
  %338 = icmp ult i32 %336, %337
  br i1 %338, label %bn_decode_for.body14, label %bn_decode_for.end18

bn_decode_for.body14:                             ; preds = %bn_decode_for.cond11
  %339 = load i32*, i32** %299, align 4
  %340 = load i32, i32* %302, align 4
  %341 = getelementptr inbounds i32, i32* %339, i32 %340
  store i32 0, i32* %341, align 4
  br label %bn_decode_for.inc16

bn_decode_for.inc16:                              ; preds = %bn_decode_for.body14
  %342 = load i32, i32* %302, align 4
  %343 = add i32 %342, 1
  store i32 %343, i32* %302, align 4
  br label %bn_decode_for.cond11

bn_decode_for.end18:                              ; preds = %bn_decode_for.cond11
  br label %entry.split

entry.split:                                      ; preds = %bn_decode_for.end18
  %arraydecay13 = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  br label %bn_digits_entry160

bn_digits_entry160:                               ; preds = %entry.split
  %344 = alloca i32, align 4
  %345 = alloca i32*, align 4
  %346 = alloca i32, align 4
  store i32 65, i32* %344, align 4
  store i32* %arraydecay13, i32** %345, align 4
  %347 = load i32, i32* %344, align 4
  %348 = sub i32 %347, 1
  store i32 %348, i32* %346, align 4
  br label %bn_digits_for.cond161

bn_digits_for.cond161:                            ; preds = %bn_digits_for.inc165, %bn_digits_entry160
  %349 = load i32, i32* %346, align 4
  %350 = icmp sge i32 %349, 0
  br i1 %350, label %bn_digits_for.body162, label %bn_digits_for.end166

bn_digits_for.body162:                            ; preds = %bn_digits_for.cond161
  %351 = load i32*, i32** %345, align 4
  %352 = load i32, i32* %346, align 4
  %353 = getelementptr inbounds i32, i32* %351, i32 %352
  %354 = load i32, i32* %353, align 4
  %355 = icmp ne i32 %354, 0
  br i1 %355, label %bn_digits_if.then163, label %bn_digits_if.end164

bn_digits_if.then163:                             ; preds = %bn_digits_for.body162
  br label %bn_digits_for.end166

bn_digits_if.end164:                              ; preds = %bn_digits_for.body162
  br label %bn_digits_for.inc165

bn_digits_for.inc165:                             ; preds = %bn_digits_if.end164
  %356 = load i32, i32* %346, align 4
  %357 = add nsw i32 %356, -1
  store i32 %357, i32* %346, align 4
  br label %bn_digits_for.cond161

bn_digits_for.end166:                             ; preds = %bn_digits_if.then163, %bn_digits_for.cond161
  %358 = load i32, i32* %346, align 4
  %359 = add nsw i32 %358, 1
  br label %entry.split.split159

entry.split.split159:                             ; preds = %bn_digits_for.end166
  store i32 %359, i32* %cdigits, align 4
  %arraydecay14 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  br label %bn_digits_entry152

bn_digits_entry152:                               ; preds = %entry.split.split159
  %360 = alloca i32, align 4
  %361 = alloca i32*, align 4
  %362 = alloca i32, align 4
  store i32 65, i32* %360, align 4
  store i32* %arraydecay14, i32** %361, align 4
  %363 = load i32, i32* %360, align 4
  %364 = sub i32 %363, 1
  store i32 %364, i32* %362, align 4
  br label %bn_digits_for.cond153

bn_digits_for.cond153:                            ; preds = %bn_digits_for.inc157, %bn_digits_entry152
  %365 = load i32, i32* %362, align 4
  %366 = icmp sge i32 %365, 0
  br i1 %366, label %bn_digits_for.body154, label %bn_digits_for.end158

bn_digits_for.body154:                            ; preds = %bn_digits_for.cond153
  %367 = load i32*, i32** %361, align 4
  %368 = load i32, i32* %362, align 4
  %369 = getelementptr inbounds i32, i32* %367, i32 %368
  %370 = load i32, i32* %369, align 4
  %371 = icmp ne i32 %370, 0
  br i1 %371, label %bn_digits_if.then155, label %bn_digits_if.end156

bn_digits_if.then155:                             ; preds = %bn_digits_for.body154
  br label %bn_digits_for.end158

bn_digits_if.end156:                              ; preds = %bn_digits_for.body154
  br label %bn_digits_for.inc157

bn_digits_for.inc157:                             ; preds = %bn_digits_if.end156
  %372 = load i32, i32* %362, align 4
  %373 = add nsw i32 %372, -1
  store i32 %373, i32* %362, align 4
  br label %bn_digits_for.cond153

bn_digits_for.end158:                             ; preds = %bn_digits_if.then155, %bn_digits_for.cond153
  %374 = load i32, i32* %362, align 4
  %375 = add nsw i32 %374, 1
  br label %entry.split.split151

entry.split.split151:                             ; preds = %bn_digits_for.end158
  store i32 %375, i32* %ndigits, align 4
  %arraydecay16 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  br label %bn_digits_entry144

bn_digits_entry144:                               ; preds = %entry.split.split151
  %376 = alloca i32, align 4
  %377 = alloca i32*, align 4
  %378 = alloca i32, align 4
  store i32 65, i32* %376, align 4
  store i32* %arraydecay16, i32** %377, align 4
  %379 = load i32, i32* %376, align 4
  %380 = sub i32 %379, 1
  store i32 %380, i32* %378, align 4
  br label %bn_digits_for.cond145

bn_digits_for.cond145:                            ; preds = %bn_digits_for.inc149, %bn_digits_entry144
  %381 = load i32, i32* %378, align 4
  %382 = icmp sge i32 %381, 0
  br i1 %382, label %bn_digits_for.body146, label %bn_digits_for.end150

bn_digits_for.body146:                            ; preds = %bn_digits_for.cond145
  %383 = load i32*, i32** %377, align 4
  %384 = load i32, i32* %378, align 4
  %385 = getelementptr inbounds i32, i32* %383, i32 %384
  %386 = load i32, i32* %385, align 4
  %387 = icmp ne i32 %386, 0
  br i1 %387, label %bn_digits_if.then147, label %bn_digits_if.end148

bn_digits_if.then147:                             ; preds = %bn_digits_for.body146
  br label %bn_digits_for.end150

bn_digits_if.end148:                              ; preds = %bn_digits_for.body146
  br label %bn_digits_for.inc149

bn_digits_for.inc149:                             ; preds = %bn_digits_if.end148
  %388 = load i32, i32* %378, align 4
  %389 = add nsw i32 %388, -1
  store i32 %389, i32* %378, align 4
  br label %bn_digits_for.cond145

bn_digits_for.end150:                             ; preds = %bn_digits_if.then147, %bn_digits_for.cond145
  %390 = load i32, i32* %378, align 4
  %391 = add nsw i32 %390, 1
  br label %entry.split.split

entry.split.split:                                ; preds = %bn_digits_for.end150
  store i32 %391, i32* %pdigits, align 4
  %392 = load i32, i32* %ndigits, align 4
  %arraydecay18 = getelementptr inbounds [65 x i32], [65 x i32]* %n, i32 0, i32 0
  %arraydecay19 = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  br label %bn_cmp_entry167

bn_cmp_entry167:                                  ; preds = %entry.split.split
  %393 = alloca i32, align 4
  %394 = alloca i32, align 4
  %395 = alloca i32*, align 4
  %396 = alloca i32*, align 4
  %397 = alloca i32, align 4
  store i32 %392, i32* %394, align 4
  store i32* %arraydecay18, i32** %395, align 4
  store i32* %arraydecay19, i32** %396, align 4
  %398 = load i32, i32* %394, align 4
  %399 = sub i32 %398, 1
  store i32 %399, i32* %397, align 4
  br label %bn_cmp_for.cond168

bn_cmp_for.cond168:                               ; preds = %bn_cmp_for.inc174, %bn_cmp_entry167
  %400 = load i32, i32* %397, align 4
  %401 = icmp sge i32 %400, 0
  br i1 %401, label %bn_cmp_for.body169, label %bn_cmp_for.end175

bn_cmp_for.body169:                               ; preds = %bn_cmp_for.cond168
  %402 = load i32*, i32** %396, align 4
  %403 = load i32, i32* %397, align 4
  %404 = getelementptr inbounds i32, i32* %402, i32 %403
  %405 = load i32, i32* %404, align 4
  %406 = load i32*, i32** %395, align 4
  %407 = load i32, i32* %397, align 4
  %408 = getelementptr inbounds i32, i32* %406, i32 %407
  %409 = load i32, i32* %408, align 4
  %410 = icmp ugt i32 %405, %409
  br i1 %410, label %bn_cmp_if.then170, label %bn_cmp_if.end171

bn_cmp_if.then170:                                ; preds = %bn_cmp_for.body169
  store i32 1, i32* %393, align 4
  br label %bn_cmp_return176

bn_cmp_if.end171:                                 ; preds = %bn_cmp_for.body169
  %411 = load i32*, i32** %396, align 4
  %412 = load i32, i32* %397, align 4
  %413 = getelementptr inbounds i32, i32* %411, i32 %412
  %414 = load i32, i32* %413, align 4
  %415 = load i32*, i32** %395, align 4
  %416 = load i32, i32* %397, align 4
  %417 = getelementptr inbounds i32, i32* %415, i32 %416
  %418 = load i32, i32* %417, align 4
  %419 = icmp ult i32 %414, %418
  br i1 %419, label %bn_cmp_if.then6172, label %bn_cmp_if.end7173

bn_cmp_if.then6172:                               ; preds = %bn_cmp_if.end171
  store i32 -1, i32* %393, align 4
  br label %bn_cmp_return176

bn_cmp_if.end7173:                                ; preds = %bn_cmp_if.end171
  br label %bn_cmp_for.inc174

bn_cmp_for.inc174:                                ; preds = %bn_cmp_if.end7173
  %420 = load i32, i32* %397, align 4
  %421 = add nsw i32 %420, -1
  store i32 %421, i32* %397, align 4
  br label %bn_cmp_for.cond168

bn_cmp_for.end175:                                ; preds = %bn_cmp_for.cond168
  store i32 0, i32* %393, align 4
  br label %bn_cmp_return176

bn_cmp_return176:                                 ; preds = %bn_cmp_for.end175, %bn_cmp_if.then6172, %bn_cmp_if.then170
  %422 = load i32, i32* %393, align 4
  br label %entry.split.split.split

entry.split.split.split:                          ; preds = %bn_cmp_return176
  %cmp = icmp sge i32 %422, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry.split.split.split
  store i32 4097, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry.split.split.split
  %423 = load i32, i32* %pdigits, align 4
  %arraydecay21 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %424 = load i32, i32* %cdigits, align 4
  %arraydecay22 = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  %arraydecay23 = getelementptr inbounds [65 x i32], [65 x i32]* %cp, i32 0, i32 0
  br label %bn_mod_entry179

bn_mod_entry179:                                  ; preds = %if.end
  %425 = alloca i32, align 4
  %426 = alloca i32*, align 4
  %427 = alloca i32, align 4
  %428 = alloca i32*, align 4
  %429 = alloca i32*, align 4
  %430 = alloca [130 x i32], align 4
  store i32 %423, i32* %425, align 4
  store i32* %arraydecay21, i32** %426, align 4
  store i32 %424, i32* %427, align 4
  store i32* %arraydecay22, i32** %428, align 4
  store i32* %arraydecay23, i32** %429, align 4
  %431 = bitcast [130 x i32]* %430 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %431, i8 0, i32 520, i1 false)
  %432 = load i32, i32* %425, align 4
  %433 = load i32*, i32** %426, align 4
  %434 = load i32, i32* %427, align 4
  %435 = load i32*, i32** %428, align 4
  %436 = load i32*, i32** %429, align 4
  %437 = getelementptr inbounds [130 x i32], [130 x i32]* %430, i32 0, i32 0
  br label %bn_mod_bn_div_entry180

bn_mod_bn_div_entry180:                           ; preds = %bn_mod_entry179
  %438 = alloca i32, align 4
  %439 = alloca i32*, align 4
  %440 = alloca i32, align 4
  %441 = alloca i32*, align 4
  %442 = alloca i32*, align 4
  %443 = alloca i32*, align 4
  %444 = alloca i64, align 8
  %445 = alloca i32, align 4
  %446 = alloca i32, align 4
  %447 = alloca [131 x i32], align 4
  %448 = alloca [65 x i32], align 4
  %449 = alloca i32, align 4
  %450 = alloca i32, align 4
  %451 = alloca i32, align 4
  store i32 %432, i32* %438, align 4
  store i32* %433, i32** %439, align 4
  store i32 %434, i32* %440, align 4
  store i32* %435, i32** %441, align 4
  store i32* %436, i32** %442, align 4
  store i32* %437, i32** %443, align 4
  %452 = load i32, i32* %438, align 4
  %453 = load i32*, i32** %439, align 4
  br label %bn_mod_bn_div_bn_digits_entry181

bn_mod_bn_div_bn_digits_entry181:                 ; preds = %bn_mod_bn_div_entry180
  %454 = alloca i32, align 4
  %455 = alloca i32*, align 4
  %456 = alloca i32, align 4
  store i32 %452, i32* %454, align 4
  store i32* %453, i32** %455, align 4
  %457 = load i32, i32* %454, align 4
  %458 = sub i32 %457, 1
  store i32 %458, i32* %456, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond182

bn_mod_bn_div_bn_digits_for.cond182:              ; preds = %bn_mod_bn_div_bn_digits_for.inc186, %bn_mod_bn_div_bn_digits_entry181
  %459 = load i32, i32* %456, align 4
  %460 = icmp sge i32 %459, 0
  br i1 %460, label %bn_mod_bn_div_bn_digits_for.body183, label %bn_mod_bn_div_bn_digits_for.end187

bn_mod_bn_div_bn_digits_for.body183:              ; preds = %bn_mod_bn_div_bn_digits_for.cond182
  %461 = load i32*, i32** %455, align 4
  %462 = load i32, i32* %456, align 4
  %463 = getelementptr inbounds i32, i32* %461, i32 %462
  %464 = load i32, i32* %463, align 4
  %465 = icmp ne i32 %464, 0
  br i1 %465, label %bn_mod_bn_div_bn_digits_if.then184, label %bn_mod_bn_div_bn_digits_if.end185

bn_mod_bn_div_bn_digits_if.then184:               ; preds = %bn_mod_bn_div_bn_digits_for.body183
  br label %bn_mod_bn_div_bn_digits_for.end187

bn_mod_bn_div_bn_digits_if.end185:                ; preds = %bn_mod_bn_div_bn_digits_for.body183
  br label %bn_mod_bn_div_bn_digits_for.inc186

bn_mod_bn_div_bn_digits_for.inc186:               ; preds = %bn_mod_bn_div_bn_digits_if.end185
  %466 = load i32, i32* %456, align 4
  %467 = add nsw i32 %466, -1
  store i32 %467, i32* %456, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond182

bn_mod_bn_div_bn_digits_for.end187:               ; preds = %bn_mod_bn_div_bn_digits_if.then184, %bn_mod_bn_div_bn_digits_for.cond182
  %468 = load i32, i32* %456, align 4
  %469 = add nsw i32 %468, 1
  br label %bn_mod_bn_div_entry.split188

bn_mod_bn_div_entry.split188:                     ; preds = %bn_mod_bn_div_bn_digits_for.end187
  store i32 %469, i32* %450, align 4
  %470 = load i32, i32* %450, align 4
  %471 = icmp eq i32 %470, 0
  br i1 %471, label %bn_mod_bn_div_if.then189, label %bn_mod_bn_div_if.end190

bn_mod_bn_div_if.then189:                         ; preds = %bn_mod_bn_div_entry.split188
  br label %bn_mod_bn_div_return244

bn_mod_bn_div_if.end190:                          ; preds = %bn_mod_bn_div_entry.split188
  %472 = load i32*, i32** %439, align 4
  %473 = load i32, i32* %450, align 4
  %474 = sub i32 %473, 1
  %475 = getelementptr inbounds i32, i32* %472, i32 %474
  %476 = load i32, i32* %475, align 4
  %477 = call i32 @bn_digit_bits(i32 %476)
  %478 = sub i32 32, %477
  store i32 %478, i32* %451, align 4
  %479 = load i32, i32* %450, align 4
  %480 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7191

bn_mod_bn_div_bn_assign_zero_entry7191:           ; preds = %bn_mod_bn_div_if.end190
  %481 = alloca i32, align 4
  %482 = alloca i32*, align 4
  %483 = alloca i32, align 4
  store i32 %479, i32* %481, align 4
  store i32* %480, i32** %482, align 4
  store i32 0, i32* %483, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8192

bn_mod_bn_div_bn_assign_zero_for.cond8192:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc10194, %bn_mod_bn_div_bn_assign_zero_entry7191
  %484 = load i32, i32* %483, align 4
  %485 = load i32, i32* %481, align 4
  %486 = icmp ult i32 %484, %485
  br i1 %486, label %bn_mod_bn_div_bn_assign_zero_for.body9193, label %bn_mod_bn_div_bn_assign_zero_for.end11195

bn_mod_bn_div_bn_assign_zero_for.body9193:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8192
  %487 = load i32*, i32** %482, align 4
  %488 = load i32, i32* %483, align 4
  %489 = getelementptr inbounds i32, i32* %487, i32 %488
  store i32 0, i32* %489, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc10194

bn_mod_bn_div_bn_assign_zero_for.inc10194:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.body9193
  %490 = load i32, i32* %483, align 4
  %491 = add i32 %490, 1
  store i32 %491, i32* %483, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8192

bn_mod_bn_div_bn_assign_zero_for.end11195:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8192
  br label %bn_mod_bn_div_if.end.split6196

bn_mod_bn_div_if.end.split6196:                   ; preds = %bn_mod_bn_div_bn_assign_zero_for.end11195
  %492 = load i32, i32* %440, align 4
  %493 = load i32, i32* %451, align 4
  %494 = load i32*, i32** %441, align 4
  %495 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 0
  %496 = call i32 @bn_shift_l(i32* %495, i32* %494, i32 %493, i32 %492)
  %497 = load i32, i32* %440, align 4
  %498 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %497
  store i32 %496, i32* %498, align 4
  %499 = load i32, i32* %450, align 4
  %500 = load i32, i32* %451, align 4
  %501 = load i32*, i32** %439, align 4
  %502 = getelementptr inbounds [65 x i32], [65 x i32]* %448, i32 0, i32 0
  %503 = call i32 @bn_shift_l(i32* %502, i32* %501, i32 %500, i32 %499)
  %504 = load i32, i32* %450, align 4
  %505 = sub i32 %504, 1
  %506 = getelementptr inbounds [65 x i32], [65 x i32]* %448, i32 0, i32 %505
  %507 = load i32, i32* %506, align 4
  store i32 %507, i32* %446, align 4
  %508 = load i32, i32* %440, align 4
  %509 = load i32*, i32** %443, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1197

bn_mod_bn_div_bn_assign_zero_entry1197:           ; preds = %bn_mod_bn_div_if.end.split6196
  %510 = alloca i32, align 4
  %511 = alloca i32*, align 4
  %512 = alloca i32, align 4
  store i32 %508, i32* %510, align 4
  store i32* %509, i32** %511, align 4
  store i32 0, i32* %512, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2198

bn_mod_bn_div_bn_assign_zero_for.cond2198:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc4200, %bn_mod_bn_div_bn_assign_zero_entry1197
  %513 = load i32, i32* %512, align 4
  %514 = load i32, i32* %510, align 4
  %515 = icmp ult i32 %513, %514
  br i1 %515, label %bn_mod_bn_div_bn_assign_zero_for.body3199, label %bn_mod_bn_div_bn_assign_zero_for.end5201

bn_mod_bn_div_bn_assign_zero_for.body3199:        ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2198
  %516 = load i32*, i32** %511, align 4
  %517 = load i32, i32* %512, align 4
  %518 = getelementptr inbounds i32, i32* %516, i32 %517
  store i32 0, i32* %518, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc4200

bn_mod_bn_div_bn_assign_zero_for.inc4200:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.body3199
  %519 = load i32, i32* %512, align 4
  %520 = add i32 %519, 1
  store i32 %520, i32* %512, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2198

bn_mod_bn_div_bn_assign_zero_for.end5201:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2198
  br label %bn_mod_bn_div_if.end.split202

bn_mod_bn_div_if.end.split202:                    ; preds = %bn_mod_bn_div_bn_assign_zero_for.end5201
  %521 = load i32, i32* %440, align 4
  %522 = load i32, i32* %450, align 4
  %523 = sub i32 %521, %522
  store i32 %523, i32* %449, align 4
  br label %bn_mod_bn_div_for.cond203

bn_mod_bn_div_for.cond203:                        ; preds = %bn_mod_bn_div_for.inc236, %bn_mod_bn_div_if.end.split202
  %524 = load i32, i32* %449, align 4
  %525 = icmp sge i32 %524, 0
  br i1 %525, label %bn_mod_bn_div_for.body204, label %bn_mod_bn_div_for.end237

bn_mod_bn_div_for.body204:                        ; preds = %bn_mod_bn_div_for.cond203
  %526 = load i32, i32* %446, align 4
  %527 = icmp eq i32 %526, -1
  br i1 %527, label %bn_mod_bn_div_if.then13205, label %bn_mod_bn_div_if.else206

bn_mod_bn_div_if.then13205:                       ; preds = %bn_mod_bn_div_for.body204
  %528 = load i32, i32* %449, align 4
  %529 = load i32, i32* %450, align 4
  %530 = add i32 %528, %529
  %531 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %530
  %532 = load i32, i32* %531, align 4
  store i32 %532, i32* %445, align 4
  br label %bn_mod_bn_div_if.end25207

bn_mod_bn_div_if.else206:                         ; preds = %bn_mod_bn_div_for.body204
  %533 = load i32, i32* %449, align 4
  %534 = load i32, i32* %450, align 4
  %535 = add i32 %533, %534
  %536 = sub i32 %535, 1
  %537 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %536
  %538 = load i32, i32* %537, align 4
  %539 = zext i32 %538 to i64
  store i64 %539, i64* %444, align 8
  %540 = load i32, i32* %449, align 4
  %541 = load i32, i32* %450, align 4
  %542 = add i32 %540, %541
  %543 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %542
  %544 = load i32, i32* %543, align 4
  %545 = zext i32 %544 to i64
  %546 = shl i64 %545, 32
  %547 = load i64, i64* %444, align 8
  %548 = add i64 %547, %546
  store i64 %548, i64* %444, align 8
  %549 = load i64, i64* %444, align 8
  %550 = load i32, i32* %446, align 4
  %551 = add i32 %550, 1
  %552 = zext i32 %551 to i64
  %553 = udiv i64 %549, %552
  %554 = trunc i64 %553 to i32
  store i32 %554, i32* %445, align 4
  br label %bn_mod_bn_div_if.end25207

bn_mod_bn_div_if.end25207:                        ; preds = %bn_mod_bn_div_if.else206, %bn_mod_bn_div_if.then13205
  %555 = load i32, i32* %450, align 4
  %556 = getelementptr inbounds [65 x i32], [65 x i32]* %448, i32 0, i32 0
  %557 = load i32, i32* %445, align 4
  %558 = load i32, i32* %449, align 4
  %559 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %558
  %560 = load i32, i32* %449, align 4
  %561 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %560
  %562 = call i32 @bn_sub_digit_mul(i32* %561, i32* %559, i32 %557, i32* %556, i32 %555)
  %563 = load i32, i32* %449, align 4
  %564 = load i32, i32* %450, align 4
  %565 = add i32 %563, %564
  %566 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %565
  %567 = load i32, i32* %566, align 4
  %568 = sub i32 %567, %562
  store i32 %568, i32* %566, align 4
  br label %bn_mod_bn_div_while.cond208

bn_mod_bn_div_while.cond208:                      ; preds = %bn_mod_bn_div_while.body.split234, %bn_mod_bn_div_if.end25207
  %569 = load i32, i32* %449, align 4
  %570 = load i32, i32* %450, align 4
  %571 = add i32 %569, %570
  %572 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %571
  %573 = load i32, i32* %572, align 4
  %574 = icmp ne i32 %573, 0
  br i1 %574, label %bn_mod_bn_div_lor.end221, label %bn_mod_bn_div_lor.rhs209

bn_mod_bn_div_lor.rhs209:                         ; preds = %bn_mod_bn_div_while.cond208
  %575 = load i32, i32* %450, align 4
  %576 = getelementptr inbounds [65 x i32], [65 x i32]* %448, i32 0, i32 0
  %577 = load i32, i32* %449, align 4
  %578 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %577
  br label %bn_mod_bn_cmp_entry210

bn_mod_bn_cmp_entry210:                           ; preds = %bn_mod_bn_div_lor.rhs209
  %579 = alloca i32, align 4
  %580 = alloca i32, align 4
  %581 = alloca i32*, align 4
  %582 = alloca i32*, align 4
  %583 = alloca i32, align 4
  store i32 %575, i32* %580, align 4
  store i32* %576, i32** %581, align 4
  store i32* %578, i32** %582, align 4
  %584 = load i32, i32* %580, align 4
  %585 = sub i32 %584, 1
  store i32 %585, i32* %583, align 4
  br label %bn_mod_bn_cmp_for.cond211

bn_mod_bn_cmp_for.cond211:                        ; preds = %bn_mod_bn_cmp_for.inc217, %bn_mod_bn_cmp_entry210
  %586 = load i32, i32* %583, align 4
  %587 = icmp sge i32 %586, 0
  br i1 %587, label %bn_mod_bn_cmp_for.body212, label %bn_mod_bn_cmp_for.end218

bn_mod_bn_cmp_for.body212:                        ; preds = %bn_mod_bn_cmp_for.cond211
  %588 = load i32*, i32** %582, align 4
  %589 = load i32, i32* %583, align 4
  %590 = getelementptr inbounds i32, i32* %588, i32 %589
  %591 = load i32, i32* %590, align 4
  %592 = load i32*, i32** %581, align 4
  %593 = load i32, i32* %583, align 4
  %594 = getelementptr inbounds i32, i32* %592, i32 %593
  %595 = load i32, i32* %594, align 4
  %596 = icmp ugt i32 %591, %595
  br i1 %596, label %bn_mod_bn_cmp_if.then213, label %bn_mod_bn_cmp_if.end214

bn_mod_bn_cmp_if.then213:                         ; preds = %bn_mod_bn_cmp_for.body212
  store i32 1, i32* %579, align 4
  br label %bn_mod_bn_cmp_return219

bn_mod_bn_cmp_if.end214:                          ; preds = %bn_mod_bn_cmp_for.body212
  %597 = load i32*, i32** %582, align 4
  %598 = load i32, i32* %583, align 4
  %599 = getelementptr inbounds i32, i32* %597, i32 %598
  %600 = load i32, i32* %599, align 4
  %601 = load i32*, i32** %581, align 4
  %602 = load i32, i32* %583, align 4
  %603 = getelementptr inbounds i32, i32* %601, i32 %602
  %604 = load i32, i32* %603, align 4
  %605 = icmp ult i32 %600, %604
  br i1 %605, label %bn_mod_bn_cmp_if.then6215, label %bn_mod_bn_cmp_if.end7216

bn_mod_bn_cmp_if.then6215:                        ; preds = %bn_mod_bn_cmp_if.end214
  store i32 -1, i32* %579, align 4
  br label %bn_mod_bn_cmp_return219

bn_mod_bn_cmp_if.end7216:                         ; preds = %bn_mod_bn_cmp_if.end214
  br label %bn_mod_bn_cmp_for.inc217

bn_mod_bn_cmp_for.inc217:                         ; preds = %bn_mod_bn_cmp_if.end7216
  %606 = load i32, i32* %583, align 4
  %607 = add nsw i32 %606, -1
  store i32 %607, i32* %583, align 4
  br label %bn_mod_bn_cmp_for.cond211

bn_mod_bn_cmp_for.end218:                         ; preds = %bn_mod_bn_cmp_for.cond211
  store i32 0, i32* %579, align 4
  br label %bn_mod_bn_cmp_return219

bn_mod_bn_cmp_return219:                          ; preds = %bn_mod_bn_cmp_for.end218, %bn_mod_bn_cmp_if.then6215, %bn_mod_bn_cmp_if.then213
  %608 = load i32, i32* %579, align 4
  br label %bn_mod_bn_div_lor.rhs.split220

bn_mod_bn_div_lor.rhs.split220:                   ; preds = %bn_mod_bn_cmp_return219
  %609 = icmp sge i32 %608, 0
  br label %bn_mod_bn_div_lor.end221

bn_mod_bn_div_lor.end221:                         ; preds = %bn_mod_bn_div_lor.rhs.split220, %bn_mod_bn_div_while.cond208
  %610 = phi i1 [ true, %bn_mod_bn_div_while.cond208 ], [ %609, %bn_mod_bn_div_lor.rhs.split220 ]
  br i1 %610, label %bn_mod_bn_div_while.body222, label %bn_mod_bn_div_while.end235

bn_mod_bn_div_while.body222:                      ; preds = %bn_mod_bn_div_lor.end221
  %611 = load i32, i32* %445, align 4
  %612 = add i32 %611, 1
  store i32 %612, i32* %445, align 4
  %613 = load i32, i32* %450, align 4
  %614 = getelementptr inbounds [65 x i32], [65 x i32]* %448, i32 0, i32 0
  %615 = load i32, i32* %449, align 4
  %616 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %615
  %617 = load i32, i32* %449, align 4
  %618 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %617
  br label %bn_mod_bn_div_bn_sub_entry223

bn_mod_bn_div_bn_sub_entry223:                    ; preds = %bn_mod_bn_div_while.body222
  %619 = alloca i32, align 4
  %620 = alloca i32*, align 4
  %621 = alloca i32*, align 4
  %622 = alloca i32*, align 4
  %623 = alloca i32, align 4
  %624 = alloca i32, align 4
  %625 = alloca i32, align 4
  store i32 %613, i32* %619, align 4
  store i32* %614, i32** %620, align 4
  store i32* %616, i32** %621, align 4
  store i32* %618, i32** %622, align 4
  store i32 0, i32* %624, align 4
  store i32 0, i32* %625, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond224

bn_mod_bn_div_bn_sub_for.cond224:                 ; preds = %bn_mod_bn_div_bn_sub_for.inc232, %bn_mod_bn_div_bn_sub_entry223
  %626 = load i32, i32* %625, align 4
  %627 = load i32, i32* %619, align 4
  %628 = icmp ult i32 %626, %627
  br i1 %628, label %bn_mod_bn_div_bn_sub_for.body225, label %bn_mod_bn_div_bn_sub_for.end233

bn_mod_bn_div_bn_sub_for.body225:                 ; preds = %bn_mod_bn_div_bn_sub_for.cond224
  %629 = load i32*, i32** %621, align 4
  %630 = load i32, i32* %625, align 4
  %631 = getelementptr inbounds i32, i32* %629, i32 %630
  %632 = load i32, i32* %631, align 4
  %633 = load i32, i32* %624, align 4
  %634 = sub i32 %632, %633
  store i32 %634, i32* %623, align 4
  %635 = load i32, i32* %624, align 4
  %636 = sub i32 -1, %635
  %637 = icmp ugt i32 %634, %636
  br i1 %637, label %bn_mod_bn_div_bn_sub_if.then226, label %bn_mod_bn_div_bn_sub_if.else227

bn_mod_bn_div_bn_sub_if.then226:                  ; preds = %bn_mod_bn_div_bn_sub_for.body225
  %638 = load i32*, i32** %620, align 4
  %639 = load i32, i32* %625, align 4
  %640 = getelementptr inbounds i32, i32* %638, i32 %639
  %641 = load i32, i32* %640, align 4
  %642 = sub i32 -1, %641
  store i32 %642, i32* %623, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12231

bn_mod_bn_div_bn_sub_if.else227:                  ; preds = %bn_mod_bn_div_bn_sub_for.body225
  %643 = load i32*, i32** %620, align 4
  %644 = load i32, i32* %625, align 4
  %645 = getelementptr inbounds i32, i32* %643, i32 %644
  %646 = load i32, i32* %645, align 4
  %647 = load i32, i32* %623, align 4
  %648 = sub i32 %647, %646
  store i32 %648, i32* %623, align 4
  %649 = load i32*, i32** %620, align 4
  %650 = load i32, i32* %625, align 4
  %651 = getelementptr inbounds i32, i32* %649, i32 %650
  %652 = load i32, i32* %651, align 4
  %653 = sub i32 -1, %652
  %654 = icmp ugt i32 %648, %653
  br i1 %654, label %bn_mod_bn_div_bn_sub_if.then10228, label %bn_mod_bn_div_bn_sub_if.else11229

bn_mod_bn_div_bn_sub_if.then10228:                ; preds = %bn_mod_bn_div_bn_sub_if.else227
  store i32 1, i32* %624, align 4
  br label %bn_mod_bn_div_bn_sub_if.end230

bn_mod_bn_div_bn_sub_if.else11229:                ; preds = %bn_mod_bn_div_bn_sub_if.else227
  store i32 0, i32* %624, align 4
  br label %bn_mod_bn_div_bn_sub_if.end230

bn_mod_bn_div_bn_sub_if.end230:                   ; preds = %bn_mod_bn_div_bn_sub_if.else11229, %bn_mod_bn_div_bn_sub_if.then10228
  br label %bn_mod_bn_div_bn_sub_if.end12231

bn_mod_bn_div_bn_sub_if.end12231:                 ; preds = %bn_mod_bn_div_bn_sub_if.end230, %bn_mod_bn_div_bn_sub_if.then226
  %655 = load i32, i32* %623, align 4
  %656 = load i32*, i32** %622, align 4
  %657 = load i32, i32* %625, align 4
  %658 = getelementptr inbounds i32, i32* %656, i32 %657
  store i32 %655, i32* %658, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc232

bn_mod_bn_div_bn_sub_for.inc232:                  ; preds = %bn_mod_bn_div_bn_sub_if.end12231
  %659 = load i32, i32* %625, align 4
  %660 = add i32 %659, 1
  store i32 %660, i32* %625, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond224

bn_mod_bn_div_bn_sub_for.end233:                  ; preds = %bn_mod_bn_div_bn_sub_for.cond224
  %661 = load i32, i32* %624, align 4
  br label %bn_mod_bn_div_while.body.split234

bn_mod_bn_div_while.body.split234:                ; preds = %bn_mod_bn_div_bn_sub_for.end233
  %662 = load i32, i32* %449, align 4
  %663 = load i32, i32* %450, align 4
  %664 = add i32 %662, %663
  %665 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 %664
  %666 = load i32, i32* %665, align 4
  %667 = sub i32 %666, %661
  store i32 %667, i32* %665, align 4
  br label %bn_mod_bn_div_while.cond208

bn_mod_bn_div_while.end235:                       ; preds = %bn_mod_bn_div_lor.end221
  %668 = load i32, i32* %445, align 4
  %669 = load i32*, i32** %443, align 4
  %670 = load i32, i32* %449, align 4
  %671 = getelementptr inbounds i32, i32* %669, i32 %670
  store i32 %668, i32* %671, align 4
  br label %bn_mod_bn_div_for.inc236

bn_mod_bn_div_for.inc236:                         ; preds = %bn_mod_bn_div_while.end235
  %672 = load i32, i32* %449, align 4
  %673 = add nsw i32 %672, -1
  store i32 %673, i32* %449, align 4
  br label %bn_mod_bn_div_for.cond203

bn_mod_bn_div_for.end237:                         ; preds = %bn_mod_bn_div_for.cond203
  %674 = load i32, i32* %438, align 4
  %675 = load i32*, i32** %442, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry238

bn_mod_bn_div_bn_assign_zero_entry238:            ; preds = %bn_mod_bn_div_for.end237
  %676 = alloca i32, align 4
  %677 = alloca i32*, align 4
  %678 = alloca i32, align 4
  store i32 %674, i32* %676, align 4
  store i32* %675, i32** %677, align 4
  store i32 0, i32* %678, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond239

bn_mod_bn_div_bn_assign_zero_for.cond239:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc241, %bn_mod_bn_div_bn_assign_zero_entry238
  %679 = load i32, i32* %678, align 4
  %680 = load i32, i32* %676, align 4
  %681 = icmp ult i32 %679, %680
  br i1 %681, label %bn_mod_bn_div_bn_assign_zero_for.body240, label %bn_mod_bn_div_bn_assign_zero_for.end242

bn_mod_bn_div_bn_assign_zero_for.body240:         ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond239
  %682 = load i32*, i32** %677, align 4
  %683 = load i32, i32* %678, align 4
  %684 = getelementptr inbounds i32, i32* %682, i32 %683
  store i32 0, i32* %684, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc241

bn_mod_bn_div_bn_assign_zero_for.inc241:          ; preds = %bn_mod_bn_div_bn_assign_zero_for.body240
  %685 = load i32, i32* %678, align 4
  %686 = add i32 %685, 1
  store i32 %686, i32* %678, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond239

bn_mod_bn_div_bn_assign_zero_for.end242:          ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond239
  br label %bn_mod_bn_div_for.end.split243

bn_mod_bn_div_for.end.split243:                   ; preds = %bn_mod_bn_div_bn_assign_zero_for.end242
  %687 = load i32, i32* %450, align 4
  %688 = load i32, i32* %451, align 4
  %689 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 0
  %690 = load i32*, i32** %442, align 4
  %691 = call i32 @bn_shift_r(i32* %690, i32* %689, i32 %688, i32 %687)
  %692 = getelementptr inbounds [131 x i32], [131 x i32]* %447, i32 0, i32 0
  %693 = bitcast i32* %692 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %693, i8 0, i32 524, i1 false)
  %694 = getelementptr inbounds [65 x i32], [65 x i32]* %448, i32 0, i32 0
  %695 = bitcast i32* %694 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %695, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return244

bn_mod_bn_div_return244:                          ; preds = %bn_mod_bn_div_for.end.split243, %bn_mod_bn_div_if.then189
  br label %bn_mod_entry.split245

bn_mod_entry.split245:                            ; preds = %bn_mod_bn_div_return244
  %696 = getelementptr inbounds [130 x i32], [130 x i32]* %430, i32 0, i32 0
  %697 = bitcast i32* %696 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %697, i8 0, i32 520, i1 false)
  br label %if.end.split178

if.end.split178:                                  ; preds = %bn_mod_entry.split245
  %698 = load i32, i32* %pdigits, align 4
  %arraydecay24 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %699 = load i32, i32* %cdigits, align 4
  %arraydecay25 = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [65 x i32], [65 x i32]* %cq, i32 0, i32 0
  br label %bn_mod_entry

bn_mod_entry:                                     ; preds = %if.end.split178
  %700 = alloca i32, align 4
  %701 = alloca i32*, align 4
  %702 = alloca i32, align 4
  %703 = alloca i32*, align 4
  %704 = alloca i32*, align 4
  %705 = alloca [130 x i32], align 4
  store i32 %698, i32* %700, align 4
  store i32* %arraydecay24, i32** %701, align 4
  store i32 %699, i32* %702, align 4
  store i32* %arraydecay25, i32** %703, align 4
  store i32* %arraydecay26, i32** %704, align 4
  %706 = bitcast [130 x i32]* %705 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %706, i8 0, i32 520, i1 false)
  %707 = load i32, i32* %700, align 4
  %708 = load i32*, i32** %701, align 4
  %709 = load i32, i32* %702, align 4
  %710 = load i32*, i32** %703, align 4
  %711 = load i32*, i32** %704, align 4
  %712 = getelementptr inbounds [130 x i32], [130 x i32]* %705, i32 0, i32 0
  br label %bn_mod_bn_div_entry

bn_mod_bn_div_entry:                              ; preds = %bn_mod_entry
  %713 = alloca i32, align 4
  %714 = alloca i32*, align 4
  %715 = alloca i32, align 4
  %716 = alloca i32*, align 4
  %717 = alloca i32*, align 4
  %718 = alloca i32*, align 4
  %719 = alloca i64, align 8
  %720 = alloca i32, align 4
  %721 = alloca i32, align 4
  %722 = alloca [131 x i32], align 4
  %723 = alloca [65 x i32], align 4
  %724 = alloca i32, align 4
  %725 = alloca i32, align 4
  %726 = alloca i32, align 4
  store i32 %707, i32* %713, align 4
  store i32* %708, i32** %714, align 4
  store i32 %709, i32* %715, align 4
  store i32* %710, i32** %716, align 4
  store i32* %711, i32** %717, align 4
  store i32* %712, i32** %718, align 4
  %727 = load i32, i32* %713, align 4
  %728 = load i32*, i32** %714, align 4
  br label %bn_mod_bn_div_bn_digits_entry

bn_mod_bn_div_bn_digits_entry:                    ; preds = %bn_mod_bn_div_entry
  %729 = alloca i32, align 4
  %730 = alloca i32*, align 4
  %731 = alloca i32, align 4
  store i32 %727, i32* %729, align 4
  store i32* %728, i32** %730, align 4
  %732 = load i32, i32* %729, align 4
  %733 = sub i32 %732, 1
  store i32 %733, i32* %731, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.cond:                 ; preds = %bn_mod_bn_div_bn_digits_for.inc, %bn_mod_bn_div_bn_digits_entry
  %734 = load i32, i32* %731, align 4
  %735 = icmp sge i32 %734, 0
  br i1 %735, label %bn_mod_bn_div_bn_digits_for.body, label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_for.body:                 ; preds = %bn_mod_bn_div_bn_digits_for.cond
  %736 = load i32*, i32** %730, align 4
  %737 = load i32, i32* %731, align 4
  %738 = getelementptr inbounds i32, i32* %736, i32 %737
  %739 = load i32, i32* %738, align 4
  %740 = icmp ne i32 %739, 0
  br i1 %740, label %bn_mod_bn_div_bn_digits_if.then, label %bn_mod_bn_div_bn_digits_if.end

bn_mod_bn_div_bn_digits_if.then:                  ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.end

bn_mod_bn_div_bn_digits_if.end:                   ; preds = %bn_mod_bn_div_bn_digits_for.body
  br label %bn_mod_bn_div_bn_digits_for.inc

bn_mod_bn_div_bn_digits_for.inc:                  ; preds = %bn_mod_bn_div_bn_digits_if.end
  %741 = load i32, i32* %731, align 4
  %742 = add nsw i32 %741, -1
  store i32 %742, i32* %731, align 4
  br label %bn_mod_bn_div_bn_digits_for.cond

bn_mod_bn_div_bn_digits_for.end:                  ; preds = %bn_mod_bn_div_bn_digits_if.then, %bn_mod_bn_div_bn_digits_for.cond
  %743 = load i32, i32* %731, align 4
  %744 = add nsw i32 %743, 1
  br label %bn_mod_bn_div_entry.split

bn_mod_bn_div_entry.split:                        ; preds = %bn_mod_bn_div_bn_digits_for.end
  store i32 %744, i32* %725, align 4
  %745 = load i32, i32* %725, align 4
  %746 = icmp eq i32 %745, 0
  br i1 %746, label %bn_mod_bn_div_if.then, label %bn_mod_bn_div_if.end

bn_mod_bn_div_if.then:                            ; preds = %bn_mod_bn_div_entry.split
  br label %bn_mod_bn_div_return

bn_mod_bn_div_if.end:                             ; preds = %bn_mod_bn_div_entry.split
  %747 = load i32*, i32** %714, align 4
  %748 = load i32, i32* %725, align 4
  %749 = sub i32 %748, 1
  %750 = getelementptr inbounds i32, i32* %747, i32 %749
  %751 = load i32, i32* %750, align 4
  %752 = call i32 @bn_digit_bits(i32 %751)
  %753 = sub i32 32, %752
  store i32 %753, i32* %726, align 4
  %754 = load i32, i32* %725, align 4
  %755 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 0
  br label %bn_mod_bn_div_bn_assign_zero_entry7

bn_mod_bn_div_bn_assign_zero_entry7:              ; preds = %bn_mod_bn_div_if.end
  %756 = alloca i32, align 4
  %757 = alloca i32*, align 4
  %758 = alloca i32, align 4
  store i32 %754, i32* %756, align 4
  store i32* %755, i32** %757, align 4
  store i32 0, i32* %758, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.cond8:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc10, %bn_mod_bn_div_bn_assign_zero_entry7
  %759 = load i32, i32* %758, align 4
  %760 = load i32, i32* %756, align 4
  %761 = icmp ult i32 %759, %760
  br i1 %761, label %bn_mod_bn_div_bn_assign_zero_for.body9, label %bn_mod_bn_div_bn_assign_zero_for.end11

bn_mod_bn_div_bn_assign_zero_for.body9:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  %762 = load i32*, i32** %757, align 4
  %763 = load i32, i32* %758, align 4
  %764 = getelementptr inbounds i32, i32* %762, i32 %763
  store i32 0, i32* %764, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc10

bn_mod_bn_div_bn_assign_zero_for.inc10:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.body9
  %765 = load i32, i32* %758, align 4
  %766 = add i32 %765, 1
  store i32 %766, i32* %758, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond8

bn_mod_bn_div_bn_assign_zero_for.end11:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond8
  br label %bn_mod_bn_div_if.end.split6

bn_mod_bn_div_if.end.split6:                      ; preds = %bn_mod_bn_div_bn_assign_zero_for.end11
  %767 = load i32, i32* %715, align 4
  %768 = load i32, i32* %726, align 4
  %769 = load i32*, i32** %716, align 4
  %770 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 0
  %771 = call i32 @bn_shift_l(i32* %770, i32* %769, i32 %768, i32 %767)
  %772 = load i32, i32* %715, align 4
  %773 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %772
  store i32 %771, i32* %773, align 4
  %774 = load i32, i32* %725, align 4
  %775 = load i32, i32* %726, align 4
  %776 = load i32*, i32** %714, align 4
  %777 = getelementptr inbounds [65 x i32], [65 x i32]* %723, i32 0, i32 0
  %778 = call i32 @bn_shift_l(i32* %777, i32* %776, i32 %775, i32 %774)
  %779 = load i32, i32* %725, align 4
  %780 = sub i32 %779, 1
  %781 = getelementptr inbounds [65 x i32], [65 x i32]* %723, i32 0, i32 %780
  %782 = load i32, i32* %781, align 4
  store i32 %782, i32* %721, align 4
  %783 = load i32, i32* %715, align 4
  %784 = load i32*, i32** %718, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry1

bn_mod_bn_div_bn_assign_zero_entry1:              ; preds = %bn_mod_bn_div_if.end.split6
  %785 = alloca i32, align 4
  %786 = alloca i32*, align 4
  %787 = alloca i32, align 4
  store i32 %783, i32* %785, align 4
  store i32* %784, i32** %786, align 4
  store i32 0, i32* %787, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.cond2:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc4, %bn_mod_bn_div_bn_assign_zero_entry1
  %788 = load i32, i32* %787, align 4
  %789 = load i32, i32* %785, align 4
  %790 = icmp ult i32 %788, %789
  br i1 %790, label %bn_mod_bn_div_bn_assign_zero_for.body3, label %bn_mod_bn_div_bn_assign_zero_for.end5

bn_mod_bn_div_bn_assign_zero_for.body3:           ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  %791 = load i32*, i32** %786, align 4
  %792 = load i32, i32* %787, align 4
  %793 = getelementptr inbounds i32, i32* %791, i32 %792
  store i32 0, i32* %793, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc4

bn_mod_bn_div_bn_assign_zero_for.inc4:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.body3
  %794 = load i32, i32* %787, align 4
  %795 = add i32 %794, 1
  store i32 %795, i32* %787, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond2

bn_mod_bn_div_bn_assign_zero_for.end5:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond2
  br label %bn_mod_bn_div_if.end.split

bn_mod_bn_div_if.end.split:                       ; preds = %bn_mod_bn_div_bn_assign_zero_for.end5
  %796 = load i32, i32* %715, align 4
  %797 = load i32, i32* %725, align 4
  %798 = sub i32 %796, %797
  store i32 %798, i32* %724, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.cond:                           ; preds = %bn_mod_bn_div_for.inc, %bn_mod_bn_div_if.end.split
  %799 = load i32, i32* %724, align 4
  %800 = icmp sge i32 %799, 0
  br i1 %800, label %bn_mod_bn_div_for.body, label %bn_mod_bn_div_for.end

bn_mod_bn_div_for.body:                           ; preds = %bn_mod_bn_div_for.cond
  %801 = load i32, i32* %721, align 4
  %802 = icmp eq i32 %801, -1
  br i1 %802, label %bn_mod_bn_div_if.then13, label %bn_mod_bn_div_if.else

bn_mod_bn_div_if.then13:                          ; preds = %bn_mod_bn_div_for.body
  %803 = load i32, i32* %724, align 4
  %804 = load i32, i32* %725, align 4
  %805 = add i32 %803, %804
  %806 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %805
  %807 = load i32, i32* %806, align 4
  store i32 %807, i32* %720, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.else:                            ; preds = %bn_mod_bn_div_for.body
  %808 = load i32, i32* %724, align 4
  %809 = load i32, i32* %725, align 4
  %810 = add i32 %808, %809
  %811 = sub i32 %810, 1
  %812 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %811
  %813 = load i32, i32* %812, align 4
  %814 = zext i32 %813 to i64
  store i64 %814, i64* %719, align 8
  %815 = load i32, i32* %724, align 4
  %816 = load i32, i32* %725, align 4
  %817 = add i32 %815, %816
  %818 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %817
  %819 = load i32, i32* %818, align 4
  %820 = zext i32 %819 to i64
  %821 = shl i64 %820, 32
  %822 = load i64, i64* %719, align 8
  %823 = add i64 %822, %821
  store i64 %823, i64* %719, align 8
  %824 = load i64, i64* %719, align 8
  %825 = load i32, i32* %721, align 4
  %826 = add i32 %825, 1
  %827 = zext i32 %826 to i64
  %828 = udiv i64 %824, %827
  %829 = trunc i64 %828 to i32
  store i32 %829, i32* %720, align 4
  br label %bn_mod_bn_div_if.end25

bn_mod_bn_div_if.end25:                           ; preds = %bn_mod_bn_div_if.else, %bn_mod_bn_div_if.then13
  %830 = load i32, i32* %725, align 4
  %831 = getelementptr inbounds [65 x i32], [65 x i32]* %723, i32 0, i32 0
  %832 = load i32, i32* %720, align 4
  %833 = load i32, i32* %724, align 4
  %834 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %833
  %835 = load i32, i32* %724, align 4
  %836 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %835
  %837 = call i32 @bn_sub_digit_mul(i32* %836, i32* %834, i32 %832, i32* %831, i32 %830)
  %838 = load i32, i32* %724, align 4
  %839 = load i32, i32* %725, align 4
  %840 = add i32 %838, %839
  %841 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %840
  %842 = load i32, i32* %841, align 4
  %843 = sub i32 %842, %837
  store i32 %843, i32* %841, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.cond:                         ; preds = %bn_mod_bn_div_while.body.split, %bn_mod_bn_div_if.end25
  %844 = load i32, i32* %724, align 4
  %845 = load i32, i32* %725, align 4
  %846 = add i32 %844, %845
  %847 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %846
  %848 = load i32, i32* %847, align 4
  %849 = icmp ne i32 %848, 0
  br i1 %849, label %bn_mod_bn_div_lor.end, label %bn_mod_bn_div_lor.rhs

bn_mod_bn_div_lor.rhs:                            ; preds = %bn_mod_bn_div_while.cond
  %850 = load i32, i32* %725, align 4
  %851 = getelementptr inbounds [65 x i32], [65 x i32]* %723, i32 0, i32 0
  %852 = load i32, i32* %724, align 4
  %853 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %852
  br label %bn_mod_bn_cmp_entry

bn_mod_bn_cmp_entry:                              ; preds = %bn_mod_bn_div_lor.rhs
  %854 = alloca i32, align 4
  %855 = alloca i32, align 4
  %856 = alloca i32*, align 4
  %857 = alloca i32*, align 4
  %858 = alloca i32, align 4
  store i32 %850, i32* %855, align 4
  store i32* %851, i32** %856, align 4
  store i32* %853, i32** %857, align 4
  %859 = load i32, i32* %855, align 4
  %860 = sub i32 %859, 1
  store i32 %860, i32* %858, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.cond:                           ; preds = %bn_mod_bn_cmp_for.inc, %bn_mod_bn_cmp_entry
  %861 = load i32, i32* %858, align 4
  %862 = icmp sge i32 %861, 0
  br i1 %862, label %bn_mod_bn_cmp_for.body, label %bn_mod_bn_cmp_for.end

bn_mod_bn_cmp_for.body:                           ; preds = %bn_mod_bn_cmp_for.cond
  %863 = load i32*, i32** %857, align 4
  %864 = load i32, i32* %858, align 4
  %865 = getelementptr inbounds i32, i32* %863, i32 %864
  %866 = load i32, i32* %865, align 4
  %867 = load i32*, i32** %856, align 4
  %868 = load i32, i32* %858, align 4
  %869 = getelementptr inbounds i32, i32* %867, i32 %868
  %870 = load i32, i32* %869, align 4
  %871 = icmp ugt i32 %866, %870
  br i1 %871, label %bn_mod_bn_cmp_if.then, label %bn_mod_bn_cmp_if.end

bn_mod_bn_cmp_if.then:                            ; preds = %bn_mod_bn_cmp_for.body
  store i32 1, i32* %854, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end:                             ; preds = %bn_mod_bn_cmp_for.body
  %872 = load i32*, i32** %857, align 4
  %873 = load i32, i32* %858, align 4
  %874 = getelementptr inbounds i32, i32* %872, i32 %873
  %875 = load i32, i32* %874, align 4
  %876 = load i32*, i32** %856, align 4
  %877 = load i32, i32* %858, align 4
  %878 = getelementptr inbounds i32, i32* %876, i32 %877
  %879 = load i32, i32* %878, align 4
  %880 = icmp ult i32 %875, %879
  br i1 %880, label %bn_mod_bn_cmp_if.then6, label %bn_mod_bn_cmp_if.end7

bn_mod_bn_cmp_if.then6:                           ; preds = %bn_mod_bn_cmp_if.end
  store i32 -1, i32* %854, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_if.end7:                            ; preds = %bn_mod_bn_cmp_if.end
  br label %bn_mod_bn_cmp_for.inc

bn_mod_bn_cmp_for.inc:                            ; preds = %bn_mod_bn_cmp_if.end7
  %881 = load i32, i32* %858, align 4
  %882 = add nsw i32 %881, -1
  store i32 %882, i32* %858, align 4
  br label %bn_mod_bn_cmp_for.cond

bn_mod_bn_cmp_for.end:                            ; preds = %bn_mod_bn_cmp_for.cond
  store i32 0, i32* %854, align 4
  br label %bn_mod_bn_cmp_return

bn_mod_bn_cmp_return:                             ; preds = %bn_mod_bn_cmp_for.end, %bn_mod_bn_cmp_if.then6, %bn_mod_bn_cmp_if.then
  %883 = load i32, i32* %854, align 4
  br label %bn_mod_bn_div_lor.rhs.split

bn_mod_bn_div_lor.rhs.split:                      ; preds = %bn_mod_bn_cmp_return
  %884 = icmp sge i32 %883, 0
  br label %bn_mod_bn_div_lor.end

bn_mod_bn_div_lor.end:                            ; preds = %bn_mod_bn_div_lor.rhs.split, %bn_mod_bn_div_while.cond
  %885 = phi i1 [ true, %bn_mod_bn_div_while.cond ], [ %884, %bn_mod_bn_div_lor.rhs.split ]
  br i1 %885, label %bn_mod_bn_div_while.body, label %bn_mod_bn_div_while.end

bn_mod_bn_div_while.body:                         ; preds = %bn_mod_bn_div_lor.end
  %886 = load i32, i32* %720, align 4
  %887 = add i32 %886, 1
  store i32 %887, i32* %720, align 4
  %888 = load i32, i32* %725, align 4
  %889 = getelementptr inbounds [65 x i32], [65 x i32]* %723, i32 0, i32 0
  %890 = load i32, i32* %724, align 4
  %891 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %890
  %892 = load i32, i32* %724, align 4
  %893 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %892
  br label %bn_mod_bn_div_bn_sub_entry

bn_mod_bn_div_bn_sub_entry:                       ; preds = %bn_mod_bn_div_while.body
  %894 = alloca i32, align 4
  %895 = alloca i32*, align 4
  %896 = alloca i32*, align 4
  %897 = alloca i32*, align 4
  %898 = alloca i32, align 4
  %899 = alloca i32, align 4
  %900 = alloca i32, align 4
  store i32 %888, i32* %894, align 4
  store i32* %889, i32** %895, align 4
  store i32* %891, i32** %896, align 4
  store i32* %893, i32** %897, align 4
  store i32 0, i32* %899, align 4
  store i32 0, i32* %900, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.cond:                    ; preds = %bn_mod_bn_div_bn_sub_for.inc, %bn_mod_bn_div_bn_sub_entry
  %901 = load i32, i32* %900, align 4
  %902 = load i32, i32* %894, align 4
  %903 = icmp ult i32 %901, %902
  br i1 %903, label %bn_mod_bn_div_bn_sub_for.body, label %bn_mod_bn_div_bn_sub_for.end

bn_mod_bn_div_bn_sub_for.body:                    ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %904 = load i32*, i32** %896, align 4
  %905 = load i32, i32* %900, align 4
  %906 = getelementptr inbounds i32, i32* %904, i32 %905
  %907 = load i32, i32* %906, align 4
  %908 = load i32, i32* %899, align 4
  %909 = sub i32 %907, %908
  store i32 %909, i32* %898, align 4
  %910 = load i32, i32* %899, align 4
  %911 = sub i32 -1, %910
  %912 = icmp ugt i32 %909, %911
  br i1 %912, label %bn_mod_bn_div_bn_sub_if.then, label %bn_mod_bn_div_bn_sub_if.else

bn_mod_bn_div_bn_sub_if.then:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %913 = load i32*, i32** %895, align 4
  %914 = load i32, i32* %900, align 4
  %915 = getelementptr inbounds i32, i32* %913, i32 %914
  %916 = load i32, i32* %915, align 4
  %917 = sub i32 -1, %916
  store i32 %917, i32* %898, align 4
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.else:                     ; preds = %bn_mod_bn_div_bn_sub_for.body
  %918 = load i32*, i32** %895, align 4
  %919 = load i32, i32* %900, align 4
  %920 = getelementptr inbounds i32, i32* %918, i32 %919
  %921 = load i32, i32* %920, align 4
  %922 = load i32, i32* %898, align 4
  %923 = sub i32 %922, %921
  store i32 %923, i32* %898, align 4
  %924 = load i32*, i32** %895, align 4
  %925 = load i32, i32* %900, align 4
  %926 = getelementptr inbounds i32, i32* %924, i32 %925
  %927 = load i32, i32* %926, align 4
  %928 = sub i32 -1, %927
  %929 = icmp ugt i32 %923, %928
  br i1 %929, label %bn_mod_bn_div_bn_sub_if.then10, label %bn_mod_bn_div_bn_sub_if.else11

bn_mod_bn_div_bn_sub_if.then10:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 1, i32* %899, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.else11:                   ; preds = %bn_mod_bn_div_bn_sub_if.else
  store i32 0, i32* %899, align 4
  br label %bn_mod_bn_div_bn_sub_if.end

bn_mod_bn_div_bn_sub_if.end:                      ; preds = %bn_mod_bn_div_bn_sub_if.else11, %bn_mod_bn_div_bn_sub_if.then10
  br label %bn_mod_bn_div_bn_sub_if.end12

bn_mod_bn_div_bn_sub_if.end12:                    ; preds = %bn_mod_bn_div_bn_sub_if.end, %bn_mod_bn_div_bn_sub_if.then
  %930 = load i32, i32* %898, align 4
  %931 = load i32*, i32** %897, align 4
  %932 = load i32, i32* %900, align 4
  %933 = getelementptr inbounds i32, i32* %931, i32 %932
  store i32 %930, i32* %933, align 4
  br label %bn_mod_bn_div_bn_sub_for.inc

bn_mod_bn_div_bn_sub_for.inc:                     ; preds = %bn_mod_bn_div_bn_sub_if.end12
  %934 = load i32, i32* %900, align 4
  %935 = add i32 %934, 1
  store i32 %935, i32* %900, align 4
  br label %bn_mod_bn_div_bn_sub_for.cond

bn_mod_bn_div_bn_sub_for.end:                     ; preds = %bn_mod_bn_div_bn_sub_for.cond
  %936 = load i32, i32* %899, align 4
  br label %bn_mod_bn_div_while.body.split

bn_mod_bn_div_while.body.split:                   ; preds = %bn_mod_bn_div_bn_sub_for.end
  %937 = load i32, i32* %724, align 4
  %938 = load i32, i32* %725, align 4
  %939 = add i32 %937, %938
  %940 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 %939
  %941 = load i32, i32* %940, align 4
  %942 = sub i32 %941, %936
  store i32 %942, i32* %940, align 4
  br label %bn_mod_bn_div_while.cond

bn_mod_bn_div_while.end:                          ; preds = %bn_mod_bn_div_lor.end
  %943 = load i32, i32* %720, align 4
  %944 = load i32*, i32** %718, align 4
  %945 = load i32, i32* %724, align 4
  %946 = getelementptr inbounds i32, i32* %944, i32 %945
  store i32 %943, i32* %946, align 4
  br label %bn_mod_bn_div_for.inc

bn_mod_bn_div_for.inc:                            ; preds = %bn_mod_bn_div_while.end
  %947 = load i32, i32* %724, align 4
  %948 = add nsw i32 %947, -1
  store i32 %948, i32* %724, align 4
  br label %bn_mod_bn_div_for.cond

bn_mod_bn_div_for.end:                            ; preds = %bn_mod_bn_div_for.cond
  %949 = load i32, i32* %713, align 4
  %950 = load i32*, i32** %717, align 4
  br label %bn_mod_bn_div_bn_assign_zero_entry

bn_mod_bn_div_bn_assign_zero_entry:               ; preds = %bn_mod_bn_div_for.end
  %951 = alloca i32, align 4
  %952 = alloca i32*, align 4
  %953 = alloca i32, align 4
  store i32 %949, i32* %951, align 4
  store i32* %950, i32** %952, align 4
  store i32 0, i32* %953, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.cond:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.inc, %bn_mod_bn_div_bn_assign_zero_entry
  %954 = load i32, i32* %953, align 4
  %955 = load i32, i32* %951, align 4
  %956 = icmp ult i32 %954, %955
  br i1 %956, label %bn_mod_bn_div_bn_assign_zero_for.body, label %bn_mod_bn_div_bn_assign_zero_for.end

bn_mod_bn_div_bn_assign_zero_for.body:            ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  %957 = load i32*, i32** %952, align 4
  %958 = load i32, i32* %953, align 4
  %959 = getelementptr inbounds i32, i32* %957, i32 %958
  store i32 0, i32* %959, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.inc

bn_mod_bn_div_bn_assign_zero_for.inc:             ; preds = %bn_mod_bn_div_bn_assign_zero_for.body
  %960 = load i32, i32* %953, align 4
  %961 = add i32 %960, 1
  store i32 %961, i32* %953, align 4
  br label %bn_mod_bn_div_bn_assign_zero_for.cond

bn_mod_bn_div_bn_assign_zero_for.end:             ; preds = %bn_mod_bn_div_bn_assign_zero_for.cond
  br label %bn_mod_bn_div_for.end.split

bn_mod_bn_div_for.end.split:                      ; preds = %bn_mod_bn_div_bn_assign_zero_for.end
  %962 = load i32, i32* %725, align 4
  %963 = load i32, i32* %726, align 4
  %964 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 0
  %965 = load i32*, i32** %717, align 4
  %966 = call i32 @bn_shift_r(i32* %965, i32* %964, i32 %963, i32 %962)
  %967 = getelementptr inbounds [131 x i32], [131 x i32]* %722, i32 0, i32 0
  %968 = bitcast i32* %967 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %968, i8 0, i32 524, i1 false)
  %969 = getelementptr inbounds [65 x i32], [65 x i32]* %723, i32 0, i32 0
  %970 = bitcast i32* %969 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %970, i8 0, i32 260, i1 false)
  br label %bn_mod_bn_div_return

bn_mod_bn_div_return:                             ; preds = %bn_mod_bn_div_for.end.split, %bn_mod_bn_div_if.then
  br label %bn_mod_entry.split

bn_mod_entry.split:                               ; preds = %bn_mod_bn_div_return
  %971 = getelementptr inbounds [130 x i32], [130 x i32]* %705, i32 0, i32 0
  %972 = bitcast i32* %971 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %972, i8 0, i32 520, i1 false)
  br label %if.end.split177

if.end.split177:                                  ; preds = %bn_mod_entry.split
  %973 = load i32, i32* %pdigits, align 4
  %arraydecay27 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %974 = load i32, i32* %pdigits, align 4
  %arraydecay28 = getelementptr inbounds [65 x i32], [65 x i32]* %dp, i32 0, i32 0
  %arraydecay29 = getelementptr inbounds [65 x i32], [65 x i32]* %cp, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [65 x i32], [65 x i32]* %mp, i32 0, i32 0
  br label %bn_mod_exp_entry247

bn_mod_exp_entry247:                              ; preds = %if.end.split177
  %975 = alloca i32, align 4
  %976 = alloca i32*, align 4
  %977 = alloca i32, align 4
  %978 = alloca i32*, align 4
  %979 = alloca i32*, align 4
  %980 = alloca i32*, align 4
  %981 = alloca [3 x [65 x i32]], align 4
  %982 = alloca i32, align 4
  %983 = alloca [65 x i32], align 4
  %984 = alloca i32, align 4
  %985 = alloca i32, align 4
  %986 = alloca i32, align 4
  %987 = alloca i32, align 4
  store i32 %973, i32* %975, align 4
  store i32* %arraydecay27, i32** %976, align 4
  store i32 %974, i32* %977, align 4
  store i32* %arraydecay28, i32** %978, align 4
  store i32* %arraydecay29, i32** %979, align 4
  store i32* %arraydecay30, i32** %980, align 4
  %988 = load i32, i32* %975, align 4
  %989 = load i32*, i32** %979, align 4
  %990 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %981, i32 0, i32 0
  %991 = getelementptr inbounds [65 x i32], [65 x i32]* %990, i32 0, i32 0
  br label %bn_mod_exp_bn_assign_entry1248

bn_mod_exp_bn_assign_entry1248:                   ; preds = %bn_mod_exp_entry247
  %992 = alloca i32, align 4
  %993 = alloca i32*, align 4
  %994 = alloca i32*, align 4
  %995 = alloca i32, align 4
  store i32 %988, i32* %992, align 4
  store i32* %989, i32** %993, align 4
  store i32* %991, i32** %994, align 4
  store i32 0, i32* %995, align 4
  br label %bn_mod_exp_bn_assign_for.cond2249

bn_mod_exp_bn_assign_for.cond2249:                ; preds = %bn_mod_exp_bn_assign_for.inc4251, %bn_mod_exp_bn_assign_entry1248
  %996 = load i32, i32* %995, align 4
  %997 = load i32, i32* %992, align 4
  %998 = icmp ult i32 %996, %997
  br i1 %998, label %bn_mod_exp_bn_assign_for.body3250, label %bn_mod_exp_bn_assign_for.end5252

bn_mod_exp_bn_assign_for.body3250:                ; preds = %bn_mod_exp_bn_assign_for.cond2249
  %999 = load i32*, i32** %993, align 4
  %1000 = load i32, i32* %995, align 4
  %1001 = getelementptr inbounds i32, i32* %999, i32 %1000
  %1002 = load i32, i32* %1001, align 4
  %1003 = load i32*, i32** %994, align 4
  %1004 = load i32, i32* %995, align 4
  %1005 = getelementptr inbounds i32, i32* %1003, i32 %1004
  store i32 %1002, i32* %1005, align 4
  br label %bn_mod_exp_bn_assign_for.inc4251

bn_mod_exp_bn_assign_for.inc4251:                 ; preds = %bn_mod_exp_bn_assign_for.body3250
  %1006 = load i32, i32* %995, align 4
  %1007 = add i32 %1006, 1
  store i32 %1007, i32* %995, align 4
  br label %bn_mod_exp_bn_assign_for.cond2249

bn_mod_exp_bn_assign_for.end5252:                 ; preds = %bn_mod_exp_bn_assign_for.cond2249
  br label %bn_mod_exp_entry.split253

bn_mod_exp_entry.split253:                        ; preds = %bn_mod_exp_bn_assign_for.end5252
  %1008 = load i32, i32* %975, align 4
  %1009 = load i32*, i32** %976, align 4
  %1010 = load i32*, i32** %979, align 4
  %1011 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %981, i32 0, i32 0
  %1012 = getelementptr inbounds [65 x i32], [65 x i32]* %1011, i32 0, i32 0
  %1013 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %981, i32 0, i32 1
  %1014 = getelementptr inbounds [65 x i32], [65 x i32]* %1013, i32 0, i32 0
  call void @bn_mod_mul(i32* %1014, i32* %1012, i32* %1010, i32* %1009, i32 %1008)
  %1015 = load i32, i32* %975, align 4
  %1016 = load i32*, i32** %976, align 4
  %1017 = load i32*, i32** %979, align 4
  %1018 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %981, i32 0, i32 1
  %1019 = getelementptr inbounds [65 x i32], [65 x i32]* %1018, i32 0, i32 0
  %1020 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %981, i32 0, i32 2
  %1021 = getelementptr inbounds [65 x i32], [65 x i32]* %1020, i32 0, i32 0
  call void @bn_mod_mul(i32* %1021, i32* %1019, i32* %1017, i32* %1016, i32 %1015)
  %1022 = load i32, i32* %975, align 4
  %1023 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  br label %bn_mod_exp_bn_assign_zero_entry254

bn_mod_exp_bn_assign_zero_entry254:               ; preds = %bn_mod_exp_entry.split253
  %1024 = alloca i32, align 4
  %1025 = alloca i32*, align 4
  %1026 = alloca i32, align 4
  store i32 %1022, i32* %1024, align 4
  store i32* %1023, i32** %1025, align 4
  store i32 0, i32* %1026, align 4
  br label %bn_mod_exp_bn_assign_zero_for.cond255

bn_mod_exp_bn_assign_zero_for.cond255:            ; preds = %bn_mod_exp_bn_assign_zero_for.inc257, %bn_mod_exp_bn_assign_zero_entry254
  %1027 = load i32, i32* %1026, align 4
  %1028 = load i32, i32* %1024, align 4
  %1029 = icmp ult i32 %1027, %1028
  br i1 %1029, label %bn_mod_exp_bn_assign_zero_for.body256, label %bn_mod_exp_bn_assign_zero_for.end258

bn_mod_exp_bn_assign_zero_for.body256:            ; preds = %bn_mod_exp_bn_assign_zero_for.cond255
  %1030 = load i32*, i32** %1025, align 4
  %1031 = load i32, i32* %1026, align 4
  %1032 = getelementptr inbounds i32, i32* %1030, i32 %1031
  store i32 0, i32* %1032, align 4
  br label %bn_mod_exp_bn_assign_zero_for.inc257

bn_mod_exp_bn_assign_zero_for.inc257:             ; preds = %bn_mod_exp_bn_assign_zero_for.body256
  %1033 = load i32, i32* %1026, align 4
  %1034 = add i32 %1033, 1
  store i32 %1034, i32* %1026, align 4
  br label %bn_mod_exp_bn_assign_zero_for.cond255

bn_mod_exp_bn_assign_zero_for.end258:             ; preds = %bn_mod_exp_bn_assign_zero_for.cond255
  br label %bn_mod_exp_entry.split.split259

bn_mod_exp_entry.split.split259:                  ; preds = %bn_mod_exp_bn_assign_zero_for.end258
  %1035 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  store i32 1, i32* %1035, align 4
  %1036 = load i32, i32* %977, align 4
  %1037 = load i32*, i32** %978, align 4
  br label %bn_mod_exp_bn_digits_entry260

bn_mod_exp_bn_digits_entry260:                    ; preds = %bn_mod_exp_entry.split.split259
  %1038 = alloca i32, align 4
  %1039 = alloca i32*, align 4
  %1040 = alloca i32, align 4
  store i32 %1036, i32* %1038, align 4
  store i32* %1037, i32** %1039, align 4
  %1041 = load i32, i32* %1038, align 4
  %1042 = sub i32 %1041, 1
  store i32 %1042, i32* %1040, align 4
  br label %bn_mod_exp_bn_digits_for.cond261

bn_mod_exp_bn_digits_for.cond261:                 ; preds = %bn_mod_exp_bn_digits_for.inc265, %bn_mod_exp_bn_digits_entry260
  %1043 = load i32, i32* %1040, align 4
  %1044 = icmp sge i32 %1043, 0
  br i1 %1044, label %bn_mod_exp_bn_digits_for.body262, label %bn_mod_exp_bn_digits_for.end266

bn_mod_exp_bn_digits_for.body262:                 ; preds = %bn_mod_exp_bn_digits_for.cond261
  %1045 = load i32*, i32** %1039, align 4
  %1046 = load i32, i32* %1040, align 4
  %1047 = getelementptr inbounds i32, i32* %1045, i32 %1046
  %1048 = load i32, i32* %1047, align 4
  %1049 = icmp ne i32 %1048, 0
  br i1 %1049, label %bn_mod_exp_bn_digits_if.then263, label %bn_mod_exp_bn_digits_if.end264

bn_mod_exp_bn_digits_if.then263:                  ; preds = %bn_mod_exp_bn_digits_for.body262
  br label %bn_mod_exp_bn_digits_for.end266

bn_mod_exp_bn_digits_if.end264:                   ; preds = %bn_mod_exp_bn_digits_for.body262
  br label %bn_mod_exp_bn_digits_for.inc265

bn_mod_exp_bn_digits_for.inc265:                  ; preds = %bn_mod_exp_bn_digits_if.end264
  %1050 = load i32, i32* %1040, align 4
  %1051 = add nsw i32 %1050, -1
  store i32 %1051, i32* %1040, align 4
  br label %bn_mod_exp_bn_digits_for.cond261

bn_mod_exp_bn_digits_for.end266:                  ; preds = %bn_mod_exp_bn_digits_if.then263, %bn_mod_exp_bn_digits_for.cond261
  %1052 = load i32, i32* %1040, align 4
  %1053 = add nsw i32 %1052, 1
  br label %bn_mod_exp_entry.split.split.split267

bn_mod_exp_entry.split.split.split267:            ; preds = %bn_mod_exp_bn_digits_for.end266
  store i32 %1053, i32* %977, align 4
  %1054 = load i32, i32* %977, align 4
  %1055 = sub i32 %1054, 1
  store i32 %1055, i32* %984, align 4
  br label %bn_mod_exp_for.cond268

bn_mod_exp_for.cond268:                           ; preds = %bn_mod_exp_for.inc35281, %bn_mod_exp_entry.split.split.split267
  %1056 = load i32, i32* %984, align 4
  %1057 = icmp sge i32 %1056, 0
  br i1 %1057, label %bn_mod_exp_for.body269, label %bn_mod_exp_for.end36282

bn_mod_exp_for.body269:                           ; preds = %bn_mod_exp_for.cond268
  %1058 = load i32*, i32** %978, align 4
  %1059 = load i32, i32* %984, align 4
  %1060 = getelementptr inbounds i32, i32* %1058, i32 %1059
  %1061 = load i32, i32* %1060, align 4
  store i32 %1061, i32* %982, align 4
  store i32 32, i32* %985, align 4
  %1062 = load i32, i32* %984, align 4
  %1063 = load i32, i32* %977, align 4
  %1064 = sub i32 %1063, 1
  %1065 = icmp eq i32 %1062, %1064
  br i1 %1065, label %bn_mod_exp_if.then270, label %bn_mod_exp_if.end274

bn_mod_exp_if.then270:                            ; preds = %bn_mod_exp_for.body269
  br label %bn_mod_exp_while.cond271

bn_mod_exp_while.cond271:                         ; preds = %bn_mod_exp_while.body272, %bn_mod_exp_if.then270
  %1066 = load i32, i32* %982, align 4
  %1067 = lshr i32 %1066, 30
  %1068 = and i32 %1067, 3
  %1069 = icmp ne i32 %1068, 0
  %1070 = xor i1 %1069, true
  br i1 %1070, label %bn_mod_exp_while.body272, label %bn_mod_exp_while.end273

bn_mod_exp_while.body272:                         ; preds = %bn_mod_exp_while.cond271
  %1071 = load i32, i32* %982, align 4
  %1072 = shl i32 %1071, 2
  store i32 %1072, i32* %982, align 4
  %1073 = load i32, i32* %985, align 4
  %1074 = sub i32 %1073, 2
  store i32 %1074, i32* %985, align 4
  br label %bn_mod_exp_while.cond271

bn_mod_exp_while.end273:                          ; preds = %bn_mod_exp_while.cond271
  br label %bn_mod_exp_if.end274

bn_mod_exp_if.end274:                             ; preds = %bn_mod_exp_while.end273, %bn_mod_exp_for.body269
  store i32 0, i32* %986, align 4
  br label %bn_mod_exp_for.cond15275

bn_mod_exp_for.cond15275:                         ; preds = %bn_mod_exp_for.inc279, %bn_mod_exp_if.end274
  %1075 = load i32, i32* %986, align 4
  %1076 = load i32, i32* %985, align 4
  %1077 = icmp ult i32 %1075, %1076
  br i1 %1077, label %bn_mod_exp_for.body17276, label %bn_mod_exp_for.end280

bn_mod_exp_for.body17276:                         ; preds = %bn_mod_exp_for.cond15275
  %1078 = load i32, i32* %975, align 4
  %1079 = load i32*, i32** %976, align 4
  %1080 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  %1081 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  %1082 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  call void @bn_mod_mul(i32* %1082, i32* %1081, i32* %1080, i32* %1079, i32 %1078)
  %1083 = load i32, i32* %975, align 4
  %1084 = load i32*, i32** %976, align 4
  %1085 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  %1086 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  %1087 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  call void @bn_mod_mul(i32* %1087, i32* %1086, i32* %1085, i32* %1084, i32 %1083)
  %1088 = load i32, i32* %982, align 4
  %1089 = lshr i32 %1088, 30
  %1090 = and i32 %1089, 3
  store i32 %1090, i32* %987, align 4
  %1091 = icmp ne i32 %1090, 0
  br i1 %1091, label %bn_mod_exp_if.then27277, label %bn_mod_exp_if.end33278

bn_mod_exp_if.then27277:                          ; preds = %bn_mod_exp_for.body17276
  %1092 = load i32, i32* %975, align 4
  %1093 = load i32*, i32** %976, align 4
  %1094 = load i32, i32* %987, align 4
  %1095 = sub i32 %1094, 1
  %1096 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %981, i32 0, i32 %1095
  %1097 = getelementptr inbounds [65 x i32], [65 x i32]* %1096, i32 0, i32 0
  %1098 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  %1099 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  call void @bn_mod_mul(i32* %1099, i32* %1098, i32* %1097, i32* %1093, i32 %1092)
  br label %bn_mod_exp_if.end33278

bn_mod_exp_if.end33278:                           ; preds = %bn_mod_exp_if.then27277, %bn_mod_exp_for.body17276
  %1100 = load i32, i32* %982, align 4
  %1101 = shl i32 %1100, 2
  store i32 %1101, i32* %982, align 4
  br label %bn_mod_exp_for.inc279

bn_mod_exp_for.inc279:                            ; preds = %bn_mod_exp_if.end33278
  %1102 = load i32, i32* %986, align 4
  %1103 = add i32 %1102, 2
  store i32 %1103, i32* %986, align 4
  br label %bn_mod_exp_for.cond15275

bn_mod_exp_for.end280:                            ; preds = %bn_mod_exp_for.cond15275
  br label %bn_mod_exp_for.inc35281

bn_mod_exp_for.inc35281:                          ; preds = %bn_mod_exp_for.end280
  %1104 = load i32, i32* %984, align 4
  %1105 = add nsw i32 %1104, -1
  store i32 %1105, i32* %984, align 4
  br label %bn_mod_exp_for.cond268

bn_mod_exp_for.end36282:                          ; preds = %bn_mod_exp_for.cond268
  %1106 = load i32, i32* %975, align 4
  %1107 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  %1108 = load i32*, i32** %980, align 4
  br label %bn_mod_exp_bn_assign_entry283

bn_mod_exp_bn_assign_entry283:                    ; preds = %bn_mod_exp_for.end36282
  %1109 = alloca i32, align 4
  %1110 = alloca i32*, align 4
  %1111 = alloca i32*, align 4
  %1112 = alloca i32, align 4
  store i32 %1106, i32* %1109, align 4
  store i32* %1107, i32** %1110, align 4
  store i32* %1108, i32** %1111, align 4
  store i32 0, i32* %1112, align 4
  br label %bn_mod_exp_bn_assign_for.cond284

bn_mod_exp_bn_assign_for.cond284:                 ; preds = %bn_mod_exp_bn_assign_for.inc286, %bn_mod_exp_bn_assign_entry283
  %1113 = load i32, i32* %1112, align 4
  %1114 = load i32, i32* %1109, align 4
  %1115 = icmp ult i32 %1113, %1114
  br i1 %1115, label %bn_mod_exp_bn_assign_for.body285, label %bn_mod_exp_bn_assign_for.end287

bn_mod_exp_bn_assign_for.body285:                 ; preds = %bn_mod_exp_bn_assign_for.cond284
  %1116 = load i32*, i32** %1110, align 4
  %1117 = load i32, i32* %1112, align 4
  %1118 = getelementptr inbounds i32, i32* %1116, i32 %1117
  %1119 = load i32, i32* %1118, align 4
  %1120 = load i32*, i32** %1111, align 4
  %1121 = load i32, i32* %1112, align 4
  %1122 = getelementptr inbounds i32, i32* %1120, i32 %1121
  store i32 %1119, i32* %1122, align 4
  br label %bn_mod_exp_bn_assign_for.inc286

bn_mod_exp_bn_assign_for.inc286:                  ; preds = %bn_mod_exp_bn_assign_for.body285
  %1123 = load i32, i32* %1112, align 4
  %1124 = add i32 %1123, 1
  store i32 %1124, i32* %1112, align 4
  br label %bn_mod_exp_bn_assign_for.cond284

bn_mod_exp_bn_assign_for.end287:                  ; preds = %bn_mod_exp_bn_assign_for.cond284
  br label %bn_mod_exp_for.end36.split288

bn_mod_exp_for.end36.split288:                    ; preds = %bn_mod_exp_bn_assign_for.end287
  %1125 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %981, i32 0, i32 0
  %1126 = bitcast [65 x i32]* %1125 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1126, i8 0, i32 780, i1 false)
  %1127 = getelementptr inbounds [65 x i32], [65 x i32]* %983, i32 0, i32 0
  %1128 = bitcast i32* %1127 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1128, i8 0, i32 260, i1 false)
  br label %if.end.split177.split

if.end.split177.split:                            ; preds = %bn_mod_exp_for.end36.split288
  %1129 = load i32, i32* %ndigits, align 4
  %arraydecay31 = getelementptr inbounds [65 x i32], [65 x i32]* %mq, i32 0, i32 0
  br label %bn_assign_zero_entry

bn_assign_zero_entry:                             ; preds = %if.end.split177.split
  %1130 = alloca i32, align 4
  %1131 = alloca i32*, align 4
  %1132 = alloca i32, align 4
  store i32 %1129, i32* %1130, align 4
  store i32* %arraydecay31, i32** %1131, align 4
  store i32 0, i32* %1132, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.cond:                          ; preds = %bn_assign_zero_for.inc, %bn_assign_zero_entry
  %1133 = load i32, i32* %1132, align 4
  %1134 = load i32, i32* %1130, align 4
  %1135 = icmp ult i32 %1133, %1134
  br i1 %1135, label %bn_assign_zero_for.body, label %bn_assign_zero_for.end

bn_assign_zero_for.body:                          ; preds = %bn_assign_zero_for.cond
  %1136 = load i32*, i32** %1131, align 4
  %1137 = load i32, i32* %1132, align 4
  %1138 = getelementptr inbounds i32, i32* %1136, i32 %1137
  store i32 0, i32* %1138, align 4
  br label %bn_assign_zero_for.inc

bn_assign_zero_for.inc:                           ; preds = %bn_assign_zero_for.body
  %1139 = load i32, i32* %1132, align 4
  %1140 = add i32 %1139, 1
  store i32 %1140, i32* %1132, align 4
  br label %bn_assign_zero_for.cond

bn_assign_zero_for.end:                           ; preds = %bn_assign_zero_for.cond
  br label %if.end.split

if.end.split:                                     ; preds = %bn_assign_zero_for.end
  %1141 = load i32, i32* %pdigits, align 4
  %arraydecay32 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %1142 = load i32, i32* %pdigits, align 4
  %arraydecay33 = getelementptr inbounds [65 x i32], [65 x i32]* %dq, i32 0, i32 0
  %arraydecay34 = getelementptr inbounds [65 x i32], [65 x i32]* %cq, i32 0, i32 0
  %arraydecay35 = getelementptr inbounds [65 x i32], [65 x i32]* %mq, i32 0, i32 0
  br label %bn_mod_exp_entry

bn_mod_exp_entry:                                 ; preds = %if.end.split
  %1143 = alloca i32, align 4
  %1144 = alloca i32*, align 4
  %1145 = alloca i32, align 4
  %1146 = alloca i32*, align 4
  %1147 = alloca i32*, align 4
  %1148 = alloca i32*, align 4
  %1149 = alloca [3 x [65 x i32]], align 4
  %1150 = alloca i32, align 4
  %1151 = alloca [65 x i32], align 4
  %1152 = alloca i32, align 4
  %1153 = alloca i32, align 4
  %1154 = alloca i32, align 4
  %1155 = alloca i32, align 4
  store i32 %1141, i32* %1143, align 4
  store i32* %arraydecay32, i32** %1144, align 4
  store i32 %1142, i32* %1145, align 4
  store i32* %arraydecay33, i32** %1146, align 4
  store i32* %arraydecay34, i32** %1147, align 4
  store i32* %arraydecay35, i32** %1148, align 4
  %1156 = load i32, i32* %1143, align 4
  %1157 = load i32*, i32** %1147, align 4
  %1158 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %1149, i32 0, i32 0
  %1159 = getelementptr inbounds [65 x i32], [65 x i32]* %1158, i32 0, i32 0
  br label %bn_mod_exp_bn_assign_entry1

bn_mod_exp_bn_assign_entry1:                      ; preds = %bn_mod_exp_entry
  %1160 = alloca i32, align 4
  %1161 = alloca i32*, align 4
  %1162 = alloca i32*, align 4
  %1163 = alloca i32, align 4
  store i32 %1156, i32* %1160, align 4
  store i32* %1157, i32** %1161, align 4
  store i32* %1159, i32** %1162, align 4
  store i32 0, i32* %1163, align 4
  br label %bn_mod_exp_bn_assign_for.cond2

bn_mod_exp_bn_assign_for.cond2:                   ; preds = %bn_mod_exp_bn_assign_for.inc4, %bn_mod_exp_bn_assign_entry1
  %1164 = load i32, i32* %1163, align 4
  %1165 = load i32, i32* %1160, align 4
  %1166 = icmp ult i32 %1164, %1165
  br i1 %1166, label %bn_mod_exp_bn_assign_for.body3, label %bn_mod_exp_bn_assign_for.end5

bn_mod_exp_bn_assign_for.body3:                   ; preds = %bn_mod_exp_bn_assign_for.cond2
  %1167 = load i32*, i32** %1161, align 4
  %1168 = load i32, i32* %1163, align 4
  %1169 = getelementptr inbounds i32, i32* %1167, i32 %1168
  %1170 = load i32, i32* %1169, align 4
  %1171 = load i32*, i32** %1162, align 4
  %1172 = load i32, i32* %1163, align 4
  %1173 = getelementptr inbounds i32, i32* %1171, i32 %1172
  store i32 %1170, i32* %1173, align 4
  br label %bn_mod_exp_bn_assign_for.inc4

bn_mod_exp_bn_assign_for.inc4:                    ; preds = %bn_mod_exp_bn_assign_for.body3
  %1174 = load i32, i32* %1163, align 4
  %1175 = add i32 %1174, 1
  store i32 %1175, i32* %1163, align 4
  br label %bn_mod_exp_bn_assign_for.cond2

bn_mod_exp_bn_assign_for.end5:                    ; preds = %bn_mod_exp_bn_assign_for.cond2
  br label %bn_mod_exp_entry.split

bn_mod_exp_entry.split:                           ; preds = %bn_mod_exp_bn_assign_for.end5
  %1176 = load i32, i32* %1143, align 4
  %1177 = load i32*, i32** %1144, align 4
  %1178 = load i32*, i32** %1147, align 4
  %1179 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %1149, i32 0, i32 0
  %1180 = getelementptr inbounds [65 x i32], [65 x i32]* %1179, i32 0, i32 0
  %1181 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %1149, i32 0, i32 1
  %1182 = getelementptr inbounds [65 x i32], [65 x i32]* %1181, i32 0, i32 0
  call void @bn_mod_mul(i32* %1182, i32* %1180, i32* %1178, i32* %1177, i32 %1176)
  %1183 = load i32, i32* %1143, align 4
  %1184 = load i32*, i32** %1144, align 4
  %1185 = load i32*, i32** %1147, align 4
  %1186 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %1149, i32 0, i32 1
  %1187 = getelementptr inbounds [65 x i32], [65 x i32]* %1186, i32 0, i32 0
  %1188 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %1149, i32 0, i32 2
  %1189 = getelementptr inbounds [65 x i32], [65 x i32]* %1188, i32 0, i32 0
  call void @bn_mod_mul(i32* %1189, i32* %1187, i32* %1185, i32* %1184, i32 %1183)
  %1190 = load i32, i32* %1143, align 4
  %1191 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  br label %bn_mod_exp_bn_assign_zero_entry

bn_mod_exp_bn_assign_zero_entry:                  ; preds = %bn_mod_exp_entry.split
  %1192 = alloca i32, align 4
  %1193 = alloca i32*, align 4
  %1194 = alloca i32, align 4
  store i32 %1190, i32* %1192, align 4
  store i32* %1191, i32** %1193, align 4
  store i32 0, i32* %1194, align 4
  br label %bn_mod_exp_bn_assign_zero_for.cond

bn_mod_exp_bn_assign_zero_for.cond:               ; preds = %bn_mod_exp_bn_assign_zero_for.inc, %bn_mod_exp_bn_assign_zero_entry
  %1195 = load i32, i32* %1194, align 4
  %1196 = load i32, i32* %1192, align 4
  %1197 = icmp ult i32 %1195, %1196
  br i1 %1197, label %bn_mod_exp_bn_assign_zero_for.body, label %bn_mod_exp_bn_assign_zero_for.end

bn_mod_exp_bn_assign_zero_for.body:               ; preds = %bn_mod_exp_bn_assign_zero_for.cond
  %1198 = load i32*, i32** %1193, align 4
  %1199 = load i32, i32* %1194, align 4
  %1200 = getelementptr inbounds i32, i32* %1198, i32 %1199
  store i32 0, i32* %1200, align 4
  br label %bn_mod_exp_bn_assign_zero_for.inc

bn_mod_exp_bn_assign_zero_for.inc:                ; preds = %bn_mod_exp_bn_assign_zero_for.body
  %1201 = load i32, i32* %1194, align 4
  %1202 = add i32 %1201, 1
  store i32 %1202, i32* %1194, align 4
  br label %bn_mod_exp_bn_assign_zero_for.cond

bn_mod_exp_bn_assign_zero_for.end:                ; preds = %bn_mod_exp_bn_assign_zero_for.cond
  br label %bn_mod_exp_entry.split.split

bn_mod_exp_entry.split.split:                     ; preds = %bn_mod_exp_bn_assign_zero_for.end
  %1203 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  store i32 1, i32* %1203, align 4
  %1204 = load i32, i32* %1145, align 4
  %1205 = load i32*, i32** %1146, align 4
  br label %bn_mod_exp_bn_digits_entry

bn_mod_exp_bn_digits_entry:                       ; preds = %bn_mod_exp_entry.split.split
  %1206 = alloca i32, align 4
  %1207 = alloca i32*, align 4
  %1208 = alloca i32, align 4
  store i32 %1204, i32* %1206, align 4
  store i32* %1205, i32** %1207, align 4
  %1209 = load i32, i32* %1206, align 4
  %1210 = sub i32 %1209, 1
  store i32 %1210, i32* %1208, align 4
  br label %bn_mod_exp_bn_digits_for.cond

bn_mod_exp_bn_digits_for.cond:                    ; preds = %bn_mod_exp_bn_digits_for.inc, %bn_mod_exp_bn_digits_entry
  %1211 = load i32, i32* %1208, align 4
  %1212 = icmp sge i32 %1211, 0
  br i1 %1212, label %bn_mod_exp_bn_digits_for.body, label %bn_mod_exp_bn_digits_for.end

bn_mod_exp_bn_digits_for.body:                    ; preds = %bn_mod_exp_bn_digits_for.cond
  %1213 = load i32*, i32** %1207, align 4
  %1214 = load i32, i32* %1208, align 4
  %1215 = getelementptr inbounds i32, i32* %1213, i32 %1214
  %1216 = load i32, i32* %1215, align 4
  %1217 = icmp ne i32 %1216, 0
  br i1 %1217, label %bn_mod_exp_bn_digits_if.then, label %bn_mod_exp_bn_digits_if.end

bn_mod_exp_bn_digits_if.then:                     ; preds = %bn_mod_exp_bn_digits_for.body
  br label %bn_mod_exp_bn_digits_for.end

bn_mod_exp_bn_digits_if.end:                      ; preds = %bn_mod_exp_bn_digits_for.body
  br label %bn_mod_exp_bn_digits_for.inc

bn_mod_exp_bn_digits_for.inc:                     ; preds = %bn_mod_exp_bn_digits_if.end
  %1218 = load i32, i32* %1208, align 4
  %1219 = add nsw i32 %1218, -1
  store i32 %1219, i32* %1208, align 4
  br label %bn_mod_exp_bn_digits_for.cond

bn_mod_exp_bn_digits_for.end:                     ; preds = %bn_mod_exp_bn_digits_if.then, %bn_mod_exp_bn_digits_for.cond
  %1220 = load i32, i32* %1208, align 4
  %1221 = add nsw i32 %1220, 1
  br label %bn_mod_exp_entry.split.split.split

bn_mod_exp_entry.split.split.split:               ; preds = %bn_mod_exp_bn_digits_for.end
  store i32 %1221, i32* %1145, align 4
  %1222 = load i32, i32* %1145, align 4
  %1223 = sub i32 %1222, 1
  store i32 %1223, i32* %1152, align 4
  br label %bn_mod_exp_for.cond

bn_mod_exp_for.cond:                              ; preds = %bn_mod_exp_for.inc35, %bn_mod_exp_entry.split.split.split
  %1224 = load i32, i32* %1152, align 4
  %1225 = icmp sge i32 %1224, 0
  br i1 %1225, label %bn_mod_exp_for.body, label %bn_mod_exp_for.end36

bn_mod_exp_for.body:                              ; preds = %bn_mod_exp_for.cond
  %1226 = load i32*, i32** %1146, align 4
  %1227 = load i32, i32* %1152, align 4
  %1228 = getelementptr inbounds i32, i32* %1226, i32 %1227
  %1229 = load i32, i32* %1228, align 4
  store i32 %1229, i32* %1150, align 4
  store i32 32, i32* %1153, align 4
  %1230 = load i32, i32* %1152, align 4
  %1231 = load i32, i32* %1145, align 4
  %1232 = sub i32 %1231, 1
  %1233 = icmp eq i32 %1230, %1232
  br i1 %1233, label %bn_mod_exp_if.then, label %bn_mod_exp_if.end

bn_mod_exp_if.then:                               ; preds = %bn_mod_exp_for.body
  br label %bn_mod_exp_while.cond

bn_mod_exp_while.cond:                            ; preds = %bn_mod_exp_while.body, %bn_mod_exp_if.then
  %1234 = load i32, i32* %1150, align 4
  %1235 = lshr i32 %1234, 30
  %1236 = and i32 %1235, 3
  %1237 = icmp ne i32 %1236, 0
  %1238 = xor i1 %1237, true
  br i1 %1238, label %bn_mod_exp_while.body, label %bn_mod_exp_while.end

bn_mod_exp_while.body:                            ; preds = %bn_mod_exp_while.cond
  %1239 = load i32, i32* %1150, align 4
  %1240 = shl i32 %1239, 2
  store i32 %1240, i32* %1150, align 4
  %1241 = load i32, i32* %1153, align 4
  %1242 = sub i32 %1241, 2
  store i32 %1242, i32* %1153, align 4
  br label %bn_mod_exp_while.cond

bn_mod_exp_while.end:                             ; preds = %bn_mod_exp_while.cond
  br label %bn_mod_exp_if.end

bn_mod_exp_if.end:                                ; preds = %bn_mod_exp_while.end, %bn_mod_exp_for.body
  store i32 0, i32* %1154, align 4
  br label %bn_mod_exp_for.cond15

bn_mod_exp_for.cond15:                            ; preds = %bn_mod_exp_for.inc, %bn_mod_exp_if.end
  %1243 = load i32, i32* %1154, align 4
  %1244 = load i32, i32* %1153, align 4
  %1245 = icmp ult i32 %1243, %1244
  br i1 %1245, label %bn_mod_exp_for.body17, label %bn_mod_exp_for.end

bn_mod_exp_for.body17:                            ; preds = %bn_mod_exp_for.cond15
  %1246 = load i32, i32* %1143, align 4
  %1247 = load i32*, i32** %1144, align 4
  %1248 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  %1249 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  %1250 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  call void @bn_mod_mul(i32* %1250, i32* %1249, i32* %1248, i32* %1247, i32 %1246)
  %1251 = load i32, i32* %1143, align 4
  %1252 = load i32*, i32** %1144, align 4
  %1253 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  %1254 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  %1255 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  call void @bn_mod_mul(i32* %1255, i32* %1254, i32* %1253, i32* %1252, i32 %1251)
  %1256 = load i32, i32* %1150, align 4
  %1257 = lshr i32 %1256, 30
  %1258 = and i32 %1257, 3
  store i32 %1258, i32* %1155, align 4
  %1259 = icmp ne i32 %1258, 0
  br i1 %1259, label %bn_mod_exp_if.then27, label %bn_mod_exp_if.end33

bn_mod_exp_if.then27:                             ; preds = %bn_mod_exp_for.body17
  %1260 = load i32, i32* %1143, align 4
  %1261 = load i32*, i32** %1144, align 4
  %1262 = load i32, i32* %1155, align 4
  %1263 = sub i32 %1262, 1
  %1264 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %1149, i32 0, i32 %1263
  %1265 = getelementptr inbounds [65 x i32], [65 x i32]* %1264, i32 0, i32 0
  %1266 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  %1267 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  call void @bn_mod_mul(i32* %1267, i32* %1266, i32* %1265, i32* %1261, i32 %1260)
  br label %bn_mod_exp_if.end33

bn_mod_exp_if.end33:                              ; preds = %bn_mod_exp_if.then27, %bn_mod_exp_for.body17
  %1268 = load i32, i32* %1150, align 4
  %1269 = shl i32 %1268, 2
  store i32 %1269, i32* %1150, align 4
  br label %bn_mod_exp_for.inc

bn_mod_exp_for.inc:                               ; preds = %bn_mod_exp_if.end33
  %1270 = load i32, i32* %1154, align 4
  %1271 = add i32 %1270, 2
  store i32 %1271, i32* %1154, align 4
  br label %bn_mod_exp_for.cond15

bn_mod_exp_for.end:                               ; preds = %bn_mod_exp_for.cond15
  br label %bn_mod_exp_for.inc35

bn_mod_exp_for.inc35:                             ; preds = %bn_mod_exp_for.end
  %1272 = load i32, i32* %1152, align 4
  %1273 = add nsw i32 %1272, -1
  store i32 %1273, i32* %1152, align 4
  br label %bn_mod_exp_for.cond

bn_mod_exp_for.end36:                             ; preds = %bn_mod_exp_for.cond
  %1274 = load i32, i32* %1143, align 4
  %1275 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  %1276 = load i32*, i32** %1148, align 4
  br label %bn_mod_exp_bn_assign_entry

bn_mod_exp_bn_assign_entry:                       ; preds = %bn_mod_exp_for.end36
  %1277 = alloca i32, align 4
  %1278 = alloca i32*, align 4
  %1279 = alloca i32*, align 4
  %1280 = alloca i32, align 4
  store i32 %1274, i32* %1277, align 4
  store i32* %1275, i32** %1278, align 4
  store i32* %1276, i32** %1279, align 4
  store i32 0, i32* %1280, align 4
  br label %bn_mod_exp_bn_assign_for.cond

bn_mod_exp_bn_assign_for.cond:                    ; preds = %bn_mod_exp_bn_assign_for.inc, %bn_mod_exp_bn_assign_entry
  %1281 = load i32, i32* %1280, align 4
  %1282 = load i32, i32* %1277, align 4
  %1283 = icmp ult i32 %1281, %1282
  br i1 %1283, label %bn_mod_exp_bn_assign_for.body, label %bn_mod_exp_bn_assign_for.end

bn_mod_exp_bn_assign_for.body:                    ; preds = %bn_mod_exp_bn_assign_for.cond
  %1284 = load i32*, i32** %1278, align 4
  %1285 = load i32, i32* %1280, align 4
  %1286 = getelementptr inbounds i32, i32* %1284, i32 %1285
  %1287 = load i32, i32* %1286, align 4
  %1288 = load i32*, i32** %1279, align 4
  %1289 = load i32, i32* %1280, align 4
  %1290 = getelementptr inbounds i32, i32* %1288, i32 %1289
  store i32 %1287, i32* %1290, align 4
  br label %bn_mod_exp_bn_assign_for.inc

bn_mod_exp_bn_assign_for.inc:                     ; preds = %bn_mod_exp_bn_assign_for.body
  %1291 = load i32, i32* %1280, align 4
  %1292 = add i32 %1291, 1
  store i32 %1292, i32* %1280, align 4
  br label %bn_mod_exp_bn_assign_for.cond

bn_mod_exp_bn_assign_for.end:                     ; preds = %bn_mod_exp_bn_assign_for.cond
  br label %bn_mod_exp_for.end36.split

bn_mod_exp_for.end36.split:                       ; preds = %bn_mod_exp_bn_assign_for.end
  %1293 = getelementptr inbounds [3 x [65 x i32]], [3 x [65 x i32]]* %1149, i32 0, i32 0
  %1294 = bitcast [65 x i32]* %1293 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1294, i8 0, i32 780, i1 false)
  %1295 = getelementptr inbounds [65 x i32], [65 x i32]* %1151, i32 0, i32 0
  %1296 = bitcast i32* %1295 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1296, i8 0, i32 260, i1 false)
  br label %if.end.split.split246

if.end.split.split246:                            ; preds = %bn_mod_exp_for.end36.split
  %1297 = load i32, i32* %pdigits, align 4
  %arraydecay36 = getelementptr inbounds [65 x i32], [65 x i32]* %mq, i32 0, i32 0
  %arraydecay37 = getelementptr inbounds [65 x i32], [65 x i32]* %mp, i32 0, i32 0
  br label %bn_cmp_entry

bn_cmp_entry:                                     ; preds = %if.end.split.split246
  %1298 = alloca i32, align 4
  %1299 = alloca i32, align 4
  %1300 = alloca i32*, align 4
  %1301 = alloca i32*, align 4
  %1302 = alloca i32, align 4
  store i32 %1297, i32* %1299, align 4
  store i32* %arraydecay36, i32** %1300, align 4
  store i32* %arraydecay37, i32** %1301, align 4
  %1303 = load i32, i32* %1299, align 4
  %1304 = sub i32 %1303, 1
  store i32 %1304, i32* %1302, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.cond:                                  ; preds = %bn_cmp_for.inc, %bn_cmp_entry
  %1305 = load i32, i32* %1302, align 4
  %1306 = icmp sge i32 %1305, 0
  br i1 %1306, label %bn_cmp_for.body, label %bn_cmp_for.end

bn_cmp_for.body:                                  ; preds = %bn_cmp_for.cond
  %1307 = load i32*, i32** %1301, align 4
  %1308 = load i32, i32* %1302, align 4
  %1309 = getelementptr inbounds i32, i32* %1307, i32 %1308
  %1310 = load i32, i32* %1309, align 4
  %1311 = load i32*, i32** %1300, align 4
  %1312 = load i32, i32* %1302, align 4
  %1313 = getelementptr inbounds i32, i32* %1311, i32 %1312
  %1314 = load i32, i32* %1313, align 4
  %1315 = icmp ugt i32 %1310, %1314
  br i1 %1315, label %bn_cmp_if.then, label %bn_cmp_if.end

bn_cmp_if.then:                                   ; preds = %bn_cmp_for.body
  store i32 1, i32* %1298, align 4
  br label %bn_cmp_return

bn_cmp_if.end:                                    ; preds = %bn_cmp_for.body
  %1316 = load i32*, i32** %1301, align 4
  %1317 = load i32, i32* %1302, align 4
  %1318 = getelementptr inbounds i32, i32* %1316, i32 %1317
  %1319 = load i32, i32* %1318, align 4
  %1320 = load i32*, i32** %1300, align 4
  %1321 = load i32, i32* %1302, align 4
  %1322 = getelementptr inbounds i32, i32* %1320, i32 %1321
  %1323 = load i32, i32* %1322, align 4
  %1324 = icmp ult i32 %1319, %1323
  br i1 %1324, label %bn_cmp_if.then6, label %bn_cmp_if.end7

bn_cmp_if.then6:                                  ; preds = %bn_cmp_if.end
  store i32 -1, i32* %1298, align 4
  br label %bn_cmp_return

bn_cmp_if.end7:                                   ; preds = %bn_cmp_if.end
  br label %bn_cmp_for.inc

bn_cmp_for.inc:                                   ; preds = %bn_cmp_if.end7
  %1325 = load i32, i32* %1302, align 4
  %1326 = add nsw i32 %1325, -1
  store i32 %1326, i32* %1302, align 4
  br label %bn_cmp_for.cond

bn_cmp_for.end:                                   ; preds = %bn_cmp_for.cond
  store i32 0, i32* %1298, align 4
  br label %bn_cmp_return

bn_cmp_return:                                    ; preds = %bn_cmp_for.end, %bn_cmp_if.then6, %bn_cmp_if.then
  %1327 = load i32, i32* %1298, align 4
  br label %if.end.split.split

if.end.split.split:                               ; preds = %bn_cmp_return
  %cmp39 = icmp sge i32 %1327, 0
  br i1 %cmp39, label %if.then40, label %if.else

if.then40:                                        ; preds = %if.end.split.split
  %1328 = load i32, i32* %pdigits, align 4
  %arraydecay41 = getelementptr inbounds [65 x i32], [65 x i32]* %mq, i32 0, i32 0
  %arraydecay42 = getelementptr inbounds [65 x i32], [65 x i32]* %mp, i32 0, i32 0
  %arraydecay43 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_sub_entry124

bn_sub_entry124:                                  ; preds = %if.then40
  %1329 = alloca i32, align 4
  %1330 = alloca i32*, align 4
  %1331 = alloca i32*, align 4
  %1332 = alloca i32*, align 4
  %1333 = alloca i32, align 4
  %1334 = alloca i32, align 4
  %1335 = alloca i32, align 4
  store i32 %1328, i32* %1329, align 4
  store i32* %arraydecay41, i32** %1330, align 4
  store i32* %arraydecay42, i32** %1331, align 4
  store i32* %arraydecay43, i32** %1332, align 4
  store i32 0, i32* %1334, align 4
  store i32 0, i32* %1335, align 4
  br label %bn_sub_for.cond125

bn_sub_for.cond125:                               ; preds = %bn_sub_for.inc133, %bn_sub_entry124
  %1336 = load i32, i32* %1335, align 4
  %1337 = load i32, i32* %1329, align 4
  %1338 = icmp ult i32 %1336, %1337
  br i1 %1338, label %bn_sub_for.body126, label %bn_sub_for.end134

bn_sub_for.body126:                               ; preds = %bn_sub_for.cond125
  %1339 = load i32*, i32** %1331, align 4
  %1340 = load i32, i32* %1335, align 4
  %1341 = getelementptr inbounds i32, i32* %1339, i32 %1340
  %1342 = load i32, i32* %1341, align 4
  %1343 = load i32, i32* %1334, align 4
  %1344 = sub i32 %1342, %1343
  store i32 %1344, i32* %1333, align 4
  %1345 = load i32, i32* %1334, align 4
  %1346 = sub i32 -1, %1345
  %1347 = icmp ugt i32 %1344, %1346
  br i1 %1347, label %bn_sub_if.then127, label %bn_sub_if.else128

bn_sub_if.then127:                                ; preds = %bn_sub_for.body126
  %1348 = load i32*, i32** %1330, align 4
  %1349 = load i32, i32* %1335, align 4
  %1350 = getelementptr inbounds i32, i32* %1348, i32 %1349
  %1351 = load i32, i32* %1350, align 4
  %1352 = sub i32 -1, %1351
  store i32 %1352, i32* %1333, align 4
  br label %bn_sub_if.end12132

bn_sub_if.else128:                                ; preds = %bn_sub_for.body126
  %1353 = load i32*, i32** %1330, align 4
  %1354 = load i32, i32* %1335, align 4
  %1355 = getelementptr inbounds i32, i32* %1353, i32 %1354
  %1356 = load i32, i32* %1355, align 4
  %1357 = load i32, i32* %1333, align 4
  %1358 = sub i32 %1357, %1356
  store i32 %1358, i32* %1333, align 4
  %1359 = load i32*, i32** %1330, align 4
  %1360 = load i32, i32* %1335, align 4
  %1361 = getelementptr inbounds i32, i32* %1359, i32 %1360
  %1362 = load i32, i32* %1361, align 4
  %1363 = sub i32 -1, %1362
  %1364 = icmp ugt i32 %1358, %1363
  br i1 %1364, label %bn_sub_if.then10129, label %bn_sub_if.else11130

bn_sub_if.then10129:                              ; preds = %bn_sub_if.else128
  store i32 1, i32* %1334, align 4
  br label %bn_sub_if.end131

bn_sub_if.else11130:                              ; preds = %bn_sub_if.else128
  store i32 0, i32* %1334, align 4
  br label %bn_sub_if.end131

bn_sub_if.end131:                                 ; preds = %bn_sub_if.else11130, %bn_sub_if.then10129
  br label %bn_sub_if.end12132

bn_sub_if.end12132:                               ; preds = %bn_sub_if.end131, %bn_sub_if.then127
  %1365 = load i32, i32* %1333, align 4
  %1366 = load i32*, i32** %1332, align 4
  %1367 = load i32, i32* %1335, align 4
  %1368 = getelementptr inbounds i32, i32* %1366, i32 %1367
  store i32 %1365, i32* %1368, align 4
  br label %bn_sub_for.inc133

bn_sub_for.inc133:                                ; preds = %bn_sub_if.end12132
  %1369 = load i32, i32* %1335, align 4
  %1370 = add i32 %1369, 1
  store i32 %1370, i32* %1335, align 4
  br label %bn_sub_for.cond125

bn_sub_for.end134:                                ; preds = %bn_sub_for.cond125
  %1371 = load i32, i32* %1334, align 4
  br label %if.then40.split

if.then40.split:                                  ; preds = %bn_sub_for.end134
  br label %if.end53

if.else:                                          ; preds = %if.end.split.split
  %1372 = load i32, i32* %pdigits, align 4
  %arraydecay45 = getelementptr inbounds [65 x i32], [65 x i32]* %mp, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [65 x i32], [65 x i32]* %mq, i32 0, i32 0
  %arraydecay47 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_sub_entry113

bn_sub_entry113:                                  ; preds = %if.else
  %1373 = alloca i32, align 4
  %1374 = alloca i32*, align 4
  %1375 = alloca i32*, align 4
  %1376 = alloca i32*, align 4
  %1377 = alloca i32, align 4
  %1378 = alloca i32, align 4
  %1379 = alloca i32, align 4
  store i32 %1372, i32* %1373, align 4
  store i32* %arraydecay45, i32** %1374, align 4
  store i32* %arraydecay46, i32** %1375, align 4
  store i32* %arraydecay47, i32** %1376, align 4
  store i32 0, i32* %1378, align 4
  store i32 0, i32* %1379, align 4
  br label %bn_sub_for.cond114

bn_sub_for.cond114:                               ; preds = %bn_sub_for.inc122, %bn_sub_entry113
  %1380 = load i32, i32* %1379, align 4
  %1381 = load i32, i32* %1373, align 4
  %1382 = icmp ult i32 %1380, %1381
  br i1 %1382, label %bn_sub_for.body115, label %bn_sub_for.end123

bn_sub_for.body115:                               ; preds = %bn_sub_for.cond114
  %1383 = load i32*, i32** %1375, align 4
  %1384 = load i32, i32* %1379, align 4
  %1385 = getelementptr inbounds i32, i32* %1383, i32 %1384
  %1386 = load i32, i32* %1385, align 4
  %1387 = load i32, i32* %1378, align 4
  %1388 = sub i32 %1386, %1387
  store i32 %1388, i32* %1377, align 4
  %1389 = load i32, i32* %1378, align 4
  %1390 = sub i32 -1, %1389
  %1391 = icmp ugt i32 %1388, %1390
  br i1 %1391, label %bn_sub_if.then116, label %bn_sub_if.else117

bn_sub_if.then116:                                ; preds = %bn_sub_for.body115
  %1392 = load i32*, i32** %1374, align 4
  %1393 = load i32, i32* %1379, align 4
  %1394 = getelementptr inbounds i32, i32* %1392, i32 %1393
  %1395 = load i32, i32* %1394, align 4
  %1396 = sub i32 -1, %1395
  store i32 %1396, i32* %1377, align 4
  br label %bn_sub_if.end12121

bn_sub_if.else117:                                ; preds = %bn_sub_for.body115
  %1397 = load i32*, i32** %1374, align 4
  %1398 = load i32, i32* %1379, align 4
  %1399 = getelementptr inbounds i32, i32* %1397, i32 %1398
  %1400 = load i32, i32* %1399, align 4
  %1401 = load i32, i32* %1377, align 4
  %1402 = sub i32 %1401, %1400
  store i32 %1402, i32* %1377, align 4
  %1403 = load i32*, i32** %1374, align 4
  %1404 = load i32, i32* %1379, align 4
  %1405 = getelementptr inbounds i32, i32* %1403, i32 %1404
  %1406 = load i32, i32* %1405, align 4
  %1407 = sub i32 -1, %1406
  %1408 = icmp ugt i32 %1402, %1407
  br i1 %1408, label %bn_sub_if.then10118, label %bn_sub_if.else11119

bn_sub_if.then10118:                              ; preds = %bn_sub_if.else117
  store i32 1, i32* %1378, align 4
  br label %bn_sub_if.end120

bn_sub_if.else11119:                              ; preds = %bn_sub_if.else117
  store i32 0, i32* %1378, align 4
  br label %bn_sub_if.end120

bn_sub_if.end120:                                 ; preds = %bn_sub_if.else11119, %bn_sub_if.then10118
  br label %bn_sub_if.end12121

bn_sub_if.end12121:                               ; preds = %bn_sub_if.end120, %bn_sub_if.then116
  %1409 = load i32, i32* %1377, align 4
  %1410 = load i32*, i32** %1376, align 4
  %1411 = load i32, i32* %1379, align 4
  %1412 = getelementptr inbounds i32, i32* %1410, i32 %1411
  store i32 %1409, i32* %1412, align 4
  br label %bn_sub_for.inc122

bn_sub_for.inc122:                                ; preds = %bn_sub_if.end12121
  %1413 = load i32, i32* %1379, align 4
  %1414 = add i32 %1413, 1
  store i32 %1414, i32* %1379, align 4
  br label %bn_sub_for.cond114

bn_sub_for.end123:                                ; preds = %bn_sub_for.cond114
  %1415 = load i32, i32* %1378, align 4
  br label %if.else.split112

if.else.split112:                                 ; preds = %bn_sub_for.end123
  %1416 = load i32, i32* %pdigits, align 4
  %arraydecay49 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay50 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %arraydecay51 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_sub_entry

bn_sub_entry:                                     ; preds = %if.else.split112
  %1417 = alloca i32, align 4
  %1418 = alloca i32*, align 4
  %1419 = alloca i32*, align 4
  %1420 = alloca i32*, align 4
  %1421 = alloca i32, align 4
  %1422 = alloca i32, align 4
  %1423 = alloca i32, align 4
  store i32 %1416, i32* %1417, align 4
  store i32* %arraydecay49, i32** %1418, align 4
  store i32* %arraydecay50, i32** %1419, align 4
  store i32* %arraydecay51, i32** %1420, align 4
  store i32 0, i32* %1422, align 4
  store i32 0, i32* %1423, align 4
  br label %bn_sub_for.cond

bn_sub_for.cond:                                  ; preds = %bn_sub_for.inc, %bn_sub_entry
  %1424 = load i32, i32* %1423, align 4
  %1425 = load i32, i32* %1417, align 4
  %1426 = icmp ult i32 %1424, %1425
  br i1 %1426, label %bn_sub_for.body, label %bn_sub_for.end

bn_sub_for.body:                                  ; preds = %bn_sub_for.cond
  %1427 = load i32*, i32** %1419, align 4
  %1428 = load i32, i32* %1423, align 4
  %1429 = getelementptr inbounds i32, i32* %1427, i32 %1428
  %1430 = load i32, i32* %1429, align 4
  %1431 = load i32, i32* %1422, align 4
  %1432 = sub i32 %1430, %1431
  store i32 %1432, i32* %1421, align 4
  %1433 = load i32, i32* %1422, align 4
  %1434 = sub i32 -1, %1433
  %1435 = icmp ugt i32 %1432, %1434
  br i1 %1435, label %bn_sub_if.then, label %bn_sub_if.else

bn_sub_if.then:                                   ; preds = %bn_sub_for.body
  %1436 = load i32*, i32** %1418, align 4
  %1437 = load i32, i32* %1423, align 4
  %1438 = getelementptr inbounds i32, i32* %1436, i32 %1437
  %1439 = load i32, i32* %1438, align 4
  %1440 = sub i32 -1, %1439
  store i32 %1440, i32* %1421, align 4
  br label %bn_sub_if.end12

bn_sub_if.else:                                   ; preds = %bn_sub_for.body
  %1441 = load i32*, i32** %1418, align 4
  %1442 = load i32, i32* %1423, align 4
  %1443 = getelementptr inbounds i32, i32* %1441, i32 %1442
  %1444 = load i32, i32* %1443, align 4
  %1445 = load i32, i32* %1421, align 4
  %1446 = sub i32 %1445, %1444
  store i32 %1446, i32* %1421, align 4
  %1447 = load i32*, i32** %1418, align 4
  %1448 = load i32, i32* %1423, align 4
  %1449 = getelementptr inbounds i32, i32* %1447, i32 %1448
  %1450 = load i32, i32* %1449, align 4
  %1451 = sub i32 -1, %1450
  %1452 = icmp ugt i32 %1446, %1451
  br i1 %1452, label %bn_sub_if.then10, label %bn_sub_if.else11

bn_sub_if.then10:                                 ; preds = %bn_sub_if.else
  store i32 1, i32* %1422, align 4
  br label %bn_sub_if.end

bn_sub_if.else11:                                 ; preds = %bn_sub_if.else
  store i32 0, i32* %1422, align 4
  br label %bn_sub_if.end

bn_sub_if.end:                                    ; preds = %bn_sub_if.else11, %bn_sub_if.then10
  br label %bn_sub_if.end12

bn_sub_if.end12:                                  ; preds = %bn_sub_if.end, %bn_sub_if.then
  %1453 = load i32, i32* %1421, align 4
  %1454 = load i32*, i32** %1420, align 4
  %1455 = load i32, i32* %1423, align 4
  %1456 = getelementptr inbounds i32, i32* %1454, i32 %1455
  store i32 %1453, i32* %1456, align 4
  br label %bn_sub_for.inc

bn_sub_for.inc:                                   ; preds = %bn_sub_if.end12
  %1457 = load i32, i32* %1423, align 4
  %1458 = add i32 %1457, 1
  store i32 %1458, i32* %1423, align 4
  br label %bn_sub_for.cond

bn_sub_for.end:                                   ; preds = %bn_sub_for.cond
  %1459 = load i32, i32* %1422, align 4
  br label %if.else.split

if.else.split:                                    ; preds = %bn_sub_for.end
  br label %if.end53

if.end53:                                         ; preds = %if.else.split, %if.then40.split
  %1460 = load i32, i32* %pdigits, align 4
  %arraydecay54 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %arraydecay55 = getelementptr inbounds [65 x i32], [65 x i32]* %q_inv, i32 0, i32 0
  %arraydecay56 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay57 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  call void @bn_mod_mul(i32* %arraydecay57, i32* %arraydecay56, i32* %arraydecay55, i32* %arraydecay54, i32 %1460)
  %1461 = load i32, i32* %pdigits, align 4
  %arraydecay58 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %arraydecay59 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay60 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_mul_entry

bn_mul_entry:                                     ; preds = %if.end53
  %1462 = alloca i32, align 4
  %1463 = alloca i32*, align 4
  %1464 = alloca i32*, align 4
  %1465 = alloca i32*, align 4
  %1466 = alloca [130 x i32], align 4
  %1467 = alloca i32, align 4
  %1468 = alloca i32, align 4
  %1469 = alloca i32, align 4
  store i32 %1461, i32* %1462, align 4
  store i32* %arraydecay58, i32** %1463, align 4
  store i32* %arraydecay59, i32** %1464, align 4
  store i32* %arraydecay60, i32** %1465, align 4
  %1470 = load i32, i32* %1462, align 4
  %1471 = mul i32 2, %1470
  %1472 = getelementptr inbounds [130 x i32], [130 x i32]* %1466, i32 0, i32 0
  br label %bn_mul_bn_assign_zero_entry

bn_mul_bn_assign_zero_entry:                      ; preds = %bn_mul_entry
  %1473 = alloca i32, align 4
  %1474 = alloca i32*, align 4
  %1475 = alloca i32, align 4
  store i32 %1471, i32* %1473, align 4
  store i32* %1472, i32** %1474, align 4
  store i32 0, i32* %1475, align 4
  br label %bn_mul_bn_assign_zero_for.cond

bn_mul_bn_assign_zero_for.cond:                   ; preds = %bn_mul_bn_assign_zero_for.inc, %bn_mul_bn_assign_zero_entry
  %1476 = load i32, i32* %1475, align 4
  %1477 = load i32, i32* %1473, align 4
  %1478 = icmp ult i32 %1476, %1477
  br i1 %1478, label %bn_mul_bn_assign_zero_for.body, label %bn_mul_bn_assign_zero_for.end

bn_mul_bn_assign_zero_for.body:                   ; preds = %bn_mul_bn_assign_zero_for.cond
  %1479 = load i32*, i32** %1474, align 4
  %1480 = load i32, i32* %1475, align 4
  %1481 = getelementptr inbounds i32, i32* %1479, i32 %1480
  store i32 0, i32* %1481, align 4
  br label %bn_mul_bn_assign_zero_for.inc

bn_mul_bn_assign_zero_for.inc:                    ; preds = %bn_mul_bn_assign_zero_for.body
  %1482 = load i32, i32* %1475, align 4
  %1483 = add i32 %1482, 1
  store i32 %1483, i32* %1475, align 4
  br label %bn_mul_bn_assign_zero_for.cond

bn_mul_bn_assign_zero_for.end:                    ; preds = %bn_mul_bn_assign_zero_for.cond
  br label %bn_mul_entry.split

bn_mul_entry.split:                               ; preds = %bn_mul_bn_assign_zero_for.end
  %1484 = load i32, i32* %1462, align 4
  %1485 = load i32*, i32** %1464, align 4
  br label %bn_digits_entry137

bn_digits_entry137:                               ; preds = %bn_mul_entry.split
  %1486 = alloca i32, align 4
  %1487 = alloca i32*, align 4
  %1488 = alloca i32, align 4
  store i32 %1484, i32* %1486, align 4
  store i32* %1485, i32** %1487, align 4
  %1489 = load i32, i32* %1486, align 4
  %1490 = sub i32 %1489, 1
  store i32 %1490, i32* %1488, align 4
  br label %bn_digits_for.cond138

bn_digits_for.cond138:                            ; preds = %bn_digits_for.inc142, %bn_digits_entry137
  %1491 = load i32, i32* %1488, align 4
  %1492 = icmp sge i32 %1491, 0
  br i1 %1492, label %bn_digits_for.body139, label %bn_digits_for.end143

bn_digits_for.body139:                            ; preds = %bn_digits_for.cond138
  %1493 = load i32*, i32** %1487, align 4
  %1494 = load i32, i32* %1488, align 4
  %1495 = getelementptr inbounds i32, i32* %1493, i32 %1494
  %1496 = load i32, i32* %1495, align 4
  %1497 = icmp ne i32 %1496, 0
  br i1 %1497, label %bn_digits_if.then140, label %bn_digits_if.end141

bn_digits_if.then140:                             ; preds = %bn_digits_for.body139
  br label %bn_digits_for.end143

bn_digits_if.end141:                              ; preds = %bn_digits_for.body139
  br label %bn_digits_for.inc142

bn_digits_for.inc142:                             ; preds = %bn_digits_if.end141
  %1498 = load i32, i32* %1488, align 4
  %1499 = add nsw i32 %1498, -1
  store i32 %1499, i32* %1488, align 4
  br label %bn_digits_for.cond138

bn_digits_for.end143:                             ; preds = %bn_digits_if.then140, %bn_digits_for.cond138
  %1500 = load i32, i32* %1488, align 4
  %1501 = add nsw i32 %1500, 1
  br label %bn_mul_entry.split.split136

bn_mul_entry.split.split136:                      ; preds = %bn_digits_for.end143
  store i32 %1501, i32* %1467, align 4
  %1502 = load i32, i32* %1462, align 4
  %1503 = load i32*, i32** %1463, align 4
  br label %bn_digits_entry

bn_digits_entry:                                  ; preds = %bn_mul_entry.split.split136
  %1504 = alloca i32, align 4
  %1505 = alloca i32*, align 4
  %1506 = alloca i32, align 4
  store i32 %1502, i32* %1504, align 4
  store i32* %1503, i32** %1505, align 4
  %1507 = load i32, i32* %1504, align 4
  %1508 = sub i32 %1507, 1
  store i32 %1508, i32* %1506, align 4
  br label %bn_digits_for.cond

bn_digits_for.cond:                               ; preds = %bn_digits_for.inc, %bn_digits_entry
  %1509 = load i32, i32* %1506, align 4
  %1510 = icmp sge i32 %1509, 0
  br i1 %1510, label %bn_digits_for.body, label %bn_digits_for.end

bn_digits_for.body:                               ; preds = %bn_digits_for.cond
  %1511 = load i32*, i32** %1505, align 4
  %1512 = load i32, i32* %1506, align 4
  %1513 = getelementptr inbounds i32, i32* %1511, i32 %1512
  %1514 = load i32, i32* %1513, align 4
  %1515 = icmp ne i32 %1514, 0
  br i1 %1515, label %bn_digits_if.then, label %bn_digits_if.end

bn_digits_if.then:                                ; preds = %bn_digits_for.body
  br label %bn_digits_for.end

bn_digits_if.end:                                 ; preds = %bn_digits_for.body
  br label %bn_digits_for.inc

bn_digits_for.inc:                                ; preds = %bn_digits_if.end
  %1516 = load i32, i32* %1506, align 4
  %1517 = add nsw i32 %1516, -1
  store i32 %1517, i32* %1506, align 4
  br label %bn_digits_for.cond

bn_digits_for.end:                                ; preds = %bn_digits_if.then, %bn_digits_for.cond
  %1518 = load i32, i32* %1506, align 4
  %1519 = add nsw i32 %1518, 1
  br label %bn_mul_entry.split.split

bn_mul_entry.split.split:                         ; preds = %bn_digits_for.end
  store i32 %1519, i32* %1468, align 4
  store i32 0, i32* %1469, align 4
  br label %bn_mul_for.cond

bn_mul_for.cond:                                  ; preds = %bn_mul_for.inc, %bn_mul_entry.split.split
  %1520 = load i32, i32* %1469, align 4
  %1521 = load i32, i32* %1467, align 4
  %1522 = icmp ult i32 %1520, %1521
  br i1 %1522, label %bn_mul_for.body, label %bn_mul_for.end

bn_mul_for.body:                                  ; preds = %bn_mul_for.cond
  %1523 = load i32, i32* %1468, align 4
  %1524 = load i32*, i32** %1463, align 4
  %1525 = load i32*, i32** %1464, align 4
  %1526 = load i32, i32* %1469, align 4
  %1527 = getelementptr inbounds i32, i32* %1525, i32 %1526
  %1528 = load i32, i32* %1527, align 4
  %1529 = load i32, i32* %1469, align 4
  %1530 = getelementptr inbounds [130 x i32], [130 x i32]* %1466, i32 0, i32 %1529
  %1531 = load i32, i32* %1469, align 4
  %1532 = getelementptr inbounds [130 x i32], [130 x i32]* %1466, i32 0, i32 %1531
  br label %bn_add_digit_mul_entry

bn_add_digit_mul_entry:                           ; preds = %bn_mul_for.body
  %1533 = alloca i32, align 4
  %1534 = alloca i32, align 4
  %1535 = alloca i32*, align 4
  %1536 = alloca i32, align 4
  %1537 = alloca i32*, align 4
  %1538 = alloca i32*, align 4
  %1539 = alloca i64, align 8
  %1540 = alloca i32, align 4
  %1541 = alloca i32, align 4
  %1542 = alloca i32, align 4
  %1543 = alloca i32, align 4
  store i32 %1523, i32* %1534, align 4
  store i32* %1524, i32** %1535, align 4
  store i32 %1528, i32* %1536, align 4
  store i32* %1530, i32** %1537, align 4
  store i32* %1532, i32** %1538, align 4
  %1544 = load i32, i32* %1536, align 4
  %1545 = icmp eq i32 %1544, 0
  br i1 %1545, label %bn_add_digit_mul_if.then, label %bn_add_digit_mul_if.end

bn_add_digit_mul_if.then:                         ; preds = %bn_add_digit_mul_entry
  store i32 0, i32* %1533, align 4
  br label %bn_add_digit_mul_return

bn_add_digit_mul_if.end:                          ; preds = %bn_add_digit_mul_entry
  store i32 0, i32* %1540, align 4
  store i32 0, i32* %1543, align 4
  br label %bn_add_digit_mul_for.cond

bn_add_digit_mul_for.cond:                        ; preds = %bn_add_digit_mul_for.inc, %bn_add_digit_mul_if.end
  %1546 = load i32, i32* %1543, align 4
  %1547 = load i32, i32* %1534, align 4
  %1548 = icmp ult i32 %1546, %1547
  br i1 %1548, label %bn_add_digit_mul_for.body, label %bn_add_digit_mul_for.end

bn_add_digit_mul_for.body:                        ; preds = %bn_add_digit_mul_for.cond
  %1549 = load i32, i32* %1536, align 4
  %1550 = zext i32 %1549 to i64
  %1551 = load i32*, i32** %1535, align 4
  %1552 = load i32, i32* %1543, align 4
  %1553 = getelementptr inbounds i32, i32* %1551, i32 %1552
  %1554 = load i32, i32* %1553, align 4
  %1555 = zext i32 %1554 to i64
  %1556 = mul i64 %1550, %1555
  store i64 %1556, i64* %1539, align 8
  %1557 = load i64, i64* %1539, align 8
  %1558 = and i64 %1557, 4294967295
  %1559 = trunc i64 %1558 to i32
  store i32 %1559, i32* %1542, align 4
  %1560 = load i64, i64* %1539, align 8
  %1561 = lshr i64 %1560, 32
  %1562 = and i64 %1561, 4294967295
  %1563 = trunc i64 %1562 to i32
  store i32 %1563, i32* %1541, align 4
  %1564 = load i32*, i32** %1537, align 4
  %1565 = load i32, i32* %1543, align 4
  %1566 = getelementptr inbounds i32, i32* %1564, i32 %1565
  %1567 = load i32, i32* %1566, align 4
  %1568 = load i32, i32* %1540, align 4
  %1569 = add i32 %1567, %1568
  %1570 = load i32*, i32** %1538, align 4
  %1571 = load i32, i32* %1543, align 4
  %1572 = getelementptr inbounds i32, i32* %1570, i32 %1571
  store i32 %1569, i32* %1572, align 4
  %1573 = load i32, i32* %1540, align 4
  %1574 = icmp ult i32 %1569, %1573
  br i1 %1574, label %bn_add_digit_mul_if.then10, label %bn_add_digit_mul_if.else

bn_add_digit_mul_if.then10:                       ; preds = %bn_add_digit_mul_for.body
  store i32 1, i32* %1540, align 4
  br label %bn_add_digit_mul_if.end11

bn_add_digit_mul_if.else:                         ; preds = %bn_add_digit_mul_for.body
  store i32 0, i32* %1540, align 4
  br label %bn_add_digit_mul_if.end11

bn_add_digit_mul_if.end11:                        ; preds = %bn_add_digit_mul_if.else, %bn_add_digit_mul_if.then10
  %1575 = load i32, i32* %1542, align 4
  %1576 = load i32*, i32** %1538, align 4
  %1577 = load i32, i32* %1543, align 4
  %1578 = getelementptr inbounds i32, i32* %1576, i32 %1577
  %1579 = load i32, i32* %1578, align 4
  %1580 = add i32 %1579, %1575
  store i32 %1580, i32* %1578, align 4
  %1581 = load i32, i32* %1542, align 4
  %1582 = icmp ult i32 %1580, %1581
  br i1 %1582, label %bn_add_digit_mul_if.then16, label %bn_add_digit_mul_if.end17

bn_add_digit_mul_if.then16:                       ; preds = %bn_add_digit_mul_if.end11
  %1583 = load i32, i32* %1540, align 4
  %1584 = add i32 %1583, 1
  store i32 %1584, i32* %1540, align 4
  br label %bn_add_digit_mul_if.end17

bn_add_digit_mul_if.end17:                        ; preds = %bn_add_digit_mul_if.then16, %bn_add_digit_mul_if.end11
  %1585 = load i32, i32* %1541, align 4
  %1586 = load i32, i32* %1540, align 4
  %1587 = add i32 %1586, %1585
  store i32 %1587, i32* %1540, align 4
  br label %bn_add_digit_mul_for.inc

bn_add_digit_mul_for.inc:                         ; preds = %bn_add_digit_mul_if.end17
  %1588 = load i32, i32* %1543, align 4
  %1589 = add i32 %1588, 1
  store i32 %1589, i32* %1543, align 4
  br label %bn_add_digit_mul_for.cond

bn_add_digit_mul_for.end:                         ; preds = %bn_add_digit_mul_for.cond
  %1590 = load i32, i32* %1540, align 4
  store i32 %1590, i32* %1533, align 4
  br label %bn_add_digit_mul_return

bn_add_digit_mul_return:                          ; preds = %bn_add_digit_mul_for.end, %bn_add_digit_mul_if.then
  %1591 = load i32, i32* %1533, align 4
  br label %bn_mul_for.body.split

bn_mul_for.body.split:                            ; preds = %bn_add_digit_mul_return
  %1592 = load i32, i32* %1469, align 4
  %1593 = load i32, i32* %1468, align 4
  %1594 = add i32 %1592, %1593
  %1595 = getelementptr inbounds [130 x i32], [130 x i32]* %1466, i32 0, i32 %1594
  %1596 = load i32, i32* %1595, align 4
  %1597 = add i32 %1596, %1591
  store i32 %1597, i32* %1595, align 4
  br label %bn_mul_for.inc

bn_mul_for.inc:                                   ; preds = %bn_mul_for.body.split
  %1598 = load i32, i32* %1469, align 4
  %1599 = add i32 %1598, 1
  store i32 %1599, i32* %1469, align 4
  br label %bn_mul_for.cond

bn_mul_for.end:                                   ; preds = %bn_mul_for.cond
  %1600 = load i32, i32* %1462, align 4
  %1601 = mul i32 2, %1600
  %1602 = getelementptr inbounds [130 x i32], [130 x i32]* %1466, i32 0, i32 0
  %1603 = load i32*, i32** %1465, align 4
  br label %bn_mul_bn_assign_entry

bn_mul_bn_assign_entry:                           ; preds = %bn_mul_for.end
  %1604 = alloca i32, align 4
  %1605 = alloca i32*, align 4
  %1606 = alloca i32*, align 4
  %1607 = alloca i32, align 4
  store i32 %1601, i32* %1604, align 4
  store i32* %1602, i32** %1605, align 4
  store i32* %1603, i32** %1606, align 4
  store i32 0, i32* %1607, align 4
  br label %bn_mul_bn_assign_for.cond

bn_mul_bn_assign_for.cond:                        ; preds = %bn_mul_bn_assign_for.inc, %bn_mul_bn_assign_entry
  %1608 = load i32, i32* %1607, align 4
  %1609 = load i32, i32* %1604, align 4
  %1610 = icmp ult i32 %1608, %1609
  br i1 %1610, label %bn_mul_bn_assign_for.body, label %bn_mul_bn_assign_for.end

bn_mul_bn_assign_for.body:                        ; preds = %bn_mul_bn_assign_for.cond
  %1611 = load i32*, i32** %1605, align 4
  %1612 = load i32, i32* %1607, align 4
  %1613 = getelementptr inbounds i32, i32* %1611, i32 %1612
  %1614 = load i32, i32* %1613, align 4
  %1615 = load i32*, i32** %1606, align 4
  %1616 = load i32, i32* %1607, align 4
  %1617 = getelementptr inbounds i32, i32* %1615, i32 %1616
  store i32 %1614, i32* %1617, align 4
  br label %bn_mul_bn_assign_for.inc

bn_mul_bn_assign_for.inc:                         ; preds = %bn_mul_bn_assign_for.body
  %1618 = load i32, i32* %1607, align 4
  %1619 = add i32 %1618, 1
  store i32 %1619, i32* %1607, align 4
  br label %bn_mul_bn_assign_for.cond

bn_mul_bn_assign_for.end:                         ; preds = %bn_mul_bn_assign_for.cond
  br label %bn_mul_for.end.split

bn_mul_for.end.split:                             ; preds = %bn_mul_bn_assign_for.end
  %1620 = getelementptr inbounds [130 x i32], [130 x i32]* %1466, i32 0, i32 0
  %1621 = bitcast i32* %1620 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1621, i8 0, i32 520, i1 false)
  br label %if.end53.split135

if.end53.split135:                                ; preds = %bn_mul_for.end.split
  %1622 = load i32, i32* %ndigits, align 4
  %arraydecay61 = getelementptr inbounds [65 x i32], [65 x i32]* %mq, i32 0, i32 0
  %arraydecay62 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %arraydecay63 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  br label %bn_add_entry

bn_add_entry:                                     ; preds = %if.end53.split135
  %1623 = alloca i32, align 4
  %1624 = alloca i32*, align 4
  %1625 = alloca i32*, align 4
  %1626 = alloca i32*, align 4
  %1627 = alloca i32, align 4
  %1628 = alloca i32, align 4
  %1629 = alloca i32, align 4
  store i32 %1622, i32* %1623, align 4
  store i32* %arraydecay61, i32** %1624, align 4
  store i32* %arraydecay62, i32** %1625, align 4
  store i32* %arraydecay63, i32** %1626, align 4
  store i32 0, i32* %1628, align 4
  store i32 0, i32* %1629, align 4
  br label %bn_add_for.cond

bn_add_for.cond:                                  ; preds = %bn_add_for.inc, %bn_add_entry
  %1630 = load i32, i32* %1629, align 4
  %1631 = load i32, i32* %1623, align 4
  %1632 = icmp ult i32 %1630, %1631
  br i1 %1632, label %bn_add_for.body, label %bn_add_for.end

bn_add_for.body:                                  ; preds = %bn_add_for.cond
  %1633 = load i32*, i32** %1625, align 4
  %1634 = load i32, i32* %1629, align 4
  %1635 = getelementptr inbounds i32, i32* %1633, i32 %1634
  %1636 = load i32, i32* %1635, align 4
  %1637 = load i32, i32* %1628, align 4
  %1638 = add i32 %1636, %1637
  store i32 %1638, i32* %1627, align 4
  %1639 = load i32, i32* %1628, align 4
  %1640 = icmp ult i32 %1638, %1639
  br i1 %1640, label %bn_add_if.then, label %bn_add_if.else

bn_add_if.then:                                   ; preds = %bn_add_for.body
  %1641 = load i32*, i32** %1624, align 4
  %1642 = load i32, i32* %1629, align 4
  %1643 = getelementptr inbounds i32, i32* %1641, i32 %1642
  %1644 = load i32, i32* %1643, align 4
  store i32 %1644, i32* %1627, align 4
  br label %bn_add_if.end9

bn_add_if.else:                                   ; preds = %bn_add_for.body
  %1645 = load i32*, i32** %1624, align 4
  %1646 = load i32, i32* %1629, align 4
  %1647 = getelementptr inbounds i32, i32* %1645, i32 %1646
  %1648 = load i32, i32* %1647, align 4
  %1649 = load i32, i32* %1627, align 4
  %1650 = add i32 %1649, %1648
  store i32 %1650, i32* %1627, align 4
  %1651 = load i32*, i32** %1624, align 4
  %1652 = load i32, i32* %1629, align 4
  %1653 = getelementptr inbounds i32, i32* %1651, i32 %1652
  %1654 = load i32, i32* %1653, align 4
  %1655 = icmp ult i32 %1650, %1654
  br i1 %1655, label %bn_add_if.then7, label %bn_add_if.else8

bn_add_if.then7:                                  ; preds = %bn_add_if.else
  store i32 1, i32* %1628, align 4
  br label %bn_add_if.end

bn_add_if.else8:                                  ; preds = %bn_add_if.else
  store i32 0, i32* %1628, align 4
  br label %bn_add_if.end

bn_add_if.end:                                    ; preds = %bn_add_if.else8, %bn_add_if.then7
  br label %bn_add_if.end9

bn_add_if.end9:                                   ; preds = %bn_add_if.end, %bn_add_if.then
  %1656 = load i32, i32* %1627, align 4
  %1657 = load i32*, i32** %1626, align 4
  %1658 = load i32, i32* %1629, align 4
  %1659 = getelementptr inbounds i32, i32* %1657, i32 %1658
  store i32 %1656, i32* %1659, align 4
  br label %bn_add_for.inc

bn_add_for.inc:                                   ; preds = %bn_add_if.end9
  %1660 = load i32, i32* %1629, align 4
  %1661 = add i32 %1660, 1
  store i32 %1661, i32* %1629, align 4
  br label %bn_add_for.cond

bn_add_for.end:                                   ; preds = %bn_add_for.cond
  %1662 = load i32, i32* %1628, align 4
  br label %if.end53.split111

if.end53.split111:                                ; preds = %bn_add_for.end
  %1663 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %1663, i32 0, i32 0
  %1664 = load i32, i32* %bits, align 4
  %add = add i32 %1664, 7
  %div = udiv i32 %add, 8
  %1665 = load i32*, i32** %out_len.addr, align 4
  store i32 %div, i32* %1665, align 4
  %1666 = load i32, i32* %ndigits, align 4
  %arraydecay65 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %1667 = load i32*, i32** %out_len.addr, align 4
  %1668 = load i32, i32* %1667, align 4
  %1669 = load i8*, i8** %out.addr, align 4
  br label %bn_encode_entry

bn_encode_entry:                                  ; preds = %if.end53.split111
  %1670 = alloca i32, align 4
  %1671 = alloca i32*, align 4
  %1672 = alloca i32, align 4
  %1673 = alloca i8*, align 4
  %1674 = alloca i32, align 4
  %1675 = alloca i32, align 4
  %1676 = alloca i32, align 4
  %1677 = alloca i32, align 4
  store i32 %1666, i32* %1670, align 4
  store i32* %arraydecay65, i32** %1671, align 4
  store i32 %1668, i32* %1672, align 4
  store i8* %1669, i8** %1673, align 4
  store i32 0, i32* %1676, align 4
  %1678 = load i32, i32* %1672, align 4
  %1679 = sub i32 %1678, 1
  store i32 %1679, i32* %1675, align 4
  br label %bn_encode_for.cond

bn_encode_for.cond:                               ; preds = %bn_encode_for.inc9, %bn_encode_entry
  %1680 = load i32, i32* %1676, align 4
  %1681 = load i32, i32* %1670, align 4
  %1682 = icmp ult i32 %1680, %1681
  br i1 %1682, label %bn_encode_land.rhs, label %bn_encode_land.end

bn_encode_land.rhs:                               ; preds = %bn_encode_for.cond
  %1683 = load i32, i32* %1675, align 4
  %1684 = icmp sge i32 %1683, 0
  br label %bn_encode_land.end

bn_encode_land.end:                               ; preds = %bn_encode_land.rhs, %bn_encode_for.cond
  %1685 = phi i1 [ false, %bn_encode_for.cond ], [ %1684, %bn_encode_land.rhs ]
  br i1 %1685, label %bn_encode_for.body, label %bn_encode_for.end10

bn_encode_for.body:                               ; preds = %bn_encode_land.end
  %1686 = load i32*, i32** %1671, align 4
  %1687 = load i32, i32* %1676, align 4
  %1688 = getelementptr inbounds i32, i32* %1686, i32 %1687
  %1689 = load i32, i32* %1688, align 4
  store i32 %1689, i32* %1674, align 4
  store i32 0, i32* %1677, align 4
  br label %bn_encode_for.cond2

bn_encode_for.cond2:                              ; preds = %bn_encode_for.inc, %bn_encode_for.body
  %1690 = load i32, i32* %1675, align 4
  %1691 = icmp sge i32 %1690, 0
  br i1 %1691, label %bn_encode_land.rhs4, label %bn_encode_land.end6

bn_encode_land.rhs4:                              ; preds = %bn_encode_for.cond2
  %1692 = load i32, i32* %1677, align 4
  %1693 = icmp ult i32 %1692, 32
  br label %bn_encode_land.end6

bn_encode_land.end6:                              ; preds = %bn_encode_land.rhs4, %bn_encode_for.cond2
  %1694 = phi i1 [ false, %bn_encode_for.cond2 ], [ %1693, %bn_encode_land.rhs4 ]
  br i1 %1694, label %bn_encode_for.body7, label %bn_encode_for.end

bn_encode_for.body7:                              ; preds = %bn_encode_land.end6
  %1695 = load i32, i32* %1674, align 4
  %1696 = load i32, i32* %1677, align 4
  %1697 = lshr i32 %1695, %1696
  %1698 = trunc i32 %1697 to i8
  %1699 = load i8*, i8** %1673, align 4
  %1700 = load i32, i32* %1675, align 4
  %1701 = getelementptr inbounds i8, i8* %1699, i32 %1700
  store i8 %1698, i8* %1701, align 1
  br label %bn_encode_for.inc

bn_encode_for.inc:                                ; preds = %bn_encode_for.body7
  %1702 = load i32, i32* %1675, align 4
  %1703 = add nsw i32 %1702, -1
  store i32 %1703, i32* %1675, align 4
  %1704 = load i32, i32* %1677, align 4
  %1705 = add i32 %1704, 8
  store i32 %1705, i32* %1677, align 4
  br label %bn_encode_for.cond2

bn_encode_for.end:                                ; preds = %bn_encode_land.end6
  br label %bn_encode_for.inc9

bn_encode_for.inc9:                               ; preds = %bn_encode_for.end
  %1706 = load i32, i32* %1676, align 4
  %1707 = add i32 %1706, 1
  store i32 %1707, i32* %1676, align 4
  br label %bn_encode_for.cond

bn_encode_for.end10:                              ; preds = %bn_encode_land.end
  br label %bn_encode_for.cond11

bn_encode_for.cond11:                             ; preds = %bn_encode_for.inc16, %bn_encode_for.end10
  %1708 = load i32, i32* %1675, align 4
  %1709 = icmp sge i32 %1708, 0
  br i1 %1709, label %bn_encode_for.body14, label %bn_encode_for.end18

bn_encode_for.body14:                             ; preds = %bn_encode_for.cond11
  %1710 = load i8*, i8** %1673, align 4
  %1711 = load i32, i32* %1675, align 4
  %1712 = getelementptr inbounds i8, i8* %1710, i32 %1711
  store i8 0, i8* %1712, align 1
  br label %bn_encode_for.inc16

bn_encode_for.inc16:                              ; preds = %bn_encode_for.body14
  %1713 = load i32, i32* %1675, align 4
  %1714 = add nsw i32 %1713, -1
  store i32 %1714, i32* %1675, align 4
  br label %bn_encode_for.cond11

bn_encode_for.end18:                              ; preds = %bn_encode_for.cond11
  br label %if.end53.split

if.end53.split:                                   ; preds = %bn_encode_for.end18
  %arraydecay66 = getelementptr inbounds [65 x i32], [65 x i32]* %c, i32 0, i32 0
  %1715 = bitcast i32* %arraydecay66 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1715, i8 0, i32 260, i1 false)
  %arraydecay67 = getelementptr inbounds [65 x i32], [65 x i32]* %cp, i32 0, i32 0
  %1716 = bitcast i32* %arraydecay67 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1716, i8 0, i32 260, i1 false)
  %arraydecay68 = getelementptr inbounds [65 x i32], [65 x i32]* %cq, i32 0, i32 0
  %1717 = bitcast i32* %arraydecay68 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1717, i8 0, i32 260, i1 false)
  %arraydecay69 = getelementptr inbounds [65 x i32], [65 x i32]* %dp, i32 0, i32 0
  %1718 = bitcast i32* %arraydecay69 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1718, i8 0, i32 260, i1 false)
  %arraydecay70 = getelementptr inbounds [65 x i32], [65 x i32]* %dq, i32 0, i32 0
  %1719 = bitcast i32* %arraydecay70 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1719, i8 0, i32 260, i1 false)
  %arraydecay71 = getelementptr inbounds [65 x i32], [65 x i32]* %mp, i32 0, i32 0
  %1720 = bitcast i32* %arraydecay71 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1720, i8 0, i32 260, i1 false)
  %arraydecay72 = getelementptr inbounds [65 x i32], [65 x i32]* %mq, i32 0, i32 0
  %1721 = bitcast i32* %arraydecay72 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1721, i8 0, i32 260, i1 false)
  %arraydecay73 = getelementptr inbounds [65 x i32], [65 x i32]* %p, i32 0, i32 0
  %1722 = bitcast i32* %arraydecay73 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1722, i8 0, i32 260, i1 false)
  %arraydecay74 = getelementptr inbounds [65 x i32], [65 x i32]* %q, i32 0, i32 0
  %1723 = bitcast i32* %arraydecay74 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1723, i8 0, i32 260, i1 false)
  %arraydecay75 = getelementptr inbounds [65 x i32], [65 x i32]* %q_inv, i32 0, i32 0
  %1724 = bitcast i32* %arraydecay75 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1724, i8 0, i32 260, i1 false)
  %arraydecay76 = getelementptr inbounds [65 x i32], [65 x i32]* %t, i32 0, i32 0
  %1725 = bitcast i32* %arraydecay76 to i8*
  call void @llvm.memset.p0i8.i32(i8* align 4 %1725, i8 0, i32 260, i1 false)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end53.split, %if.then
  %1726 = load i32, i32* %retval, align 4
  ret i32 %1726
}

; Function Attrs: noinline optnone
define dso_local i32 @rsa_private_decrypt(i8* %out, i32* %out_len, i8* %in, i32 %in_len, %struct.rsa_sk_t* %sk) #2 {
entry:
  %retval = alloca i32, align 4
  %sk.addr = alloca %struct.rsa_sk_t*, align 4
  %in_len.addr = alloca i32, align 4
  %in.addr = alloca i8*, align 4
  %out_len.addr = alloca i32*, align 4
  %out.addr = alloca i8*, align 4
  %status = alloca i32, align 4
  %pkcs_block = alloca [256 x i8], align 1
  %i = alloca i32, align 4
  %modulus_len = alloca i32, align 4
  %pkcs_block_len = alloca i32, align 4
  store %struct.rsa_sk_t* %sk, %struct.rsa_sk_t** %sk.addr, align 4
  store i32 %in_len, i32* %in_len.addr, align 4
  store i8* %in, i8** %in.addr, align 4
  store i32* %out_len, i32** %out_len.addr, align 4
  store i8* %out, i8** %out.addr, align 4
  %0 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %bits = getelementptr inbounds %struct.rsa_sk_t, %struct.rsa_sk_t* %0, i32 0, i32 0
  %1 = load i32, i32* %bits, align 4
  %add = add i32 %1, 7
  %div = udiv i32 %add, 8
  store i32 %div, i32* %modulus_len, align 4
  %2 = load i32, i32* %in_len.addr, align 4
  %3 = load i32, i32* %modulus_len, align 4
  %cmp = icmp ugt i32 %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 4098, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.rsa_sk_t*, %struct.rsa_sk_t** %sk.addr, align 4
  %5 = load i32, i32* %in_len.addr, align 4
  %6 = load i8*, i8** %in.addr, align 4
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  %call = call i32 @private_block_operation(i8* %arraydecay, i32* %pkcs_block_len, i8* %6, i32 %5, %struct.rsa_sk_t* %4)
  store i32 %call, i32* %status, align 4
  %7 = load i32, i32* %status, align 4
  %cmp1 = icmp ne i32 %7, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %8 = load i32, i32* %status, align 4
  store i32 %8, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %9 = load i32, i32* %pkcs_block_len, align 4
  %10 = load i32, i32* %modulus_len, align 4
  %cmp4 = icmp ne i32 %9, %10
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store i32 4098, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end3
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %cmp7 = icmp ne i32 %conv, 0
  br i1 %cmp7, label %if.then13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end6
  %arrayidx9 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 1
  %12 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %12 to i32
  %cmp11 = icmp ne i32 %conv10, 2
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false, %if.end6
  store i32 4097, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %modulus_len, align 4
  %sub = sub i32 %14, 1
  %cmp15 = icmp ult i32 %13, %sub
  br i1 %cmp15, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %i, align 4
  %arrayidx17 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %16 to i32
  %cmp19 = icmp eq i32 %conv18, 0
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %for.body
  br label %for.end

if.end22:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end22
  %17 = load i32, i32* %i, align 4
  %inc = add i32 %17, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then21, %for.cond
  %18 = load i32, i32* %i, align 4
  %inc23 = add i32 %18, 1
  store i32 %inc23, i32* %i, align 4
  %19 = load i32, i32* %i, align 4
  %20 = load i32, i32* %modulus_len, align 4
  %cmp24 = icmp uge i32 %19, %20
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %for.end
  store i32 4097, i32* %retval, align 4
  br label %return

if.end27:                                         ; preds = %for.end
  %21 = load i32, i32* %modulus_len, align 4
  %22 = load i32, i32* %i, align 4
  %sub28 = sub i32 %21, %22
  %23 = load i32*, i32** %out_len.addr, align 4
  store i32 %sub28, i32* %23, align 4
  %24 = load i32*, i32** %out_len.addr, align 4
  %25 = load i32, i32* %24, align 4
  %add29 = add i32 %25, 11
  %26 = load i32, i32* %modulus_len, align 4
  %cmp30 = icmp ugt i32 %add29, %26
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end27
  store i32 4097, i32* %retval, align 4
  br label %return

if.end33:                                         ; preds = %if.end27
  %27 = load i8*, i8** %out.addr, align 4
  %28 = load i32, i32* %i, align 4
  %arrayidx34 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 %28
  %29 = load i32*, i32** %out_len.addr, align 4
  %30 = load i32, i32* %29, align 4
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %27, i8* align 1 %arrayidx34, i32 %30, i1 false)
  %arraydecay35 = getelementptr inbounds [256 x i8], [256 x i8]* %pkcs_block, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay35, i8 0, i32 256, i1 false)
  %31 = load i32, i32* %status, align 4
  store i32 %31, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end33, %if.then32, %if.then26, %if.then13, %if.then5, %if.then2, %if.then
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

define %ReturnStruct* @ConditionFun(i32 %arg, i32* %arg1, i32** %arg2, i32* %arg3) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32*, align 4
  store i32* %arg3, i32** %arg3.addr, align 4
  %arg3Load = load i32*, i32** %arg3.addr, align 4
  br label %Split

Split:                                            ; preds = %Split5, %entry
  %0 = load i32, i32* %arg3Load, align 4
  %1 = load i32, i32* %arg1Load, align 4
  %2 = icmp ult i32 %0, %1
  br i1 %2, label %Split4, label %Split6

Split4:                                           ; preds = %Split
  %3 = load i32*, i32** %arg2Load, align 4
  %4 = load i32, i32* %arg3Load, align 4
  %5 = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %argLoad, i32* %5, align 4
  br label %Split5

Split5:                                           ; preds = %Split4
  %6 = load i32, i32* %arg3Load, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* %arg3Load, align 4
  br label %Split

Split6:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split6
  %ReturnValue = alloca %ReturnStruct*, align 4
  %returnvalue = load %ReturnStruct*, %ReturnStruct** %ReturnValue, align 4
  ret %ReturnStruct* %returnvalue
}

define %ReturnStruct.0* @ConditionFun.1(i32 %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32* %arg4) {
entry:
  %0 = load i32, i32* @x.2
  %1 = load i32, i32* @y.3
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  %8 = load i32, i32* @x.2
  %9 = load i32, i32* @y.3
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %Split6, %originalBBpart2
  %16 = load i32, i32* %arg4Load, align 4
  %17 = load i32, i32* %arg1Load, align 4
  %18 = icmp ult i32 %16, %17
  br i1 %18, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %19 = load i32, i32* @x.2
  %20 = load i32, i32* @y.3
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %Split5, %originalBB8alteredBB
  %27 = load i32*, i32** %arg2Load, align 4
  %28 = load i32, i32* %arg4Load, align 4
  %29 = getelementptr inbounds i32, i32* %27, i32 %28
  %30 = load i32, i32* %29, align 4
  %31 = load i32*, i32** %arg3Load, align 4
  %32 = load i32, i32* %arg4Load, align 4
  %33 = getelementptr inbounds i32, i32* %31, i32 %32
  store i32 %30, i32* %33, align 4
  %34 = load i32, i32* @x.2
  %35 = load i32, i32* @y.3
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %Split6

Split6:                                           ; preds = %originalBBpart210
  %42 = load i32, i32* %arg4Load, align 4
  %43 = add i32 %42, %argLoad
  store i32 %43, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %44 = load i32, i32* @x.2
  %45 = load i32, i32* @y.3
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %ReturnBB, %originalBB12alteredBB
  %ReturnValue = alloca %ReturnStruct.0*, align 4
  %returnvalue = load %ReturnStruct.0*, %ReturnStruct.0** %ReturnValue, align 4
  %52 = load i32, i32* @x.2
  %53 = load i32, i32* @y.3
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  ret %ReturnStruct.0* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32*, i32** %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32**, i32*** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32**, i32*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i32*, i32** %arg4.addralteredBB, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %Split5
  %60 = load i32*, i32** %arg2Load, align 4
  %61 = load i32, i32* %arg4Load, align 4
  %62 = getelementptr inbounds i32, i32* %60, i32 %61
  %63 = load i32, i32* %62, align 4
  %64 = load i32*, i32** %arg3Load, align 4
  %65 = load i32, i32* %arg4Load, align 4
  %66 = getelementptr inbounds i32, i32* %64, i32 %65
  store i32 %63, i32* %66, align 4
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %ReturnBB
  %ReturnValuealteredBB = alloca %ReturnStruct.0*, align 4
  %returnvaluealteredBB = load %ReturnStruct.0*, %ReturnStruct.0** %ReturnValuealteredBB, align 4
  br label %originalBB12
}

define %ReturnStruct.1* @ConditionFun.4(i32 %arg, i32 %arg1, i32* %arg2, i32** %arg3, i32* %arg4) {
entry:
  %0 = load i32, i32* @x.5
  %1 = load i32, i32* @y.6
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addr, align 4
  %arg2Load = load i32*, i32** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  %8 = load i32, i32* @x.5
  %9 = load i32, i32* @y.6
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %originalBBpart217, %originalBBpart2
  %16 = load i32, i32* @x.5
  %17 = load i32, i32* @y.6
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %Split, %originalBB8alteredBB
  %24 = load i32, i32* %arg4Load, align 4
  %25 = load i32, i32* %arg2Load, align 4
  %26 = icmp ult i32 %24, %25
  %27 = load i32, i32* @x.5
  %28 = load i32, i32* @y.6
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br i1 %26, label %Split5, label %Split7

Split5:                                           ; preds = %originalBBpart210
  %35 = load i32*, i32** %arg3Load, align 4
  %36 = load i32, i32* %arg4Load, align 4
  %37 = getelementptr inbounds i32, i32* %35, i32 %36
  store i32 %argLoad, i32* %37, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %38 = load i32, i32* @x.5
  %39 = load i32, i32* @y.6
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %Split6, %originalBB12alteredBB
  %46 = load i32, i32* %arg4Load, align 4
  %47 = add i32 %46, %arg1Load
  store i32 %47, i32* %arg4Load, align 4
  %48 = load i32, i32* @x.5
  %49 = load i32, i32* @y.6
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart217, label %originalBB12alteredBB

originalBBpart217:                                ; preds = %originalBB12
  br label %Split

Split7:                                           ; preds = %originalBBpart210
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.1*, align 4
  %returnvalue = load %ReturnStruct.1*, %ReturnStruct.1** %ReturnValue, align 4
  ret %ReturnStruct.1* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32, i32* %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32*, i32** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32**, i32*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i32*, i32** %arg4.addralteredBB, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %Split
  %56 = load i32, i32* %arg4Load, align 4
  %57 = load i32, i32* %arg2Load, align 4
  %58 = icmp ult i32 %56, %57
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %Split6
  %59 = load i32, i32* %arg4Load, align 4
  %_ = shl i32 %59, %arg1Load
  %_13 = sub i32 0, %59
  %gen = add i32 %_13, %arg1Load
  %_14 = sub i32 %59, %arg1Load
  %gen15 = mul i32 %_14, %arg1Load
  %60 = add i32 %59, %arg1Load
  store i32 %60, i32* %arg4Load, align 4
  br label %originalBB12
}

define %ReturnStruct.2* @ConditionFun.7(i32 %arg, i32 %arg1, i32* %arg2, i32** %arg3, i32* %arg4) {
entry:
  %0 = load i32, i32* @x.8
  %1 = load i32, i32* @y.9
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addr, align 4
  %arg2Load = load i32*, i32** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  %8 = load i32, i32* @x.8
  %9 = load i32, i32* @y.9
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %originalBBpart220, %originalBBpart2
  %16 = load i32, i32* %arg4Load, align 4
  %17 = load i32, i32* %arg2Load, align 4
  %18 = icmp ult i32 %16, %17
  br i1 %18, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %19 = load i32*, i32** %arg3Load, align 4
  %20 = load i32, i32* %arg4Load, align 4
  %21 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %argLoad, i32* %21, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %22 = load i32, i32* @x.8
  %23 = load i32, i32* @y.9
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %Split6, %originalBB8alteredBB
  %30 = load i32, i32* %arg4Load, align 4
  %31 = add i32 %30, %arg1Load
  store i32 %31, i32* %arg4Load, align 4
  %32 = load i32, i32* @x.8
  %33 = load i32, i32* @y.9
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart220, label %originalBB8alteredBB

originalBBpart220:                                ; preds = %originalBB8
  br label %Split

Split7:                                           ; preds = %Split
  %40 = load i32, i32* @x.8
  %41 = load i32, i32* @y.9
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %Split7, %originalBB22alteredBB
  %48 = load i32, i32* @x.8
  %49 = load i32, i32* @y.9
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %ReturnBB

ReturnBB:                                         ; preds = %originalBBpart224
  %56 = load i32, i32* @x.8
  %57 = load i32, i32* @y.9
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %ReturnBB, %originalBB26alteredBB
  %ReturnValue = alloca %ReturnStruct.2*, align 4
  %returnvalue = load %ReturnStruct.2*, %ReturnStruct.2** %ReturnValue, align 4
  %64 = load i32, i32* @x.8
  %65 = load i32, i32* @y.9
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret %ReturnStruct.2* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32, i32* %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32*, i32** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32**, i32*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i32*, i32** %arg4.addralteredBB, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %Split6
  %72 = load i32, i32* %arg4Load, align 4
  %_ = sub i32 0, %72
  %gen = add i32 %_, %arg1Load
  %_9 = shl i32 %72, %arg1Load
  %_10 = sub i32 0, %72
  %gen11 = add i32 %_10, %arg1Load
  %_12 = sub i32 %72, %arg1Load
  %gen13 = mul i32 %_12, %arg1Load
  %_14 = shl i32 %72, %arg1Load
  %_15 = sub i32 %72, %arg1Load
  %gen16 = mul i32 %_15, %arg1Load
  %_17 = sub i32 0, %72
  %gen18 = add i32 %_17, %arg1Load
  %73 = add i32 %72, %arg1Load
  store i32 %73, i32* %arg4Load, align 4
  br label %originalBB8

originalBB22alteredBB:                            ; preds = %originalBB22, %Split7
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %ReturnBB
  %ReturnValuealteredBB = alloca %ReturnStruct.2*, align 4
  %returnvaluealteredBB = load %ReturnStruct.2*, %ReturnStruct.2** %ReturnValuealteredBB, align 4
  br label %originalBB26
}

define %ReturnStruct.3* @ConditionFun.10(i32 %arg, i32 %arg1, i32* %arg2, i32** %arg3, i32* %arg4) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addr, align 4
  %arg2Load = load i32*, i32** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  br label %Split

Split:                                            ; preds = %Split6, %entry
  %0 = load i32, i32* @x.11
  %1 = load i32, i32* @y.12
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split, %originalBBalteredBB
  %8 = load i32, i32* %arg4Load, align 4
  %9 = load i32, i32* %arg2Load, align 4
  %10 = icmp ult i32 %8, %9
  %11 = load i32, i32* @x.11
  %12 = load i32, i32* @y.12
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %10, label %Split5, label %Split7

Split5:                                           ; preds = %originalBBpart2
  %19 = load i32, i32* @x.11
  %20 = load i32, i32* @y.12
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %Split5, %originalBB8alteredBB
  %27 = load i32*, i32** %arg3Load, align 4
  %28 = load i32, i32* %arg4Load, align 4
  %29 = getelementptr inbounds i32, i32* %27, i32 %28
  store i32 %argLoad, i32* %29, align 4
  %30 = load i32, i32* @x.11
  %31 = load i32, i32* @y.12
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %Split6

Split6:                                           ; preds = %originalBBpart210
  %38 = load i32, i32* %arg4Load, align 4
  %39 = add i32 %38, %arg1Load
  store i32 %39, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %originalBBpart2
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.3*, align 4
  %returnvalue = load %ReturnStruct.3*, %ReturnStruct.3** %ReturnValue, align 4
  ret %ReturnStruct.3* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split
  %40 = load i32, i32* %arg4Load, align 4
  %41 = load i32, i32* %arg2Load, align 4
  %42 = icmp ult i32 %40, %41
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %Split5
  %43 = load i32*, i32** %arg3Load, align 4
  %44 = load i32, i32* %arg4Load, align 4
  %45 = getelementptr inbounds i32, i32* %43, i32 %44
  store i32 %argLoad, i32* %45, align 4
  br label %originalBB8
}

define %ReturnStruct.4* @ConditionFun.13(i32 %arg, i32* %arg1, i32** %arg2, i32* %arg3) {
entry:
  %0 = load i32, i32* @x.14
  %1 = load i32, i32* @y.15
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32*, align 4
  store i32* %arg3, i32** %arg3.addr, align 4
  %arg3Load = load i32*, i32** %arg3.addr, align 4
  %8 = load i32, i32* @x.14
  %9 = load i32, i32* @y.15
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %Split5, %originalBBpart2
  %16 = load i32, i32* %arg3Load, align 4
  %17 = load i32, i32* %arg1Load, align 4
  %18 = icmp ult i32 %16, %17
  br i1 %18, label %Split4, label %Split6

Split4:                                           ; preds = %Split
  %19 = load i32*, i32** %arg2Load, align 4
  %20 = load i32, i32* %arg3Load, align 4
  %21 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %argLoad, i32* %21, align 4
  br label %Split5

Split5:                                           ; preds = %Split4
  %22 = load i32, i32* %arg3Load, align 4
  %23 = add i32 %22, 1
  store i32 %23, i32* %arg3Load, align 4
  br label %Split

Split6:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split6
  %ReturnValue = alloca %ReturnStruct.4*, align 4
  %returnvalue = load %ReturnStruct.4*, %ReturnStruct.4** %ReturnValue, align 4
  ret %ReturnStruct.4* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32*, i32** %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32**, i32*** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32*, align 4
  store i32* %arg3, i32** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32*, i32** %arg3.addralteredBB, align 4
  br label %originalBB
}

define %ReturnStruct.5* @ConditionFun.16(i32 %arg, i32 %arg1, i32* %arg2, i32** %arg3, i32* %arg4) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addr, align 4
  %arg2Load = load i32*, i32** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  br label %Split

Split:                                            ; preds = %Split6, %entry
  %0 = load i32, i32* %arg4Load, align 4
  %1 = load i32, i32* %arg2Load, align 4
  %2 = icmp ult i32 %0, %1
  br i1 %2, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %3 = load i32*, i32** %arg3Load, align 4
  %4 = load i32, i32* %arg4Load, align 4
  %5 = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %argLoad, i32* %5, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %6 = load i32, i32* %arg4Load, align 4
  %7 = add i32 %6, %arg1Load
  store i32 %7, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %Split
  %8 = load i32, i32* @x.17
  %9 = load i32, i32* @y.18
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split7, %originalBBalteredBB
  %16 = load i32, i32* @x.17
  %17 = load i32, i32* @y.18
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %ReturnBB

ReturnBB:                                         ; preds = %originalBBpart2
  %ReturnValue = alloca %ReturnStruct.5*, align 4
  %returnvalue = load %ReturnStruct.5*, %ReturnStruct.5** %ReturnValue, align 4
  ret %ReturnStruct.5* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split7
  br label %originalBB
}

define %ReturnStruct.6* @ConditionFun.19(i32 %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32* %arg4) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  br label %Split

Split:                                            ; preds = %Split6, %entry
  %0 = load i32, i32* %arg4Load, align 4
  %1 = load i32, i32* %arg1Load, align 4
  %2 = icmp ult i32 %0, %1
  br i1 %2, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %3 = load i32, i32* @x.20
  %4 = load i32, i32* @y.21
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split5, %originalBBalteredBB
  %11 = load i32*, i32** %arg2Load, align 4
  %12 = load i32, i32* %arg4Load, align 4
  %13 = getelementptr inbounds i32, i32* %11, i32 %12
  %14 = load i32, i32* %13, align 4
  %15 = load i32*, i32** %arg3Load, align 4
  %16 = load i32, i32* %arg4Load, align 4
  %17 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 %14, i32* %17, align 4
  %18 = load i32, i32* @x.20
  %19 = load i32, i32* @y.21
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split6

Split6:                                           ; preds = %originalBBpart2
  %26 = load i32, i32* %arg4Load, align 4
  %27 = add i32 %26, %argLoad
  store i32 %27, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.6*, align 4
  %returnvalue = load %ReturnStruct.6*, %ReturnStruct.6** %ReturnValue, align 4
  ret %ReturnStruct.6* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split5
  %28 = load i32*, i32** %arg2Load, align 4
  %29 = load i32, i32* %arg4Load, align 4
  %30 = getelementptr inbounds i32, i32* %28, i32 %29
  %31 = load i32, i32* %30, align 4
  %32 = load i32*, i32** %arg3Load, align 4
  %33 = load i32, i32* %arg4Load, align 4
  %34 = getelementptr inbounds i32, i32* %32, i32 %33
  store i32 %31, i32* %34, align 4
  br label %originalBB
}

define %ReturnStruct.7* @ConditionFun.22(i32 %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32* %arg4) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  br label %Split

Split:                                            ; preds = %originalBBpart222, %entry
  %0 = load i32, i32* @x.23
  %1 = load i32, i32* @y.24
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split, %originalBBalteredBB
  %8 = load i32, i32* %arg4Load, align 4
  %9 = load i32, i32* %arg1Load, align 4
  %10 = icmp ult i32 %8, %9
  %11 = load i32, i32* @x.23
  %12 = load i32, i32* @y.24
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %10, label %Split5, label %Split7

Split5:                                           ; preds = %originalBBpart2
  %19 = load i32, i32* @x.23
  %20 = load i32, i32* @y.24
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %Split5, %originalBB8alteredBB
  %27 = load i32*, i32** %arg2Load, align 4
  %28 = load i32, i32* %arg4Load, align 4
  %29 = getelementptr inbounds i32, i32* %27, i32 %28
  %30 = load i32, i32* %29, align 4
  %31 = load i32*, i32** %arg3Load, align 4
  %32 = load i32, i32* %arg4Load, align 4
  %33 = getelementptr inbounds i32, i32* %31, i32 %32
  store i32 %30, i32* %33, align 4
  %34 = load i32, i32* @x.23
  %35 = load i32, i32* @y.24
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %Split6

Split6:                                           ; preds = %originalBBpart210
  %42 = load i32, i32* @x.23
  %43 = load i32, i32* @y.24
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %Split6, %originalBB12alteredBB
  %50 = load i32, i32* %arg4Load, align 4
  %51 = add i32 %50, %argLoad
  store i32 %51, i32* %arg4Load, align 4
  %52 = load i32, i32* @x.23
  %53 = load i32, i32* @y.24
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart222, label %originalBB12alteredBB

originalBBpart222:                                ; preds = %originalBB12
  br label %Split

Split7:                                           ; preds = %originalBBpart2
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.7*, align 4
  %returnvalue = load %ReturnStruct.7*, %ReturnStruct.7** %ReturnValue, align 4
  ret %ReturnStruct.7* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split
  %60 = load i32, i32* %arg4Load, align 4
  %61 = load i32, i32* %arg1Load, align 4
  %62 = icmp ult i32 %60, %61
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %Split5
  %63 = load i32*, i32** %arg2Load, align 4
  %64 = load i32, i32* %arg4Load, align 4
  %65 = getelementptr inbounds i32, i32* %63, i32 %64
  %66 = load i32, i32* %65, align 4
  %67 = load i32*, i32** %arg3Load, align 4
  %68 = load i32, i32* %arg4Load, align 4
  %69 = getelementptr inbounds i32, i32* %67, i32 %68
  store i32 %66, i32* %69, align 4
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %Split6
  %70 = load i32, i32* %arg4Load, align 4
  %_ = sub i32 %70, %argLoad
  %gen = mul i32 %_, %argLoad
  %_13 = sub i32 %70, %argLoad
  %gen14 = mul i32 %_13, %argLoad
  %_15 = sub i32 0, %70
  %gen16 = add i32 %_15, %argLoad
  %_17 = sub i32 0, %70
  %gen18 = add i32 %_17, %argLoad
  %_19 = sub i32 %70, %argLoad
  %gen20 = mul i32 %_19, %argLoad
  %71 = add i32 %70, %argLoad
  store i32 %71, i32* %arg4Load, align 4
  br label %originalBB12
}

define %ReturnStruct.8* @ConditionFun.25(i32 %arg, i32 %arg1, i32* %arg2, i32** %arg3, i32* %arg4) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addr, align 4
  %arg2Load = load i32*, i32** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  br label %Split

Split:                                            ; preds = %originalBBpart2, %entry
  %0 = load i32, i32* %arg4Load, align 4
  %1 = load i32, i32* %arg2Load, align 4
  %2 = icmp ult i32 %0, %1
  br i1 %2, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %3 = load i32*, i32** %arg3Load, align 4
  %4 = load i32, i32* %arg4Load, align 4
  %5 = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %argLoad, i32* %5, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %6 = load i32, i32* @x.26
  %7 = load i32, i32* @y.27
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split6, %originalBBalteredBB
  %14 = load i32, i32* %arg4Load, align 4
  %15 = add i32 %14, %arg1Load
  store i32 %15, i32* %arg4Load, align 4
  %16 = load i32, i32* @x.26
  %17 = load i32, i32* @y.27
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %24 = load i32, i32* @x.26
  %25 = load i32, i32* @y.27
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %ReturnBB, %originalBB13alteredBB
  %ReturnValue = alloca %ReturnStruct.8*, align 4
  %returnvalue = load %ReturnStruct.8*, %ReturnStruct.8** %ReturnValue, align 4
  %32 = load i32, i32* @x.26
  %33 = load i32, i32* @y.27
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  ret %ReturnStruct.8* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split6
  %40 = load i32, i32* %arg4Load, align 4
  %_ = sub i32 0, %40
  %gen = add i32 %_, %arg1Load
  %_8 = shl i32 %40, %arg1Load
  %_9 = sub i32 %40, %arg1Load
  %gen10 = mul i32 %_9, %arg1Load
  %_11 = sub i32 0, %40
  %gen12 = add i32 %_11, %arg1Load
  %41 = add i32 %40, %arg1Load
  store i32 %41, i32* %arg4Load, align 4
  br label %originalBB

originalBB13alteredBB:                            ; preds = %originalBB13, %ReturnBB
  %ReturnValuealteredBB = alloca %ReturnStruct.8*, align 4
  %returnvaluealteredBB = load %ReturnStruct.8*, %ReturnStruct.8** %ReturnValuealteredBB, align 4
  br label %originalBB13
}

define %ReturnStruct.9* @ConditionFun.28(i32 %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32* %arg4) {
entry:
  %0 = load i32, i32* @x.29
  %1 = load i32, i32* @y.30
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  %8 = load i32, i32* @x.29
  %9 = load i32, i32* @y.30
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %originalBBpart214, %originalBBpart2
  %16 = load i32, i32* @x.29
  %17 = load i32, i32* @y.30
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %Split, %originalBB8alteredBB
  %24 = load i32, i32* %arg4Load, align 4
  %25 = load i32, i32* %arg1Load, align 4
  %26 = icmp ult i32 %24, %25
  %27 = load i32, i32* @x.29
  %28 = load i32, i32* @y.30
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br i1 %26, label %Split5, label %Split7

Split5:                                           ; preds = %originalBBpart210
  %35 = load i32*, i32** %arg2Load, align 4
  %36 = load i32, i32* %arg4Load, align 4
  %37 = getelementptr inbounds i32, i32* %35, i32 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %arg3Load, align 4
  %40 = load i32, i32* %arg4Load, align 4
  %41 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %38, i32* %41, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %42 = load i32, i32* @x.29
  %43 = load i32, i32* @y.30
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %Split6, %originalBB12alteredBB
  %50 = load i32, i32* %arg4Load, align 4
  %51 = add i32 %50, %argLoad
  store i32 %51, i32* %arg4Load, align 4
  %52 = load i32, i32* @x.29
  %53 = load i32, i32* @y.30
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %Split

Split7:                                           ; preds = %originalBBpart210
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.9*, align 4
  %returnvalue = load %ReturnStruct.9*, %ReturnStruct.9** %ReturnValue, align 4
  ret %ReturnStruct.9* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32*, i32** %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32**, i32*** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32**, i32*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i32*, i32** %arg4.addralteredBB, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %Split
  %60 = load i32, i32* %arg4Load, align 4
  %61 = load i32, i32* %arg1Load, align 4
  %62 = icmp ult i32 %60, %61
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %Split6
  %63 = load i32, i32* %arg4Load, align 4
  %64 = add i32 %63, %argLoad
  store i32 %64, i32* %arg4Load, align 4
  br label %originalBB12
}

define %ReturnStruct.10* @ConditionFun.31(i32 %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32* %arg4) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  br label %Split

Split:                                            ; preds = %originalBBpart210, %entry
  %0 = load i32, i32* %arg4Load, align 4
  %1 = load i32, i32* %arg1Load, align 4
  %2 = icmp ult i32 %0, %1
  br i1 %2, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %3 = load i32, i32* @x.32
  %4 = load i32, i32* @y.33
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split5, %originalBBalteredBB
  %11 = load i32*, i32** %arg2Load, align 4
  %12 = load i32, i32* %arg4Load, align 4
  %13 = getelementptr inbounds i32, i32* %11, i32 %12
  %14 = load i32, i32* %13, align 4
  %15 = load i32*, i32** %arg3Load, align 4
  %16 = load i32, i32* %arg4Load, align 4
  %17 = getelementptr inbounds i32, i32* %15, i32 %16
  store i32 %14, i32* %17, align 4
  %18 = load i32, i32* @x.32
  %19 = load i32, i32* @y.33
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split6

Split6:                                           ; preds = %originalBBpart2
  %26 = load i32, i32* @x.32
  %27 = load i32, i32* @y.33
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %Split6, %originalBB8alteredBB
  %34 = load i32, i32* %arg4Load, align 4
  %35 = add i32 %34, %argLoad
  store i32 %35, i32* %arg4Load, align 4
  %36 = load i32, i32* @x.32
  %37 = load i32, i32* @y.33
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.10*, align 4
  %returnvalue = load %ReturnStruct.10*, %ReturnStruct.10** %ReturnValue, align 4
  ret %ReturnStruct.10* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split5
  %44 = load i32*, i32** %arg2Load, align 4
  %45 = load i32, i32* %arg4Load, align 4
  %46 = getelementptr inbounds i32, i32* %44, i32 %45
  %47 = load i32, i32* %46, align 4
  %48 = load i32*, i32** %arg3Load, align 4
  %49 = load i32, i32* %arg4Load, align 4
  %50 = getelementptr inbounds i32, i32* %48, i32 %49
  store i32 %47, i32* %50, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %Split6
  %51 = load i32, i32* %arg4Load, align 4
  %_ = sub i32 %51, %argLoad
  %gen = mul i32 %_, %argLoad
  %52 = add i32 %51, %argLoad
  store i32 %52, i32* %arg4Load, align 4
  br label %originalBB8
}

define %ReturnStruct.11* @ConditionFun.34(i32 %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32* %arg4) {
entry:
  %0 = load i32, i32* @x.35
  %1 = load i32, i32* @y.36
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  %8 = load i32, i32* @x.35
  %9 = load i32, i32* @y.36
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %Split6, %originalBBpart2
  %16 = load i32, i32* @x.35
  %17 = load i32, i32* @y.36
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %Split, %originalBB8alteredBB
  %24 = load i32, i32* %arg4Load, align 4
  %25 = load i32, i32* %arg1Load, align 4
  %26 = icmp ult i32 %24, %25
  %27 = load i32, i32* @x.35
  %28 = load i32, i32* @y.36
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br i1 %26, label %Split5, label %Split7

Split5:                                           ; preds = %originalBBpart210
  %35 = load i32*, i32** %arg2Load, align 4
  %36 = load i32, i32* %arg4Load, align 4
  %37 = getelementptr inbounds i32, i32* %35, i32 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %arg3Load, align 4
  %40 = load i32, i32* %arg4Load, align 4
  %41 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %38, i32* %41, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %42 = load i32, i32* %arg4Load, align 4
  %43 = add i32 %42, %argLoad
  store i32 %43, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %originalBBpart210
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %44 = load i32, i32* @x.35
  %45 = load i32, i32* @y.36
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %ReturnBB, %originalBB12alteredBB
  %ReturnValue = alloca %ReturnStruct.11*, align 4
  %returnvalue = load %ReturnStruct.11*, %ReturnStruct.11** %ReturnValue, align 4
  %52 = load i32, i32* @x.35
  %53 = load i32, i32* @y.36
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  ret %ReturnStruct.11* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32*, i32** %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32**, i32*** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32**, i32*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i32*, i32** %arg4.addralteredBB, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %Split
  %60 = load i32, i32* %arg4Load, align 4
  %61 = load i32, i32* %arg1Load, align 4
  %62 = icmp ult i32 %60, %61
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %ReturnBB
  %ReturnValuealteredBB = alloca %ReturnStruct.11*, align 4
  %returnvaluealteredBB = load %ReturnStruct.11*, %ReturnStruct.11** %ReturnValuealteredBB, align 4
  br label %originalBB12
}

define %ReturnStruct.12* @ConditionFun.37(i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3) {
entry:
  %0 = load i32, i32* @x.38
  %1 = load i32, i32* @y.39
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32*, align 4
  store i32* %arg, i32** %arg.addr, align 4
  %argLoad = load i32*, i32** %arg.addr, align 4
  %arg1.addr = alloca i32**, align 4
  store i32** %arg1, i32*** %arg1.addr, align 4
  %arg1Load = load i32**, i32*** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32*, align 4
  store i32* %arg3, i32** %arg3.addr, align 4
  %arg3Load = load i32*, i32** %arg3.addr, align 4
  %8 = load i32, i32* @x.38
  %9 = load i32, i32* @y.39
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %Split5, %originalBBpart2
  %16 = load i32, i32* @x.38
  %17 = load i32, i32* @y.39
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %Split, %originalBB7alteredBB
  %24 = load i32, i32* %arg3Load, align 4
  %25 = load i32, i32* %argLoad, align 4
  %26 = icmp ult i32 %24, %25
  %27 = load i32, i32* @x.38
  %28 = load i32, i32* @y.39
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  br i1 %26, label %Split4, label %Split6

Split4:                                           ; preds = %originalBBpart29
  %35 = load i32*, i32** %arg1Load, align 4
  %36 = load i32, i32* %arg3Load, align 4
  %37 = getelementptr inbounds i32, i32* %35, i32 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32*, i32** %arg2Load, align 4
  %40 = load i32, i32* %arg3Load, align 4
  %41 = getelementptr inbounds i32, i32* %39, i32 %40
  store i32 %38, i32* %41, align 4
  br label %Split5

Split5:                                           ; preds = %Split4
  %42 = load i32, i32* %arg3Load, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %arg3Load, align 4
  br label %Split

Split6:                                           ; preds = %originalBBpart29
  %44 = load i32, i32* @x.38
  %45 = load i32, i32* @y.39
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %Split6, %originalBB11alteredBB
  %52 = load i32, i32* @x.38
  %53 = load i32, i32* @y.39
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %ReturnBB

ReturnBB:                                         ; preds = %originalBBpart213
  %ReturnValue = alloca %ReturnStruct.12*, align 4
  %returnvalue = load %ReturnStruct.12*, %ReturnStruct.12** %ReturnValue, align 4
  ret %ReturnStruct.12* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32*, align 4
  store i32* %arg, i32** %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32*, i32** %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32**, align 4
  store i32** %arg1, i32*** %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32**, i32*** %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32**, i32*** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32*, align 4
  store i32* %arg3, i32** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32*, i32** %arg3.addralteredBB, align 4
  br label %originalBB

originalBB7alteredBB:                             ; preds = %originalBB7, %Split
  %60 = load i32, i32* %arg3Load, align 4
  %61 = load i32, i32* %argLoad, align 4
  %62 = icmp ult i32 %60, %61
  br label %originalBB7

originalBB11alteredBB:                            ; preds = %originalBB11, %Split6
  br label %originalBB11
}

define %ReturnStruct.13* @ConditionFun.40(i32* %arg, i32** %arg1, i32** %arg2, i32* %arg3) {
entry:
  %arg.addr = alloca i32*, align 4
  store i32* %arg, i32** %arg.addr, align 4
  %argLoad = load i32*, i32** %arg.addr, align 4
  %arg1.addr = alloca i32**, align 4
  store i32** %arg1, i32*** %arg1.addr, align 4
  %arg1Load = load i32**, i32*** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32*, align 4
  store i32* %arg3, i32** %arg3.addr, align 4
  %arg3Load = load i32*, i32** %arg3.addr, align 4
  br label %Split

Split:                                            ; preds = %Split5, %entry
  %0 = load i32, i32* @x.41
  %1 = load i32, i32* @y.42
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split, %originalBBalteredBB
  %8 = load i32, i32* %arg3Load, align 4
  %9 = load i32, i32* %argLoad, align 4
  %10 = icmp ult i32 %8, %9
  %11 = load i32, i32* @x.41
  %12 = load i32, i32* @y.42
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %10, label %Split4, label %Split6

Split4:                                           ; preds = %originalBBpart2
  %19 = load i32*, i32** %arg1Load, align 4
  %20 = load i32, i32* %arg3Load, align 4
  %21 = getelementptr inbounds i32, i32* %19, i32 %20
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %arg2Load, align 4
  %24 = load i32, i32* %arg3Load, align 4
  %25 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %25, align 4
  br label %Split5

Split5:                                           ; preds = %Split4
  %26 = load i32, i32* %arg3Load, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* %arg3Load, align 4
  br label %Split

Split6:                                           ; preds = %originalBBpart2
  %28 = load i32, i32* @x.41
  %29 = load i32, i32* @y.42
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %Split6, %originalBB7alteredBB
  %36 = load i32, i32* @x.41
  %37 = load i32, i32* @y.42
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  br label %ReturnBB

ReturnBB:                                         ; preds = %originalBBpart29
  %44 = load i32, i32* @x.41
  %45 = load i32, i32* @y.42
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %ReturnBB, %originalBB11alteredBB
  %ReturnValue = alloca %ReturnStruct.13*, align 4
  %returnvalue = load %ReturnStruct.13*, %ReturnStruct.13** %ReturnValue, align 4
  %52 = load i32, i32* @x.41
  %53 = load i32, i32* @y.42
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  ret %ReturnStruct.13* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split
  %60 = load i32, i32* %arg3Load, align 4
  %61 = load i32, i32* %argLoad, align 4
  %62 = icmp ult i32 %60, %61
  br label %originalBB

originalBB7alteredBB:                             ; preds = %originalBB7, %Split6
  br label %originalBB7

originalBB11alteredBB:                            ; preds = %originalBB11, %ReturnBB
  %ReturnValuealteredBB = alloca %ReturnStruct.13*, align 4
  %returnvaluealteredBB = load %ReturnStruct.13*, %ReturnStruct.13** %ReturnValuealteredBB, align 4
  br label %originalBB11
}

define %ReturnStruct.14* @ConditionFun.43(i32 %arg, i32 %arg1, i32* %arg2, i32** %arg3, i32* %arg4) {
entry:
  %0 = load i32, i32* @x.44
  %1 = load i32, i32* @y.45
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addr, align 4
  %arg2Load = load i32*, i32** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  %8 = load i32, i32* @x.44
  %9 = load i32, i32* @y.45
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %Split6, %originalBBpart2
  %16 = load i32, i32* %arg4Load, align 4
  %17 = load i32, i32* %arg2Load, align 4
  %18 = icmp ult i32 %16, %17
  br i1 %18, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %19 = load i32*, i32** %arg3Load, align 4
  %20 = load i32, i32* %arg4Load, align 4
  %21 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %argLoad, i32* %21, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %22 = load i32, i32* %arg4Load, align 4
  %23 = add i32 %22, %arg1Load
  store i32 %23, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %24 = load i32, i32* @x.44
  %25 = load i32, i32* @y.45
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %ReturnBB, %originalBB8alteredBB
  %ReturnValue = alloca %ReturnStruct.14*, align 4
  %returnvalue = load %ReturnStruct.14*, %ReturnStruct.14** %ReturnValue, align 4
  %32 = load i32, i32* @x.44
  %33 = load i32, i32* @y.45
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  ret %ReturnStruct.14* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32, i32* %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32*, i32** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32**, i32*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i32*, i32** %arg4.addralteredBB, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %ReturnBB
  %ReturnValuealteredBB = alloca %ReturnStruct.14*, align 4
  %returnvaluealteredBB = load %ReturnStruct.14*, %ReturnStruct.14** %ReturnValuealteredBB, align 4
  br label %originalBB8
}

define %ReturnStruct.15* @ConditionFun.46(i32 %arg, i32 %arg1, i32* %arg2, i32** %arg3, i32* %arg4) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addr, align 4
  %arg2Load = load i32*, i32** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  br label %Split

Split:                                            ; preds = %Split6, %entry
  %0 = load i32, i32* %arg4Load, align 4
  %1 = load i32, i32* %arg2Load, align 4
  %2 = icmp ult i32 %0, %1
  br i1 %2, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %3 = load i32*, i32** %arg3Load, align 4
  %4 = load i32, i32* %arg4Load, align 4
  %5 = getelementptr inbounds i32, i32* %3, i32 %4
  store i32 %argLoad, i32* %5, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %6 = load i32, i32* %arg4Load, align 4
  %7 = add i32 %6, %arg1Load
  store i32 %7, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.15*, align 4
  %returnvalue = load %ReturnStruct.15*, %ReturnStruct.15** %ReturnValue, align 4
  ret %ReturnStruct.15* %returnvalue
}

define %ReturnStruct.16* @ConditionFun.49(i32 %arg, i32 %arg1, i32* %arg2, i32** %arg3, i32* %arg4) {
entry:
  %0 = load i32, i32* @x.50
  %1 = load i32, i32* @y.51
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addr, align 4
  %arg2Load = load i32*, i32** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  %8 = load i32, i32* @x.50
  %9 = load i32, i32* @y.51
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %Split6, %originalBBpart2
  %16 = load i32, i32* %arg4Load, align 4
  %17 = load i32, i32* %arg2Load, align 4
  %18 = icmp ult i32 %16, %17
  br i1 %18, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %19 = load i32*, i32** %arg3Load, align 4
  %20 = load i32, i32* %arg4Load, align 4
  %21 = getelementptr inbounds i32, i32* %19, i32 %20
  store i32 %argLoad, i32* %21, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %22 = load i32, i32* %arg4Load, align 4
  %23 = add i32 %22, %arg1Load
  store i32 %23, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.16*, align 4
  %returnvalue = load %ReturnStruct.16*, %ReturnStruct.16** %ReturnValue, align 4
  ret %ReturnStruct.16* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32, i32* %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32*, align 4
  store i32* %arg2, i32** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32*, i32** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32**, i32*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i32*, i32** %arg4.addralteredBB, align 4
  br label %originalBB
}

define %ReturnStruct.17* @ConditionFun.52(i32 %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32* %arg4) {
entry:
  %0 = load i32, i32* @x.53
  %1 = load i32, i32* @y.54
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  %8 = load i32, i32* @x.53
  %9 = load i32, i32* @y.54
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %Split6, %originalBBpart2
  %16 = load i32, i32* %arg4Load, align 4
  %17 = load i32, i32* %arg1Load, align 4
  %18 = icmp ult i32 %16, %17
  br i1 %18, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %19 = load i32*, i32** %arg2Load, align 4
  %20 = load i32, i32* %arg4Load, align 4
  %21 = getelementptr inbounds i32, i32* %19, i32 %20
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %arg3Load, align 4
  %24 = load i32, i32* %arg4Load, align 4
  %25 = getelementptr inbounds i32, i32* %23, i32 %24
  store i32 %22, i32* %25, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %26 = load i32, i32* %arg4Load, align 4
  %27 = add i32 %26, %argLoad
  store i32 %27, i32* %arg4Load, align 4
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %28 = load i32, i32* @x.53
  %29 = load i32, i32* @y.54
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %ReturnBB, %originalBB8alteredBB
  %ReturnValue = alloca %ReturnStruct.17*, align 4
  %returnvalue = load %ReturnStruct.17*, %ReturnStruct.17** %ReturnValue, align 4
  %36 = load i32, i32* @x.53
  %37 = load i32, i32* @y.54
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  ret %ReturnStruct.17* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i32, align 4
  store i32 %arg, i32* %arg.addralteredBB, align 4
  %argLoadalteredBB = load i32, i32* %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i32*, i32** %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i32**, i32*** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i32**, i32*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i32*, i32** %arg4.addralteredBB, align 4
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %ReturnBB
  %ReturnValuealteredBB = alloca %ReturnStruct.17*, align 4
  %returnvaluealteredBB = load %ReturnStruct.17*, %ReturnStruct.17** %ReturnValuealteredBB, align 4
  br label %originalBB8
}

define %ReturnStruct.18* @ConditionFun.55(i32 %arg, i32* %arg1, i32** %arg2, i32** %arg3, i32* %arg4) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32*, align 4
  store i32* %arg1, i32** %arg1.addr, align 4
  %arg1Load = load i32*, i32** %arg1.addr, align 4
  %arg2.addr = alloca i32**, align 4
  store i32** %arg2, i32*** %arg2.addr, align 4
  %arg2Load = load i32**, i32*** %arg2.addr, align 4
  %arg3.addr = alloca i32**, align 4
  store i32** %arg3, i32*** %arg3.addr, align 4
  %arg3Load = load i32**, i32*** %arg3.addr, align 4
  %arg4.addr = alloca i32*, align 4
  store i32* %arg4, i32** %arg4.addr, align 4
  %arg4Load = load i32*, i32** %arg4.addr, align 4
  br label %Split

Split:                                            ; preds = %originalBBpart2, %entry
  %0 = load i32, i32* %arg4Load, align 4
  %1 = load i32, i32* %arg1Load, align 4
  %2 = icmp ult i32 %0, %1
  br i1 %2, label %Split5, label %Split7

Split5:                                           ; preds = %Split
  %3 = load i32*, i32** %arg2Load, align 4
  %4 = load i32, i32* %arg4Load, align 4
  %5 = getelementptr inbounds i32, i32* %3, i32 %4
  %6 = load i32, i32* %5, align 4
  %7 = load i32*, i32** %arg3Load, align 4
  %8 = load i32, i32* %arg4Load, align 4
  %9 = getelementptr inbounds i32, i32* %7, i32 %8
  store i32 %6, i32* %9, align 4
  br label %Split6

Split6:                                           ; preds = %Split5
  %10 = load i32, i32* @x.56
  %11 = load i32, i32* @y.57
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split6, %originalBBalteredBB
  %18 = load i32, i32* %arg4Load, align 4
  %19 = add i32 %18, %argLoad
  store i32 %19, i32* %arg4Load, align 4
  %20 = load i32, i32* @x.56
  %21 = load i32, i32* @y.57
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split7:                                           ; preds = %Split
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split7
  %ReturnValue = alloca %ReturnStruct.18*, align 4
  %returnvalue = load %ReturnStruct.18*, %ReturnStruct.18** %ReturnValue, align 4
  ret %ReturnStruct.18* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split6
  %28 = load i32, i32* %arg4Load, align 4
  %_ = sub i32 %28, %argLoad
  %gen = mul i32 %_, %argLoad
  %_8 = sub i32 0, %28
  %gen9 = add i32 %_8, %argLoad
  %_10 = sub i32 %28, %argLoad
  %gen11 = mul i32 %_10, %argLoad
  %_12 = shl i32 %28, %argLoad
  %29 = add i32 %28, %argLoad
  store i32 %29, i32* %arg4Load, align 4
  br label %originalBB
}

attributes #0 = { argmemonly nounwind }
attributes #1 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.linker.options = !{!0, !1, !2, !0, !1, !2, !0, !1, !2, !0, !1, !2}
!llvm.ident = !{!3, !3, !3, !3}
!llvm.module.flags = !{!4, !5}

!0 = !{!"/DEFAULTLIB:msvcrtd.lib"}
!1 = !{!"/DEFAULTLIB:oldnames.lib"}
!2 = !{!"/DEFAULTLIB:msvcprtd.lib"}
!3 = !{!"Obfuscator-LLVM clang version 8.0.1 (tags/RELEASE_801/final) (based on Obfuscator-LLVM 8.0.1)"}
!4 = !{i32 1, !"NumRegisterParameters", i32 0}
!5 = !{i32 1, !"wchar_size", i32 2}
