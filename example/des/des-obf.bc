; ModuleID = 'inline.bc'
source_filename = "llvm-link"
target datalayout = "e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32"
target triple = "i686-pc-windows-msvc16.0.0"

%struct._iobuf = type { i8*, i32, i8*, i32, i32, i32, i32, i8* }
%struct.key_set = type { [8 x i8], [4 x i8], [4 x i8] }
%ReturnStruct = type {}
%ReturnStruct.0 = type {}
%ReturnStruct.1 = type {}
%ReturnStruct.2 = type {}
%ReturnStruct.3 = type {}
%ReturnStruct.4 = type { i16* }

$"??_C@_01HIHLOKLC@1?$AA@" = comdat any

$"??_C@_01GBGANLPD@0?$AA@" = comdat any

$"??_C@_04ELMKNHBF@K?3?5?6?$AA@" = comdat any

$"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@" = comdat any

$"??_C@_01EEMJAFIK@?6?$AA@" = comdat any

$"??_C@_05KNMBOJAM@?6C?3?5?6?$AA@" = comdat any

$"??_C@_05BPOBDFBM@?6D?3?5?6?$AA@" = comdat any

$"??_C@_0EF@LEAOBOIJ@You?5must?5provide?5at?5least?51?5para@" = comdat any

$"??_C@_02BKJHAODO@?9g?$AA@" = comdat any

$"??_C@_0EA@BFJPECMN@Invalid?5?$CD?5of?5parameter?5specified@" = comdat any

$"??_C@_02GMLFBBN@wb?$AA@" = comdat any

$"??_C@_0CC@HHNBFEDG@Could?5not?5open?5file?5to?5write?5key@" = comdat any

$"??_C@_0CC@FJNHMKJL@Error?5writing?5key?5to?5output?5file@" = comdat any

$"??_C@_02CIKBGMLM@?9e?$AA@" = comdat any

$"??_C@_02DBLKFNPN@?9d?$AA@" = comdat any

$"??_C@_0GC@CNACNKJO@Invalid?5?$CD?5of?5parameters?5?$CI?$CFd?$CJ?5spe@" = comdat any

$"??_C@_02JDPG@rb?$AA@" = comdat any

$"??_C@_0CF@FHLEAPML@Could?5not?5open?5key?5file?5to?5read?5@" = comdat any

$"??_C@_0DF@KDDFFPFJ@Key?5read?5from?5key?5file?5does?5nto?5@" = comdat any

$"??_C@_0CI@BKMPCFLJ@Could?5not?5open?5input?5file?5to?5rea@" = comdat any

$"??_C@_0CK@FHHBJFFD@Could?5not?5open?5output?5file?5to?5wr@" = comdat any

$"??_C@_0O@LLDPPJEB@Encrypting?4?4?6?$AA@" = comdat any

$"??_C@_0O@MBPJKHJE@Decrypting?4?4?6?$AA@" = comdat any

$"??_C@_0DC@MHEFLGGM@Finished?5processing?5?$CFs?4?5Time?5tak@" = comdat any

$"??_C@_0DO@PBDDNJFP@Invalid?5action?3?5?$CFs?4?5First?5parame@" = comdat any

@initial_key_permutaion = dso_local global [56 x i32] [i32 57, i32 49, i32 41, i32 33, i32 25, i32 17, i32 9, i32 1, i32 58, i32 50, i32 42, i32 34, i32 26, i32 18, i32 10, i32 2, i32 59, i32 51, i32 43, i32 35, i32 27, i32 19, i32 11, i32 3, i32 60, i32 52, i32 44, i32 36, i32 63, i32 55, i32 47, i32 39, i32 31, i32 23, i32 15, i32 7, i32 62, i32 54, i32 46, i32 38, i32 30, i32 22, i32 14, i32 6, i32 61, i32 53, i32 45, i32 37, i32 29, i32 21, i32 13, i32 5, i32 28, i32 20, i32 12, i32 4], align 4
@initial_message_permutation = dso_local global [64 x i32] [i32 58, i32 50, i32 42, i32 34, i32 26, i32 18, i32 10, i32 2, i32 60, i32 52, i32 44, i32 36, i32 28, i32 20, i32 12, i32 4, i32 62, i32 54, i32 46, i32 38, i32 30, i32 22, i32 14, i32 6, i32 64, i32 56, i32 48, i32 40, i32 32, i32 24, i32 16, i32 8, i32 57, i32 49, i32 41, i32 33, i32 25, i32 17, i32 9, i32 1, i32 59, i32 51, i32 43, i32 35, i32 27, i32 19, i32 11, i32 3, i32 61, i32 53, i32 45, i32 37, i32 29, i32 21, i32 13, i32 5, i32 63, i32 55, i32 47, i32 39, i32 31, i32 23, i32 15, i32 7], align 4
@key_shift_sizes = dso_local global [17 x i32] [i32 -1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1], align 4
@sub_key_permutation = dso_local global [48 x i32] [i32 14, i32 17, i32 11, i32 24, i32 1, i32 5, i32 3, i32 28, i32 15, i32 6, i32 21, i32 10, i32 23, i32 19, i32 12, i32 4, i32 26, i32 8, i32 16, i32 7, i32 27, i32 20, i32 13, i32 2, i32 41, i32 52, i32 31, i32 37, i32 47, i32 55, i32 30, i32 40, i32 51, i32 45, i32 33, i32 48, i32 44, i32 49, i32 39, i32 56, i32 34, i32 53, i32 46, i32 42, i32 50, i32 36, i32 29, i32 32], align 4
@message_expansion = dso_local global [48 x i32] [i32 32, i32 1, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 28, i32 29, i32 30, i32 31, i32 32, i32 1], align 4
@S1 = dso_local global [64 x i32] [i32 14, i32 4, i32 13, i32 1, i32 2, i32 15, i32 11, i32 8, i32 3, i32 10, i32 6, i32 12, i32 5, i32 9, i32 0, i32 7, i32 0, i32 15, i32 7, i32 4, i32 14, i32 2, i32 13, i32 1, i32 10, i32 6, i32 12, i32 11, i32 9, i32 5, i32 3, i32 8, i32 4, i32 1, i32 14, i32 8, i32 13, i32 6, i32 2, i32 11, i32 15, i32 12, i32 9, i32 7, i32 3, i32 10, i32 5, i32 0, i32 15, i32 12, i32 8, i32 2, i32 4, i32 9, i32 1, i32 7, i32 5, i32 11, i32 3, i32 14, i32 10, i32 0, i32 6, i32 13], align 4
@S2 = dso_local global [64 x i32] [i32 15, i32 1, i32 8, i32 14, i32 6, i32 11, i32 3, i32 4, i32 9, i32 7, i32 2, i32 13, i32 12, i32 0, i32 5, i32 10, i32 3, i32 13, i32 4, i32 7, i32 15, i32 2, i32 8, i32 14, i32 12, i32 0, i32 1, i32 10, i32 6, i32 9, i32 11, i32 5, i32 0, i32 14, i32 7, i32 11, i32 10, i32 4, i32 13, i32 1, i32 5, i32 8, i32 12, i32 6, i32 9, i32 3, i32 2, i32 15, i32 13, i32 8, i32 10, i32 1, i32 3, i32 15, i32 4, i32 2, i32 11, i32 6, i32 7, i32 12, i32 0, i32 5, i32 14, i32 9], align 4
@S3 = dso_local global [64 x i32] [i32 10, i32 0, i32 9, i32 14, i32 6, i32 3, i32 15, i32 5, i32 1, i32 13, i32 12, i32 7, i32 11, i32 4, i32 2, i32 8, i32 13, i32 7, i32 0, i32 9, i32 3, i32 4, i32 6, i32 10, i32 2, i32 8, i32 5, i32 14, i32 12, i32 11, i32 15, i32 1, i32 13, i32 6, i32 4, i32 9, i32 8, i32 15, i32 3, i32 0, i32 11, i32 1, i32 2, i32 12, i32 5, i32 10, i32 14, i32 7, i32 1, i32 10, i32 13, i32 0, i32 6, i32 9, i32 8, i32 7, i32 4, i32 15, i32 14, i32 3, i32 11, i32 5, i32 2, i32 12], align 4
@S4 = dso_local global [64 x i32] [i32 7, i32 13, i32 14, i32 3, i32 0, i32 6, i32 9, i32 10, i32 1, i32 2, i32 8, i32 5, i32 11, i32 12, i32 4, i32 15, i32 13, i32 8, i32 11, i32 5, i32 6, i32 15, i32 0, i32 3, i32 4, i32 7, i32 2, i32 12, i32 1, i32 10, i32 14, i32 9, i32 10, i32 6, i32 9, i32 0, i32 12, i32 11, i32 7, i32 13, i32 15, i32 1, i32 3, i32 14, i32 5, i32 2, i32 8, i32 4, i32 3, i32 15, i32 0, i32 6, i32 10, i32 1, i32 13, i32 8, i32 9, i32 4, i32 5, i32 11, i32 12, i32 7, i32 2, i32 14], align 4
@S5 = dso_local global [64 x i32] [i32 2, i32 12, i32 4, i32 1, i32 7, i32 10, i32 11, i32 6, i32 8, i32 5, i32 3, i32 15, i32 13, i32 0, i32 14, i32 9, i32 14, i32 11, i32 2, i32 12, i32 4, i32 7, i32 13, i32 1, i32 5, i32 0, i32 15, i32 10, i32 3, i32 9, i32 8, i32 6, i32 4, i32 2, i32 1, i32 11, i32 10, i32 13, i32 7, i32 8, i32 15, i32 9, i32 12, i32 5, i32 6, i32 3, i32 0, i32 14, i32 11, i32 8, i32 12, i32 7, i32 1, i32 14, i32 2, i32 13, i32 6, i32 15, i32 0, i32 9, i32 10, i32 4, i32 5, i32 3], align 4
@S6 = dso_local global [64 x i32] [i32 12, i32 1, i32 10, i32 15, i32 9, i32 2, i32 6, i32 8, i32 0, i32 13, i32 3, i32 4, i32 14, i32 7, i32 5, i32 11, i32 10, i32 15, i32 4, i32 2, i32 7, i32 12, i32 9, i32 5, i32 6, i32 1, i32 13, i32 14, i32 0, i32 11, i32 3, i32 8, i32 9, i32 14, i32 15, i32 5, i32 2, i32 8, i32 12, i32 3, i32 7, i32 0, i32 4, i32 10, i32 1, i32 13, i32 11, i32 6, i32 4, i32 3, i32 2, i32 12, i32 9, i32 5, i32 15, i32 10, i32 11, i32 14, i32 1, i32 7, i32 6, i32 0, i32 8, i32 13], align 4
@S7 = dso_local global [64 x i32] [i32 4, i32 11, i32 2, i32 14, i32 15, i32 0, i32 8, i32 13, i32 3, i32 12, i32 9, i32 7, i32 5, i32 10, i32 6, i32 1, i32 13, i32 0, i32 11, i32 7, i32 4, i32 9, i32 1, i32 10, i32 14, i32 3, i32 5, i32 12, i32 2, i32 15, i32 8, i32 6, i32 1, i32 4, i32 11, i32 13, i32 12, i32 3, i32 7, i32 14, i32 10, i32 15, i32 6, i32 8, i32 0, i32 5, i32 9, i32 2, i32 6, i32 11, i32 13, i32 8, i32 1, i32 4, i32 10, i32 7, i32 9, i32 5, i32 0, i32 15, i32 14, i32 2, i32 3, i32 12], align 4
@S8 = dso_local global [64 x i32] [i32 13, i32 2, i32 8, i32 4, i32 6, i32 15, i32 11, i32 1, i32 10, i32 9, i32 3, i32 14, i32 5, i32 0, i32 12, i32 7, i32 1, i32 15, i32 13, i32 8, i32 10, i32 3, i32 7, i32 4, i32 12, i32 5, i32 6, i32 11, i32 0, i32 14, i32 9, i32 2, i32 7, i32 11, i32 4, i32 1, i32 9, i32 12, i32 14, i32 2, i32 0, i32 6, i32 10, i32 13, i32 15, i32 3, i32 5, i32 8, i32 2, i32 1, i32 14, i32 7, i32 4, i32 10, i32 8, i32 13, i32 15, i32 12, i32 9, i32 0, i32 3, i32 5, i32 6, i32 11], align 4
@right_sub_message_permutation = dso_local global [32 x i32] [i32 16, i32 7, i32 20, i32 21, i32 29, i32 12, i32 28, i32 17, i32 1, i32 15, i32 23, i32 26, i32 5, i32 18, i32 31, i32 10, i32 2, i32 8, i32 24, i32 14, i32 32, i32 27, i32 3, i32 9, i32 19, i32 13, i32 30, i32 6, i32 22, i32 11, i32 4, i32 25], align 4
@final_message_permutation = dso_local global [64 x i32] [i32 40, i32 8, i32 48, i32 16, i32 56, i32 24, i32 64, i32 32, i32 39, i32 7, i32 47, i32 15, i32 55, i32 23, i32 63, i32 31, i32 38, i32 6, i32 46, i32 14, i32 54, i32 22, i32 62, i32 30, i32 37, i32 5, i32 45, i32 13, i32 53, i32 21, i32 61, i32 29, i32 36, i32 4, i32 44, i32 12, i32 52, i32 20, i32 60, i32 28, i32 35, i32 3, i32 43, i32 11, i32 51, i32 19, i32 59, i32 27, i32 34, i32 2, i32 42, i32 10, i32 50, i32 18, i32 58, i32 26, i32 33, i32 1, i32 41, i32 9, i32 49, i32 17, i32 57, i32 25], align 4
@"??_C@_01HIHLOKLC@1?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"1\00", comdat, align 1
@"??_C@_01GBGANLPD@0?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"0\00", comdat, align 1
@"??_C@_04ELMKNHBF@K?3?5?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [5 x i8] c"K: \0A\00", comdat, align 1
@"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [8 x i8] c"%02X : \00", comdat, align 1
@"??_C@_01EEMJAFIK@?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"\0A\00", comdat, align 1
@"??_C@_05KNMBOJAM@?6C?3?5?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [6 x i8] c"\0AC: \0A\00", comdat, align 1
@"??_C@_05BPOBDFBM@?6D?3?5?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [6 x i8] c"\0AD: \0A\00", comdat, align 1
@"??_C@_0EF@LEAOBOIJ@You?5must?5provide?5at?5least?51?5para@" = linkonce_odr dso_local unnamed_addr constant [69 x i8] c"You must provide at least 1 parameter, where you specify the action.\00", comdat, align 1
@"??_C@_02BKJHAODO@?9g?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"-g\00", comdat, align 1
@"??_C@_0EA@BFJPECMN@Invalid?5?$CD?5of?5parameter?5specified@" = linkonce_odr dso_local unnamed_addr constant [64 x i8] c"Invalid # of parameter specified. Usage: run_des -g keyfile.key\00", comdat, align 1
@"??_C@_02GMLFBBN@wb?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"wb\00", comdat, align 1
@key_file = internal global %struct._iobuf* null, align 4
@"??_C@_0CC@HHNBFEDG@Could?5not?5open?5file?5to?5write?5key@" = linkonce_odr dso_local unnamed_addr constant [34 x i8] c"Could not open file to write key.\00", comdat, align 1
@"??_C@_0CC@FJNHMKJL@Error?5writing?5key?5to?5output?5file@" = linkonce_odr dso_local unnamed_addr constant [34 x i8] c"Error writing key to output file.\00", comdat, align 1
@"??_C@_02CIKBGMLM@?9e?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"-e\00", comdat, align 1
@"??_C@_02DBLKFNPN@?9d?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"-d\00", comdat, align 1
@"??_C@_0GC@CNACNKJO@Invalid?5?$CD?5of?5parameters?5?$CI?$CFd?$CJ?5spe@" = linkonce_odr dso_local unnamed_addr constant [98 x i8] c"Invalid # of parameters (%d) specified. Usage: run_des [-e|-d] keyfile.key input.file output.file\00", comdat, align 1
@"??_C@_02JDPG@rb?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"rb\00", comdat, align 1
@"??_C@_0CF@FHLEAPML@Could?5not?5open?5key?5file?5to?5read?5@" = linkonce_odr dso_local unnamed_addr constant [37 x i8] c"Could not open key file to read key.\00", comdat, align 1
@"??_C@_0DF@KDDFFPFJ@Key?5read?5from?5key?5file?5does?5nto?5@" = linkonce_odr dso_local unnamed_addr constant [53 x i8] c"Key read from key file does nto have valid key size.\00", comdat, align 1
@input_file = internal global %struct._iobuf* null, align 4
@"??_C@_0CI@BKMPCFLJ@Could?5not?5open?5input?5file?5to?5rea@" = linkonce_odr dso_local unnamed_addr constant [40 x i8] c"Could not open input file to read data.\00", comdat, align 1
@output_file = internal global %struct._iobuf* null, align 4
@"??_C@_0CK@FHHBJFFD@Could?5not?5open?5output?5file?5to?5wr@" = linkonce_odr dso_local unnamed_addr constant [42 x i8] c"Could not open output file to write data.\00", comdat, align 1
@"??_C@_0O@LLDPPJEB@Encrypting?4?4?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [14 x i8] c"Encrypting..\0A\00", comdat, align 1
@"??_C@_0O@MBPJKHJE@Decrypting?4?4?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [14 x i8] c"Decrypting..\0A\00", comdat, align 1
@"??_C@_0DC@MHEFLGGM@Finished?5processing?5?$CFs?4?5Time?5tak@" = linkonce_odr dso_local unnamed_addr constant [50 x i8] c"Finished processing %s. Time taken: %lf seconds.\0A\00", comdat, align 1
@"??_C@_0DO@PBDDNJFP@Invalid?5action?3?5?$CFs?4?5First?5parame@" = linkonce_odr dso_local unnamed_addr constant [62 x i8] c"Invalid action: %s. First parameter must be [ -g | -e | -d ].\00", comdat, align 1
@x = common global i32 0
@y = common global i32 0
@x.2 = common global i32 0
@y.3 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.8 = common global i32 0
@y.9 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.14 = common global i32 0
@y.15 = common global i32 0

declare dllimport i32 @printf(i8*, ...) #0

declare dllimport i32 @rand() #0

; Function Attrs: noinline optnone sspstrong
define dso_local void @print_key_set(%struct.key_set* byval align 4 %key_set) #1 {
entry:
  %i = alloca i32, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04ELMKNHBF@K?3?5?6?$AA@", i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %k = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %k, i32 0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@", i32 0, i32 0), i32 %conv)
  %k2 = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 0
  %3 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [8 x i8], [8 x i8]* %k2, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx3, align 1
  br label %print_char_as_binary_entry9

print_char_as_binary_entry9:                      ; preds = %for.body
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  store i8 %4, i8* %5, align 1
  store i32 0, i32* %6, align 4
  br label %print_char_as_binary_for.cond10

print_char_as_binary_for.cond10:                  ; preds = %print_char_as_binary_for.inc15, %print_char_as_binary_entry9
  %8 = load i32, i32* %6, align 4
  %9 = icmp slt i32 %8, 8
  br i1 %9, label %print_char_as_binary_for.body11, label %print_char_as_binary_for.end16

print_char_as_binary_for.body11:                  ; preds = %print_char_as_binary_for.cond10
  %10 = load i32, i32* %6, align 4
  %11 = sub nsw i32 7, %10
  %12 = shl i32 1, %11
  %13 = trunc i32 %12 to i8
  store i8 %13, i8* %7, align 1
  %14 = load i8, i8* %7, align 1
  %15 = sext i8 %14 to i32
  %16 = load i8, i8* %5, align 1
  %17 = sext i8 %16 to i32
  %18 = and i32 %15, %17
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %print_char_as_binary_if.then12, label %print_char_as_binary_if.else13

print_char_as_binary_if.then12:                   ; preds = %print_char_as_binary_for.body11
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01HIHLOKLC@1?$AA@", i32 0, i32 0))
  br label %print_char_as_binary_if.end14

print_char_as_binary_if.else13:                   ; preds = %print_char_as_binary_for.body11
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01GBGANLPD@0?$AA@", i32 0, i32 0))
  br label %print_char_as_binary_if.end14

print_char_as_binary_if.end14:                    ; preds = %print_char_as_binary_if.else13, %print_char_as_binary_if.then12
  br label %print_char_as_binary_for.inc15

print_char_as_binary_for.inc15:                   ; preds = %print_char_as_binary_if.end14
  %22 = load i32, i32* %6, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %6, align 4
  br label %print_char_as_binary_for.cond10

print_char_as_binary_for.end16:                   ; preds = %print_char_as_binary_for.cond10
  br label %for.body.split

for.body.split:                                   ; preds = %print_char_as_binary_for.end16
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body.split
  %24 = load i32, i32* %i, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"??_C@_05KNMBOJAM@?6C?3?5?6?$AA@", i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc16, %for.end
  %25 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %25, 4
  br i1 %cmp7, label %for.body9, label %for.end18

for.body9:                                        ; preds = %for.cond6
  %c = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 1
  %26 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [4 x i8], [4 x i8]* %c, i32 0, i32 %26
  %27 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %27 to i32
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@", i32 0, i32 0), i32 %conv11)
  %c13 = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 1
  %28 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [4 x i8], [4 x i8]* %c13, i32 0, i32 %28
  %29 = load i8, i8* %arrayidx14, align 1
  br label %print_char_as_binary_entry1

print_char_as_binary_entry1:                      ; preds = %for.body9
  %30 = alloca i8, align 1
  %31 = alloca i32, align 4
  %32 = alloca i8, align 1
  store i8 %29, i8* %30, align 1
  store i32 0, i32* %31, align 4
  br label %print_char_as_binary_for.cond2

print_char_as_binary_for.cond2:                   ; preds = %print_char_as_binary_for.inc7, %print_char_as_binary_entry1
  %33 = load i32, i32* %31, align 4
  %34 = icmp slt i32 %33, 8
  br i1 %34, label %print_char_as_binary_for.body3, label %print_char_as_binary_for.end8

print_char_as_binary_for.body3:                   ; preds = %print_char_as_binary_for.cond2
  %35 = load i32, i32* %31, align 4
  %36 = sub nsw i32 7, %35
  %37 = shl i32 1, %36
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %32, align 1
  %39 = load i8, i8* %32, align 1
  %40 = sext i8 %39 to i32
  %41 = load i8, i8* %30, align 1
  %42 = sext i8 %41 to i32
  %43 = and i32 %40, %42
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %print_char_as_binary_if.then4, label %print_char_as_binary_if.else5

print_char_as_binary_if.then4:                    ; preds = %print_char_as_binary_for.body3
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01HIHLOKLC@1?$AA@", i32 0, i32 0))
  br label %print_char_as_binary_if.end6

print_char_as_binary_if.else5:                    ; preds = %print_char_as_binary_for.body3
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01GBGANLPD@0?$AA@", i32 0, i32 0))
  br label %print_char_as_binary_if.end6

print_char_as_binary_if.end6:                     ; preds = %print_char_as_binary_if.else5, %print_char_as_binary_if.then4
  br label %print_char_as_binary_for.inc7

print_char_as_binary_for.inc7:                    ; preds = %print_char_as_binary_if.end6
  %47 = load i32, i32* %31, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %31, align 4
  br label %print_char_as_binary_for.cond2

print_char_as_binary_for.end8:                    ; preds = %print_char_as_binary_for.cond2
  br label %for.body9.split

for.body9.split:                                  ; preds = %print_char_as_binary_for.end8
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %for.inc16

for.inc16:                                        ; preds = %for.body9.split
  %49 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %49, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond6

for.end18:                                        ; preds = %for.cond6
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"??_C@_05BPOBDFBM@?6D?3?5?6?$AA@", i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc30, %for.end18
  %50 = load i32, i32* %i, align 4
  %cmp21 = icmp slt i32 %50, 4
  br i1 %cmp21, label %for.body23, label %for.end32

for.body23:                                       ; preds = %for.cond20
  %d = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 2
  %51 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [4 x i8], [4 x i8]* %d, i32 0, i32 %51
  %52 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %52 to i32
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@", i32 0, i32 0), i32 %conv25)
  %d27 = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 2
  %53 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [4 x i8], [4 x i8]* %d27, i32 0, i32 %53
  %54 = load i8, i8* %arrayidx28, align 1
  br label %print_char_as_binary_entry

print_char_as_binary_entry:                       ; preds = %for.body23
  %55 = alloca i8, align 1
  %56 = alloca i32, align 4
  %57 = alloca i8, align 1
  store i8 %54, i8* %55, align 1
  store i32 0, i32* %56, align 4
  br label %print_char_as_binary_for.cond

print_char_as_binary_for.cond:                    ; preds = %print_char_as_binary_for.inc, %print_char_as_binary_entry
  %58 = load i32, i32* %56, align 4
  %59 = icmp slt i32 %58, 8
  br i1 %59, label %print_char_as_binary_for.body, label %print_char_as_binary_for.end

print_char_as_binary_for.body:                    ; preds = %print_char_as_binary_for.cond
  %60 = load i32, i32* %56, align 4
  %61 = sub nsw i32 7, %60
  %62 = shl i32 1, %61
  %63 = trunc i32 %62 to i8
  store i8 %63, i8* %57, align 1
  %64 = load i8, i8* %57, align 1
  %65 = sext i8 %64 to i32
  %66 = load i8, i8* %55, align 1
  %67 = sext i8 %66 to i32
  %68 = and i32 %65, %67
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %print_char_as_binary_if.then, label %print_char_as_binary_if.else

print_char_as_binary_if.then:                     ; preds = %print_char_as_binary_for.body
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01HIHLOKLC@1?$AA@", i32 0, i32 0))
  br label %print_char_as_binary_if.end

print_char_as_binary_if.else:                     ; preds = %print_char_as_binary_for.body
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01GBGANLPD@0?$AA@", i32 0, i32 0))
  br label %print_char_as_binary_if.end

print_char_as_binary_if.end:                      ; preds = %print_char_as_binary_if.else, %print_char_as_binary_if.then
  br label %print_char_as_binary_for.inc

print_char_as_binary_for.inc:                     ; preds = %print_char_as_binary_if.end
  %72 = load i32, i32* %56, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %56, align 4
  br label %print_char_as_binary_for.cond

print_char_as_binary_for.end:                     ; preds = %print_char_as_binary_for.cond
  br label %for.body23.split

for.body23.split:                                 ; preds = %print_char_as_binary_for.end
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %for.inc30

for.inc30:                                        ; preds = %for.body23.split
  %74 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %74, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond20

for.end32:                                        ; preds = %for.cond20
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @process_message(i8* %message_piece, i8* %processed_piece, %struct.key_set* %key_sets, i32 %mode) #2 {
entry:
  %mode.addr = alloca i32, align 4
  %key_sets.addr = alloca %struct.key_set*, align 4
  %processed_piece.addr = alloca i8*, align 4
  %message_piece.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %shift_size = alloca i32, align 4
  %shift_byte = alloca i8, align 1
  %initial_permutation = alloca [8 x i8], align 1
  %l = alloca [4 x i8], align 1
  %r = alloca [4 x i8], align 1
  %ln = alloca [4 x i8], align 1
  %rn = alloca [4 x i8], align 1
  %er = alloca [6 x i8], align 1
  %ser = alloca [4 x i8], align 1
  %key_index = alloca i32, align 4
  %row = alloca i8, align 1
  %column = alloca i8, align 1
  %pre_end_permutation = alloca [8 x i8], align 1
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.key_set* %key_sets, %struct.key_set** %key_sets.addr, align 4
  store i8* %processed_piece, i8** %processed_piece.addr, align 4
  store i8* %message_piece, i8** %message_piece.addr, align 4
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %initial_permutation, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 8, i1 false)
  %0 = load i8*, i8** %processed_piece.addr, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %call = call %ReturnStruct* @ConditionFun()
  %MainStrut = alloca %ReturnStruct*, align 4
  store %ReturnStruct* %call, %ReturnStruct** %MainStrut, align 4
  br label %new

new:                                              ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %new
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* @initial_message_permutation, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %shift_size, align 4
  %4 = load i32, i32* %shift_size, align 4
  %sub = sub nsw i32 %4, 1
  %rem = srem i32 %sub, 8
  %shr = ashr i32 128, %rem
  %conv = trunc i32 %shr to i8
  store i8 %conv, i8* %shift_byte, align 1
  %5 = load i8*, i8** %message_piece.addr, align 4
  %6 = load i32, i32* %shift_size, align 4
  %sub1 = sub nsw i32 %6, 1
  %div = sdiv i32 %sub1, 8
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i32 %div
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  %8 = load i8, i8* %shift_byte, align 1
  %conv4 = zext i8 %8 to i32
  %and = and i32 %conv4, %conv3
  %conv5 = trunc i32 %and to i8
  store i8 %conv5, i8* %shift_byte, align 1
  %9 = load i32, i32* %shift_size, align 4
  %sub6 = sub nsw i32 %9, 1
  %rem7 = srem i32 %sub6, 8
  %10 = load i8, i8* %shift_byte, align 1
  %conv8 = zext i8 %10 to i32
  %shl = shl i32 %conv8, %rem7
  %conv9 = trunc i32 %shl to i8
  store i8 %conv9, i8* %shift_byte, align 1
  %11 = load i8, i8* %shift_byte, align 1
  %conv10 = zext i8 %11 to i32
  %12 = load i32, i32* %i, align 4
  %rem11 = srem i32 %12, 8
  %shr12 = ashr i32 %conv10, %rem11
  %13 = load i32, i32* %i, align 4
  %div13 = sdiv i32 %13, 8
  %arrayidx14 = getelementptr inbounds [8 x i8], [8 x i8]* %initial_permutation, i32 0, i32 %div13
  %14 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %14 to i32
  %or = or i32 %conv15, %shr12
  %conv16 = trunc i32 %or to i8
  store i8 %conv16, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %new
  %call2 = call %ReturnStruct.0* @ConditionFun.1()
  %MainStrut3 = alloca %ReturnStruct.0*, align 4
  store %ReturnStruct.0* %call2, %ReturnStruct.0** %MainStrut3, align 4
  br label %new1

new1:                                             ; preds = %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %new4, %new1
  %16 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %16, 4
  br i1 %cmp18, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %17 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [8 x i8], [8 x i8]* %initial_permutation, i32 0, i32 %17
  %18 = load i8, i8* %arrayidx21, align 1
  %19 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [4 x i8], [4 x i8]* %l, i32 0, i32 %19
  store i8 %18, i8* %arrayidx22, align 1
  %20 = load i32, i32* %i, align 4
  %add = add nsw i32 %20, 4
  %arrayidx23 = getelementptr inbounds [8 x i8], [8 x i8]* %initial_permutation, i32 0, i32 %add
  %21 = load i8, i8* %arrayidx23, align 1
  %22 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 %22
  store i8 %21, i8* %arrayidx24, align 1
  br label %for.inc25

for.inc25:                                        ; preds = %for.body20
  %call5 = call %ReturnStruct.1* @ConditionFun.4()
  %MainStrut6 = alloca %ReturnStruct.1*, align 4
  store %ReturnStruct.1* %call5, %ReturnStruct.1** %MainStrut6, align 4
  br label %new4

new4:                                             ; preds = %for.inc25
  %23 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %23, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  store i32 1, i32* %k, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc439, %for.end27
  %24 = load i32, i32* %k, align 4
  %cmp29 = icmp sle i32 %24, 16
  br i1 %cmp29, label %for.body31, label %for.end441

for.body31:                                       ; preds = %for.cond28
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %ln, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arraydecay32, i8* align 1 %arraydecay33, i32 4, i1 false)
  %arraydecay34 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay34, i8 0, i32 6, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc64, %for.body31
  %25 = load i32, i32* %i, align 4
  %cmp36 = icmp slt i32 %25, 48
  br i1 %cmp36, label %for.body38, label %for.end66

for.body38:                                       ; preds = %for.cond35
  %26 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds [48 x i32], [48 x i32]* @message_expansion, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx39, align 4
  store i32 %27, i32* %shift_size, align 4
  %28 = load i32, i32* %shift_size, align 4
  %sub40 = sub nsw i32 %28, 1
  %rem41 = srem i32 %sub40, 8
  %shr42 = ashr i32 128, %rem41
  %conv43 = trunc i32 %shr42 to i8
  store i8 %conv43, i8* %shift_byte, align 1
  %29 = load i32, i32* %shift_size, align 4
  %sub44 = sub nsw i32 %29, 1
  %div45 = sdiv i32 %sub44, 8
  %arrayidx46 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 %div45
  %30 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %30 to i32
  %31 = load i8, i8* %shift_byte, align 1
  %conv48 = zext i8 %31 to i32
  %and49 = and i32 %conv48, %conv47
  %conv50 = trunc i32 %and49 to i8
  store i8 %conv50, i8* %shift_byte, align 1
  %32 = load i32, i32* %shift_size, align 4
  %sub51 = sub nsw i32 %32, 1
  %rem52 = srem i32 %sub51, 8
  %33 = load i8, i8* %shift_byte, align 1
  %conv53 = zext i8 %33 to i32
  %shl54 = shl i32 %conv53, %rem52
  %conv55 = trunc i32 %shl54 to i8
  store i8 %conv55, i8* %shift_byte, align 1
  %34 = load i8, i8* %shift_byte, align 1
  %conv56 = zext i8 %34 to i32
  %35 = load i32, i32* %i, align 4
  %rem57 = srem i32 %35, 8
  %shr58 = ashr i32 %conv56, %rem57
  %36 = load i32, i32* %i, align 4
  %div59 = sdiv i32 %36, 8
  %arrayidx60 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %div59
  %37 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %37 to i32
  %or62 = or i32 %conv61, %shr58
  %conv63 = trunc i32 %or62 to i8
  store i8 %conv63, i8* %arrayidx60, align 1
  br label %for.inc64

for.inc64:                                        ; preds = %for.body38
  %38 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %38, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond35

for.end66:                                        ; preds = %for.cond35
  %39 = load i32, i32* %mode.addr, align 4
  %cmp67 = icmp eq i32 %39, 0
  br i1 %cmp67, label %if.then, label %if.else

if.then:                                          ; preds = %for.end66
  %40 = load i32, i32* %k, align 4
  %sub69 = sub nsw i32 17, %40
  store i32 %sub69, i32* %key_index, align 4
  br label %if.end

if.else:                                          ; preds = %for.end66
  %41 = load i32, i32* %k, align 4
  store i32 %41, i32* %key_index, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc81, %if.end
  %42 = load i32, i32* %i, align 4
  %cmp71 = icmp slt i32 %42, 6
  br i1 %cmp71, label %for.body73, label %for.end83

for.body73:                                       ; preds = %for.cond70
  %43 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %44 = load i32, i32* %key_index, align 4
  %arrayidx74 = getelementptr inbounds %struct.key_set, %struct.key_set* %43, i32 %44
  %k75 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx74, i32 0, i32 0
  %45 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [8 x i8], [8 x i8]* %k75, i32 0, i32 %45
  %46 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %46 to i32
  %47 = load i32, i32* %i, align 4
  %arrayidx78 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %47
  %48 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %48 to i32
  %xor = xor i32 %conv79, %conv77
  %conv80 = trunc i32 %xor to i8
  store i8 %conv80, i8* %arrayidx78, align 1
  br label %for.inc81

for.inc81:                                        ; preds = %for.body73
  %49 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %49, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond70

for.end83:                                        ; preds = %for.cond70
  store i32 0, i32* %i, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc89, %for.end83
  %50 = load i32, i32* %i, align 4
  %cmp85 = icmp slt i32 %50, 4
  br i1 %cmp85, label %for.body87, label %for.end91

for.body87:                                       ; preds = %for.cond84
  %51 = load i32, i32* %i, align 4
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 %51
  store i8 0, i8* %arrayidx88, align 1
  br label %for.inc89

for.inc89:                                        ; preds = %for.body87
  %52 = load i32, i32* %i, align 4
  %inc90 = add nsw i32 %52, 1
  store i32 %inc90, i32* %i, align 4
  br label %for.cond84

for.end91:                                        ; preds = %for.cond84
  store i8 0, i8* %row, align 1
  %arrayidx92 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %53 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %53 to i32
  %and94 = and i32 %conv93, 128
  %shr95 = ashr i32 %and94, 6
  %54 = load i8, i8* %row, align 1
  %conv96 = zext i8 %54 to i32
  %or97 = or i32 %conv96, %shr95
  %conv98 = trunc i32 %or97 to i8
  store i8 %conv98, i8* %row, align 1
  %arrayidx99 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %55 = load i8, i8* %arrayidx99, align 1
  %conv100 = zext i8 %55 to i32
  %and101 = and i32 %conv100, 4
  %shr102 = ashr i32 %and101, 2
  %56 = load i8, i8* %row, align 1
  %conv103 = zext i8 %56 to i32
  %or104 = or i32 %conv103, %shr102
  %conv105 = trunc i32 %or104 to i8
  store i8 %conv105, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx106 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %57 = load i8, i8* %arrayidx106, align 1
  %conv107 = zext i8 %57 to i32
  %and108 = and i32 %conv107, 120
  %shr109 = ashr i32 %and108, 3
  %58 = load i8, i8* %column, align 1
  %conv110 = zext i8 %58 to i32
  %or111 = or i32 %conv110, %shr109
  %conv112 = trunc i32 %or111 to i8
  store i8 %conv112, i8* %column, align 1
  %59 = load i8, i8* %row, align 1
  %conv113 = zext i8 %59 to i32
  %mul = mul nsw i32 %conv113, 16
  %60 = load i8, i8* %column, align 1
  %conv114 = zext i8 %60 to i32
  %add115 = add nsw i32 %mul, %conv114
  %arrayidx116 = getelementptr inbounds [64 x i32], [64 x i32]* @S1, i32 0, i32 %add115
  %61 = load i32, i32* %arrayidx116, align 4
  %conv117 = trunc i32 %61 to i8
  %conv118 = zext i8 %conv117 to i32
  %shl119 = shl i32 %conv118, 4
  %arrayidx120 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 0
  %62 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %62 to i32
  %or122 = or i32 %conv121, %shl119
  %conv123 = trunc i32 %or122 to i8
  store i8 %conv123, i8* %arrayidx120, align 1
  store i8 0, i8* %row, align 1
  %arrayidx124 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %63 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %63 to i32
  %and126 = and i32 %conv125, 2
  %64 = load i8, i8* %row, align 1
  %conv127 = zext i8 %64 to i32
  %or128 = or i32 %conv127, %and126
  %conv129 = trunc i32 %or128 to i8
  store i8 %conv129, i8* %row, align 1
  %arrayidx130 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 1
  %65 = load i8, i8* %arrayidx130, align 1
  %conv131 = zext i8 %65 to i32
  %and132 = and i32 %conv131, 16
  %shr133 = ashr i32 %and132, 4
  %66 = load i8, i8* %row, align 1
  %conv134 = zext i8 %66 to i32
  %or135 = or i32 %conv134, %shr133
  %conv136 = trunc i32 %or135 to i8
  store i8 %conv136, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx137 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %67 = load i8, i8* %arrayidx137, align 1
  %conv138 = zext i8 %67 to i32
  %and139 = and i32 %conv138, 1
  %shl140 = shl i32 %and139, 3
  %68 = load i8, i8* %column, align 1
  %conv141 = zext i8 %68 to i32
  %or142 = or i32 %conv141, %shl140
  %conv143 = trunc i32 %or142 to i8
  store i8 %conv143, i8* %column, align 1
  %arrayidx144 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 1
  %69 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %69 to i32
  %and146 = and i32 %conv145, 224
  %shr147 = ashr i32 %and146, 5
  %70 = load i8, i8* %column, align 1
  %conv148 = zext i8 %70 to i32
  %or149 = or i32 %conv148, %shr147
  %conv150 = trunc i32 %or149 to i8
  store i8 %conv150, i8* %column, align 1
  %71 = load i8, i8* %row, align 1
  %conv151 = zext i8 %71 to i32
  %mul152 = mul nsw i32 %conv151, 16
  %72 = load i8, i8* %column, align 1
  %conv153 = zext i8 %72 to i32
  %add154 = add nsw i32 %mul152, %conv153
  %arrayidx155 = getelementptr inbounds [64 x i32], [64 x i32]* @S2, i32 0, i32 %add154
  %73 = load i32, i32* %arrayidx155, align 4
  %conv156 = trunc i32 %73 to i8
  %conv157 = zext i8 %conv156 to i32
  %arrayidx158 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 0
  %74 = load i8, i8* %arrayidx158, align 1
  %conv159 = zext i8 %74 to i32
  %or160 = or i32 %conv159, %conv157
  %conv161 = trunc i32 %or160 to i8
  store i8 %conv161, i8* %arrayidx158, align 1
  store i8 0, i8* %row, align 1
  %arrayidx162 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 1
  %75 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %75 to i32
  %and164 = and i32 %conv163, 8
  %shr165 = ashr i32 %and164, 2
  %76 = load i8, i8* %row, align 1
  %conv166 = zext i8 %76 to i32
  %or167 = or i32 %conv166, %shr165
  %conv168 = trunc i32 %or167 to i8
  store i8 %conv168, i8* %row, align 1
  %arrayidx169 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %77 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %77 to i32
  %and171 = and i32 %conv170, 64
  %shr172 = ashr i32 %and171, 6
  %78 = load i8, i8* %row, align 1
  %conv173 = zext i8 %78 to i32
  %or174 = or i32 %conv173, %shr172
  %conv175 = trunc i32 %or174 to i8
  store i8 %conv175, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx176 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 1
  %79 = load i8, i8* %arrayidx176, align 1
  %conv177 = zext i8 %79 to i32
  %and178 = and i32 %conv177, 7
  %shl179 = shl i32 %and178, 1
  %80 = load i8, i8* %column, align 1
  %conv180 = zext i8 %80 to i32
  %or181 = or i32 %conv180, %shl179
  %conv182 = trunc i32 %or181 to i8
  store i8 %conv182, i8* %column, align 1
  %arrayidx183 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %81 = load i8, i8* %arrayidx183, align 1
  %conv184 = zext i8 %81 to i32
  %and185 = and i32 %conv184, 128
  %shr186 = ashr i32 %and185, 7
  %82 = load i8, i8* %column, align 1
  %conv187 = zext i8 %82 to i32
  %or188 = or i32 %conv187, %shr186
  %conv189 = trunc i32 %or188 to i8
  store i8 %conv189, i8* %column, align 1
  %83 = load i8, i8* %row, align 1
  %conv190 = zext i8 %83 to i32
  %mul191 = mul nsw i32 %conv190, 16
  %84 = load i8, i8* %column, align 1
  %conv192 = zext i8 %84 to i32
  %add193 = add nsw i32 %mul191, %conv192
  %arrayidx194 = getelementptr inbounds [64 x i32], [64 x i32]* @S3, i32 0, i32 %add193
  %85 = load i32, i32* %arrayidx194, align 4
  %conv195 = trunc i32 %85 to i8
  %conv196 = zext i8 %conv195 to i32
  %shl197 = shl i32 %conv196, 4
  %arrayidx198 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 1
  %86 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %86 to i32
  %or200 = or i32 %conv199, %shl197
  %conv201 = trunc i32 %or200 to i8
  store i8 %conv201, i8* %arrayidx198, align 1
  store i8 0, i8* %row, align 1
  %arrayidx202 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %87 = load i8, i8* %arrayidx202, align 1
  %conv203 = zext i8 %87 to i32
  %and204 = and i32 %conv203, 32
  %shr205 = ashr i32 %and204, 4
  %88 = load i8, i8* %row, align 1
  %conv206 = zext i8 %88 to i32
  %or207 = or i32 %conv206, %shr205
  %conv208 = trunc i32 %or207 to i8
  store i8 %conv208, i8* %row, align 1
  %arrayidx209 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %89 = load i8, i8* %arrayidx209, align 1
  %conv210 = zext i8 %89 to i32
  %and211 = and i32 %conv210, 1
  %90 = load i8, i8* %row, align 1
  %conv212 = zext i8 %90 to i32
  %or213 = or i32 %conv212, %and211
  %conv214 = trunc i32 %or213 to i8
  store i8 %conv214, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx215 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %91 = load i8, i8* %arrayidx215, align 1
  %conv216 = zext i8 %91 to i32
  %and217 = and i32 %conv216, 30
  %shr218 = ashr i32 %and217, 1
  %92 = load i8, i8* %column, align 1
  %conv219 = zext i8 %92 to i32
  %or220 = or i32 %conv219, %shr218
  %conv221 = trunc i32 %or220 to i8
  store i8 %conv221, i8* %column, align 1
  %93 = load i8, i8* %row, align 1
  %conv222 = zext i8 %93 to i32
  %mul223 = mul nsw i32 %conv222, 16
  %94 = load i8, i8* %column, align 1
  %conv224 = zext i8 %94 to i32
  %add225 = add nsw i32 %mul223, %conv224
  %arrayidx226 = getelementptr inbounds [64 x i32], [64 x i32]* @S4, i32 0, i32 %add225
  %95 = load i32, i32* %arrayidx226, align 4
  %conv227 = trunc i32 %95 to i8
  %conv228 = zext i8 %conv227 to i32
  %arrayidx229 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 1
  %96 = load i8, i8* %arrayidx229, align 1
  %conv230 = zext i8 %96 to i32
  %or231 = or i32 %conv230, %conv228
  %conv232 = trunc i32 %or231 to i8
  store i8 %conv232, i8* %arrayidx229, align 1
  store i8 0, i8* %row, align 1
  %arrayidx233 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %97 = load i8, i8* %arrayidx233, align 1
  %conv234 = zext i8 %97 to i32
  %and235 = and i32 %conv234, 128
  %shr236 = ashr i32 %and235, 6
  %98 = load i8, i8* %row, align 1
  %conv237 = zext i8 %98 to i32
  %or238 = or i32 %conv237, %shr236
  %conv239 = trunc i32 %or238 to i8
  store i8 %conv239, i8* %row, align 1
  %arrayidx240 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %99 = load i8, i8* %arrayidx240, align 1
  %conv241 = zext i8 %99 to i32
  %and242 = and i32 %conv241, 4
  %shr243 = ashr i32 %and242, 2
  %100 = load i8, i8* %row, align 1
  %conv244 = zext i8 %100 to i32
  %or245 = or i32 %conv244, %shr243
  %conv246 = trunc i32 %or245 to i8
  store i8 %conv246, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx247 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %101 = load i8, i8* %arrayidx247, align 1
  %conv248 = zext i8 %101 to i32
  %and249 = and i32 %conv248, 120
  %shr250 = ashr i32 %and249, 3
  %102 = load i8, i8* %column, align 1
  %conv251 = zext i8 %102 to i32
  %or252 = or i32 %conv251, %shr250
  %conv253 = trunc i32 %or252 to i8
  store i8 %conv253, i8* %column, align 1
  %103 = load i8, i8* %row, align 1
  %conv254 = zext i8 %103 to i32
  %mul255 = mul nsw i32 %conv254, 16
  %104 = load i8, i8* %column, align 1
  %conv256 = zext i8 %104 to i32
  %add257 = add nsw i32 %mul255, %conv256
  %arrayidx258 = getelementptr inbounds [64 x i32], [64 x i32]* @S5, i32 0, i32 %add257
  %105 = load i32, i32* %arrayidx258, align 4
  %conv259 = trunc i32 %105 to i8
  %conv260 = zext i8 %conv259 to i32
  %shl261 = shl i32 %conv260, 4
  %arrayidx262 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 2
  %106 = load i8, i8* %arrayidx262, align 1
  %conv263 = zext i8 %106 to i32
  %or264 = or i32 %conv263, %shl261
  %conv265 = trunc i32 %or264 to i8
  store i8 %conv265, i8* %arrayidx262, align 1
  store i8 0, i8* %row, align 1
  %arrayidx266 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %107 = load i8, i8* %arrayidx266, align 1
  %conv267 = zext i8 %107 to i32
  %and268 = and i32 %conv267, 2
  %108 = load i8, i8* %row, align 1
  %conv269 = zext i8 %108 to i32
  %or270 = or i32 %conv269, %and268
  %conv271 = trunc i32 %or270 to i8
  store i8 %conv271, i8* %row, align 1
  %arrayidx272 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 4
  %109 = load i8, i8* %arrayidx272, align 1
  %conv273 = zext i8 %109 to i32
  %and274 = and i32 %conv273, 16
  %shr275 = ashr i32 %and274, 4
  %110 = load i8, i8* %row, align 1
  %conv276 = zext i8 %110 to i32
  %or277 = or i32 %conv276, %shr275
  %conv278 = trunc i32 %or277 to i8
  store i8 %conv278, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx279 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %111 = load i8, i8* %arrayidx279, align 1
  %conv280 = zext i8 %111 to i32
  %and281 = and i32 %conv280, 1
  %shl282 = shl i32 %and281, 3
  %112 = load i8, i8* %column, align 1
  %conv283 = zext i8 %112 to i32
  %or284 = or i32 %conv283, %shl282
  %conv285 = trunc i32 %or284 to i8
  store i8 %conv285, i8* %column, align 1
  %arrayidx286 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 4
  %113 = load i8, i8* %arrayidx286, align 1
  %conv287 = zext i8 %113 to i32
  %and288 = and i32 %conv287, 224
  %shr289 = ashr i32 %and288, 5
  %114 = load i8, i8* %column, align 1
  %conv290 = zext i8 %114 to i32
  %or291 = or i32 %conv290, %shr289
  %conv292 = trunc i32 %or291 to i8
  store i8 %conv292, i8* %column, align 1
  %115 = load i8, i8* %row, align 1
  %conv293 = zext i8 %115 to i32
  %mul294 = mul nsw i32 %conv293, 16
  %116 = load i8, i8* %column, align 1
  %conv295 = zext i8 %116 to i32
  %add296 = add nsw i32 %mul294, %conv295
  %arrayidx297 = getelementptr inbounds [64 x i32], [64 x i32]* @S6, i32 0, i32 %add296
  %117 = load i32, i32* %arrayidx297, align 4
  %conv298 = trunc i32 %117 to i8
  %conv299 = zext i8 %conv298 to i32
  %arrayidx300 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 2
  %118 = load i8, i8* %arrayidx300, align 1
  %conv301 = zext i8 %118 to i32
  %or302 = or i32 %conv301, %conv299
  %conv303 = trunc i32 %or302 to i8
  store i8 %conv303, i8* %arrayidx300, align 1
  store i8 0, i8* %row, align 1
  %arrayidx304 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 4
  %119 = load i8, i8* %arrayidx304, align 1
  %conv305 = zext i8 %119 to i32
  %and306 = and i32 %conv305, 8
  %shr307 = ashr i32 %and306, 2
  %120 = load i8, i8* %row, align 1
  %conv308 = zext i8 %120 to i32
  %or309 = or i32 %conv308, %shr307
  %conv310 = trunc i32 %or309 to i8
  store i8 %conv310, i8* %row, align 1
  %arrayidx311 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %121 = load i8, i8* %arrayidx311, align 1
  %conv312 = zext i8 %121 to i32
  %and313 = and i32 %conv312, 64
  %shr314 = ashr i32 %and313, 6
  %122 = load i8, i8* %row, align 1
  %conv315 = zext i8 %122 to i32
  %or316 = or i32 %conv315, %shr314
  %conv317 = trunc i32 %or316 to i8
  store i8 %conv317, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx318 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 4
  %123 = load i8, i8* %arrayidx318, align 1
  %conv319 = zext i8 %123 to i32
  %and320 = and i32 %conv319, 7
  %shl321 = shl i32 %and320, 1
  %124 = load i8, i8* %column, align 1
  %conv322 = zext i8 %124 to i32
  %or323 = or i32 %conv322, %shl321
  %conv324 = trunc i32 %or323 to i8
  store i8 %conv324, i8* %column, align 1
  %arrayidx325 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %125 = load i8, i8* %arrayidx325, align 1
  %conv326 = zext i8 %125 to i32
  %and327 = and i32 %conv326, 128
  %shr328 = ashr i32 %and327, 7
  %126 = load i8, i8* %column, align 1
  %conv329 = zext i8 %126 to i32
  %or330 = or i32 %conv329, %shr328
  %conv331 = trunc i32 %or330 to i8
  store i8 %conv331, i8* %column, align 1
  %127 = load i8, i8* %row, align 1
  %conv332 = zext i8 %127 to i32
  %mul333 = mul nsw i32 %conv332, 16
  %128 = load i8, i8* %column, align 1
  %conv334 = zext i8 %128 to i32
  %add335 = add nsw i32 %mul333, %conv334
  %arrayidx336 = getelementptr inbounds [64 x i32], [64 x i32]* @S7, i32 0, i32 %add335
  %129 = load i32, i32* %arrayidx336, align 4
  %conv337 = trunc i32 %129 to i8
  %conv338 = zext i8 %conv337 to i32
  %shl339 = shl i32 %conv338, 4
  %arrayidx340 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 3
  %130 = load i8, i8* %arrayidx340, align 1
  %conv341 = zext i8 %130 to i32
  %or342 = or i32 %conv341, %shl339
  %conv343 = trunc i32 %or342 to i8
  store i8 %conv343, i8* %arrayidx340, align 1
  store i8 0, i8* %row, align 1
  %arrayidx344 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %131 = load i8, i8* %arrayidx344, align 1
  %conv345 = zext i8 %131 to i32
  %and346 = and i32 %conv345, 32
  %shr347 = ashr i32 %and346, 4
  %132 = load i8, i8* %row, align 1
  %conv348 = zext i8 %132 to i32
  %or349 = or i32 %conv348, %shr347
  %conv350 = trunc i32 %or349 to i8
  store i8 %conv350, i8* %row, align 1
  %arrayidx351 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %133 = load i8, i8* %arrayidx351, align 1
  %conv352 = zext i8 %133 to i32
  %and353 = and i32 %conv352, 1
  %134 = load i8, i8* %row, align 1
  %conv354 = zext i8 %134 to i32
  %or355 = or i32 %conv354, %and353
  %conv356 = trunc i32 %or355 to i8
  store i8 %conv356, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx357 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %135 = load i8, i8* %arrayidx357, align 1
  %conv358 = zext i8 %135 to i32
  %and359 = and i32 %conv358, 30
  %shr360 = ashr i32 %and359, 1
  %136 = load i8, i8* %column, align 1
  %conv361 = zext i8 %136 to i32
  %or362 = or i32 %conv361, %shr360
  %conv363 = trunc i32 %or362 to i8
  store i8 %conv363, i8* %column, align 1
  %137 = load i8, i8* %row, align 1
  %conv364 = zext i8 %137 to i32
  %mul365 = mul nsw i32 %conv364, 16
  %138 = load i8, i8* %column, align 1
  %conv366 = zext i8 %138 to i32
  %add367 = add nsw i32 %mul365, %conv366
  %arrayidx368 = getelementptr inbounds [64 x i32], [64 x i32]* @S8, i32 0, i32 %add367
  %139 = load i32, i32* %arrayidx368, align 4
  %conv369 = trunc i32 %139 to i8
  %conv370 = zext i8 %conv369 to i32
  %arrayidx371 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 3
  %140 = load i8, i8* %arrayidx371, align 1
  %conv372 = zext i8 %140 to i32
  %or373 = or i32 %conv372, %conv370
  %conv374 = trunc i32 %or373 to i8
  store i8 %conv374, i8* %arrayidx371, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond375

for.cond375:                                      ; preds = %for.inc380, %for.end91
  %141 = load i32, i32* %i, align 4
  %cmp376 = icmp slt i32 %141, 4
  br i1 %cmp376, label %for.body378, label %for.end382

for.body378:                                      ; preds = %for.cond375
  %142 = load i32, i32* %i, align 4
  %arrayidx379 = getelementptr inbounds [4 x i8], [4 x i8]* %rn, i32 0, i32 %142
  store i8 0, i8* %arrayidx379, align 1
  br label %for.inc380

for.inc380:                                       ; preds = %for.body378
  %143 = load i32, i32* %i, align 4
  %inc381 = add nsw i32 %143, 1
  store i32 %inc381, i32* %i, align 4
  br label %for.cond375

for.end382:                                       ; preds = %for.cond375
  store i32 0, i32* %i, align 4
  br label %for.cond383

for.cond383:                                      ; preds = %for.inc412, %for.end382
  %144 = load i32, i32* %i, align 4
  %cmp384 = icmp slt i32 %144, 32
  br i1 %cmp384, label %for.body386, label %for.end414

for.body386:                                      ; preds = %for.cond383
  %145 = load i32, i32* %i, align 4
  %arrayidx387 = getelementptr inbounds [32 x i32], [32 x i32]* @right_sub_message_permutation, i32 0, i32 %145
  %146 = load i32, i32* %arrayidx387, align 4
  store i32 %146, i32* %shift_size, align 4
  %147 = load i32, i32* %shift_size, align 4
  %sub388 = sub nsw i32 %147, 1
  %rem389 = srem i32 %sub388, 8
  %shr390 = ashr i32 128, %rem389
  %conv391 = trunc i32 %shr390 to i8
  store i8 %conv391, i8* %shift_byte, align 1
  %148 = load i32, i32* %shift_size, align 4
  %sub392 = sub nsw i32 %148, 1
  %div393 = sdiv i32 %sub392, 8
  %arrayidx394 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 %div393
  %149 = load i8, i8* %arrayidx394, align 1
  %conv395 = zext i8 %149 to i32
  %150 = load i8, i8* %shift_byte, align 1
  %conv396 = zext i8 %150 to i32
  %and397 = and i32 %conv396, %conv395
  %conv398 = trunc i32 %and397 to i8
  store i8 %conv398, i8* %shift_byte, align 1
  %151 = load i32, i32* %shift_size, align 4
  %sub399 = sub nsw i32 %151, 1
  %rem400 = srem i32 %sub399, 8
  %152 = load i8, i8* %shift_byte, align 1
  %conv401 = zext i8 %152 to i32
  %shl402 = shl i32 %conv401, %rem400
  %conv403 = trunc i32 %shl402 to i8
  store i8 %conv403, i8* %shift_byte, align 1
  %153 = load i8, i8* %shift_byte, align 1
  %conv404 = zext i8 %153 to i32
  %154 = load i32, i32* %i, align 4
  %rem405 = srem i32 %154, 8
  %shr406 = ashr i32 %conv404, %rem405
  %155 = load i32, i32* %i, align 4
  %div407 = sdiv i32 %155, 8
  %arrayidx408 = getelementptr inbounds [4 x i8], [4 x i8]* %rn, i32 0, i32 %div407
  %156 = load i8, i8* %arrayidx408, align 1
  %conv409 = zext i8 %156 to i32
  %or410 = or i32 %conv409, %shr406
  %conv411 = trunc i32 %or410 to i8
  store i8 %conv411, i8* %arrayidx408, align 1
  br label %for.inc412

for.inc412:                                       ; preds = %for.body386
  %157 = load i32, i32* %i, align 4
  %inc413 = add nsw i32 %157, 1
  store i32 %inc413, i32* %i, align 4
  br label %for.cond383

for.end414:                                       ; preds = %for.cond383
  store i32 0, i32* %i, align 4
  br label %for.cond415

for.cond415:                                      ; preds = %for.inc425, %for.end414
  %158 = load i32, i32* %i, align 4
  %cmp416 = icmp slt i32 %158, 4
  br i1 %cmp416, label %for.body418, label %for.end427

for.body418:                                      ; preds = %for.cond415
  %159 = load i32, i32* %i, align 4
  %arrayidx419 = getelementptr inbounds [4 x i8], [4 x i8]* %l, i32 0, i32 %159
  %160 = load i8, i8* %arrayidx419, align 1
  %conv420 = zext i8 %160 to i32
  %161 = load i32, i32* %i, align 4
  %arrayidx421 = getelementptr inbounds [4 x i8], [4 x i8]* %rn, i32 0, i32 %161
  %162 = load i8, i8* %arrayidx421, align 1
  %conv422 = zext i8 %162 to i32
  %xor423 = xor i32 %conv422, %conv420
  %conv424 = trunc i32 %xor423 to i8
  store i8 %conv424, i8* %arrayidx421, align 1
  br label %for.inc425

for.inc425:                                       ; preds = %for.body418
  %163 = load i32, i32* %i, align 4
  %inc426 = add nsw i32 %163, 1
  store i32 %inc426, i32* %i, align 4
  br label %for.cond415

for.end427:                                       ; preds = %for.cond415
  store i32 0, i32* %i, align 4
  br label %for.cond428

for.cond428:                                      ; preds = %for.inc436, %for.end427
  %164 = load i32, i32* %i, align 4
  %cmp429 = icmp slt i32 %164, 4
  br i1 %cmp429, label %for.body431, label %for.end438

for.body431:                                      ; preds = %for.cond428
  %165 = load i32, i32* %i, align 4
  %arrayidx432 = getelementptr inbounds [4 x i8], [4 x i8]* %ln, i32 0, i32 %165
  %166 = load i8, i8* %arrayidx432, align 1
  %167 = load i32, i32* %i, align 4
  %arrayidx433 = getelementptr inbounds [4 x i8], [4 x i8]* %l, i32 0, i32 %167
  store i8 %166, i8* %arrayidx433, align 1
  %168 = load i32, i32* %i, align 4
  %arrayidx434 = getelementptr inbounds [4 x i8], [4 x i8]* %rn, i32 0, i32 %168
  %169 = load i8, i8* %arrayidx434, align 1
  %170 = load i32, i32* %i, align 4
  %arrayidx435 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 %170
  store i8 %169, i8* %arrayidx435, align 1
  br label %for.inc436

for.inc436:                                       ; preds = %for.body431
  %171 = load i32, i32* %i, align 4
  %inc437 = add nsw i32 %171, 1
  store i32 %inc437, i32* %i, align 4
  br label %for.cond428

for.end438:                                       ; preds = %for.cond428
  %call8 = call %ReturnStruct.2* @ConditionFun.7()
  %MainStrut9 = alloca %ReturnStruct.2*, align 4
  store %ReturnStruct.2* %call8, %ReturnStruct.2** %MainStrut9, align 4
  br label %new7

new7:                                             ; preds = %for.end438
  br label %for.inc439

for.inc439:                                       ; preds = %new7
  %172 = load i32, i32* %k, align 4
  %inc440 = add nsw i32 %172, 1
  store i32 %inc440, i32* %k, align 4
  br label %for.cond28

for.end441:                                       ; preds = %for.cond28
  store i32 0, i32* %i, align 4
  br label %for.cond442

for.cond442:                                      ; preds = %for.inc451, %for.end441
  %173 = load i32, i32* %i, align 4
  %cmp443 = icmp slt i32 %173, 4
  br i1 %cmp443, label %for.body445, label %for.end453

for.body445:                                      ; preds = %for.cond442
  %174 = load i32, i32* %i, align 4
  %arrayidx446 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 %174
  %175 = load i8, i8* %arrayidx446, align 1
  %176 = load i32, i32* %i, align 4
  %arrayidx447 = getelementptr inbounds [8 x i8], [8 x i8]* %pre_end_permutation, i32 0, i32 %176
  store i8 %175, i8* %arrayidx447, align 1
  %177 = load i32, i32* %i, align 4
  %arrayidx448 = getelementptr inbounds [4 x i8], [4 x i8]* %l, i32 0, i32 %177
  %178 = load i8, i8* %arrayidx448, align 1
  %179 = load i32, i32* %i, align 4
  %add449 = add nsw i32 4, %179
  %arrayidx450 = getelementptr inbounds [8 x i8], [8 x i8]* %pre_end_permutation, i32 0, i32 %add449
  store i8 %178, i8* %arrayidx450, align 1
  br label %for.inc451

for.inc451:                                       ; preds = %for.body445
  %180 = load i32, i32* %i, align 4
  %inc452 = add nsw i32 %180, 1
  store i32 %inc452, i32* %i, align 4
  br label %for.cond442

for.end453:                                       ; preds = %for.cond442
  store i32 0, i32* %i, align 4
  br label %for.cond454

for.cond454:                                      ; preds = %for.inc483, %for.end453
  %181 = load i32, i32* %i, align 4
  %cmp455 = icmp slt i32 %181, 64
  br i1 %cmp455, label %for.body457, label %for.end485

for.body457:                                      ; preds = %for.cond454
  %182 = load i32, i32* %i, align 4
  %arrayidx458 = getelementptr inbounds [64 x i32], [64 x i32]* @final_message_permutation, i32 0, i32 %182
  %183 = load i32, i32* %arrayidx458, align 4
  store i32 %183, i32* %shift_size, align 4
  %184 = load i32, i32* %shift_size, align 4
  %sub459 = sub nsw i32 %184, 1
  %rem460 = srem i32 %sub459, 8
  %shr461 = ashr i32 128, %rem460
  %conv462 = trunc i32 %shr461 to i8
  store i8 %conv462, i8* %shift_byte, align 1
  %185 = load i32, i32* %shift_size, align 4
  %sub463 = sub nsw i32 %185, 1
  %div464 = sdiv i32 %sub463, 8
  %arrayidx465 = getelementptr inbounds [8 x i8], [8 x i8]* %pre_end_permutation, i32 0, i32 %div464
  %186 = load i8, i8* %arrayidx465, align 1
  %conv466 = zext i8 %186 to i32
  %187 = load i8, i8* %shift_byte, align 1
  %conv467 = zext i8 %187 to i32
  %and468 = and i32 %conv467, %conv466
  %conv469 = trunc i32 %and468 to i8
  store i8 %conv469, i8* %shift_byte, align 1
  %188 = load i32, i32* %shift_size, align 4
  %sub470 = sub nsw i32 %188, 1
  %rem471 = srem i32 %sub470, 8
  %189 = load i8, i8* %shift_byte, align 1
  %conv472 = zext i8 %189 to i32
  %shl473 = shl i32 %conv472, %rem471
  %conv474 = trunc i32 %shl473 to i8
  store i8 %conv474, i8* %shift_byte, align 1
  %190 = load i8, i8* %shift_byte, align 1
  %conv475 = zext i8 %190 to i32
  %191 = load i32, i32* %i, align 4
  %rem476 = srem i32 %191, 8
  %shr477 = ashr i32 %conv475, %rem476
  %192 = load i8*, i8** %processed_piece.addr, align 4
  %193 = load i32, i32* %i, align 4
  %div478 = sdiv i32 %193, 8
  %arrayidx479 = getelementptr inbounds i8, i8* %192, i32 %div478
  %194 = load i8, i8* %arrayidx479, align 1
  %conv480 = zext i8 %194 to i32
  %or481 = or i32 %conv480, %shr477
  %conv482 = trunc i32 %or481 to i8
  store i8 %conv482, i8* %arrayidx479, align 1
  br label %for.inc483

for.inc483:                                       ; preds = %for.body457
  %195 = load i32, i32* %i, align 4
  %inc484 = add nsw i32 %195, 1
  store i32 %inc484, i32* %i, align 4
  br label %for.cond454

for.end485:                                       ; preds = %for.cond454
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1) #3

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @main(i32 %argc, i8** %argv) #1 {
entry:
  %retval = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %argc.addr = alloca i32, align 4
  %start = alloca i32, align 4
  %finish = alloca i32, align 4
  %time_taken = alloca double, align 8
  %file_size = alloca i32, align 4
  %padding = alloca i16, align 2
  %iseed = alloca i32, align 4
  %bytes_written = alloca i16, align 2
  %des_key = alloca i8*, align 4
  %bytes_read = alloca i16, align 2
  %des_key45 = alloca i8*, align 4
  %bytes_written69 = alloca i16, align 2
  %process_mode = alloca i16, align 2
  %block_count = alloca i32, align 4
  %number_of_blocks = alloca i32, align 4
  %data_block = alloca i8*, align 4
  %processed_block = alloca i8*, align 4
  %key_sets = alloca %struct.key_set*, align 4
  store i32 0, i32* %retval, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 %argc, i32* %argc.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @"??_C@_0EF@LEAOBOIJ@You?5must?5provide?5at?5least?51?5para@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02BKJHAODO@?9g?$AA@", i32 0, i32 0))
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %argc.addr, align 4
  %cmp4 = icmp ne i32 %3, 3
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then3
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @"??_C@_0EA@BFJPECMN@Invalid?5?$CD?5of?5parameter?5specified@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.then3
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %4, i32 2
  %5 = load i8*, i8** %arrayidx8, align 4
  %call9 = call %struct._iobuf* @fopen(i8* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02GMLFBBN@wb?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call9, %struct._iobuf** @key_file, align 4
  %6 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %tobool = icmp ne %struct._iobuf* %6, null
  br i1 %tobool, label %if.end12, label %if.then10

if.then10:                                        ; preds = %if.end7
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@HHNBFEDG@Could?5not?5open?5file?5to?5write?5key@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end7
  br label %time_entry

time_entry:                                       ; preds = %if.end12
  %7 = alloca i64*, align 4
  store i64* null, i64** %7, align 4
  %8 = load i64*, i64** %7, align 4
  %9 = call i64 @_time64(i64* %8)
  br label %if.end12.split1

if.end12.split1:                                  ; preds = %time_entry
  %conv = trunc i64 %9 to i32
  store i32 %conv, i32* %iseed, align 4
  %10 = load i32, i32* %iseed, align 4
  call void @srand(i32 %10)
  %call14 = call noalias i8* @malloc(i32 8) #3
  store i8* %call14, i8** %des_key, align 4
  %11 = load i8*, i8** %des_key, align 4
  br label %generate_key_entry

generate_key_entry:                               ; preds = %if.end12.split1
  %12 = alloca i8*, align 4
  %13 = alloca i32, align 4
  store i8* %11, i8** %12, align 4
  store i32 0, i32* %13, align 4
  br label %generate_key_for.cond

generate_key_for.cond:                            ; preds = %generate_key_entry
  %call2 = call %ReturnStruct.3* @ConditionFun.10(i32 1, i32 8, i8** %12, i32* %13)
  %MainStrut = alloca %ReturnStruct.3*, align 4
  store %ReturnStruct.3* %call2, %ReturnStruct.3** %MainStrut, align 4
  br label %new

new:                                              ; preds = %generate_key_for.cond
  br label %if.end12.split

if.end12.split:                                   ; preds = %new
  %14 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %15 = load i8*, i8** %des_key, align 4
  %call15 = call i32 @fwrite(i8* %15, i32 1, i32 8, %struct._iobuf* %14)
  %conv16 = trunc i32 %call15 to i16
  store i16 %conv16, i16* %bytes_written, align 2
  %16 = load i16, i16* %bytes_written, align 2
  %conv17 = sext i16 %16 to i32
  %cmp18 = icmp ne i32 %conv17, 8
  br i1 %cmp18, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end12.split
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@FJNHMKJL@Error?5writing?5key?5to?5output?5file@", i32 0, i32 0))
  %17 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %call22 = call i32 @fclose(%struct._iobuf* %17)
  %18 = load i8*, i8** %des_key, align 4
  call void @free(i8* %18) #3
  store i32 1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.end12.split
  %19 = load i8*, i8** %des_key, align 4
  call void @free(i8* %19) #3
  %20 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %call24 = call i32 @fclose(%struct._iobuf* %20)
  br label %if.end156

if.else:                                          ; preds = %if.end
  %21 = load i8**, i8*** %argv.addr, align 4
  %arrayidx25 = getelementptr inbounds i8*, i8** %21, i32 1
  %22 = load i8*, i8** %arrayidx25, align 4
  %call26 = call i32 @strcmp(i8* %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02CIKBGMLM@?9e?$AA@", i32 0, i32 0))
  %cmp27 = icmp eq i32 %call26, 0
  br i1 %cmp27, label %if.then33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %23 = load i8**, i8*** %argv.addr, align 4
  %arrayidx29 = getelementptr inbounds i8*, i8** %23, i32 1
  %24 = load i8*, i8** %arrayidx29, align 4
  %call30 = call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DBLKFNPN@?9d?$AA@", i32 0, i32 0))
  %cmp31 = icmp eq i32 %call30, 0
  br i1 %cmp31, label %if.then33, label %if.else153

if.then33:                                        ; preds = %lor.lhs.false, %if.else
  %25 = load i32, i32* %argc.addr, align 4
  %cmp34 = icmp ne i32 %25, 5
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %if.then33
  %26 = load i32, i32* %argc.addr, align 4
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @"??_C@_0GC@CNACNKJO@Invalid?5?$CD?5of?5parameters?5?$CI?$CFd?$CJ?5spe@", i32 0, i32 0), i32 %26)
  store i32 1, i32* %retval, align 4
  br label %return

if.end38:                                         ; preds = %if.then33
  %27 = load i8**, i8*** %argv.addr, align 4
  %arrayidx39 = getelementptr inbounds i8*, i8** %27, i32 2
  %28 = load i8*, i8** %arrayidx39, align 4
  %call40 = call %struct._iobuf* @fopen(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02JDPG@rb?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call40, %struct._iobuf** @key_file, align 4
  %29 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %tobool41 = icmp ne %struct._iobuf* %29, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %if.end38
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"??_C@_0CF@FHLEAPML@Could?5not?5open?5key?5file?5to?5read?5@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end44:                                         ; preds = %if.end38
  %call46 = call noalias i8* @malloc(i32 8) #3
  store i8* %call46, i8** %des_key45, align 4
  %30 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %31 = load i8*, i8** %des_key45, align 4
  %call47 = call i32 @fread(i8* %31, i32 1, i32 8, %struct._iobuf* %30)
  %conv48 = trunc i32 %call47 to i16
  store i16 %conv48, i16* %bytes_read, align 2
  %32 = load i16, i16* %bytes_read, align 2
  %conv49 = sext i16 %32 to i32
  %cmp50 = icmp ne i32 %conv49, 8
  br i1 %cmp50, label %if.then52, label %if.end55

if.then52:                                        ; preds = %if.end44
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @"??_C@_0DF@KDDFFPFJ@Key?5read?5from?5key?5file?5does?5nto?5@", i32 0, i32 0))
  %33 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %call54 = call i32 @fclose(%struct._iobuf* %33)
  store i32 1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end44
  %34 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %call56 = call i32 @fclose(%struct._iobuf* %34)
  %35 = load i8**, i8*** %argv.addr, align 4
  %arrayidx57 = getelementptr inbounds i8*, i8** %35, i32 3
  %36 = load i8*, i8** %arrayidx57, align 4
  %call58 = call %struct._iobuf* @fopen(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02JDPG@rb?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call58, %struct._iobuf** @input_file, align 4
  %37 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %tobool59 = icmp ne %struct._iobuf* %37, null
  br i1 %tobool59, label %if.end62, label %if.then60

if.then60:                                        ; preds = %if.end55
  %call61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"??_C@_0CI@BKMPCFLJ@Could?5not?5open?5input?5file?5to?5rea@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end62:                                         ; preds = %if.end55
  %38 = load i8**, i8*** %argv.addr, align 4
  %arrayidx63 = getelementptr inbounds i8*, i8** %38, i32 4
  %39 = load i8*, i8** %arrayidx63, align 4
  %call64 = call %struct._iobuf* @fopen(i8* %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02GMLFBBN@wb?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call64, %struct._iobuf** @output_file, align 4
  %40 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %tobool65 = icmp ne %struct._iobuf* %40, null
  br i1 %tobool65, label %if.end68, label %if.then66

if.then66:                                        ; preds = %if.end62
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"??_C@_0CK@FHHBJFFD@Could?5not?5open?5output?5file?5to?5wr@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end68:                                         ; preds = %if.end62
  store i32 0, i32* %block_count, align 4
  %call70 = call noalias i8* @malloc(i32 8) #3
  store i8* %call70, i8** %data_block, align 4
  %call71 = call noalias i8* @malloc(i32 8) #3
  store i8* %call71, i8** %processed_block, align 4
  %call72 = call noalias i8* @malloc(i32 272) #3
  %41 = bitcast i8* %call72 to %struct.key_set*
  store %struct.key_set* %41, %struct.key_set** %key_sets, align 4
  %call73 = call i32 @clock()
  store i32 %call73, i32* %start, align 4
  %42 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %43 = load i8*, i8** %des_key45, align 4
  br label %generate_sub_keys_entry

generate_sub_keys_entry:                          ; preds = %if.end68
  %44 = alloca %struct.key_set*, align 4
  %45 = alloca i8*, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i8, align 1
  %50 = alloca i8, align 1
  %51 = alloca i8, align 1
  %52 = alloca i8, align 1
  %53 = alloca i8, align 1
  store %struct.key_set* %42, %struct.key_set** %44, align 4
  store i8* %43, i8** %45, align 4
  store i32 0, i32* %46, align 4
  br label %generate_sub_keys_for.cond

generate_sub_keys_for.cond:                       ; preds = %generate_sub_keys_for.inc, %generate_sub_keys_entry
  %54 = load i32, i32* %46, align 4
  %55 = icmp slt i32 %54, 8
  br i1 %55, label %generate_sub_keys_for.body, label %generate_sub_keys_for.end

generate_sub_keys_for.body:                       ; preds = %generate_sub_keys_for.cond
  %56 = load %struct.key_set*, %struct.key_set** %44, align 4
  %57 = getelementptr inbounds %struct.key_set, %struct.key_set* %56, i32 0
  %58 = getelementptr inbounds %struct.key_set, %struct.key_set* %57, i32 0, i32 0
  %59 = load i32, i32* %46, align 4
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %58, i32 0, i32 %59
  store i8 0, i8* %60, align 1
  br label %generate_sub_keys_for.inc

generate_sub_keys_for.inc:                        ; preds = %generate_sub_keys_for.body
  %61 = load i32, i32* %46, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %46, align 4
  br label %generate_sub_keys_for.cond

generate_sub_keys_for.end:                        ; preds = %generate_sub_keys_for.cond
  store i32 0, i32* %46, align 4
  br label %generate_sub_keys_for.cond2

generate_sub_keys_for.cond2:                      ; preds = %generate_sub_keys_for.inc24, %generate_sub_keys_for.end
  %63 = load i32, i32* %46, align 4
  %64 = icmp slt i32 %63, 56
  br i1 %64, label %generate_sub_keys_for.body4, label %generate_sub_keys_for.end26

generate_sub_keys_for.body4:                      ; preds = %generate_sub_keys_for.cond2
  %65 = load i32, i32* %46, align 4
  %66 = getelementptr inbounds [56 x i32], [56 x i32]* @initial_key_permutaion, i32 0, i32 %65
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %48, align 4
  %68 = load i32, i32* %48, align 4
  %69 = sub nsw i32 %68, 1
  %70 = srem i32 %69, 8
  %71 = ashr i32 128, %70
  %72 = trunc i32 %71 to i8
  store i8 %72, i8* %49, align 1
  %73 = load i8*, i8** %45, align 4
  %74 = load i32, i32* %48, align 4
  %75 = sub nsw i32 %74, 1
  %76 = sdiv i32 %75, 8
  %77 = getelementptr inbounds i8, i8* %73, i32 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i32
  %80 = load i8, i8* %49, align 1
  %81 = zext i8 %80 to i32
  %82 = and i32 %81, %79
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %49, align 1
  %84 = load i32, i32* %48, align 4
  %85 = sub nsw i32 %84, 1
  %86 = srem i32 %85, 8
  %87 = load i8, i8* %49, align 1
  %88 = zext i8 %87 to i32
  %89 = shl i32 %88, %86
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %49, align 1
  %91 = load i8, i8* %49, align 1
  %92 = zext i8 %91 to i32
  %93 = load i32, i32* %46, align 4
  %94 = srem i32 %93, 8
  %95 = ashr i32 %92, %94
  %96 = load %struct.key_set*, %struct.key_set** %44, align 4
  %97 = getelementptr inbounds %struct.key_set, %struct.key_set* %96, i32 0
  %98 = getelementptr inbounds %struct.key_set, %struct.key_set* %97, i32 0, i32 0
  %99 = load i32, i32* %46, align 4
  %100 = sdiv i32 %99, 8
  %101 = getelementptr inbounds [8 x i8], [8 x i8]* %98, i32 0, i32 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = or i32 %103, %95
  %105 = trunc i32 %104 to i8
  store i8 %105, i8* %101, align 1
  br label %generate_sub_keys_for.inc24

generate_sub_keys_for.inc24:                      ; preds = %generate_sub_keys_for.body4
  %106 = load i32, i32* %46, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %46, align 4
  br label %generate_sub_keys_for.cond2

generate_sub_keys_for.end26:                      ; preds = %generate_sub_keys_for.cond2
  store i32 0, i32* %46, align 4
  br label %generate_sub_keys_for.cond27

generate_sub_keys_for.cond27:                     ; preds = %generate_sub_keys_for.inc36, %generate_sub_keys_for.end26
  %108 = load i32, i32* %46, align 4
  %109 = icmp slt i32 %108, 3
  br i1 %109, label %generate_sub_keys_for.body30, label %generate_sub_keys_for.end38

generate_sub_keys_for.body30:                     ; preds = %generate_sub_keys_for.cond27
  %110 = load %struct.key_set*, %struct.key_set** %44, align 4
  %111 = getelementptr inbounds %struct.key_set, %struct.key_set* %110, i32 0
  %112 = getelementptr inbounds %struct.key_set, %struct.key_set* %111, i32 0, i32 0
  %113 = load i32, i32* %46, align 4
  %114 = getelementptr inbounds [8 x i8], [8 x i8]* %112, i32 0, i32 %113
  %115 = load i8, i8* %114, align 1
  %116 = load %struct.key_set*, %struct.key_set** %44, align 4
  %117 = getelementptr inbounds %struct.key_set, %struct.key_set* %116, i32 0
  %118 = getelementptr inbounds %struct.key_set, %struct.key_set* %117, i32 0, i32 1
  %119 = load i32, i32* %46, align 4
  %120 = getelementptr inbounds [4 x i8], [4 x i8]* %118, i32 0, i32 %119
  store i8 %115, i8* %120, align 1
  br label %generate_sub_keys_for.inc36

generate_sub_keys_for.inc36:                      ; preds = %generate_sub_keys_for.body30
  %121 = load i32, i32* %46, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %46, align 4
  br label %generate_sub_keys_for.cond27

generate_sub_keys_for.end38:                      ; preds = %generate_sub_keys_for.cond27
  %123 = load %struct.key_set*, %struct.key_set** %44, align 4
  %124 = getelementptr inbounds %struct.key_set, %struct.key_set* %123, i32 0
  %125 = getelementptr inbounds %struct.key_set, %struct.key_set* %124, i32 0, i32 0
  %126 = getelementptr inbounds [8 x i8], [8 x i8]* %125, i32 0, i32 3
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = and i32 %128, 240
  %130 = trunc i32 %129 to i8
  %131 = load %struct.key_set*, %struct.key_set** %44, align 4
  %132 = getelementptr inbounds %struct.key_set, %struct.key_set* %131, i32 0
  %133 = getelementptr inbounds %struct.key_set, %struct.key_set* %132, i32 0, i32 1
  %134 = getelementptr inbounds [4 x i8], [4 x i8]* %133, i32 0, i32 3
  store i8 %130, i8* %134, align 1
  store i32 0, i32* %46, align 4
  br label %generate_sub_keys_for.cond48

generate_sub_keys_for.cond48:                     ; preds = %generate_sub_keys_for.inc74, %generate_sub_keys_for.end38
  %135 = load i32, i32* %46, align 4
  %136 = icmp slt i32 %135, 3
  br i1 %136, label %generate_sub_keys_for.body51, label %generate_sub_keys_for.end76

generate_sub_keys_for.body51:                     ; preds = %generate_sub_keys_for.cond48
  %137 = load %struct.key_set*, %struct.key_set** %44, align 4
  %138 = getelementptr inbounds %struct.key_set, %struct.key_set* %137, i32 0
  %139 = getelementptr inbounds %struct.key_set, %struct.key_set* %138, i32 0, i32 0
  %140 = load i32, i32* %46, align 4
  %141 = add nsw i32 %140, 3
  %142 = getelementptr inbounds [8 x i8], [8 x i8]* %139, i32 0, i32 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = and i32 %144, 15
  %146 = shl i32 %145, 4
  %147 = trunc i32 %146 to i8
  %148 = load %struct.key_set*, %struct.key_set** %44, align 4
  %149 = getelementptr inbounds %struct.key_set, %struct.key_set* %148, i32 0
  %150 = getelementptr inbounds %struct.key_set, %struct.key_set* %149, i32 0, i32 2
  %151 = load i32, i32* %46, align 4
  %152 = getelementptr inbounds [4 x i8], [4 x i8]* %150, i32 0, i32 %151
  store i8 %147, i8* %152, align 1
  %153 = load %struct.key_set*, %struct.key_set** %44, align 4
  %154 = getelementptr inbounds %struct.key_set, %struct.key_set* %153, i32 0
  %155 = getelementptr inbounds %struct.key_set, %struct.key_set* %154, i32 0, i32 0
  %156 = load i32, i32* %46, align 4
  %157 = add nsw i32 %156, 4
  %158 = getelementptr inbounds [8 x i8], [8 x i8]* %155, i32 0, i32 %157
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = and i32 %160, 240
  %162 = ashr i32 %161, 4
  %163 = load %struct.key_set*, %struct.key_set** %44, align 4
  %164 = getelementptr inbounds %struct.key_set, %struct.key_set* %163, i32 0
  %165 = getelementptr inbounds %struct.key_set, %struct.key_set* %164, i32 0, i32 2
  %166 = load i32, i32* %46, align 4
  %167 = getelementptr inbounds [4 x i8], [4 x i8]* %165, i32 0, i32 %166
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = or i32 %169, %162
  %171 = trunc i32 %170 to i8
  store i8 %171, i8* %167, align 1
  br label %generate_sub_keys_for.inc74

generate_sub_keys_for.inc74:                      ; preds = %generate_sub_keys_for.body51
  %172 = load i32, i32* %46, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %46, align 4
  br label %generate_sub_keys_for.cond48

generate_sub_keys_for.end76:                      ; preds = %generate_sub_keys_for.cond48
  %174 = load %struct.key_set*, %struct.key_set** %44, align 4
  %175 = getelementptr inbounds %struct.key_set, %struct.key_set* %174, i32 0
  %176 = getelementptr inbounds %struct.key_set, %struct.key_set* %175, i32 0, i32 0
  %177 = getelementptr inbounds [8 x i8], [8 x i8]* %176, i32 0, i32 6
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = and i32 %179, 15
  %181 = shl i32 %180, 4
  %182 = trunc i32 %181 to i8
  %183 = load %struct.key_set*, %struct.key_set** %44, align 4
  %184 = getelementptr inbounds %struct.key_set, %struct.key_set* %183, i32 0
  %185 = getelementptr inbounds %struct.key_set, %struct.key_set* %184, i32 0, i32 2
  %186 = getelementptr inbounds [4 x i8], [4 x i8]* %185, i32 0, i32 3
  store i8 %182, i8* %186, align 1
  store i32 1, i32* %46, align 4
  br label %generate_sub_keys_for.cond87

generate_sub_keys_for.cond87:                     ; preds = %generate_sub_keys_for.inc350, %generate_sub_keys_for.end76
  %187 = load i32, i32* %46, align 4
  %188 = icmp slt i32 %187, 17
  br i1 %188, label %generate_sub_keys_for.body90, label %generate_sub_keys_for.end352

generate_sub_keys_for.body90:                     ; preds = %generate_sub_keys_for.cond87
  store i32 0, i32* %47, align 4
  br label %generate_sub_keys_for.cond91

generate_sub_keys_for.cond91:                     ; preds = %generate_sub_keys_for.inc109, %generate_sub_keys_for.body90
  %189 = load i32, i32* %47, align 4
  %190 = icmp slt i32 %189, 4
  br i1 %190, label %generate_sub_keys_for.body94, label %generate_sub_keys_for.end111

generate_sub_keys_for.body94:                     ; preds = %generate_sub_keys_for.cond91
  %191 = load %struct.key_set*, %struct.key_set** %44, align 4
  %192 = load i32, i32* %46, align 4
  %193 = sub nsw i32 %192, 1
  %194 = getelementptr inbounds %struct.key_set, %struct.key_set* %191, i32 %193
  %195 = getelementptr inbounds %struct.key_set, %struct.key_set* %194, i32 0, i32 1
  %196 = load i32, i32* %47, align 4
  %197 = getelementptr inbounds [4 x i8], [4 x i8]* %195, i32 0, i32 %196
  %198 = load i8, i8* %197, align 1
  %199 = load %struct.key_set*, %struct.key_set** %44, align 4
  %200 = load i32, i32* %46, align 4
  %201 = getelementptr inbounds %struct.key_set, %struct.key_set* %199, i32 %200
  %202 = getelementptr inbounds %struct.key_set, %struct.key_set* %201, i32 0, i32 1
  %203 = load i32, i32* %47, align 4
  %204 = getelementptr inbounds [4 x i8], [4 x i8]* %202, i32 0, i32 %203
  store i8 %198, i8* %204, align 1
  %205 = load %struct.key_set*, %struct.key_set** %44, align 4
  %206 = load i32, i32* %46, align 4
  %207 = sub nsw i32 %206, 1
  %208 = getelementptr inbounds %struct.key_set, %struct.key_set* %205, i32 %207
  %209 = getelementptr inbounds %struct.key_set, %struct.key_set* %208, i32 0, i32 2
  %210 = load i32, i32* %47, align 4
  %211 = getelementptr inbounds [4 x i8], [4 x i8]* %209, i32 0, i32 %210
  %212 = load i8, i8* %211, align 1
  %213 = load %struct.key_set*, %struct.key_set** %44, align 4
  %214 = load i32, i32* %46, align 4
  %215 = getelementptr inbounds %struct.key_set, %struct.key_set* %213, i32 %214
  %216 = getelementptr inbounds %struct.key_set, %struct.key_set* %215, i32 0, i32 2
  %217 = load i32, i32* %47, align 4
  %218 = getelementptr inbounds [4 x i8], [4 x i8]* %216, i32 0, i32 %217
  store i8 %212, i8* %218, align 1
  br label %generate_sub_keys_for.inc109

generate_sub_keys_for.inc109:                     ; preds = %generate_sub_keys_for.body94
  %219 = load i32, i32* %47, align 4
  %220 = add nsw i32 %219, 1
  store i32 %220, i32* %47, align 4
  br label %generate_sub_keys_for.cond91

generate_sub_keys_for.end111:                     ; preds = %generate_sub_keys_for.cond91
  %221 = load i32, i32* %46, align 4
  %222 = getelementptr inbounds [17 x i32], [17 x i32]* @key_shift_sizes, i32 0, i32 %221
  %223 = load i32, i32* %222, align 4
  store i32 %223, i32* %48, align 4
  %224 = load i32, i32* %48, align 4
  %225 = icmp eq i32 %224, 1
  br i1 %225, label %generate_sub_keys_if.then, label %generate_sub_keys_if.else

generate_sub_keys_if.then:                        ; preds = %generate_sub_keys_for.end111
  store i8 -128, i8* %49, align 1
  br label %generate_sub_keys_if.end

generate_sub_keys_if.else:                        ; preds = %generate_sub_keys_for.end111
  store i8 -64, i8* %49, align 1
  br label %generate_sub_keys_if.end

generate_sub_keys_if.end:                         ; preds = %generate_sub_keys_if.else, %generate_sub_keys_if.then
  %226 = load i8, i8* %49, align 1
  %227 = zext i8 %226 to i32
  %228 = load %struct.key_set*, %struct.key_set** %44, align 4
  %229 = load i32, i32* %46, align 4
  %230 = getelementptr inbounds %struct.key_set, %struct.key_set* %228, i32 %229
  %231 = getelementptr inbounds %struct.key_set, %struct.key_set* %230, i32 0, i32 1
  %232 = getelementptr inbounds [4 x i8], [4 x i8]* %231, i32 0, i32 0
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i32
  %235 = and i32 %227, %234
  %236 = trunc i32 %235 to i8
  store i8 %236, i8* %50, align 1
  %237 = load i8, i8* %49, align 1
  %238 = zext i8 %237 to i32
  %239 = load %struct.key_set*, %struct.key_set** %44, align 4
  %240 = load i32, i32* %46, align 4
  %241 = getelementptr inbounds %struct.key_set, %struct.key_set* %239, i32 %240
  %242 = getelementptr inbounds %struct.key_set, %struct.key_set* %241, i32 0, i32 1
  %243 = getelementptr inbounds [4 x i8], [4 x i8]* %242, i32 0, i32 1
  %244 = load i8, i8* %243, align 1
  %245 = zext i8 %244 to i32
  %246 = and i32 %238, %245
  %247 = trunc i32 %246 to i8
  store i8 %247, i8* %51, align 1
  %248 = load i8, i8* %49, align 1
  %249 = zext i8 %248 to i32
  %250 = load %struct.key_set*, %struct.key_set** %44, align 4
  %251 = load i32, i32* %46, align 4
  %252 = getelementptr inbounds %struct.key_set, %struct.key_set* %250, i32 %251
  %253 = getelementptr inbounds %struct.key_set, %struct.key_set* %252, i32 0, i32 1
  %254 = getelementptr inbounds [4 x i8], [4 x i8]* %253, i32 0, i32 2
  %255 = load i8, i8* %254, align 1
  %256 = zext i8 %255 to i32
  %257 = and i32 %249, %256
  %258 = trunc i32 %257 to i8
  store i8 %258, i8* %52, align 1
  %259 = load i8, i8* %49, align 1
  %260 = zext i8 %259 to i32
  %261 = load %struct.key_set*, %struct.key_set** %44, align 4
  %262 = load i32, i32* %46, align 4
  %263 = getelementptr inbounds %struct.key_set, %struct.key_set* %261, i32 %262
  %264 = getelementptr inbounds %struct.key_set, %struct.key_set* %263, i32 0, i32 1
  %265 = getelementptr inbounds [4 x i8], [4 x i8]* %264, i32 0, i32 3
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i32
  %268 = and i32 %260, %267
  %269 = trunc i32 %268 to i8
  store i8 %269, i8* %53, align 1
  %270 = load i32, i32* %48, align 4
  %271 = load %struct.key_set*, %struct.key_set** %44, align 4
  %272 = load i32, i32* %46, align 4
  %273 = getelementptr inbounds %struct.key_set, %struct.key_set* %271, i32 %272
  %274 = getelementptr inbounds %struct.key_set, %struct.key_set* %273, i32 0, i32 1
  %275 = getelementptr inbounds [4 x i8], [4 x i8]* %274, i32 0, i32 0
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i32
  %278 = shl i32 %277, %270
  %279 = trunc i32 %278 to i8
  store i8 %279, i8* %275, align 1
  %280 = load i8, i8* %51, align 1
  %281 = zext i8 %280 to i32
  %282 = load i32, i32* %48, align 4
  %283 = sub nsw i32 8, %282
  %284 = ashr i32 %281, %283
  %285 = load %struct.key_set*, %struct.key_set** %44, align 4
  %286 = load i32, i32* %46, align 4
  %287 = getelementptr inbounds %struct.key_set, %struct.key_set* %285, i32 %286
  %288 = getelementptr inbounds %struct.key_set, %struct.key_set* %287, i32 0, i32 1
  %289 = getelementptr inbounds [4 x i8], [4 x i8]* %288, i32 0, i32 0
  %290 = load i8, i8* %289, align 1
  %291 = zext i8 %290 to i32
  %292 = or i32 %291, %284
  %293 = trunc i32 %292 to i8
  store i8 %293, i8* %289, align 1
  %294 = load i32, i32* %48, align 4
  %295 = load %struct.key_set*, %struct.key_set** %44, align 4
  %296 = load i32, i32* %46, align 4
  %297 = getelementptr inbounds %struct.key_set, %struct.key_set* %295, i32 %296
  %298 = getelementptr inbounds %struct.key_set, %struct.key_set* %297, i32 0, i32 1
  %299 = getelementptr inbounds [4 x i8], [4 x i8]* %298, i32 0, i32 1
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = shl i32 %301, %294
  %303 = trunc i32 %302 to i8
  store i8 %303, i8* %299, align 1
  %304 = load i8, i8* %52, align 1
  %305 = zext i8 %304 to i32
  %306 = load i32, i32* %48, align 4
  %307 = sub nsw i32 8, %306
  %308 = ashr i32 %305, %307
  %309 = load %struct.key_set*, %struct.key_set** %44, align 4
  %310 = load i32, i32* %46, align 4
  %311 = getelementptr inbounds %struct.key_set, %struct.key_set* %309, i32 %310
  %312 = getelementptr inbounds %struct.key_set, %struct.key_set* %311, i32 0, i32 1
  %313 = getelementptr inbounds [4 x i8], [4 x i8]* %312, i32 0, i32 1
  %314 = load i8, i8* %313, align 1
  %315 = zext i8 %314 to i32
  %316 = or i32 %315, %308
  %317 = trunc i32 %316 to i8
  store i8 %317, i8* %313, align 1
  %318 = load i32, i32* %48, align 4
  %319 = load %struct.key_set*, %struct.key_set** %44, align 4
  %320 = load i32, i32* %46, align 4
  %321 = getelementptr inbounds %struct.key_set, %struct.key_set* %319, i32 %320
  %322 = getelementptr inbounds %struct.key_set, %struct.key_set* %321, i32 0, i32 1
  %323 = getelementptr inbounds [4 x i8], [4 x i8]* %322, i32 0, i32 2
  %324 = load i8, i8* %323, align 1
  %325 = zext i8 %324 to i32
  %326 = shl i32 %325, %318
  %327 = trunc i32 %326 to i8
  store i8 %327, i8* %323, align 1
  %328 = load i8, i8* %53, align 1
  %329 = zext i8 %328 to i32
  %330 = load i32, i32* %48, align 4
  %331 = sub nsw i32 8, %330
  %332 = ashr i32 %329, %331
  %333 = load %struct.key_set*, %struct.key_set** %44, align 4
  %334 = load i32, i32* %46, align 4
  %335 = getelementptr inbounds %struct.key_set, %struct.key_set* %333, i32 %334
  %336 = getelementptr inbounds %struct.key_set, %struct.key_set* %335, i32 0, i32 1
  %337 = getelementptr inbounds [4 x i8], [4 x i8]* %336, i32 0, i32 2
  %338 = load i8, i8* %337, align 1
  %339 = zext i8 %338 to i32
  %340 = or i32 %339, %332
  %341 = trunc i32 %340 to i8
  store i8 %341, i8* %337, align 1
  %342 = load i32, i32* %48, align 4
  %343 = load %struct.key_set*, %struct.key_set** %44, align 4
  %344 = load i32, i32* %46, align 4
  %345 = getelementptr inbounds %struct.key_set, %struct.key_set* %343, i32 %344
  %346 = getelementptr inbounds %struct.key_set, %struct.key_set* %345, i32 0, i32 1
  %347 = getelementptr inbounds [4 x i8], [4 x i8]* %346, i32 0, i32 3
  %348 = load i8, i8* %347, align 1
  %349 = zext i8 %348 to i32
  %350 = shl i32 %349, %342
  %351 = trunc i32 %350 to i8
  store i8 %351, i8* %347, align 1
  %352 = load i8, i8* %50, align 1
  %353 = zext i8 %352 to i32
  %354 = load i32, i32* %48, align 4
  %355 = sub nsw i32 4, %354
  %356 = ashr i32 %353, %355
  %357 = load %struct.key_set*, %struct.key_set** %44, align 4
  %358 = load i32, i32* %46, align 4
  %359 = getelementptr inbounds %struct.key_set, %struct.key_set* %357, i32 %358
  %360 = getelementptr inbounds %struct.key_set, %struct.key_set* %359, i32 0, i32 1
  %361 = getelementptr inbounds [4 x i8], [4 x i8]* %360, i32 0, i32 3
  %362 = load i8, i8* %361, align 1
  %363 = zext i8 %362 to i32
  %364 = or i32 %363, %356
  %365 = trunc i32 %364 to i8
  store i8 %365, i8* %361, align 1
  %366 = load i8, i8* %49, align 1
  %367 = zext i8 %366 to i32
  %368 = load %struct.key_set*, %struct.key_set** %44, align 4
  %369 = load i32, i32* %46, align 4
  %370 = getelementptr inbounds %struct.key_set, %struct.key_set* %368, i32 %369
  %371 = getelementptr inbounds %struct.key_set, %struct.key_set* %370, i32 0, i32 2
  %372 = getelementptr inbounds [4 x i8], [4 x i8]* %371, i32 0, i32 0
  %373 = load i8, i8* %372, align 1
  %374 = zext i8 %373 to i32
  %375 = and i32 %367, %374
  %376 = trunc i32 %375 to i8
  store i8 %376, i8* %50, align 1
  %377 = load i8, i8* %49, align 1
  %378 = zext i8 %377 to i32
  %379 = load %struct.key_set*, %struct.key_set** %44, align 4
  %380 = load i32, i32* %46, align 4
  %381 = getelementptr inbounds %struct.key_set, %struct.key_set* %379, i32 %380
  %382 = getelementptr inbounds %struct.key_set, %struct.key_set* %381, i32 0, i32 2
  %383 = getelementptr inbounds [4 x i8], [4 x i8]* %382, i32 0, i32 1
  %384 = load i8, i8* %383, align 1
  %385 = zext i8 %384 to i32
  %386 = and i32 %378, %385
  %387 = trunc i32 %386 to i8
  store i8 %387, i8* %51, align 1
  %388 = load i8, i8* %49, align 1
  %389 = zext i8 %388 to i32
  %390 = load %struct.key_set*, %struct.key_set** %44, align 4
  %391 = load i32, i32* %46, align 4
  %392 = getelementptr inbounds %struct.key_set, %struct.key_set* %390, i32 %391
  %393 = getelementptr inbounds %struct.key_set, %struct.key_set* %392, i32 0, i32 2
  %394 = getelementptr inbounds [4 x i8], [4 x i8]* %393, i32 0, i32 2
  %395 = load i8, i8* %394, align 1
  %396 = zext i8 %395 to i32
  %397 = and i32 %389, %396
  %398 = trunc i32 %397 to i8
  store i8 %398, i8* %52, align 1
  %399 = load i8, i8* %49, align 1
  %400 = zext i8 %399 to i32
  %401 = load %struct.key_set*, %struct.key_set** %44, align 4
  %402 = load i32, i32* %46, align 4
  %403 = getelementptr inbounds %struct.key_set, %struct.key_set* %401, i32 %402
  %404 = getelementptr inbounds %struct.key_set, %struct.key_set* %403, i32 0, i32 2
  %405 = getelementptr inbounds [4 x i8], [4 x i8]* %404, i32 0, i32 3
  %406 = load i8, i8* %405, align 1
  %407 = zext i8 %406 to i32
  %408 = and i32 %400, %407
  %409 = trunc i32 %408 to i8
  store i8 %409, i8* %53, align 1
  %410 = load i32, i32* %48, align 4
  %411 = load %struct.key_set*, %struct.key_set** %44, align 4
  %412 = load i32, i32* %46, align 4
  %413 = getelementptr inbounds %struct.key_set, %struct.key_set* %411, i32 %412
  %414 = getelementptr inbounds %struct.key_set, %struct.key_set* %413, i32 0, i32 2
  %415 = getelementptr inbounds [4 x i8], [4 x i8]* %414, i32 0, i32 0
  %416 = load i8, i8* %415, align 1
  %417 = zext i8 %416 to i32
  %418 = shl i32 %417, %410
  %419 = trunc i32 %418 to i8
  store i8 %419, i8* %415, align 1
  %420 = load i8, i8* %51, align 1
  %421 = zext i8 %420 to i32
  %422 = load i32, i32* %48, align 4
  %423 = sub nsw i32 8, %422
  %424 = ashr i32 %421, %423
  %425 = load %struct.key_set*, %struct.key_set** %44, align 4
  %426 = load i32, i32* %46, align 4
  %427 = getelementptr inbounds %struct.key_set, %struct.key_set* %425, i32 %426
  %428 = getelementptr inbounds %struct.key_set, %struct.key_set* %427, i32 0, i32 2
  %429 = getelementptr inbounds [4 x i8], [4 x i8]* %428, i32 0, i32 0
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i32
  %432 = or i32 %431, %424
  %433 = trunc i32 %432 to i8
  store i8 %433, i8* %429, align 1
  %434 = load i32, i32* %48, align 4
  %435 = load %struct.key_set*, %struct.key_set** %44, align 4
  %436 = load i32, i32* %46, align 4
  %437 = getelementptr inbounds %struct.key_set, %struct.key_set* %435, i32 %436
  %438 = getelementptr inbounds %struct.key_set, %struct.key_set* %437, i32 0, i32 2
  %439 = getelementptr inbounds [4 x i8], [4 x i8]* %438, i32 0, i32 1
  %440 = load i8, i8* %439, align 1
  %441 = zext i8 %440 to i32
  %442 = shl i32 %441, %434
  %443 = trunc i32 %442 to i8
  store i8 %443, i8* %439, align 1
  %444 = load i8, i8* %52, align 1
  %445 = zext i8 %444 to i32
  %446 = load i32, i32* %48, align 4
  %447 = sub nsw i32 8, %446
  %448 = ashr i32 %445, %447
  %449 = load %struct.key_set*, %struct.key_set** %44, align 4
  %450 = load i32, i32* %46, align 4
  %451 = getelementptr inbounds %struct.key_set, %struct.key_set* %449, i32 %450
  %452 = getelementptr inbounds %struct.key_set, %struct.key_set* %451, i32 0, i32 2
  %453 = getelementptr inbounds [4 x i8], [4 x i8]* %452, i32 0, i32 1
  %454 = load i8, i8* %453, align 1
  %455 = zext i8 %454 to i32
  %456 = or i32 %455, %448
  %457 = trunc i32 %456 to i8
  store i8 %457, i8* %453, align 1
  %458 = load i32, i32* %48, align 4
  %459 = load %struct.key_set*, %struct.key_set** %44, align 4
  %460 = load i32, i32* %46, align 4
  %461 = getelementptr inbounds %struct.key_set, %struct.key_set* %459, i32 %460
  %462 = getelementptr inbounds %struct.key_set, %struct.key_set* %461, i32 0, i32 2
  %463 = getelementptr inbounds [4 x i8], [4 x i8]* %462, i32 0, i32 2
  %464 = load i8, i8* %463, align 1
  %465 = zext i8 %464 to i32
  %466 = shl i32 %465, %458
  %467 = trunc i32 %466 to i8
  store i8 %467, i8* %463, align 1
  %468 = load i8, i8* %53, align 1
  %469 = zext i8 %468 to i32
  %470 = load i32, i32* %48, align 4
  %471 = sub nsw i32 8, %470
  %472 = ashr i32 %469, %471
  %473 = load %struct.key_set*, %struct.key_set** %44, align 4
  %474 = load i32, i32* %46, align 4
  %475 = getelementptr inbounds %struct.key_set, %struct.key_set* %473, i32 %474
  %476 = getelementptr inbounds %struct.key_set, %struct.key_set* %475, i32 0, i32 2
  %477 = getelementptr inbounds [4 x i8], [4 x i8]* %476, i32 0, i32 2
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i32
  %480 = or i32 %479, %472
  %481 = trunc i32 %480 to i8
  store i8 %481, i8* %477, align 1
  %482 = load i32, i32* %48, align 4
  %483 = load %struct.key_set*, %struct.key_set** %44, align 4
  %484 = load i32, i32* %46, align 4
  %485 = getelementptr inbounds %struct.key_set, %struct.key_set* %483, i32 %484
  %486 = getelementptr inbounds %struct.key_set, %struct.key_set* %485, i32 0, i32 2
  %487 = getelementptr inbounds [4 x i8], [4 x i8]* %486, i32 0, i32 3
  %488 = load i8, i8* %487, align 1
  %489 = zext i8 %488 to i32
  %490 = shl i32 %489, %482
  %491 = trunc i32 %490 to i8
  store i8 %491, i8* %487, align 1
  %492 = load i8, i8* %50, align 1
  %493 = zext i8 %492 to i32
  %494 = load i32, i32* %48, align 4
  %495 = sub nsw i32 4, %494
  %496 = ashr i32 %493, %495
  %497 = load %struct.key_set*, %struct.key_set** %44, align 4
  %498 = load i32, i32* %46, align 4
  %499 = getelementptr inbounds %struct.key_set, %struct.key_set* %497, i32 %498
  %500 = getelementptr inbounds %struct.key_set, %struct.key_set* %499, i32 0, i32 2
  %501 = getelementptr inbounds [4 x i8], [4 x i8]* %500, i32 0, i32 3
  %502 = load i8, i8* %501, align 1
  %503 = zext i8 %502 to i32
  %504 = or i32 %503, %496
  %505 = trunc i32 %504 to i8
  store i8 %505, i8* %501, align 1
  store i32 0, i32* %47, align 4
  br label %generate_sub_keys_for.cond291

generate_sub_keys_for.cond291:                    ; preds = %generate_sub_keys_for.inc347, %generate_sub_keys_if.end
  %506 = load i32, i32* %47, align 4
  %507 = icmp slt i32 %506, 48
  br i1 %507, label %generate_sub_keys_for.body294, label %generate_sub_keys_for.end349

generate_sub_keys_for.body294:                    ; preds = %generate_sub_keys_for.cond291
  %508 = load i32, i32* %47, align 4
  %509 = getelementptr inbounds [48 x i32], [48 x i32]* @sub_key_permutation, i32 0, i32 %508
  %510 = load i32, i32* %509, align 4
  store i32 %510, i32* %48, align 4
  %511 = load i32, i32* %48, align 4
  %512 = icmp sle i32 %511, 28
  br i1 %512, label %generate_sub_keys_if.then298, label %generate_sub_keys_if.else317

generate_sub_keys_if.then298:                     ; preds = %generate_sub_keys_for.body294
  %513 = load i32, i32* %48, align 4
  %514 = sub nsw i32 %513, 1
  %515 = srem i32 %514, 8
  %516 = ashr i32 128, %515
  %517 = trunc i32 %516 to i8
  store i8 %517, i8* %49, align 1
  %518 = load %struct.key_set*, %struct.key_set** %44, align 4
  %519 = load i32, i32* %46, align 4
  %520 = getelementptr inbounds %struct.key_set, %struct.key_set* %518, i32 %519
  %521 = getelementptr inbounds %struct.key_set, %struct.key_set* %520, i32 0, i32 1
  %522 = load i32, i32* %48, align 4
  %523 = sub nsw i32 %522, 1
  %524 = sdiv i32 %523, 8
  %525 = getelementptr inbounds [4 x i8], [4 x i8]* %521, i32 0, i32 %524
  %526 = load i8, i8* %525, align 1
  %527 = zext i8 %526 to i32
  %528 = load i8, i8* %49, align 1
  %529 = zext i8 %528 to i32
  %530 = and i32 %529, %527
  %531 = trunc i32 %530 to i8
  store i8 %531, i8* %49, align 1
  %532 = load i32, i32* %48, align 4
  %533 = sub nsw i32 %532, 1
  %534 = srem i32 %533, 8
  %535 = load i8, i8* %49, align 1
  %536 = zext i8 %535 to i32
  %537 = shl i32 %536, %534
  %538 = trunc i32 %537 to i8
  store i8 %538, i8* %49, align 1
  br label %generate_sub_keys_if.end336

generate_sub_keys_if.else317:                     ; preds = %generate_sub_keys_for.body294
  %539 = load i32, i32* %48, align 4
  %540 = sub nsw i32 %539, 29
  %541 = srem i32 %540, 8
  %542 = ashr i32 128, %541
  %543 = trunc i32 %542 to i8
  store i8 %543, i8* %49, align 1
  %544 = load %struct.key_set*, %struct.key_set** %44, align 4
  %545 = load i32, i32* %46, align 4
  %546 = getelementptr inbounds %struct.key_set, %struct.key_set* %544, i32 %545
  %547 = getelementptr inbounds %struct.key_set, %struct.key_set* %546, i32 0, i32 2
  %548 = load i32, i32* %48, align 4
  %549 = sub nsw i32 %548, 29
  %550 = sdiv i32 %549, 8
  %551 = getelementptr inbounds [4 x i8], [4 x i8]* %547, i32 0, i32 %550
  %552 = load i8, i8* %551, align 1
  %553 = zext i8 %552 to i32
  %554 = load i8, i8* %49, align 1
  %555 = zext i8 %554 to i32
  %556 = and i32 %555, %553
  %557 = trunc i32 %556 to i8
  store i8 %557, i8* %49, align 1
  %558 = load i32, i32* %48, align 4
  %559 = sub nsw i32 %558, 29
  %560 = srem i32 %559, 8
  %561 = load i8, i8* %49, align 1
  %562 = zext i8 %561 to i32
  %563 = shl i32 %562, %560
  %564 = trunc i32 %563 to i8
  store i8 %564, i8* %49, align 1
  br label %generate_sub_keys_if.end336

generate_sub_keys_if.end336:                      ; preds = %generate_sub_keys_if.else317, %generate_sub_keys_if.then298
  %565 = load i8, i8* %49, align 1
  %566 = zext i8 %565 to i32
  %567 = load i32, i32* %47, align 4
  %568 = srem i32 %567, 8
  %569 = ashr i32 %566, %568
  %570 = load %struct.key_set*, %struct.key_set** %44, align 4
  %571 = load i32, i32* %46, align 4
  %572 = getelementptr inbounds %struct.key_set, %struct.key_set* %570, i32 %571
  %573 = getelementptr inbounds %struct.key_set, %struct.key_set* %572, i32 0, i32 0
  %574 = load i32, i32* %47, align 4
  %575 = sdiv i32 %574, 8
  %576 = getelementptr inbounds [8 x i8], [8 x i8]* %573, i32 0, i32 %575
  %577 = load i8, i8* %576, align 1
  %578 = zext i8 %577 to i32
  %579 = or i32 %578, %569
  %580 = trunc i32 %579 to i8
  store i8 %580, i8* %576, align 1
  br label %generate_sub_keys_for.inc347

generate_sub_keys_for.inc347:                     ; preds = %generate_sub_keys_if.end336
  %581 = load i32, i32* %47, align 4
  %582 = add nsw i32 %581, 1
  store i32 %582, i32* %47, align 4
  br label %generate_sub_keys_for.cond291

generate_sub_keys_for.end349:                     ; preds = %generate_sub_keys_for.cond291
  br label %generate_sub_keys_for.inc350

generate_sub_keys_for.inc350:                     ; preds = %generate_sub_keys_for.end349
  %583 = load i32, i32* %46, align 4
  %584 = add nsw i32 %583, 1
  store i32 %584, i32* %46, align 4
  br label %generate_sub_keys_for.cond87

generate_sub_keys_for.end352:                     ; preds = %generate_sub_keys_for.cond87
  br label %if.end68.split

if.end68.split:                                   ; preds = %generate_sub_keys_for.end352
  %call74 = call i32 @clock()
  store i32 %call74, i32* %finish, align 4
  %585 = load i32, i32* %finish, align 4
  %586 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %585, %586
  %conv75 = sitofp i32 %sub to double
  %div = fdiv double %conv75, 1.000000e+03
  store double %div, double* %time_taken, align 8
  %587 = load i8**, i8*** %argv.addr, align 4
  %arrayidx76 = getelementptr inbounds i8*, i8** %587, i32 1
  %588 = load i8*, i8** %arrayidx76, align 4
  %call77 = call i32 @strcmp(i8* %588, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02CIKBGMLM@?9e?$AA@", i32 0, i32 0))
  %cmp78 = icmp eq i32 %call77, 0
  br i1 %cmp78, label %if.then80, label %if.else82

if.then80:                                        ; preds = %if.end68.split
  store i16 1, i16* %process_mode, align 2
  %call81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"??_C@_0O@LLDPPJEB@Encrypting?4?4?6?$AA@", i32 0, i32 0))
  br label %if.end84

if.else82:                                        ; preds = %if.end68.split
  store i16 0, i16* %process_mode, align 2
  %call83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"??_C@_0O@MBPJKHJE@Decrypting?4?4?6?$AA@", i32 0, i32 0))
  br label %if.end84

if.end84:                                         ; preds = %if.else82, %if.then80
  %589 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %call85 = call i32 @fseek(%struct._iobuf* %589, i32 0, i32 2)
  %590 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %call86 = call i32 @ftell(%struct._iobuf* %590)
  store i32 %call86, i32* %file_size, align 4
  %591 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %call87 = call i32 @fseek(%struct._iobuf* %591, i32 0, i32 0)
  %592 = load i32, i32* %file_size, align 4
  %div88 = udiv i32 %592, 8
  %593 = load i32, i32* %file_size, align 4
  %rem = urem i32 %593, 8
  %tobool89 = icmp ne i32 %rem, 0
  %594 = zext i1 %tobool89 to i64
  %cond = select i1 %tobool89, i32 1, i32 0
  %add = add i32 %div88, %cond
  store i32 %add, i32* %number_of_blocks, align 4
  %call90 = call i32 @clock()
  store i32 %call90, i32* %start, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end144, %if.end84
  %595 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %596 = load i8*, i8** %data_block, align 4
  %call91 = call i32 @fread(i8* %596, i32 1, i32 8, %struct._iobuf* %595)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %597 = load i32, i32* %block_count, align 4
  %inc = add i32 %597, 1
  store i32 %inc, i32* %block_count, align 4
  %598 = load i32, i32* %block_count, align 4
  %599 = load i32, i32* %number_of_blocks, align 4
  %cmp93 = icmp eq i32 %598, %599
  br i1 %cmp93, label %if.then95, label %if.else140

if.then95:                                        ; preds = %while.body
  %600 = load i16, i16* %process_mode, align 2
  %conv96 = sext i16 %600 to i32
  %cmp97 = icmp eq i32 %conv96, 1
  br i1 %cmp97, label %if.then99, label %if.else126

if.then99:                                        ; preds = %if.then95
  %601 = load i32, i32* %file_size, align 4
  %rem100 = urem i32 %601, 8
  %sub101 = sub i32 8, %rem100
  %conv102 = trunc i32 %sub101 to i16
  store i16 %conv102, i16* %padding, align 2
  %602 = load i16, i16* %padding, align 2
  %conv103 = zext i16 %602 to i32
  %cmp104 = icmp slt i32 %conv103, 8
  br i1 %cmp104, label %if.then106, label %if.end112

if.then106:                                       ; preds = %if.then99
  %603 = load i8*, i8** %data_block, align 4
  %add.ptr = getelementptr inbounds i8, i8* %603, i32 8
  %604 = load i16, i16* %padding, align 2
  %conv107 = zext i16 %604 to i32
  %idx.neg = sub i32 0, %conv107
  %add.ptr108 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  %605 = load i16, i16* %padding, align 2
  %conv109 = trunc i16 %605 to i8
  %conv110 = zext i8 %conv109 to i32
  %606 = trunc i32 %conv110 to i8
  %607 = load i16, i16* %padding, align 2
  %conv111 = zext i16 %607 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %add.ptr108, i8 %606, i32 %conv111, i1 false)
  br label %if.end112

if.end112:                                        ; preds = %if.then106, %if.then99
  %608 = load i16, i16* %process_mode, align 2
  %conv113 = sext i16 %608 to i32
  %609 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %610 = load i8*, i8** %processed_block, align 4
  %611 = load i8*, i8** %data_block, align 4
  call void @process_message(i8* %611, i8* %610, %struct.key_set* %609, i32 %conv113)
  %612 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %613 = load i8*, i8** %processed_block, align 4
  %call114 = call i32 @fwrite(i8* %613, i32 1, i32 8, %struct._iobuf* %612)
  %conv115 = trunc i32 %call114 to i16
  store i16 %conv115, i16* %bytes_written69, align 2
  %614 = load i16, i16* %padding, align 2
  %conv116 = zext i16 %614 to i32
  %cmp117 = icmp eq i32 %conv116, 8
  br i1 %cmp117, label %if.then119, label %if.end125

if.then119:                                       ; preds = %if.end112
  %615 = load i8*, i8** %data_block, align 4
  %616 = load i16, i16* %padding, align 2
  %conv120 = trunc i16 %616 to i8
  %conv121 = zext i8 %conv120 to i32
  %617 = trunc i32 %conv121 to i8
  call void @llvm.memset.p0i8.i32(i8* align 1 %615, i8 %617, i32 8, i1 false)
  %618 = load i16, i16* %process_mode, align 2
  %conv122 = sext i16 %618 to i32
  %619 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %620 = load i8*, i8** %processed_block, align 4
  %621 = load i8*, i8** %data_block, align 4
  call void @process_message(i8* %621, i8* %620, %struct.key_set* %619, i32 %conv122)
  %622 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %623 = load i8*, i8** %processed_block, align 4
  %call123 = call i32 @fwrite(i8* %623, i32 1, i32 8, %struct._iobuf* %622)
  %conv124 = trunc i32 %call123 to i16
  store i16 %conv124, i16* %bytes_written69, align 2
  br label %if.end125

if.end125:                                        ; preds = %if.then119, %if.end112
  br label %if.end139

if.else126:                                       ; preds = %if.then95
  %call4 = call %ReturnStruct.4* @ConditionFun.13(i16* %padding, i16* %bytes_written69, i16* %process_mode, i8** %data_block, i8** %processed_block, %struct.key_set** %key_sets, i32 8, %struct._iobuf** @output_file)
  %MainStrut5 = alloca %ReturnStruct.4*, align 4
  store %ReturnStruct.4* %call4, %ReturnStruct.4** %MainStrut5, align 4
  %624 = load %ReturnStruct.4*, %ReturnStruct.4** %MainStrut5, align 4
  %625 = getelementptr inbounds %ReturnStruct.4, %ReturnStruct.4* %624, i32 0, i32 0
  %626 = load i16*, i16** %625, align 4
  %627 = load i16, i16* %626, align 4
  store i16 %627, i16* %bytes_written69
  br label %new3

new3:                                             ; preds = %if.else126
  br label %if.end139

if.end139:                                        ; preds = %new3, %if.end125
  br label %if.end144

if.else140:                                       ; preds = %while.body
  %628 = load i16, i16* %process_mode, align 2
  %conv141 = sext i16 %628 to i32
  %629 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %630 = load i8*, i8** %processed_block, align 4
  %631 = load i8*, i8** %data_block, align 4
  call void @process_message(i8* %631, i8* %630, %struct.key_set* %629, i32 %conv141)
  %632 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %633 = load i8*, i8** %processed_block, align 4
  %call142 = call i32 @fwrite(i8* %633, i32 1, i32 8, %struct._iobuf* %632)
  %conv143 = trunc i32 %call142 to i16
  store i16 %conv143, i16* %bytes_written69, align 2
  br label %if.end144

if.end144:                                        ; preds = %if.else140, %if.end139
  %634 = load i8*, i8** %data_block, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %634, i8 0, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call145 = call i32 @clock()
  store i32 %call145, i32* %finish, align 4
  %635 = load i8*, i8** %des_key45, align 4
  call void @free(i8* %635) #3
  %636 = load i8*, i8** %data_block, align 4
  call void @free(i8* %636) #3
  %637 = load i8*, i8** %processed_block, align 4
  call void @free(i8* %637) #3
  %638 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %call146 = call i32 @fclose(%struct._iobuf* %638)
  %639 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %call147 = call i32 @fclose(%struct._iobuf* %639)
  %640 = load i32, i32* %finish, align 4
  %641 = load i32, i32* %start, align 4
  %sub148 = sub nsw i32 %640, %641
  %conv149 = sitofp i32 %sub148 to double
  %div150 = fdiv double %conv149, 1.000000e+03
  store double %div150, double* %time_taken, align 8
  %642 = load double, double* %time_taken, align 8
  %643 = load i8**, i8*** %argv.addr, align 4
  %arrayidx151 = getelementptr inbounds i8*, i8** %643, i32 3
  %644 = load i8*, i8** %arrayidx151, align 4
  %call152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @"??_C@_0DC@MHEFLGGM@Finished?5processing?5?$CFs?4?5Time?5tak@", i32 0, i32 0), i8* %644, double %642)
  store i32 0, i32* %retval, align 4
  br label %return

if.else153:                                       ; preds = %lor.lhs.false
  %645 = load i8**, i8*** %argv.addr, align 4
  %arrayidx154 = getelementptr inbounds i8*, i8** %645, i32 1
  %646 = load i8*, i8** %arrayidx154, align 4
  %call155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @"??_C@_0DO@PBDDNJFP@Invalid?5action?3?5?$CFs?4?5First?5parame@", i32 0, i32 0), i8* %646)
  store i32 1, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end23
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end156, %if.else153, %while.end, %if.then66, %if.then60, %if.then52, %if.then42, %if.then36, %if.then20, %if.then10, %if.then5, %if.then
  %647 = load i32, i32* %retval, align 4
  ret i32 %647
}

declare dso_local i32 @strcmp(i8*, i8*) #0

declare dllimport %struct._iobuf* @fopen(i8*, i8*) #0

declare dllimport void @srand(i32) #0

; Function Attrs: argmemonly nounwind
declare dllimport noalias i8* @malloc(i32) #4

declare dllimport i32 @fwrite(i8*, i32, i32, %struct._iobuf*) #0

declare dllimport i32 @fclose(%struct._iobuf*) #0

; Function Attrs: argmemonly nounwind
declare dllimport void @free(i8*) #4

declare dllimport i32 @fread(i8*, i32, i32, %struct._iobuf*) #0

declare dllimport i32 @clock() #0

declare dllimport i32 @fseek(%struct._iobuf*, i32, i32) #0

declare dllimport i32 @ftell(%struct._iobuf*) #0

declare dllimport i64 @_time64(i64*) #0

define %ReturnStruct* @ConditionFun() {
entry:
  %0 = load i32, i32* @x
  %1 = load i32, i32* @y
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %8 = load i32, i32* @x
  %9 = load i32, i32* @y
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %originalBBpart2
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split
  %ReturnValue = alloca %ReturnStruct*, align 4
  %returnvalue = load %ReturnStruct*, %ReturnStruct** %ReturnValue, align 4
  ret %ReturnStruct* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  br label %originalBB
}

define %ReturnStruct.0* @ConditionFun.1() {
entry:
  %0 = load i32, i32* @x.2
  %1 = load i32, i32* @y.3
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %8 = load i32, i32* @x.2
  %9 = load i32, i32* @y.3
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %originalBBpart2
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split
  %ReturnValue = alloca %ReturnStruct.0*, align 4
  %returnvalue = load %ReturnStruct.0*, %ReturnStruct.0** %ReturnValue, align 4
  ret %ReturnStruct.0* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  br label %originalBB
}

define %ReturnStruct.1* @ConditionFun.4() {
entry:
  br label %Split

Split:                                            ; preds = %entry
  br label %ReturnBB

ReturnBB:                                         ; preds = %Split
  %ReturnValue = alloca %ReturnStruct.1*, align 4
  %returnvalue = load %ReturnStruct.1*, %ReturnStruct.1** %ReturnValue, align 4
  ret %ReturnStruct.1* %returnvalue
}

define %ReturnStruct.2* @ConditionFun.7() {
entry:
  br label %Split

Split:                                            ; preds = %entry
  %0 = load i32, i32* @x.8
  %1 = load i32, i32* @y.9
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split, %originalBBalteredBB
  %8 = load i32, i32* @x.8
  %9 = load i32, i32* @y.9
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %ReturnBB

ReturnBB:                                         ; preds = %originalBBpart2
  %ReturnValue = alloca %ReturnStruct.2*, align 4
  %returnvalue = load %ReturnStruct.2*, %ReturnStruct.2** %ReturnValue, align 4
  ret %ReturnStruct.2* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split
  br label %originalBB
}

define %ReturnStruct.3* @ConditionFun.10(i32 %arg, i32 %arg1, i8** %arg2, i32* %arg3) {
entry:
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %argLoad = load i32, i32* %arg.addr, align 4
  %arg1.addr = alloca i32, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  %arg1Load = load i32, i32* %arg1.addr, align 4
  %arg2.addr = alloca i8**, align 4
  store i8** %arg2, i8*** %arg2.addr, align 4
  %arg2Load = load i8**, i8*** %arg2.addr, align 4
  %arg3.addr = alloca i32*, align 4
  store i32* %arg3, i32** %arg3.addr, align 4
  %arg3Load = load i32*, i32** %arg3.addr, align 4
  br label %Split

Split:                                            ; preds = %originalBBpart2, %entry
  %0 = load i32, i32* %arg3Load, align 4
  %1 = icmp slt i32 %0, %arg1Load
  br i1 %1, label %Split4, label %Split6

Split4:                                           ; preds = %Split
  %2 = call i32 @rand()
  %3 = srem i32 %2, 255
  %4 = trunc i32 %3 to i8
  %5 = load i8*, i8** %arg2Load, align 4
  %6 = load i32, i32* %arg3Load, align 4
  %7 = getelementptr inbounds i8, i8* %5, i32 %6
  store i8 %4, i8* %7, align 1
  br label %Split5

Split5:                                           ; preds = %Split4
  %8 = load i32, i32* @x.11
  %9 = load i32, i32* @y.12
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %Split5, %originalBBalteredBB
  %16 = load i32, i32* %arg3Load, align 4
  %17 = add nsw i32 %16, %argLoad
  store i32 %17, i32* %arg3Load, align 4
  %18 = load i32, i32* @x.11
  %19 = load i32, i32* @y.12
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split6:                                           ; preds = %Split
  %26 = load i32, i32* @x.11
  %27 = load i32, i32* @y.12
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %Split6, %originalBB11alteredBB
  %34 = load i32, i32* @x.11
  %35 = load i32, i32* @y.12
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %ReturnBB

ReturnBB:                                         ; preds = %originalBBpart213
  %ReturnValue = alloca %ReturnStruct.3*, align 4
  %returnvalue = load %ReturnStruct.3*, %ReturnStruct.3** %ReturnValue, align 4
  ret %ReturnStruct.3* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %Split5
  %42 = load i32, i32* %arg3Load, align 4
  %_ = sub i32 %42, %argLoad
  %gen = mul i32 %_, %argLoad
  %_7 = sub i32 %42, %argLoad
  %gen8 = mul i32 %_7, %argLoad
  %_9 = sub i32 0, %42
  %gen10 = add i32 %_9, %argLoad
  %43 = add nsw i32 %42, %argLoad
  store i32 %43, i32* %arg3Load, align 4
  br label %originalBB

originalBB11alteredBB:                            ; preds = %originalBB11, %Split6
  br label %originalBB11
}

define %ReturnStruct.4* @ConditionFun.13(i16* %arg, i16* %arg1, i16* %arg2, i8** %arg3, i8** %arg4, %struct.key_set** %arg5, i32 %arg6, %struct._iobuf** %arg7) {
entry:
  %0 = load i32, i32* @x.14
  %1 = load i32, i32* @y.15
  %2 = sub i32 %0, 1
  %3 = mul i32 %0, %2
  %4 = urem i32 %3, 2
  %5 = icmp eq i32 %4, 0
  %6 = icmp slt i32 %1, 10
  %7 = or i1 %5, %6
  br i1 %7, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %entry, %originalBBalteredBB
  %arg.addr = alloca i16*, align 4
  store i16* %arg, i16** %arg.addr, align 4
  %argLoad = load i16*, i16** %arg.addr, align 4
  %arg1.addr = alloca i16*, align 4
  store i16* %arg1, i16** %arg1.addr, align 4
  %arg1Load = load i16*, i16** %arg1.addr, align 4
  %arg2.addr = alloca i16*, align 4
  store i16* %arg2, i16** %arg2.addr, align 4
  %arg2Load = load i16*, i16** %arg2.addr, align 4
  %arg3.addr = alloca i8**, align 4
  store i8** %arg3, i8*** %arg3.addr, align 4
  %arg3Load = load i8**, i8*** %arg3.addr, align 4
  %arg4.addr = alloca i8**, align 4
  store i8** %arg4, i8*** %arg4.addr, align 4
  %arg4Load = load i8**, i8*** %arg4.addr, align 4
  %arg5.addr = alloca %struct.key_set**, align 4
  store %struct.key_set** %arg5, %struct.key_set*** %arg5.addr, align 4
  %arg5Load = load %struct.key_set**, %struct.key_set*** %arg5.addr, align 4
  %arg6.addr = alloca i32, align 4
  store i32 %arg6, i32* %arg6.addr, align 4
  %arg6Load = load i32, i32* %arg6.addr, align 4
  %arg7.addr = alloca %struct._iobuf**, align 4
  store %struct._iobuf** %arg7, %struct._iobuf*** %arg7.addr, align 4
  %arg7Load = load %struct._iobuf**, %struct._iobuf*** %arg7.addr, align 4
  %8 = load i32, i32* @x.14
  %9 = load i32, i32* @y.15
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %Split

Split:                                            ; preds = %originalBBpart2
  %16 = load i16, i16* %arg2Load, align 2
  %17 = sext i16 %16 to i32
  %18 = load %struct.key_set*, %struct.key_set** %arg5Load, align 4
  %19 = load i8*, i8** %arg4Load, align 4
  %20 = load i8*, i8** %arg3Load, align 4
  call void @process_message(i8* %20, i8* %19, %struct.key_set* %18, i32 %17)
  %21 = load i8*, i8** %arg4Load, align 4
  %22 = getelementptr inbounds i8, i8* %21, i32 7
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i16
  store i16 %24, i16* %argLoad, align 2
  %25 = load i16, i16* %argLoad, align 2
  %26 = zext i16 %25 to i32
  %27 = icmp slt i32 %26, %arg6Load
  br i1 %27, label %Split8, label %Split9

Split8:                                           ; preds = %Split
  %28 = load %struct._iobuf*, %struct._iobuf** %arg7Load, align 4
  %29 = load i16, i16* %argLoad, align 2
  %30 = zext i16 %29 to i32
  %31 = sub nsw i32 %arg6Load, %30
  %32 = load i8*, i8** %arg4Load, align 4
  %33 = call i32 @fwrite(i8* %32, i32 1, i32 %31, %struct._iobuf* %28)
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %arg1Load, align 2
  br label %Split9

Split9:                                           ; preds = %Split, %Split8
  %35 = load i32, i32* @x.14
  %36 = load i32, i32* @y.15
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %Split9, %originalBB10alteredBB
  %43 = load i32, i32* @x.14
  %44 = load i32, i32* @y.15
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %ReturnBB

ReturnBB:                                         ; preds = %originalBBpart212
  %ReturnValue = alloca %ReturnStruct.4*, align 4
  %51 = load %ReturnStruct.4*, %ReturnStruct.4** %ReturnValue, align 4
  %52 = getelementptr inbounds %ReturnStruct.4, %ReturnStruct.4* %51, i32 0, i32 0
  store i16* %arg1Load, i16** %52
  %returnvalue = load %ReturnStruct.4*, %ReturnStruct.4** %ReturnValue, align 4
  ret %ReturnStruct.4* %returnvalue

originalBBalteredBB:                              ; preds = %originalBB, %entry
  %arg.addralteredBB = alloca i16*, align 4
  store i16* %arg, i16** %arg.addralteredBB, align 4
  %argLoadalteredBB = load i16*, i16** %arg.addralteredBB, align 4
  %arg1.addralteredBB = alloca i16*, align 4
  store i16* %arg1, i16** %arg1.addralteredBB, align 4
  %arg1LoadalteredBB = load i16*, i16** %arg1.addralteredBB, align 4
  %arg2.addralteredBB = alloca i16*, align 4
  store i16* %arg2, i16** %arg2.addralteredBB, align 4
  %arg2LoadalteredBB = load i16*, i16** %arg2.addralteredBB, align 4
  %arg3.addralteredBB = alloca i8**, align 4
  store i8** %arg3, i8*** %arg3.addralteredBB, align 4
  %arg3LoadalteredBB = load i8**, i8*** %arg3.addralteredBB, align 4
  %arg4.addralteredBB = alloca i8**, align 4
  store i8** %arg4, i8*** %arg4.addralteredBB, align 4
  %arg4LoadalteredBB = load i8**, i8*** %arg4.addralteredBB, align 4
  %arg5.addralteredBB = alloca %struct.key_set**, align 4
  store %struct.key_set** %arg5, %struct.key_set*** %arg5.addralteredBB, align 4
  %arg5LoadalteredBB = load %struct.key_set**, %struct.key_set*** %arg5.addralteredBB, align 4
  %arg6.addralteredBB = alloca i32, align 4
  store i32 %arg6, i32* %arg6.addralteredBB, align 4
  %arg6LoadalteredBB = load i32, i32* %arg6.addralteredBB, align 4
  %arg7.addralteredBB = alloca %struct._iobuf**, align 4
  store %struct._iobuf** %arg7, %struct._iobuf*** %arg7.addralteredBB, align 4
  %arg7LoadalteredBB = load %struct._iobuf**, %struct._iobuf*** %arg7.addralteredBB, align 4
  br label %originalBB

originalBB10alteredBB:                            ; preds = %originalBB10, %Split9
  br label %originalBB10
}

attributes #0 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { argmemonly nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.linker.options = !{!0, !1, !0, !1}
!llvm.ident = !{!2, !2}
!llvm.module.flags = !{!3, !4}

!0 = !{!"/DEFAULTLIB:msvcrtd.lib"}
!1 = !{!"/DEFAULTLIB:oldnames.lib"}
!2 = !{!"Obfuscator-LLVM clang version 8.0.1 (tags/RELEASE_801/final) (based on Obfuscator-LLVM 8.0.1)"}
!3 = !{i32 1, !"NumRegisterParameters", i32 0}
!4 = !{i32 1, !"wchar_size", i32 2}
