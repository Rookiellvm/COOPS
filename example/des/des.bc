; ModuleID = 'Debug\AllBCfile.bc'
source_filename = "llvm-link"
target datalayout = "e-m:x-p:32:32-i64:64-f80:32-n8:16:32-a:0:32-S32"
target triple = "i686-pc-windows-msvc16.0.0"

%struct._iobuf = type { i8*, i32, i8*, i32, i32, i32, i32, i8* }
%struct.key_set = type { [8 x i8], [4 x i8], [4 x i8] }

$"??_C@_01HIHLOKLC@1?$AA@" = comdat any

$"??_C@_01GBGANLPD@0?$AA@" = comdat any

$"??_C@_04ELMKNHBF@K?3?5?6?$AA@" = comdat any

$"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@" = comdat any

$"??_C@_01EEMJAFIK@?6?$AA@" = comdat any

$"??_C@_05KNMBOJAM@?6C?3?5?6?$AA@" = comdat any

$"??_C@_05BPOBDFBM@?6D?3?5?6?$AA@" = comdat any

$"??_C@_0EF@LEAOBOIJ@You?5must?5provide?5at?5least?51?5para@" = comdat any

$"??_C@_02BKJHAODO@?9g?$AA@" = comdat any

$"??_C@_0EA@BFJPECMN@Invalid?5?$CD?5of?5parameter?5specified@" = comdat any

$"??_C@_02GMLFBBN@wb?$AA@" = comdat any

$"??_C@_0CC@HHNBFEDG@Could?5not?5open?5file?5to?5write?5key@" = comdat any

$"??_C@_0CC@FJNHMKJL@Error?5writing?5key?5to?5output?5file@" = comdat any

$"??_C@_02CIKBGMLM@?9e?$AA@" = comdat any

$"??_C@_02DBLKFNPN@?9d?$AA@" = comdat any

$"??_C@_0GC@CNACNKJO@Invalid?5?$CD?5of?5parameters?5?$CI?$CFd?$CJ?5spe@" = comdat any

$"??_C@_02JDPG@rb?$AA@" = comdat any

$"??_C@_0CF@FHLEAPML@Could?5not?5open?5key?5file?5to?5read?5@" = comdat any

$"??_C@_0DF@KDDFFPFJ@Key?5read?5from?5key?5file?5does?5nto?5@" = comdat any

$"??_C@_0CI@BKMPCFLJ@Could?5not?5open?5input?5file?5to?5rea@" = comdat any

$"??_C@_0CK@FHHBJFFD@Could?5not?5open?5output?5file?5to?5wr@" = comdat any

$"??_C@_0O@LLDPPJEB@Encrypting?4?4?6?$AA@" = comdat any

$"??_C@_0O@MBPJKHJE@Decrypting?4?4?6?$AA@" = comdat any

$"??_C@_0DC@MHEFLGGM@Finished?5processing?5?$CFs?4?5Time?5tak@" = comdat any

$"??_C@_0DO@PBDDNJFP@Invalid?5action?3?5?$CFs?4?5First?5parame@" = comdat any

@initial_key_permutaion = dso_local global [56 x i32] [i32 57, i32 49, i32 41, i32 33, i32 25, i32 17, i32 9, i32 1, i32 58, i32 50, i32 42, i32 34, i32 26, i32 18, i32 10, i32 2, i32 59, i32 51, i32 43, i32 35, i32 27, i32 19, i32 11, i32 3, i32 60, i32 52, i32 44, i32 36, i32 63, i32 55, i32 47, i32 39, i32 31, i32 23, i32 15, i32 7, i32 62, i32 54, i32 46, i32 38, i32 30, i32 22, i32 14, i32 6, i32 61, i32 53, i32 45, i32 37, i32 29, i32 21, i32 13, i32 5, i32 28, i32 20, i32 12, i32 4], align 4
@initial_message_permutation = dso_local global [64 x i32] [i32 58, i32 50, i32 42, i32 34, i32 26, i32 18, i32 10, i32 2, i32 60, i32 52, i32 44, i32 36, i32 28, i32 20, i32 12, i32 4, i32 62, i32 54, i32 46, i32 38, i32 30, i32 22, i32 14, i32 6, i32 64, i32 56, i32 48, i32 40, i32 32, i32 24, i32 16, i32 8, i32 57, i32 49, i32 41, i32 33, i32 25, i32 17, i32 9, i32 1, i32 59, i32 51, i32 43, i32 35, i32 27, i32 19, i32 11, i32 3, i32 61, i32 53, i32 45, i32 37, i32 29, i32 21, i32 13, i32 5, i32 63, i32 55, i32 47, i32 39, i32 31, i32 23, i32 15, i32 7], align 4
@key_shift_sizes = dso_local global [17 x i32] [i32 -1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 1], align 4
@sub_key_permutation = dso_local global [48 x i32] [i32 14, i32 17, i32 11, i32 24, i32 1, i32 5, i32 3, i32 28, i32 15, i32 6, i32 21, i32 10, i32 23, i32 19, i32 12, i32 4, i32 26, i32 8, i32 16, i32 7, i32 27, i32 20, i32 13, i32 2, i32 41, i32 52, i32 31, i32 37, i32 47, i32 55, i32 30, i32 40, i32 51, i32 45, i32 33, i32 48, i32 44, i32 49, i32 39, i32 56, i32 34, i32 53, i32 46, i32 42, i32 50, i32 36, i32 29, i32 32], align 4
@message_expansion = dso_local global [48 x i32] [i32 32, i32 1, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 28, i32 29, i32 30, i32 31, i32 32, i32 1], align 4
@S1 = dso_local global [64 x i32] [i32 14, i32 4, i32 13, i32 1, i32 2, i32 15, i32 11, i32 8, i32 3, i32 10, i32 6, i32 12, i32 5, i32 9, i32 0, i32 7, i32 0, i32 15, i32 7, i32 4, i32 14, i32 2, i32 13, i32 1, i32 10, i32 6, i32 12, i32 11, i32 9, i32 5, i32 3, i32 8, i32 4, i32 1, i32 14, i32 8, i32 13, i32 6, i32 2, i32 11, i32 15, i32 12, i32 9, i32 7, i32 3, i32 10, i32 5, i32 0, i32 15, i32 12, i32 8, i32 2, i32 4, i32 9, i32 1, i32 7, i32 5, i32 11, i32 3, i32 14, i32 10, i32 0, i32 6, i32 13], align 4
@S2 = dso_local global [64 x i32] [i32 15, i32 1, i32 8, i32 14, i32 6, i32 11, i32 3, i32 4, i32 9, i32 7, i32 2, i32 13, i32 12, i32 0, i32 5, i32 10, i32 3, i32 13, i32 4, i32 7, i32 15, i32 2, i32 8, i32 14, i32 12, i32 0, i32 1, i32 10, i32 6, i32 9, i32 11, i32 5, i32 0, i32 14, i32 7, i32 11, i32 10, i32 4, i32 13, i32 1, i32 5, i32 8, i32 12, i32 6, i32 9, i32 3, i32 2, i32 15, i32 13, i32 8, i32 10, i32 1, i32 3, i32 15, i32 4, i32 2, i32 11, i32 6, i32 7, i32 12, i32 0, i32 5, i32 14, i32 9], align 4
@S3 = dso_local global [64 x i32] [i32 10, i32 0, i32 9, i32 14, i32 6, i32 3, i32 15, i32 5, i32 1, i32 13, i32 12, i32 7, i32 11, i32 4, i32 2, i32 8, i32 13, i32 7, i32 0, i32 9, i32 3, i32 4, i32 6, i32 10, i32 2, i32 8, i32 5, i32 14, i32 12, i32 11, i32 15, i32 1, i32 13, i32 6, i32 4, i32 9, i32 8, i32 15, i32 3, i32 0, i32 11, i32 1, i32 2, i32 12, i32 5, i32 10, i32 14, i32 7, i32 1, i32 10, i32 13, i32 0, i32 6, i32 9, i32 8, i32 7, i32 4, i32 15, i32 14, i32 3, i32 11, i32 5, i32 2, i32 12], align 4
@S4 = dso_local global [64 x i32] [i32 7, i32 13, i32 14, i32 3, i32 0, i32 6, i32 9, i32 10, i32 1, i32 2, i32 8, i32 5, i32 11, i32 12, i32 4, i32 15, i32 13, i32 8, i32 11, i32 5, i32 6, i32 15, i32 0, i32 3, i32 4, i32 7, i32 2, i32 12, i32 1, i32 10, i32 14, i32 9, i32 10, i32 6, i32 9, i32 0, i32 12, i32 11, i32 7, i32 13, i32 15, i32 1, i32 3, i32 14, i32 5, i32 2, i32 8, i32 4, i32 3, i32 15, i32 0, i32 6, i32 10, i32 1, i32 13, i32 8, i32 9, i32 4, i32 5, i32 11, i32 12, i32 7, i32 2, i32 14], align 4
@S5 = dso_local global [64 x i32] [i32 2, i32 12, i32 4, i32 1, i32 7, i32 10, i32 11, i32 6, i32 8, i32 5, i32 3, i32 15, i32 13, i32 0, i32 14, i32 9, i32 14, i32 11, i32 2, i32 12, i32 4, i32 7, i32 13, i32 1, i32 5, i32 0, i32 15, i32 10, i32 3, i32 9, i32 8, i32 6, i32 4, i32 2, i32 1, i32 11, i32 10, i32 13, i32 7, i32 8, i32 15, i32 9, i32 12, i32 5, i32 6, i32 3, i32 0, i32 14, i32 11, i32 8, i32 12, i32 7, i32 1, i32 14, i32 2, i32 13, i32 6, i32 15, i32 0, i32 9, i32 10, i32 4, i32 5, i32 3], align 4
@S6 = dso_local global [64 x i32] [i32 12, i32 1, i32 10, i32 15, i32 9, i32 2, i32 6, i32 8, i32 0, i32 13, i32 3, i32 4, i32 14, i32 7, i32 5, i32 11, i32 10, i32 15, i32 4, i32 2, i32 7, i32 12, i32 9, i32 5, i32 6, i32 1, i32 13, i32 14, i32 0, i32 11, i32 3, i32 8, i32 9, i32 14, i32 15, i32 5, i32 2, i32 8, i32 12, i32 3, i32 7, i32 0, i32 4, i32 10, i32 1, i32 13, i32 11, i32 6, i32 4, i32 3, i32 2, i32 12, i32 9, i32 5, i32 15, i32 10, i32 11, i32 14, i32 1, i32 7, i32 6, i32 0, i32 8, i32 13], align 4
@S7 = dso_local global [64 x i32] [i32 4, i32 11, i32 2, i32 14, i32 15, i32 0, i32 8, i32 13, i32 3, i32 12, i32 9, i32 7, i32 5, i32 10, i32 6, i32 1, i32 13, i32 0, i32 11, i32 7, i32 4, i32 9, i32 1, i32 10, i32 14, i32 3, i32 5, i32 12, i32 2, i32 15, i32 8, i32 6, i32 1, i32 4, i32 11, i32 13, i32 12, i32 3, i32 7, i32 14, i32 10, i32 15, i32 6, i32 8, i32 0, i32 5, i32 9, i32 2, i32 6, i32 11, i32 13, i32 8, i32 1, i32 4, i32 10, i32 7, i32 9, i32 5, i32 0, i32 15, i32 14, i32 2, i32 3, i32 12], align 4
@S8 = dso_local global [64 x i32] [i32 13, i32 2, i32 8, i32 4, i32 6, i32 15, i32 11, i32 1, i32 10, i32 9, i32 3, i32 14, i32 5, i32 0, i32 12, i32 7, i32 1, i32 15, i32 13, i32 8, i32 10, i32 3, i32 7, i32 4, i32 12, i32 5, i32 6, i32 11, i32 0, i32 14, i32 9, i32 2, i32 7, i32 11, i32 4, i32 1, i32 9, i32 12, i32 14, i32 2, i32 0, i32 6, i32 10, i32 13, i32 15, i32 3, i32 5, i32 8, i32 2, i32 1, i32 14, i32 7, i32 4, i32 10, i32 8, i32 13, i32 15, i32 12, i32 9, i32 0, i32 3, i32 5, i32 6, i32 11], align 4
@right_sub_message_permutation = dso_local global [32 x i32] [i32 16, i32 7, i32 20, i32 21, i32 29, i32 12, i32 28, i32 17, i32 1, i32 15, i32 23, i32 26, i32 5, i32 18, i32 31, i32 10, i32 2, i32 8, i32 24, i32 14, i32 32, i32 27, i32 3, i32 9, i32 19, i32 13, i32 30, i32 6, i32 22, i32 11, i32 4, i32 25], align 4
@final_message_permutation = dso_local global [64 x i32] [i32 40, i32 8, i32 48, i32 16, i32 56, i32 24, i32 64, i32 32, i32 39, i32 7, i32 47, i32 15, i32 55, i32 23, i32 63, i32 31, i32 38, i32 6, i32 46, i32 14, i32 54, i32 22, i32 62, i32 30, i32 37, i32 5, i32 45, i32 13, i32 53, i32 21, i32 61, i32 29, i32 36, i32 4, i32 44, i32 12, i32 52, i32 20, i32 60, i32 28, i32 35, i32 3, i32 43, i32 11, i32 51, i32 19, i32 59, i32 27, i32 34, i32 2, i32 42, i32 10, i32 50, i32 18, i32 58, i32 26, i32 33, i32 1, i32 41, i32 9, i32 49, i32 17, i32 57, i32 25], align 4
@"??_C@_01HIHLOKLC@1?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"1\00", comdat, align 1
@"??_C@_01GBGANLPD@0?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"0\00", comdat, align 1
@"??_C@_04ELMKNHBF@K?3?5?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [5 x i8] c"K: \0A\00", comdat, align 1
@"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@" = linkonce_odr dso_local unnamed_addr constant [8 x i8] c"%02X : \00", comdat, align 1
@"??_C@_01EEMJAFIK@?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [2 x i8] c"\0A\00", comdat, align 1
@"??_C@_05KNMBOJAM@?6C?3?5?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [6 x i8] c"\0AC: \0A\00", comdat, align 1
@"??_C@_05BPOBDFBM@?6D?3?5?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [6 x i8] c"\0AD: \0A\00", comdat, align 1
@"??_C@_0EF@LEAOBOIJ@You?5must?5provide?5at?5least?51?5para@" = linkonce_odr dso_local unnamed_addr constant [69 x i8] c"You must provide at least 1 parameter, where you specify the action.\00", comdat, align 1
@"??_C@_02BKJHAODO@?9g?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"-g\00", comdat, align 1
@"??_C@_0EA@BFJPECMN@Invalid?5?$CD?5of?5parameter?5specified@" = linkonce_odr dso_local unnamed_addr constant [64 x i8] c"Invalid # of parameter specified. Usage: run_des -g keyfile.key\00", comdat, align 1
@"??_C@_02GMLFBBN@wb?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"wb\00", comdat, align 1
@key_file = internal global %struct._iobuf* null, align 4
@"??_C@_0CC@HHNBFEDG@Could?5not?5open?5file?5to?5write?5key@" = linkonce_odr dso_local unnamed_addr constant [34 x i8] c"Could not open file to write key.\00", comdat, align 1
@"??_C@_0CC@FJNHMKJL@Error?5writing?5key?5to?5output?5file@" = linkonce_odr dso_local unnamed_addr constant [34 x i8] c"Error writing key to output file.\00", comdat, align 1
@"??_C@_02CIKBGMLM@?9e?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"-e\00", comdat, align 1
@"??_C@_02DBLKFNPN@?9d?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"-d\00", comdat, align 1
@"??_C@_0GC@CNACNKJO@Invalid?5?$CD?5of?5parameters?5?$CI?$CFd?$CJ?5spe@" = linkonce_odr dso_local unnamed_addr constant [98 x i8] c"Invalid # of parameters (%d) specified. Usage: run_des [-e|-d] keyfile.key input.file output.file\00", comdat, align 1
@"??_C@_02JDPG@rb?$AA@" = linkonce_odr dso_local unnamed_addr constant [3 x i8] c"rb\00", comdat, align 1
@"??_C@_0CF@FHLEAPML@Could?5not?5open?5key?5file?5to?5read?5@" = linkonce_odr dso_local unnamed_addr constant [37 x i8] c"Could not open key file to read key.\00", comdat, align 1
@"??_C@_0DF@KDDFFPFJ@Key?5read?5from?5key?5file?5does?5nto?5@" = linkonce_odr dso_local unnamed_addr constant [53 x i8] c"Key read from key file does nto have valid key size.\00", comdat, align 1
@input_file = internal global %struct._iobuf* null, align 4
@"??_C@_0CI@BKMPCFLJ@Could?5not?5open?5input?5file?5to?5rea@" = linkonce_odr dso_local unnamed_addr constant [40 x i8] c"Could not open input file to read data.\00", comdat, align 1
@output_file = internal global %struct._iobuf* null, align 4
@"??_C@_0CK@FHHBJFFD@Could?5not?5open?5output?5file?5to?5wr@" = linkonce_odr dso_local unnamed_addr constant [42 x i8] c"Could not open output file to write data.\00", comdat, align 1
@"??_C@_0O@LLDPPJEB@Encrypting?4?4?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [14 x i8] c"Encrypting..\0A\00", comdat, align 1
@"??_C@_0O@MBPJKHJE@Decrypting?4?4?6?$AA@" = linkonce_odr dso_local unnamed_addr constant [14 x i8] c"Decrypting..\0A\00", comdat, align 1
@"??_C@_0DC@MHEFLGGM@Finished?5processing?5?$CFs?4?5Time?5tak@" = linkonce_odr dso_local unnamed_addr constant [50 x i8] c"Finished processing %s. Time taken: %lf seconds.\0A\00", comdat, align 1
@"??_C@_0DO@PBDDNJFP@Invalid?5action?3?5?$CFs?4?5First?5parame@" = linkonce_odr dso_local unnamed_addr constant [62 x i8] c"Invalid action: %s. First parameter must be [ -g | -e | -d ].\00", comdat, align 1

; Function Attrs: noinline optnone sspstrong
define dso_local void @print_char_as_binary(i8 signext %input) #0 {
entry:
  %input.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %shift_byte = alloca i8, align 1
  store i8 %input, i8* %input.addr, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %sub = sub nsw i32 7, %1
  %shl = shl i32 1, %sub
  %conv = trunc i32 %shl to i8
  store i8 %conv, i8* %shift_byte, align 1
  %2 = load i8, i8* %shift_byte, align 1
  %conv1 = sext i8 %2 to i32
  %3 = load i8, i8* %input.addr, align 1
  %conv2 = sext i8 %3 to i32
  %and = and i32 %conv1, %conv2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01HIHLOKLC@1?$AA@", i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %for.body
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01GBGANLPD@0?$AA@", i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare dllimport i32 @printf(i8*, ...) #1

; Function Attrs: noinline optnone sspstrong
define dso_local void @generate_key(i8* %key) #0 {
entry:
  %key.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  store i8* %key, i8** %key.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call = call i32 @rand()
  %rem = srem i32 %call, 255
  %conv = trunc i32 %rem to i8
  %1 = load i8*, i8** %key.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i8, i8* %1, i32 %2
  store i8 %conv, i8* %arrayidx, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare dllimport i32 @rand() #1

; Function Attrs: noinline optnone sspstrong
define dso_local void @print_key_set(%struct.key_set* byval align 4 %key_set) #0 {
entry:
  %i = alloca i32, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"??_C@_04ELMKNHBF@K?3?5?6?$AA@", i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %k = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 0
  %1 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %k, i32 0, i32 %1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@", i32 0, i32 0), i32 %conv)
  %k2 = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 0
  %3 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds [8 x i8], [8 x i8]* %k2, i32 0, i32 %3
  %4 = load i8, i8* %arrayidx3, align 1
  call void @print_char_as_binary(i8 signext %4)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"??_C@_05KNMBOJAM@?6C?3?5?6?$AA@", i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc16, %for.end
  %6 = load i32, i32* %i, align 4
  %cmp7 = icmp slt i32 %6, 4
  br i1 %cmp7, label %for.body9, label %for.end18

for.body9:                                        ; preds = %for.cond6
  %c = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 1
  %7 = load i32, i32* %i, align 4
  %arrayidx10 = getelementptr inbounds [4 x i8], [4 x i8]* %c, i32 0, i32 %7
  %8 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %8 to i32
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@", i32 0, i32 0), i32 %conv11)
  %c13 = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 1
  %9 = load i32, i32* %i, align 4
  %arrayidx14 = getelementptr inbounds [4 x i8], [4 x i8]* %c13, i32 0, i32 %9
  %10 = load i8, i8* %arrayidx14, align 1
  call void @print_char_as_binary(i8 signext %10)
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %for.inc16

for.inc16:                                        ; preds = %for.body9
  %11 = load i32, i32* %i, align 4
  %inc17 = add nsw i32 %11, 1
  store i32 %inc17, i32* %i, align 4
  br label %for.cond6

for.end18:                                        ; preds = %for.cond6
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"??_C@_05BPOBDFBM@?6D?3?5?6?$AA@", i32 0, i32 0))
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc30, %for.end18
  %12 = load i32, i32* %i, align 4
  %cmp21 = icmp slt i32 %12, 4
  br i1 %cmp21, label %for.body23, label %for.end32

for.body23:                                       ; preds = %for.cond20
  %d = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 2
  %13 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [4 x i8], [4 x i8]* %d, i32 0, i32 %13
  %14 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %14 to i32
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"??_C@_07NOLDCAIA@?$CF02X?5?3?5?$AA@", i32 0, i32 0), i32 %conv25)
  %d27 = getelementptr inbounds %struct.key_set, %struct.key_set* %key_set, i32 0, i32 2
  %15 = load i32, i32* %i, align 4
  %arrayidx28 = getelementptr inbounds [4 x i8], [4 x i8]* %d27, i32 0, i32 %15
  %16 = load i8, i8* %arrayidx28, align 1
  call void @print_char_as_binary(i8 signext %16)
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  br label %for.inc30

for.inc30:                                        ; preds = %for.body23
  %17 = load i32, i32* %i, align 4
  %inc31 = add nsw i32 %17, 1
  store i32 %inc31, i32* %i, align 4
  br label %for.cond20

for.end32:                                        ; preds = %for.cond20
  %call33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"??_C@_01EEMJAFIK@?6?$AA@", i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @generate_sub_keys(i8* %main_key, %struct.key_set* %key_sets) #2 {
entry:
  %key_sets.addr = alloca %struct.key_set*, align 4
  %main_key.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %shift_size = alloca i32, align 4
  %shift_byte = alloca i8, align 1
  %first_shift_bits = alloca i8, align 1
  %second_shift_bits = alloca i8, align 1
  %third_shift_bits = alloca i8, align 1
  %fourth_shift_bits = alloca i8, align 1
  store %struct.key_set* %key_sets, %struct.key_set** %key_sets.addr, align 4
  store i8* %main_key, i8** %main_key.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx = getelementptr inbounds %struct.key_set, %struct.key_set* %1, i32 0
  %k = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx, i32 0, i32 0
  %2 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds [8 x i8], [8 x i8]* %k, i32 0, i32 %2
  store i8 0, i8* %arrayidx1, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc24, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp slt i32 %4, 56
  br i1 %cmp3, label %for.body4, label %for.end26

for.body4:                                        ; preds = %for.cond2
  %5 = load i32, i32* %i, align 4
  %arrayidx5 = getelementptr inbounds [56 x i32], [56 x i32]* @initial_key_permutaion, i32 0, i32 %5
  %6 = load i32, i32* %arrayidx5, align 4
  store i32 %6, i32* %shift_size, align 4
  %7 = load i32, i32* %shift_size, align 4
  %sub = sub nsw i32 %7, 1
  %rem = srem i32 %sub, 8
  %shr = ashr i32 128, %rem
  %conv = trunc i32 %shr to i8
  store i8 %conv, i8* %shift_byte, align 1
  %8 = load i8*, i8** %main_key.addr, align 4
  %9 = load i32, i32* %shift_size, align 4
  %sub6 = sub nsw i32 %9, 1
  %div = sdiv i32 %sub6, 8
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i32 %div
  %10 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %10 to i32
  %11 = load i8, i8* %shift_byte, align 1
  %conv9 = zext i8 %11 to i32
  %and = and i32 %conv9, %conv8
  %conv10 = trunc i32 %and to i8
  store i8 %conv10, i8* %shift_byte, align 1
  %12 = load i32, i32* %shift_size, align 4
  %sub11 = sub nsw i32 %12, 1
  %rem12 = srem i32 %sub11, 8
  %13 = load i8, i8* %shift_byte, align 1
  %conv13 = zext i8 %13 to i32
  %shl = shl i32 %conv13, %rem12
  %conv14 = trunc i32 %shl to i8
  store i8 %conv14, i8* %shift_byte, align 1
  %14 = load i8, i8* %shift_byte, align 1
  %conv15 = zext i8 %14 to i32
  %15 = load i32, i32* %i, align 4
  %rem16 = srem i32 %15, 8
  %shr17 = ashr i32 %conv15, %rem16
  %16 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx18 = getelementptr inbounds %struct.key_set, %struct.key_set* %16, i32 0
  %k19 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx18, i32 0, i32 0
  %17 = load i32, i32* %i, align 4
  %div20 = sdiv i32 %17, 8
  %arrayidx21 = getelementptr inbounds [8 x i8], [8 x i8]* %k19, i32 0, i32 %div20
  %18 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %18 to i32
  %or = or i32 %conv22, %shr17
  %conv23 = trunc i32 %or to i8
  store i8 %conv23, i8* %arrayidx21, align 1
  br label %for.inc24

for.inc24:                                        ; preds = %for.body4
  %19 = load i32, i32* %i, align 4
  %inc25 = add nsw i32 %19, 1
  store i32 %inc25, i32* %i, align 4
  br label %for.cond2

for.end26:                                        ; preds = %for.cond2
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc36, %for.end26
  %20 = load i32, i32* %i, align 4
  %cmp28 = icmp slt i32 %20, 3
  br i1 %cmp28, label %for.body30, label %for.end38

for.body30:                                       ; preds = %for.cond27
  %21 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx31 = getelementptr inbounds %struct.key_set, %struct.key_set* %21, i32 0
  %k32 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx31, i32 0, i32 0
  %22 = load i32, i32* %i, align 4
  %arrayidx33 = getelementptr inbounds [8 x i8], [8 x i8]* %k32, i32 0, i32 %22
  %23 = load i8, i8* %arrayidx33, align 1
  %24 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx34 = getelementptr inbounds %struct.key_set, %struct.key_set* %24, i32 0
  %c = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx34, i32 0, i32 1
  %25 = load i32, i32* %i, align 4
  %arrayidx35 = getelementptr inbounds [4 x i8], [4 x i8]* %c, i32 0, i32 %25
  store i8 %23, i8* %arrayidx35, align 1
  br label %for.inc36

for.inc36:                                        ; preds = %for.body30
  %26 = load i32, i32* %i, align 4
  %inc37 = add nsw i32 %26, 1
  store i32 %inc37, i32* %i, align 4
  br label %for.cond27

for.end38:                                        ; preds = %for.cond27
  %27 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx39 = getelementptr inbounds %struct.key_set, %struct.key_set* %27, i32 0
  %k40 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx39, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [8 x i8], [8 x i8]* %k40, i32 0, i32 3
  %28 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %28 to i32
  %and43 = and i32 %conv42, 240
  %conv44 = trunc i32 %and43 to i8
  %29 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx45 = getelementptr inbounds %struct.key_set, %struct.key_set* %29, i32 0
  %c46 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx45, i32 0, i32 1
  %arrayidx47 = getelementptr inbounds [4 x i8], [4 x i8]* %c46, i32 0, i32 3
  store i8 %conv44, i8* %arrayidx47, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc74, %for.end38
  %30 = load i32, i32* %i, align 4
  %cmp49 = icmp slt i32 %30, 3
  br i1 %cmp49, label %for.body51, label %for.end76

for.body51:                                       ; preds = %for.cond48
  %31 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx52 = getelementptr inbounds %struct.key_set, %struct.key_set* %31, i32 0
  %k53 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx52, i32 0, i32 0
  %32 = load i32, i32* %i, align 4
  %add = add nsw i32 %32, 3
  %arrayidx54 = getelementptr inbounds [8 x i8], [8 x i8]* %k53, i32 0, i32 %add
  %33 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %33 to i32
  %and56 = and i32 %conv55, 15
  %shl57 = shl i32 %and56, 4
  %conv58 = trunc i32 %shl57 to i8
  %34 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx59 = getelementptr inbounds %struct.key_set, %struct.key_set* %34, i32 0
  %d = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx59, i32 0, i32 2
  %35 = load i32, i32* %i, align 4
  %arrayidx60 = getelementptr inbounds [4 x i8], [4 x i8]* %d, i32 0, i32 %35
  store i8 %conv58, i8* %arrayidx60, align 1
  %36 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx61 = getelementptr inbounds %struct.key_set, %struct.key_set* %36, i32 0
  %k62 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx61, i32 0, i32 0
  %37 = load i32, i32* %i, align 4
  %add63 = add nsw i32 %37, 4
  %arrayidx64 = getelementptr inbounds [8 x i8], [8 x i8]* %k62, i32 0, i32 %add63
  %38 = load i8, i8* %arrayidx64, align 1
  %conv65 = zext i8 %38 to i32
  %and66 = and i32 %conv65, 240
  %shr67 = ashr i32 %and66, 4
  %39 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx68 = getelementptr inbounds %struct.key_set, %struct.key_set* %39, i32 0
  %d69 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx68, i32 0, i32 2
  %40 = load i32, i32* %i, align 4
  %arrayidx70 = getelementptr inbounds [4 x i8], [4 x i8]* %d69, i32 0, i32 %40
  %41 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %41 to i32
  %or72 = or i32 %conv71, %shr67
  %conv73 = trunc i32 %or72 to i8
  store i8 %conv73, i8* %arrayidx70, align 1
  br label %for.inc74

for.inc74:                                        ; preds = %for.body51
  %42 = load i32, i32* %i, align 4
  %inc75 = add nsw i32 %42, 1
  store i32 %inc75, i32* %i, align 4
  br label %for.cond48

for.end76:                                        ; preds = %for.cond48
  %43 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx77 = getelementptr inbounds %struct.key_set, %struct.key_set* %43, i32 0
  %k78 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx77, i32 0, i32 0
  %arrayidx79 = getelementptr inbounds [8 x i8], [8 x i8]* %k78, i32 0, i32 6
  %44 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %44 to i32
  %and81 = and i32 %conv80, 15
  %shl82 = shl i32 %and81, 4
  %conv83 = trunc i32 %shl82 to i8
  %45 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %arrayidx84 = getelementptr inbounds %struct.key_set, %struct.key_set* %45, i32 0
  %d85 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx84, i32 0, i32 2
  %arrayidx86 = getelementptr inbounds [4 x i8], [4 x i8]* %d85, i32 0, i32 3
  store i8 %conv83, i8* %arrayidx86, align 1
  store i32 1, i32* %i, align 4
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc350, %for.end76
  %46 = load i32, i32* %i, align 4
  %cmp88 = icmp slt i32 %46, 17
  br i1 %cmp88, label %for.body90, label %for.end352

for.body90:                                       ; preds = %for.cond87
  store i32 0, i32* %j, align 4
  br label %for.cond91

for.cond91:                                       ; preds = %for.inc109, %for.body90
  %47 = load i32, i32* %j, align 4
  %cmp92 = icmp slt i32 %47, 4
  br i1 %cmp92, label %for.body94, label %for.end111

for.body94:                                       ; preds = %for.cond91
  %48 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %49 = load i32, i32* %i, align 4
  %sub95 = sub nsw i32 %49, 1
  %arrayidx96 = getelementptr inbounds %struct.key_set, %struct.key_set* %48, i32 %sub95
  %c97 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx96, i32 0, i32 1
  %50 = load i32, i32* %j, align 4
  %arrayidx98 = getelementptr inbounds [4 x i8], [4 x i8]* %c97, i32 0, i32 %50
  %51 = load i8, i8* %arrayidx98, align 1
  %52 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %53 = load i32, i32* %i, align 4
  %arrayidx99 = getelementptr inbounds %struct.key_set, %struct.key_set* %52, i32 %53
  %c100 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx99, i32 0, i32 1
  %54 = load i32, i32* %j, align 4
  %arrayidx101 = getelementptr inbounds [4 x i8], [4 x i8]* %c100, i32 0, i32 %54
  store i8 %51, i8* %arrayidx101, align 1
  %55 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %56 = load i32, i32* %i, align 4
  %sub102 = sub nsw i32 %56, 1
  %arrayidx103 = getelementptr inbounds %struct.key_set, %struct.key_set* %55, i32 %sub102
  %d104 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx103, i32 0, i32 2
  %57 = load i32, i32* %j, align 4
  %arrayidx105 = getelementptr inbounds [4 x i8], [4 x i8]* %d104, i32 0, i32 %57
  %58 = load i8, i8* %arrayidx105, align 1
  %59 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %60 = load i32, i32* %i, align 4
  %arrayidx106 = getelementptr inbounds %struct.key_set, %struct.key_set* %59, i32 %60
  %d107 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx106, i32 0, i32 2
  %61 = load i32, i32* %j, align 4
  %arrayidx108 = getelementptr inbounds [4 x i8], [4 x i8]* %d107, i32 0, i32 %61
  store i8 %58, i8* %arrayidx108, align 1
  br label %for.inc109

for.inc109:                                       ; preds = %for.body94
  %62 = load i32, i32* %j, align 4
  %inc110 = add nsw i32 %62, 1
  store i32 %inc110, i32* %j, align 4
  br label %for.cond91

for.end111:                                       ; preds = %for.cond91
  %63 = load i32, i32* %i, align 4
  %arrayidx112 = getelementptr inbounds [17 x i32], [17 x i32]* @key_shift_sizes, i32 0, i32 %63
  %64 = load i32, i32* %arrayidx112, align 4
  store i32 %64, i32* %shift_size, align 4
  %65 = load i32, i32* %shift_size, align 4
  %cmp113 = icmp eq i32 %65, 1
  br i1 %cmp113, label %if.then, label %if.else

if.then:                                          ; preds = %for.end111
  store i8 -128, i8* %shift_byte, align 1
  br label %if.end

if.else:                                          ; preds = %for.end111
  store i8 -64, i8* %shift_byte, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %66 = load i8, i8* %shift_byte, align 1
  %conv115 = zext i8 %66 to i32
  %67 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %68 = load i32, i32* %i, align 4
  %arrayidx116 = getelementptr inbounds %struct.key_set, %struct.key_set* %67, i32 %68
  %c117 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx116, i32 0, i32 1
  %arrayidx118 = getelementptr inbounds [4 x i8], [4 x i8]* %c117, i32 0, i32 0
  %69 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %69 to i32
  %and120 = and i32 %conv115, %conv119
  %conv121 = trunc i32 %and120 to i8
  store i8 %conv121, i8* %first_shift_bits, align 1
  %70 = load i8, i8* %shift_byte, align 1
  %conv122 = zext i8 %70 to i32
  %71 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %72 = load i32, i32* %i, align 4
  %arrayidx123 = getelementptr inbounds %struct.key_set, %struct.key_set* %71, i32 %72
  %c124 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx123, i32 0, i32 1
  %arrayidx125 = getelementptr inbounds [4 x i8], [4 x i8]* %c124, i32 0, i32 1
  %73 = load i8, i8* %arrayidx125, align 1
  %conv126 = zext i8 %73 to i32
  %and127 = and i32 %conv122, %conv126
  %conv128 = trunc i32 %and127 to i8
  store i8 %conv128, i8* %second_shift_bits, align 1
  %74 = load i8, i8* %shift_byte, align 1
  %conv129 = zext i8 %74 to i32
  %75 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %76 = load i32, i32* %i, align 4
  %arrayidx130 = getelementptr inbounds %struct.key_set, %struct.key_set* %75, i32 %76
  %c131 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx130, i32 0, i32 1
  %arrayidx132 = getelementptr inbounds [4 x i8], [4 x i8]* %c131, i32 0, i32 2
  %77 = load i8, i8* %arrayidx132, align 1
  %conv133 = zext i8 %77 to i32
  %and134 = and i32 %conv129, %conv133
  %conv135 = trunc i32 %and134 to i8
  store i8 %conv135, i8* %third_shift_bits, align 1
  %78 = load i8, i8* %shift_byte, align 1
  %conv136 = zext i8 %78 to i32
  %79 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %80 = load i32, i32* %i, align 4
  %arrayidx137 = getelementptr inbounds %struct.key_set, %struct.key_set* %79, i32 %80
  %c138 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx137, i32 0, i32 1
  %arrayidx139 = getelementptr inbounds [4 x i8], [4 x i8]* %c138, i32 0, i32 3
  %81 = load i8, i8* %arrayidx139, align 1
  %conv140 = zext i8 %81 to i32
  %and141 = and i32 %conv136, %conv140
  %conv142 = trunc i32 %and141 to i8
  store i8 %conv142, i8* %fourth_shift_bits, align 1
  %82 = load i32, i32* %shift_size, align 4
  %83 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %84 = load i32, i32* %i, align 4
  %arrayidx143 = getelementptr inbounds %struct.key_set, %struct.key_set* %83, i32 %84
  %c144 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx143, i32 0, i32 1
  %arrayidx145 = getelementptr inbounds [4 x i8], [4 x i8]* %c144, i32 0, i32 0
  %85 = load i8, i8* %arrayidx145, align 1
  %conv146 = zext i8 %85 to i32
  %shl147 = shl i32 %conv146, %82
  %conv148 = trunc i32 %shl147 to i8
  store i8 %conv148, i8* %arrayidx145, align 1
  %86 = load i8, i8* %second_shift_bits, align 1
  %conv149 = zext i8 %86 to i32
  %87 = load i32, i32* %shift_size, align 4
  %sub150 = sub nsw i32 8, %87
  %shr151 = ashr i32 %conv149, %sub150
  %88 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %89 = load i32, i32* %i, align 4
  %arrayidx152 = getelementptr inbounds %struct.key_set, %struct.key_set* %88, i32 %89
  %c153 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx152, i32 0, i32 1
  %arrayidx154 = getelementptr inbounds [4 x i8], [4 x i8]* %c153, i32 0, i32 0
  %90 = load i8, i8* %arrayidx154, align 1
  %conv155 = zext i8 %90 to i32
  %or156 = or i32 %conv155, %shr151
  %conv157 = trunc i32 %or156 to i8
  store i8 %conv157, i8* %arrayidx154, align 1
  %91 = load i32, i32* %shift_size, align 4
  %92 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %93 = load i32, i32* %i, align 4
  %arrayidx158 = getelementptr inbounds %struct.key_set, %struct.key_set* %92, i32 %93
  %c159 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx158, i32 0, i32 1
  %arrayidx160 = getelementptr inbounds [4 x i8], [4 x i8]* %c159, i32 0, i32 1
  %94 = load i8, i8* %arrayidx160, align 1
  %conv161 = zext i8 %94 to i32
  %shl162 = shl i32 %conv161, %91
  %conv163 = trunc i32 %shl162 to i8
  store i8 %conv163, i8* %arrayidx160, align 1
  %95 = load i8, i8* %third_shift_bits, align 1
  %conv164 = zext i8 %95 to i32
  %96 = load i32, i32* %shift_size, align 4
  %sub165 = sub nsw i32 8, %96
  %shr166 = ashr i32 %conv164, %sub165
  %97 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %98 = load i32, i32* %i, align 4
  %arrayidx167 = getelementptr inbounds %struct.key_set, %struct.key_set* %97, i32 %98
  %c168 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx167, i32 0, i32 1
  %arrayidx169 = getelementptr inbounds [4 x i8], [4 x i8]* %c168, i32 0, i32 1
  %99 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %99 to i32
  %or171 = or i32 %conv170, %shr166
  %conv172 = trunc i32 %or171 to i8
  store i8 %conv172, i8* %arrayidx169, align 1
  %100 = load i32, i32* %shift_size, align 4
  %101 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %102 = load i32, i32* %i, align 4
  %arrayidx173 = getelementptr inbounds %struct.key_set, %struct.key_set* %101, i32 %102
  %c174 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx173, i32 0, i32 1
  %arrayidx175 = getelementptr inbounds [4 x i8], [4 x i8]* %c174, i32 0, i32 2
  %103 = load i8, i8* %arrayidx175, align 1
  %conv176 = zext i8 %103 to i32
  %shl177 = shl i32 %conv176, %100
  %conv178 = trunc i32 %shl177 to i8
  store i8 %conv178, i8* %arrayidx175, align 1
  %104 = load i8, i8* %fourth_shift_bits, align 1
  %conv179 = zext i8 %104 to i32
  %105 = load i32, i32* %shift_size, align 4
  %sub180 = sub nsw i32 8, %105
  %shr181 = ashr i32 %conv179, %sub180
  %106 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %107 = load i32, i32* %i, align 4
  %arrayidx182 = getelementptr inbounds %struct.key_set, %struct.key_set* %106, i32 %107
  %c183 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx182, i32 0, i32 1
  %arrayidx184 = getelementptr inbounds [4 x i8], [4 x i8]* %c183, i32 0, i32 2
  %108 = load i8, i8* %arrayidx184, align 1
  %conv185 = zext i8 %108 to i32
  %or186 = or i32 %conv185, %shr181
  %conv187 = trunc i32 %or186 to i8
  store i8 %conv187, i8* %arrayidx184, align 1
  %109 = load i32, i32* %shift_size, align 4
  %110 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %111 = load i32, i32* %i, align 4
  %arrayidx188 = getelementptr inbounds %struct.key_set, %struct.key_set* %110, i32 %111
  %c189 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx188, i32 0, i32 1
  %arrayidx190 = getelementptr inbounds [4 x i8], [4 x i8]* %c189, i32 0, i32 3
  %112 = load i8, i8* %arrayidx190, align 1
  %conv191 = zext i8 %112 to i32
  %shl192 = shl i32 %conv191, %109
  %conv193 = trunc i32 %shl192 to i8
  store i8 %conv193, i8* %arrayidx190, align 1
  %113 = load i8, i8* %first_shift_bits, align 1
  %conv194 = zext i8 %113 to i32
  %114 = load i32, i32* %shift_size, align 4
  %sub195 = sub nsw i32 4, %114
  %shr196 = ashr i32 %conv194, %sub195
  %115 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %116 = load i32, i32* %i, align 4
  %arrayidx197 = getelementptr inbounds %struct.key_set, %struct.key_set* %115, i32 %116
  %c198 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx197, i32 0, i32 1
  %arrayidx199 = getelementptr inbounds [4 x i8], [4 x i8]* %c198, i32 0, i32 3
  %117 = load i8, i8* %arrayidx199, align 1
  %conv200 = zext i8 %117 to i32
  %or201 = or i32 %conv200, %shr196
  %conv202 = trunc i32 %or201 to i8
  store i8 %conv202, i8* %arrayidx199, align 1
  %118 = load i8, i8* %shift_byte, align 1
  %conv203 = zext i8 %118 to i32
  %119 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %120 = load i32, i32* %i, align 4
  %arrayidx204 = getelementptr inbounds %struct.key_set, %struct.key_set* %119, i32 %120
  %d205 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx204, i32 0, i32 2
  %arrayidx206 = getelementptr inbounds [4 x i8], [4 x i8]* %d205, i32 0, i32 0
  %121 = load i8, i8* %arrayidx206, align 1
  %conv207 = zext i8 %121 to i32
  %and208 = and i32 %conv203, %conv207
  %conv209 = trunc i32 %and208 to i8
  store i8 %conv209, i8* %first_shift_bits, align 1
  %122 = load i8, i8* %shift_byte, align 1
  %conv210 = zext i8 %122 to i32
  %123 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %124 = load i32, i32* %i, align 4
  %arrayidx211 = getelementptr inbounds %struct.key_set, %struct.key_set* %123, i32 %124
  %d212 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx211, i32 0, i32 2
  %arrayidx213 = getelementptr inbounds [4 x i8], [4 x i8]* %d212, i32 0, i32 1
  %125 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %125 to i32
  %and215 = and i32 %conv210, %conv214
  %conv216 = trunc i32 %and215 to i8
  store i8 %conv216, i8* %second_shift_bits, align 1
  %126 = load i8, i8* %shift_byte, align 1
  %conv217 = zext i8 %126 to i32
  %127 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %128 = load i32, i32* %i, align 4
  %arrayidx218 = getelementptr inbounds %struct.key_set, %struct.key_set* %127, i32 %128
  %d219 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx218, i32 0, i32 2
  %arrayidx220 = getelementptr inbounds [4 x i8], [4 x i8]* %d219, i32 0, i32 2
  %129 = load i8, i8* %arrayidx220, align 1
  %conv221 = zext i8 %129 to i32
  %and222 = and i32 %conv217, %conv221
  %conv223 = trunc i32 %and222 to i8
  store i8 %conv223, i8* %third_shift_bits, align 1
  %130 = load i8, i8* %shift_byte, align 1
  %conv224 = zext i8 %130 to i32
  %131 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %132 = load i32, i32* %i, align 4
  %arrayidx225 = getelementptr inbounds %struct.key_set, %struct.key_set* %131, i32 %132
  %d226 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx225, i32 0, i32 2
  %arrayidx227 = getelementptr inbounds [4 x i8], [4 x i8]* %d226, i32 0, i32 3
  %133 = load i8, i8* %arrayidx227, align 1
  %conv228 = zext i8 %133 to i32
  %and229 = and i32 %conv224, %conv228
  %conv230 = trunc i32 %and229 to i8
  store i8 %conv230, i8* %fourth_shift_bits, align 1
  %134 = load i32, i32* %shift_size, align 4
  %135 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %136 = load i32, i32* %i, align 4
  %arrayidx231 = getelementptr inbounds %struct.key_set, %struct.key_set* %135, i32 %136
  %d232 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx231, i32 0, i32 2
  %arrayidx233 = getelementptr inbounds [4 x i8], [4 x i8]* %d232, i32 0, i32 0
  %137 = load i8, i8* %arrayidx233, align 1
  %conv234 = zext i8 %137 to i32
  %shl235 = shl i32 %conv234, %134
  %conv236 = trunc i32 %shl235 to i8
  store i8 %conv236, i8* %arrayidx233, align 1
  %138 = load i8, i8* %second_shift_bits, align 1
  %conv237 = zext i8 %138 to i32
  %139 = load i32, i32* %shift_size, align 4
  %sub238 = sub nsw i32 8, %139
  %shr239 = ashr i32 %conv237, %sub238
  %140 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %141 = load i32, i32* %i, align 4
  %arrayidx240 = getelementptr inbounds %struct.key_set, %struct.key_set* %140, i32 %141
  %d241 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx240, i32 0, i32 2
  %arrayidx242 = getelementptr inbounds [4 x i8], [4 x i8]* %d241, i32 0, i32 0
  %142 = load i8, i8* %arrayidx242, align 1
  %conv243 = zext i8 %142 to i32
  %or244 = or i32 %conv243, %shr239
  %conv245 = trunc i32 %or244 to i8
  store i8 %conv245, i8* %arrayidx242, align 1
  %143 = load i32, i32* %shift_size, align 4
  %144 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %145 = load i32, i32* %i, align 4
  %arrayidx246 = getelementptr inbounds %struct.key_set, %struct.key_set* %144, i32 %145
  %d247 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx246, i32 0, i32 2
  %arrayidx248 = getelementptr inbounds [4 x i8], [4 x i8]* %d247, i32 0, i32 1
  %146 = load i8, i8* %arrayidx248, align 1
  %conv249 = zext i8 %146 to i32
  %shl250 = shl i32 %conv249, %143
  %conv251 = trunc i32 %shl250 to i8
  store i8 %conv251, i8* %arrayidx248, align 1
  %147 = load i8, i8* %third_shift_bits, align 1
  %conv252 = zext i8 %147 to i32
  %148 = load i32, i32* %shift_size, align 4
  %sub253 = sub nsw i32 8, %148
  %shr254 = ashr i32 %conv252, %sub253
  %149 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %150 = load i32, i32* %i, align 4
  %arrayidx255 = getelementptr inbounds %struct.key_set, %struct.key_set* %149, i32 %150
  %d256 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx255, i32 0, i32 2
  %arrayidx257 = getelementptr inbounds [4 x i8], [4 x i8]* %d256, i32 0, i32 1
  %151 = load i8, i8* %arrayidx257, align 1
  %conv258 = zext i8 %151 to i32
  %or259 = or i32 %conv258, %shr254
  %conv260 = trunc i32 %or259 to i8
  store i8 %conv260, i8* %arrayidx257, align 1
  %152 = load i32, i32* %shift_size, align 4
  %153 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %154 = load i32, i32* %i, align 4
  %arrayidx261 = getelementptr inbounds %struct.key_set, %struct.key_set* %153, i32 %154
  %d262 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx261, i32 0, i32 2
  %arrayidx263 = getelementptr inbounds [4 x i8], [4 x i8]* %d262, i32 0, i32 2
  %155 = load i8, i8* %arrayidx263, align 1
  %conv264 = zext i8 %155 to i32
  %shl265 = shl i32 %conv264, %152
  %conv266 = trunc i32 %shl265 to i8
  store i8 %conv266, i8* %arrayidx263, align 1
  %156 = load i8, i8* %fourth_shift_bits, align 1
  %conv267 = zext i8 %156 to i32
  %157 = load i32, i32* %shift_size, align 4
  %sub268 = sub nsw i32 8, %157
  %shr269 = ashr i32 %conv267, %sub268
  %158 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %159 = load i32, i32* %i, align 4
  %arrayidx270 = getelementptr inbounds %struct.key_set, %struct.key_set* %158, i32 %159
  %d271 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx270, i32 0, i32 2
  %arrayidx272 = getelementptr inbounds [4 x i8], [4 x i8]* %d271, i32 0, i32 2
  %160 = load i8, i8* %arrayidx272, align 1
  %conv273 = zext i8 %160 to i32
  %or274 = or i32 %conv273, %shr269
  %conv275 = trunc i32 %or274 to i8
  store i8 %conv275, i8* %arrayidx272, align 1
  %161 = load i32, i32* %shift_size, align 4
  %162 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %163 = load i32, i32* %i, align 4
  %arrayidx276 = getelementptr inbounds %struct.key_set, %struct.key_set* %162, i32 %163
  %d277 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx276, i32 0, i32 2
  %arrayidx278 = getelementptr inbounds [4 x i8], [4 x i8]* %d277, i32 0, i32 3
  %164 = load i8, i8* %arrayidx278, align 1
  %conv279 = zext i8 %164 to i32
  %shl280 = shl i32 %conv279, %161
  %conv281 = trunc i32 %shl280 to i8
  store i8 %conv281, i8* %arrayidx278, align 1
  %165 = load i8, i8* %first_shift_bits, align 1
  %conv282 = zext i8 %165 to i32
  %166 = load i32, i32* %shift_size, align 4
  %sub283 = sub nsw i32 4, %166
  %shr284 = ashr i32 %conv282, %sub283
  %167 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %168 = load i32, i32* %i, align 4
  %arrayidx285 = getelementptr inbounds %struct.key_set, %struct.key_set* %167, i32 %168
  %d286 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx285, i32 0, i32 2
  %arrayidx287 = getelementptr inbounds [4 x i8], [4 x i8]* %d286, i32 0, i32 3
  %169 = load i8, i8* %arrayidx287, align 1
  %conv288 = zext i8 %169 to i32
  %or289 = or i32 %conv288, %shr284
  %conv290 = trunc i32 %or289 to i8
  store i8 %conv290, i8* %arrayidx287, align 1
  store i32 0, i32* %j, align 4
  br label %for.cond291

for.cond291:                                      ; preds = %for.inc347, %if.end
  %170 = load i32, i32* %j, align 4
  %cmp292 = icmp slt i32 %170, 48
  br i1 %cmp292, label %for.body294, label %for.end349

for.body294:                                      ; preds = %for.cond291
  %171 = load i32, i32* %j, align 4
  %arrayidx295 = getelementptr inbounds [48 x i32], [48 x i32]* @sub_key_permutation, i32 0, i32 %171
  %172 = load i32, i32* %arrayidx295, align 4
  store i32 %172, i32* %shift_size, align 4
  %173 = load i32, i32* %shift_size, align 4
  %cmp296 = icmp sle i32 %173, 28
  br i1 %cmp296, label %if.then298, label %if.else317

if.then298:                                       ; preds = %for.body294
  %174 = load i32, i32* %shift_size, align 4
  %sub299 = sub nsw i32 %174, 1
  %rem300 = srem i32 %sub299, 8
  %shr301 = ashr i32 128, %rem300
  %conv302 = trunc i32 %shr301 to i8
  store i8 %conv302, i8* %shift_byte, align 1
  %175 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %176 = load i32, i32* %i, align 4
  %arrayidx303 = getelementptr inbounds %struct.key_set, %struct.key_set* %175, i32 %176
  %c304 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx303, i32 0, i32 1
  %177 = load i32, i32* %shift_size, align 4
  %sub305 = sub nsw i32 %177, 1
  %div306 = sdiv i32 %sub305, 8
  %arrayidx307 = getelementptr inbounds [4 x i8], [4 x i8]* %c304, i32 0, i32 %div306
  %178 = load i8, i8* %arrayidx307, align 1
  %conv308 = zext i8 %178 to i32
  %179 = load i8, i8* %shift_byte, align 1
  %conv309 = zext i8 %179 to i32
  %and310 = and i32 %conv309, %conv308
  %conv311 = trunc i32 %and310 to i8
  store i8 %conv311, i8* %shift_byte, align 1
  %180 = load i32, i32* %shift_size, align 4
  %sub312 = sub nsw i32 %180, 1
  %rem313 = srem i32 %sub312, 8
  %181 = load i8, i8* %shift_byte, align 1
  %conv314 = zext i8 %181 to i32
  %shl315 = shl i32 %conv314, %rem313
  %conv316 = trunc i32 %shl315 to i8
  store i8 %conv316, i8* %shift_byte, align 1
  br label %if.end336

if.else317:                                       ; preds = %for.body294
  %182 = load i32, i32* %shift_size, align 4
  %sub318 = sub nsw i32 %182, 29
  %rem319 = srem i32 %sub318, 8
  %shr320 = ashr i32 128, %rem319
  %conv321 = trunc i32 %shr320 to i8
  store i8 %conv321, i8* %shift_byte, align 1
  %183 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %184 = load i32, i32* %i, align 4
  %arrayidx322 = getelementptr inbounds %struct.key_set, %struct.key_set* %183, i32 %184
  %d323 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx322, i32 0, i32 2
  %185 = load i32, i32* %shift_size, align 4
  %sub324 = sub nsw i32 %185, 29
  %div325 = sdiv i32 %sub324, 8
  %arrayidx326 = getelementptr inbounds [4 x i8], [4 x i8]* %d323, i32 0, i32 %div325
  %186 = load i8, i8* %arrayidx326, align 1
  %conv327 = zext i8 %186 to i32
  %187 = load i8, i8* %shift_byte, align 1
  %conv328 = zext i8 %187 to i32
  %and329 = and i32 %conv328, %conv327
  %conv330 = trunc i32 %and329 to i8
  store i8 %conv330, i8* %shift_byte, align 1
  %188 = load i32, i32* %shift_size, align 4
  %sub331 = sub nsw i32 %188, 29
  %rem332 = srem i32 %sub331, 8
  %189 = load i8, i8* %shift_byte, align 1
  %conv333 = zext i8 %189 to i32
  %shl334 = shl i32 %conv333, %rem332
  %conv335 = trunc i32 %shl334 to i8
  store i8 %conv335, i8* %shift_byte, align 1
  br label %if.end336

if.end336:                                        ; preds = %if.else317, %if.then298
  %190 = load i8, i8* %shift_byte, align 1
  %conv337 = zext i8 %190 to i32
  %191 = load i32, i32* %j, align 4
  %rem338 = srem i32 %191, 8
  %shr339 = ashr i32 %conv337, %rem338
  %192 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %193 = load i32, i32* %i, align 4
  %arrayidx340 = getelementptr inbounds %struct.key_set, %struct.key_set* %192, i32 %193
  %k341 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx340, i32 0, i32 0
  %194 = load i32, i32* %j, align 4
  %div342 = sdiv i32 %194, 8
  %arrayidx343 = getelementptr inbounds [8 x i8], [8 x i8]* %k341, i32 0, i32 %div342
  %195 = load i8, i8* %arrayidx343, align 1
  %conv344 = zext i8 %195 to i32
  %or345 = or i32 %conv344, %shr339
  %conv346 = trunc i32 %or345 to i8
  store i8 %conv346, i8* %arrayidx343, align 1
  br label %for.inc347

for.inc347:                                       ; preds = %if.end336
  %196 = load i32, i32* %j, align 4
  %inc348 = add nsw i32 %196, 1
  store i32 %inc348, i32* %j, align 4
  br label %for.cond291

for.end349:                                       ; preds = %for.cond291
  br label %for.inc350

for.inc350:                                       ; preds = %for.end349
  %197 = load i32, i32* %i, align 4
  %inc351 = add nsw i32 %197, 1
  store i32 %inc351, i32* %i, align 4
  br label %for.cond87

for.end352:                                       ; preds = %for.cond87
  ret void
}

; Function Attrs: noinline nounwind optnone sspstrong
define dso_local void @process_message(i8* %message_piece, i8* %processed_piece, %struct.key_set* %key_sets, i32 %mode) #2 {
entry:
  %mode.addr = alloca i32, align 4
  %key_sets.addr = alloca %struct.key_set*, align 4
  %processed_piece.addr = alloca i8*, align 4
  %message_piece.addr = alloca i8*, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %shift_size = alloca i32, align 4
  %shift_byte = alloca i8, align 1
  %initial_permutation = alloca [8 x i8], align 1
  %l = alloca [4 x i8], align 1
  %r = alloca [4 x i8], align 1
  %ln = alloca [4 x i8], align 1
  %rn = alloca [4 x i8], align 1
  %er = alloca [6 x i8], align 1
  %ser = alloca [4 x i8], align 1
  %key_index = alloca i32, align 4
  %row = alloca i8, align 1
  %column = alloca i8, align 1
  %pre_end_permutation = alloca [8 x i8], align 1
  store i32 %mode, i32* %mode.addr, align 4
  store %struct.key_set* %key_sets, %struct.key_set** %key_sets.addr, align 4
  store i8* %processed_piece, i8** %processed_piece.addr, align 4
  store i8* %message_piece, i8** %message_piece.addr, align 4
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %initial_permutation, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay, i8 0, i32 8, i1 false)
  %0 = load i8*, i8** %processed_piece.addr, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %0, i8 0, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 64
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* @initial_message_permutation, i32 0, i32 %2
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %shift_size, align 4
  %4 = load i32, i32* %shift_size, align 4
  %sub = sub nsw i32 %4, 1
  %rem = srem i32 %sub, 8
  %shr = ashr i32 128, %rem
  %conv = trunc i32 %shr to i8
  store i8 %conv, i8* %shift_byte, align 1
  %5 = load i8*, i8** %message_piece.addr, align 4
  %6 = load i32, i32* %shift_size, align 4
  %sub1 = sub nsw i32 %6, 1
  %div = sdiv i32 %sub1, 8
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i32 %div
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  %8 = load i8, i8* %shift_byte, align 1
  %conv4 = zext i8 %8 to i32
  %and = and i32 %conv4, %conv3
  %conv5 = trunc i32 %and to i8
  store i8 %conv5, i8* %shift_byte, align 1
  %9 = load i32, i32* %shift_size, align 4
  %sub6 = sub nsw i32 %9, 1
  %rem7 = srem i32 %sub6, 8
  %10 = load i8, i8* %shift_byte, align 1
  %conv8 = zext i8 %10 to i32
  %shl = shl i32 %conv8, %rem7
  %conv9 = trunc i32 %shl to i8
  store i8 %conv9, i8* %shift_byte, align 1
  %11 = load i8, i8* %shift_byte, align 1
  %conv10 = zext i8 %11 to i32
  %12 = load i32, i32* %i, align 4
  %rem11 = srem i32 %12, 8
  %shr12 = ashr i32 %conv10, %rem11
  %13 = load i32, i32* %i, align 4
  %div13 = sdiv i32 %13, 8
  %arrayidx14 = getelementptr inbounds [8 x i8], [8 x i8]* %initial_permutation, i32 0, i32 %div13
  %14 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %14 to i32
  %or = or i32 %conv15, %shr12
  %conv16 = trunc i32 %or to i8
  store i8 %conv16, i8* %arrayidx14, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc25, %for.end
  %16 = load i32, i32* %i, align 4
  %cmp18 = icmp slt i32 %16, 4
  br i1 %cmp18, label %for.body20, label %for.end27

for.body20:                                       ; preds = %for.cond17
  %17 = load i32, i32* %i, align 4
  %arrayidx21 = getelementptr inbounds [8 x i8], [8 x i8]* %initial_permutation, i32 0, i32 %17
  %18 = load i8, i8* %arrayidx21, align 1
  %19 = load i32, i32* %i, align 4
  %arrayidx22 = getelementptr inbounds [4 x i8], [4 x i8]* %l, i32 0, i32 %19
  store i8 %18, i8* %arrayidx22, align 1
  %20 = load i32, i32* %i, align 4
  %add = add nsw i32 %20, 4
  %arrayidx23 = getelementptr inbounds [8 x i8], [8 x i8]* %initial_permutation, i32 0, i32 %add
  %21 = load i8, i8* %arrayidx23, align 1
  %22 = load i32, i32* %i, align 4
  %arrayidx24 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 %22
  store i8 %21, i8* %arrayidx24, align 1
  br label %for.inc25

for.inc25:                                        ; preds = %for.body20
  %23 = load i32, i32* %i, align 4
  %inc26 = add nsw i32 %23, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond17

for.end27:                                        ; preds = %for.cond17
  store i32 1, i32* %k, align 4
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc439, %for.end27
  %24 = load i32, i32* %k, align 4
  %cmp29 = icmp sle i32 %24, 16
  br i1 %cmp29, label %for.body31, label %for.end441

for.body31:                                       ; preds = %for.cond28
  %arraydecay32 = getelementptr inbounds [4 x i8], [4 x i8]* %ln, i32 0, i32 0
  %arraydecay33 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 1 %arraydecay32, i8* align 1 %arraydecay33, i32 4, i1 false)
  %arraydecay34 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  call void @llvm.memset.p0i8.i32(i8* align 1 %arraydecay34, i8 0, i32 6, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc64, %for.body31
  %25 = load i32, i32* %i, align 4
  %cmp36 = icmp slt i32 %25, 48
  br i1 %cmp36, label %for.body38, label %for.end66

for.body38:                                       ; preds = %for.cond35
  %26 = load i32, i32* %i, align 4
  %arrayidx39 = getelementptr inbounds [48 x i32], [48 x i32]* @message_expansion, i32 0, i32 %26
  %27 = load i32, i32* %arrayidx39, align 4
  store i32 %27, i32* %shift_size, align 4
  %28 = load i32, i32* %shift_size, align 4
  %sub40 = sub nsw i32 %28, 1
  %rem41 = srem i32 %sub40, 8
  %shr42 = ashr i32 128, %rem41
  %conv43 = trunc i32 %shr42 to i8
  store i8 %conv43, i8* %shift_byte, align 1
  %29 = load i32, i32* %shift_size, align 4
  %sub44 = sub nsw i32 %29, 1
  %div45 = sdiv i32 %sub44, 8
  %arrayidx46 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 %div45
  %30 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %30 to i32
  %31 = load i8, i8* %shift_byte, align 1
  %conv48 = zext i8 %31 to i32
  %and49 = and i32 %conv48, %conv47
  %conv50 = trunc i32 %and49 to i8
  store i8 %conv50, i8* %shift_byte, align 1
  %32 = load i32, i32* %shift_size, align 4
  %sub51 = sub nsw i32 %32, 1
  %rem52 = srem i32 %sub51, 8
  %33 = load i8, i8* %shift_byte, align 1
  %conv53 = zext i8 %33 to i32
  %shl54 = shl i32 %conv53, %rem52
  %conv55 = trunc i32 %shl54 to i8
  store i8 %conv55, i8* %shift_byte, align 1
  %34 = load i8, i8* %shift_byte, align 1
  %conv56 = zext i8 %34 to i32
  %35 = load i32, i32* %i, align 4
  %rem57 = srem i32 %35, 8
  %shr58 = ashr i32 %conv56, %rem57
  %36 = load i32, i32* %i, align 4
  %div59 = sdiv i32 %36, 8
  %arrayidx60 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %div59
  %37 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %37 to i32
  %or62 = or i32 %conv61, %shr58
  %conv63 = trunc i32 %or62 to i8
  store i8 %conv63, i8* %arrayidx60, align 1
  br label %for.inc64

for.inc64:                                        ; preds = %for.body38
  %38 = load i32, i32* %i, align 4
  %inc65 = add nsw i32 %38, 1
  store i32 %inc65, i32* %i, align 4
  br label %for.cond35

for.end66:                                        ; preds = %for.cond35
  %39 = load i32, i32* %mode.addr, align 4
  %cmp67 = icmp eq i32 %39, 0
  br i1 %cmp67, label %if.then, label %if.else

if.then:                                          ; preds = %for.end66
  %40 = load i32, i32* %k, align 4
  %sub69 = sub nsw i32 17, %40
  store i32 %sub69, i32* %key_index, align 4
  br label %if.end

if.else:                                          ; preds = %for.end66
  %41 = load i32, i32* %k, align 4
  store i32 %41, i32* %key_index, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %i, align 4
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc81, %if.end
  %42 = load i32, i32* %i, align 4
  %cmp71 = icmp slt i32 %42, 6
  br i1 %cmp71, label %for.body73, label %for.end83

for.body73:                                       ; preds = %for.cond70
  %43 = load %struct.key_set*, %struct.key_set** %key_sets.addr, align 4
  %44 = load i32, i32* %key_index, align 4
  %arrayidx74 = getelementptr inbounds %struct.key_set, %struct.key_set* %43, i32 %44
  %k75 = getelementptr inbounds %struct.key_set, %struct.key_set* %arrayidx74, i32 0, i32 0
  %45 = load i32, i32* %i, align 4
  %arrayidx76 = getelementptr inbounds [8 x i8], [8 x i8]* %k75, i32 0, i32 %45
  %46 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %46 to i32
  %47 = load i32, i32* %i, align 4
  %arrayidx78 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 %47
  %48 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %48 to i32
  %xor = xor i32 %conv79, %conv77
  %conv80 = trunc i32 %xor to i8
  store i8 %conv80, i8* %arrayidx78, align 1
  br label %for.inc81

for.inc81:                                        ; preds = %for.body73
  %49 = load i32, i32* %i, align 4
  %inc82 = add nsw i32 %49, 1
  store i32 %inc82, i32* %i, align 4
  br label %for.cond70

for.end83:                                        ; preds = %for.cond70
  store i32 0, i32* %i, align 4
  br label %for.cond84

for.cond84:                                       ; preds = %for.inc89, %for.end83
  %50 = load i32, i32* %i, align 4
  %cmp85 = icmp slt i32 %50, 4
  br i1 %cmp85, label %for.body87, label %for.end91

for.body87:                                       ; preds = %for.cond84
  %51 = load i32, i32* %i, align 4
  %arrayidx88 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 %51
  store i8 0, i8* %arrayidx88, align 1
  br label %for.inc89

for.inc89:                                        ; preds = %for.body87
  %52 = load i32, i32* %i, align 4
  %inc90 = add nsw i32 %52, 1
  store i32 %inc90, i32* %i, align 4
  br label %for.cond84

for.end91:                                        ; preds = %for.cond84
  store i8 0, i8* %row, align 1
  %arrayidx92 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %53 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %53 to i32
  %and94 = and i32 %conv93, 128
  %shr95 = ashr i32 %and94, 6
  %54 = load i8, i8* %row, align 1
  %conv96 = zext i8 %54 to i32
  %or97 = or i32 %conv96, %shr95
  %conv98 = trunc i32 %or97 to i8
  store i8 %conv98, i8* %row, align 1
  %arrayidx99 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %55 = load i8, i8* %arrayidx99, align 1
  %conv100 = zext i8 %55 to i32
  %and101 = and i32 %conv100, 4
  %shr102 = ashr i32 %and101, 2
  %56 = load i8, i8* %row, align 1
  %conv103 = zext i8 %56 to i32
  %or104 = or i32 %conv103, %shr102
  %conv105 = trunc i32 %or104 to i8
  store i8 %conv105, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx106 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %57 = load i8, i8* %arrayidx106, align 1
  %conv107 = zext i8 %57 to i32
  %and108 = and i32 %conv107, 120
  %shr109 = ashr i32 %and108, 3
  %58 = load i8, i8* %column, align 1
  %conv110 = zext i8 %58 to i32
  %or111 = or i32 %conv110, %shr109
  %conv112 = trunc i32 %or111 to i8
  store i8 %conv112, i8* %column, align 1
  %59 = load i8, i8* %row, align 1
  %conv113 = zext i8 %59 to i32
  %mul = mul nsw i32 %conv113, 16
  %60 = load i8, i8* %column, align 1
  %conv114 = zext i8 %60 to i32
  %add115 = add nsw i32 %mul, %conv114
  %arrayidx116 = getelementptr inbounds [64 x i32], [64 x i32]* @S1, i32 0, i32 %add115
  %61 = load i32, i32* %arrayidx116, align 4
  %conv117 = trunc i32 %61 to i8
  %conv118 = zext i8 %conv117 to i32
  %shl119 = shl i32 %conv118, 4
  %arrayidx120 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 0
  %62 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %62 to i32
  %or122 = or i32 %conv121, %shl119
  %conv123 = trunc i32 %or122 to i8
  store i8 %conv123, i8* %arrayidx120, align 1
  store i8 0, i8* %row, align 1
  %arrayidx124 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %63 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %63 to i32
  %and126 = and i32 %conv125, 2
  %64 = load i8, i8* %row, align 1
  %conv127 = zext i8 %64 to i32
  %or128 = or i32 %conv127, %and126
  %conv129 = trunc i32 %or128 to i8
  store i8 %conv129, i8* %row, align 1
  %arrayidx130 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 1
  %65 = load i8, i8* %arrayidx130, align 1
  %conv131 = zext i8 %65 to i32
  %and132 = and i32 %conv131, 16
  %shr133 = ashr i32 %and132, 4
  %66 = load i8, i8* %row, align 1
  %conv134 = zext i8 %66 to i32
  %or135 = or i32 %conv134, %shr133
  %conv136 = trunc i32 %or135 to i8
  store i8 %conv136, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx137 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 0
  %67 = load i8, i8* %arrayidx137, align 1
  %conv138 = zext i8 %67 to i32
  %and139 = and i32 %conv138, 1
  %shl140 = shl i32 %and139, 3
  %68 = load i8, i8* %column, align 1
  %conv141 = zext i8 %68 to i32
  %or142 = or i32 %conv141, %shl140
  %conv143 = trunc i32 %or142 to i8
  store i8 %conv143, i8* %column, align 1
  %arrayidx144 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 1
  %69 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %69 to i32
  %and146 = and i32 %conv145, 224
  %shr147 = ashr i32 %and146, 5
  %70 = load i8, i8* %column, align 1
  %conv148 = zext i8 %70 to i32
  %or149 = or i32 %conv148, %shr147
  %conv150 = trunc i32 %or149 to i8
  store i8 %conv150, i8* %column, align 1
  %71 = load i8, i8* %row, align 1
  %conv151 = zext i8 %71 to i32
  %mul152 = mul nsw i32 %conv151, 16
  %72 = load i8, i8* %column, align 1
  %conv153 = zext i8 %72 to i32
  %add154 = add nsw i32 %mul152, %conv153
  %arrayidx155 = getelementptr inbounds [64 x i32], [64 x i32]* @S2, i32 0, i32 %add154
  %73 = load i32, i32* %arrayidx155, align 4
  %conv156 = trunc i32 %73 to i8
  %conv157 = zext i8 %conv156 to i32
  %arrayidx158 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 0
  %74 = load i8, i8* %arrayidx158, align 1
  %conv159 = zext i8 %74 to i32
  %or160 = or i32 %conv159, %conv157
  %conv161 = trunc i32 %or160 to i8
  store i8 %conv161, i8* %arrayidx158, align 1
  store i8 0, i8* %row, align 1
  %arrayidx162 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 1
  %75 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %75 to i32
  %and164 = and i32 %conv163, 8
  %shr165 = ashr i32 %and164, 2
  %76 = load i8, i8* %row, align 1
  %conv166 = zext i8 %76 to i32
  %or167 = or i32 %conv166, %shr165
  %conv168 = trunc i32 %or167 to i8
  store i8 %conv168, i8* %row, align 1
  %arrayidx169 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %77 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %77 to i32
  %and171 = and i32 %conv170, 64
  %shr172 = ashr i32 %and171, 6
  %78 = load i8, i8* %row, align 1
  %conv173 = zext i8 %78 to i32
  %or174 = or i32 %conv173, %shr172
  %conv175 = trunc i32 %or174 to i8
  store i8 %conv175, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx176 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 1
  %79 = load i8, i8* %arrayidx176, align 1
  %conv177 = zext i8 %79 to i32
  %and178 = and i32 %conv177, 7
  %shl179 = shl i32 %and178, 1
  %80 = load i8, i8* %column, align 1
  %conv180 = zext i8 %80 to i32
  %or181 = or i32 %conv180, %shl179
  %conv182 = trunc i32 %or181 to i8
  store i8 %conv182, i8* %column, align 1
  %arrayidx183 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %81 = load i8, i8* %arrayidx183, align 1
  %conv184 = zext i8 %81 to i32
  %and185 = and i32 %conv184, 128
  %shr186 = ashr i32 %and185, 7
  %82 = load i8, i8* %column, align 1
  %conv187 = zext i8 %82 to i32
  %or188 = or i32 %conv187, %shr186
  %conv189 = trunc i32 %or188 to i8
  store i8 %conv189, i8* %column, align 1
  %83 = load i8, i8* %row, align 1
  %conv190 = zext i8 %83 to i32
  %mul191 = mul nsw i32 %conv190, 16
  %84 = load i8, i8* %column, align 1
  %conv192 = zext i8 %84 to i32
  %add193 = add nsw i32 %mul191, %conv192
  %arrayidx194 = getelementptr inbounds [64 x i32], [64 x i32]* @S3, i32 0, i32 %add193
  %85 = load i32, i32* %arrayidx194, align 4
  %conv195 = trunc i32 %85 to i8
  %conv196 = zext i8 %conv195 to i32
  %shl197 = shl i32 %conv196, 4
  %arrayidx198 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 1
  %86 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %86 to i32
  %or200 = or i32 %conv199, %shl197
  %conv201 = trunc i32 %or200 to i8
  store i8 %conv201, i8* %arrayidx198, align 1
  store i8 0, i8* %row, align 1
  %arrayidx202 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %87 = load i8, i8* %arrayidx202, align 1
  %conv203 = zext i8 %87 to i32
  %and204 = and i32 %conv203, 32
  %shr205 = ashr i32 %and204, 4
  %88 = load i8, i8* %row, align 1
  %conv206 = zext i8 %88 to i32
  %or207 = or i32 %conv206, %shr205
  %conv208 = trunc i32 %or207 to i8
  store i8 %conv208, i8* %row, align 1
  %arrayidx209 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %89 = load i8, i8* %arrayidx209, align 1
  %conv210 = zext i8 %89 to i32
  %and211 = and i32 %conv210, 1
  %90 = load i8, i8* %row, align 1
  %conv212 = zext i8 %90 to i32
  %or213 = or i32 %conv212, %and211
  %conv214 = trunc i32 %or213 to i8
  store i8 %conv214, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx215 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 2
  %91 = load i8, i8* %arrayidx215, align 1
  %conv216 = zext i8 %91 to i32
  %and217 = and i32 %conv216, 30
  %shr218 = ashr i32 %and217, 1
  %92 = load i8, i8* %column, align 1
  %conv219 = zext i8 %92 to i32
  %or220 = or i32 %conv219, %shr218
  %conv221 = trunc i32 %or220 to i8
  store i8 %conv221, i8* %column, align 1
  %93 = load i8, i8* %row, align 1
  %conv222 = zext i8 %93 to i32
  %mul223 = mul nsw i32 %conv222, 16
  %94 = load i8, i8* %column, align 1
  %conv224 = zext i8 %94 to i32
  %add225 = add nsw i32 %mul223, %conv224
  %arrayidx226 = getelementptr inbounds [64 x i32], [64 x i32]* @S4, i32 0, i32 %add225
  %95 = load i32, i32* %arrayidx226, align 4
  %conv227 = trunc i32 %95 to i8
  %conv228 = zext i8 %conv227 to i32
  %arrayidx229 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 1
  %96 = load i8, i8* %arrayidx229, align 1
  %conv230 = zext i8 %96 to i32
  %or231 = or i32 %conv230, %conv228
  %conv232 = trunc i32 %or231 to i8
  store i8 %conv232, i8* %arrayidx229, align 1
  store i8 0, i8* %row, align 1
  %arrayidx233 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %97 = load i8, i8* %arrayidx233, align 1
  %conv234 = zext i8 %97 to i32
  %and235 = and i32 %conv234, 128
  %shr236 = ashr i32 %and235, 6
  %98 = load i8, i8* %row, align 1
  %conv237 = zext i8 %98 to i32
  %or238 = or i32 %conv237, %shr236
  %conv239 = trunc i32 %or238 to i8
  store i8 %conv239, i8* %row, align 1
  %arrayidx240 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %99 = load i8, i8* %arrayidx240, align 1
  %conv241 = zext i8 %99 to i32
  %and242 = and i32 %conv241, 4
  %shr243 = ashr i32 %and242, 2
  %100 = load i8, i8* %row, align 1
  %conv244 = zext i8 %100 to i32
  %or245 = or i32 %conv244, %shr243
  %conv246 = trunc i32 %or245 to i8
  store i8 %conv246, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx247 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %101 = load i8, i8* %arrayidx247, align 1
  %conv248 = zext i8 %101 to i32
  %and249 = and i32 %conv248, 120
  %shr250 = ashr i32 %and249, 3
  %102 = load i8, i8* %column, align 1
  %conv251 = zext i8 %102 to i32
  %or252 = or i32 %conv251, %shr250
  %conv253 = trunc i32 %or252 to i8
  store i8 %conv253, i8* %column, align 1
  %103 = load i8, i8* %row, align 1
  %conv254 = zext i8 %103 to i32
  %mul255 = mul nsw i32 %conv254, 16
  %104 = load i8, i8* %column, align 1
  %conv256 = zext i8 %104 to i32
  %add257 = add nsw i32 %mul255, %conv256
  %arrayidx258 = getelementptr inbounds [64 x i32], [64 x i32]* @S5, i32 0, i32 %add257
  %105 = load i32, i32* %arrayidx258, align 4
  %conv259 = trunc i32 %105 to i8
  %conv260 = zext i8 %conv259 to i32
  %shl261 = shl i32 %conv260, 4
  %arrayidx262 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 2
  %106 = load i8, i8* %arrayidx262, align 1
  %conv263 = zext i8 %106 to i32
  %or264 = or i32 %conv263, %shl261
  %conv265 = trunc i32 %or264 to i8
  store i8 %conv265, i8* %arrayidx262, align 1
  store i8 0, i8* %row, align 1
  %arrayidx266 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %107 = load i8, i8* %arrayidx266, align 1
  %conv267 = zext i8 %107 to i32
  %and268 = and i32 %conv267, 2
  %108 = load i8, i8* %row, align 1
  %conv269 = zext i8 %108 to i32
  %or270 = or i32 %conv269, %and268
  %conv271 = trunc i32 %or270 to i8
  store i8 %conv271, i8* %row, align 1
  %arrayidx272 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 4
  %109 = load i8, i8* %arrayidx272, align 1
  %conv273 = zext i8 %109 to i32
  %and274 = and i32 %conv273, 16
  %shr275 = ashr i32 %and274, 4
  %110 = load i8, i8* %row, align 1
  %conv276 = zext i8 %110 to i32
  %or277 = or i32 %conv276, %shr275
  %conv278 = trunc i32 %or277 to i8
  store i8 %conv278, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx279 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 3
  %111 = load i8, i8* %arrayidx279, align 1
  %conv280 = zext i8 %111 to i32
  %and281 = and i32 %conv280, 1
  %shl282 = shl i32 %and281, 3
  %112 = load i8, i8* %column, align 1
  %conv283 = zext i8 %112 to i32
  %or284 = or i32 %conv283, %shl282
  %conv285 = trunc i32 %or284 to i8
  store i8 %conv285, i8* %column, align 1
  %arrayidx286 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 4
  %113 = load i8, i8* %arrayidx286, align 1
  %conv287 = zext i8 %113 to i32
  %and288 = and i32 %conv287, 224
  %shr289 = ashr i32 %and288, 5
  %114 = load i8, i8* %column, align 1
  %conv290 = zext i8 %114 to i32
  %or291 = or i32 %conv290, %shr289
  %conv292 = trunc i32 %or291 to i8
  store i8 %conv292, i8* %column, align 1
  %115 = load i8, i8* %row, align 1
  %conv293 = zext i8 %115 to i32
  %mul294 = mul nsw i32 %conv293, 16
  %116 = load i8, i8* %column, align 1
  %conv295 = zext i8 %116 to i32
  %add296 = add nsw i32 %mul294, %conv295
  %arrayidx297 = getelementptr inbounds [64 x i32], [64 x i32]* @S6, i32 0, i32 %add296
  %117 = load i32, i32* %arrayidx297, align 4
  %conv298 = trunc i32 %117 to i8
  %conv299 = zext i8 %conv298 to i32
  %arrayidx300 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 2
  %118 = load i8, i8* %arrayidx300, align 1
  %conv301 = zext i8 %118 to i32
  %or302 = or i32 %conv301, %conv299
  %conv303 = trunc i32 %or302 to i8
  store i8 %conv303, i8* %arrayidx300, align 1
  store i8 0, i8* %row, align 1
  %arrayidx304 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 4
  %119 = load i8, i8* %arrayidx304, align 1
  %conv305 = zext i8 %119 to i32
  %and306 = and i32 %conv305, 8
  %shr307 = ashr i32 %and306, 2
  %120 = load i8, i8* %row, align 1
  %conv308 = zext i8 %120 to i32
  %or309 = or i32 %conv308, %shr307
  %conv310 = trunc i32 %or309 to i8
  store i8 %conv310, i8* %row, align 1
  %arrayidx311 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %121 = load i8, i8* %arrayidx311, align 1
  %conv312 = zext i8 %121 to i32
  %and313 = and i32 %conv312, 64
  %shr314 = ashr i32 %and313, 6
  %122 = load i8, i8* %row, align 1
  %conv315 = zext i8 %122 to i32
  %or316 = or i32 %conv315, %shr314
  %conv317 = trunc i32 %or316 to i8
  store i8 %conv317, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx318 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 4
  %123 = load i8, i8* %arrayidx318, align 1
  %conv319 = zext i8 %123 to i32
  %and320 = and i32 %conv319, 7
  %shl321 = shl i32 %and320, 1
  %124 = load i8, i8* %column, align 1
  %conv322 = zext i8 %124 to i32
  %or323 = or i32 %conv322, %shl321
  %conv324 = trunc i32 %or323 to i8
  store i8 %conv324, i8* %column, align 1
  %arrayidx325 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %125 = load i8, i8* %arrayidx325, align 1
  %conv326 = zext i8 %125 to i32
  %and327 = and i32 %conv326, 128
  %shr328 = ashr i32 %and327, 7
  %126 = load i8, i8* %column, align 1
  %conv329 = zext i8 %126 to i32
  %or330 = or i32 %conv329, %shr328
  %conv331 = trunc i32 %or330 to i8
  store i8 %conv331, i8* %column, align 1
  %127 = load i8, i8* %row, align 1
  %conv332 = zext i8 %127 to i32
  %mul333 = mul nsw i32 %conv332, 16
  %128 = load i8, i8* %column, align 1
  %conv334 = zext i8 %128 to i32
  %add335 = add nsw i32 %mul333, %conv334
  %arrayidx336 = getelementptr inbounds [64 x i32], [64 x i32]* @S7, i32 0, i32 %add335
  %129 = load i32, i32* %arrayidx336, align 4
  %conv337 = trunc i32 %129 to i8
  %conv338 = zext i8 %conv337 to i32
  %shl339 = shl i32 %conv338, 4
  %arrayidx340 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 3
  %130 = load i8, i8* %arrayidx340, align 1
  %conv341 = zext i8 %130 to i32
  %or342 = or i32 %conv341, %shl339
  %conv343 = trunc i32 %or342 to i8
  store i8 %conv343, i8* %arrayidx340, align 1
  store i8 0, i8* %row, align 1
  %arrayidx344 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %131 = load i8, i8* %arrayidx344, align 1
  %conv345 = zext i8 %131 to i32
  %and346 = and i32 %conv345, 32
  %shr347 = ashr i32 %and346, 4
  %132 = load i8, i8* %row, align 1
  %conv348 = zext i8 %132 to i32
  %or349 = or i32 %conv348, %shr347
  %conv350 = trunc i32 %or349 to i8
  store i8 %conv350, i8* %row, align 1
  %arrayidx351 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %133 = load i8, i8* %arrayidx351, align 1
  %conv352 = zext i8 %133 to i32
  %and353 = and i32 %conv352, 1
  %134 = load i8, i8* %row, align 1
  %conv354 = zext i8 %134 to i32
  %or355 = or i32 %conv354, %and353
  %conv356 = trunc i32 %or355 to i8
  store i8 %conv356, i8* %row, align 1
  store i8 0, i8* %column, align 1
  %arrayidx357 = getelementptr inbounds [6 x i8], [6 x i8]* %er, i32 0, i32 5
  %135 = load i8, i8* %arrayidx357, align 1
  %conv358 = zext i8 %135 to i32
  %and359 = and i32 %conv358, 30
  %shr360 = ashr i32 %and359, 1
  %136 = load i8, i8* %column, align 1
  %conv361 = zext i8 %136 to i32
  %or362 = or i32 %conv361, %shr360
  %conv363 = trunc i32 %or362 to i8
  store i8 %conv363, i8* %column, align 1
  %137 = load i8, i8* %row, align 1
  %conv364 = zext i8 %137 to i32
  %mul365 = mul nsw i32 %conv364, 16
  %138 = load i8, i8* %column, align 1
  %conv366 = zext i8 %138 to i32
  %add367 = add nsw i32 %mul365, %conv366
  %arrayidx368 = getelementptr inbounds [64 x i32], [64 x i32]* @S8, i32 0, i32 %add367
  %139 = load i32, i32* %arrayidx368, align 4
  %conv369 = trunc i32 %139 to i8
  %conv370 = zext i8 %conv369 to i32
  %arrayidx371 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 3
  %140 = load i8, i8* %arrayidx371, align 1
  %conv372 = zext i8 %140 to i32
  %or373 = or i32 %conv372, %conv370
  %conv374 = trunc i32 %or373 to i8
  store i8 %conv374, i8* %arrayidx371, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond375

for.cond375:                                      ; preds = %for.inc380, %for.end91
  %141 = load i32, i32* %i, align 4
  %cmp376 = icmp slt i32 %141, 4
  br i1 %cmp376, label %for.body378, label %for.end382

for.body378:                                      ; preds = %for.cond375
  %142 = load i32, i32* %i, align 4
  %arrayidx379 = getelementptr inbounds [4 x i8], [4 x i8]* %rn, i32 0, i32 %142
  store i8 0, i8* %arrayidx379, align 1
  br label %for.inc380

for.inc380:                                       ; preds = %for.body378
  %143 = load i32, i32* %i, align 4
  %inc381 = add nsw i32 %143, 1
  store i32 %inc381, i32* %i, align 4
  br label %for.cond375

for.end382:                                       ; preds = %for.cond375
  store i32 0, i32* %i, align 4
  br label %for.cond383

for.cond383:                                      ; preds = %for.inc412, %for.end382
  %144 = load i32, i32* %i, align 4
  %cmp384 = icmp slt i32 %144, 32
  br i1 %cmp384, label %for.body386, label %for.end414

for.body386:                                      ; preds = %for.cond383
  %145 = load i32, i32* %i, align 4
  %arrayidx387 = getelementptr inbounds [32 x i32], [32 x i32]* @right_sub_message_permutation, i32 0, i32 %145
  %146 = load i32, i32* %arrayidx387, align 4
  store i32 %146, i32* %shift_size, align 4
  %147 = load i32, i32* %shift_size, align 4
  %sub388 = sub nsw i32 %147, 1
  %rem389 = srem i32 %sub388, 8
  %shr390 = ashr i32 128, %rem389
  %conv391 = trunc i32 %shr390 to i8
  store i8 %conv391, i8* %shift_byte, align 1
  %148 = load i32, i32* %shift_size, align 4
  %sub392 = sub nsw i32 %148, 1
  %div393 = sdiv i32 %sub392, 8
  %arrayidx394 = getelementptr inbounds [4 x i8], [4 x i8]* %ser, i32 0, i32 %div393
  %149 = load i8, i8* %arrayidx394, align 1
  %conv395 = zext i8 %149 to i32
  %150 = load i8, i8* %shift_byte, align 1
  %conv396 = zext i8 %150 to i32
  %and397 = and i32 %conv396, %conv395
  %conv398 = trunc i32 %and397 to i8
  store i8 %conv398, i8* %shift_byte, align 1
  %151 = load i32, i32* %shift_size, align 4
  %sub399 = sub nsw i32 %151, 1
  %rem400 = srem i32 %sub399, 8
  %152 = load i8, i8* %shift_byte, align 1
  %conv401 = zext i8 %152 to i32
  %shl402 = shl i32 %conv401, %rem400
  %conv403 = trunc i32 %shl402 to i8
  store i8 %conv403, i8* %shift_byte, align 1
  %153 = load i8, i8* %shift_byte, align 1
  %conv404 = zext i8 %153 to i32
  %154 = load i32, i32* %i, align 4
  %rem405 = srem i32 %154, 8
  %shr406 = ashr i32 %conv404, %rem405
  %155 = load i32, i32* %i, align 4
  %div407 = sdiv i32 %155, 8
  %arrayidx408 = getelementptr inbounds [4 x i8], [4 x i8]* %rn, i32 0, i32 %div407
  %156 = load i8, i8* %arrayidx408, align 1
  %conv409 = zext i8 %156 to i32
  %or410 = or i32 %conv409, %shr406
  %conv411 = trunc i32 %or410 to i8
  store i8 %conv411, i8* %arrayidx408, align 1
  br label %for.inc412

for.inc412:                                       ; preds = %for.body386
  %157 = load i32, i32* %i, align 4
  %inc413 = add nsw i32 %157, 1
  store i32 %inc413, i32* %i, align 4
  br label %for.cond383

for.end414:                                       ; preds = %for.cond383
  store i32 0, i32* %i, align 4
  br label %for.cond415

for.cond415:                                      ; preds = %for.inc425, %for.end414
  %158 = load i32, i32* %i, align 4
  %cmp416 = icmp slt i32 %158, 4
  br i1 %cmp416, label %for.body418, label %for.end427

for.body418:                                      ; preds = %for.cond415
  %159 = load i32, i32* %i, align 4
  %arrayidx419 = getelementptr inbounds [4 x i8], [4 x i8]* %l, i32 0, i32 %159
  %160 = load i8, i8* %arrayidx419, align 1
  %conv420 = zext i8 %160 to i32
  %161 = load i32, i32* %i, align 4
  %arrayidx421 = getelementptr inbounds [4 x i8], [4 x i8]* %rn, i32 0, i32 %161
  %162 = load i8, i8* %arrayidx421, align 1
  %conv422 = zext i8 %162 to i32
  %xor423 = xor i32 %conv422, %conv420
  %conv424 = trunc i32 %xor423 to i8
  store i8 %conv424, i8* %arrayidx421, align 1
  br label %for.inc425

for.inc425:                                       ; preds = %for.body418
  %163 = load i32, i32* %i, align 4
  %inc426 = add nsw i32 %163, 1
  store i32 %inc426, i32* %i, align 4
  br label %for.cond415

for.end427:                                       ; preds = %for.cond415
  store i32 0, i32* %i, align 4
  br label %for.cond428

for.cond428:                                      ; preds = %for.inc436, %for.end427
  %164 = load i32, i32* %i, align 4
  %cmp429 = icmp slt i32 %164, 4
  br i1 %cmp429, label %for.body431, label %for.end438

for.body431:                                      ; preds = %for.cond428
  %165 = load i32, i32* %i, align 4
  %arrayidx432 = getelementptr inbounds [4 x i8], [4 x i8]* %ln, i32 0, i32 %165
  %166 = load i8, i8* %arrayidx432, align 1
  %167 = load i32, i32* %i, align 4
  %arrayidx433 = getelementptr inbounds [4 x i8], [4 x i8]* %l, i32 0, i32 %167
  store i8 %166, i8* %arrayidx433, align 1
  %168 = load i32, i32* %i, align 4
  %arrayidx434 = getelementptr inbounds [4 x i8], [4 x i8]* %rn, i32 0, i32 %168
  %169 = load i8, i8* %arrayidx434, align 1
  %170 = load i32, i32* %i, align 4
  %arrayidx435 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 %170
  store i8 %169, i8* %arrayidx435, align 1
  br label %for.inc436

for.inc436:                                       ; preds = %for.body431
  %171 = load i32, i32* %i, align 4
  %inc437 = add nsw i32 %171, 1
  store i32 %inc437, i32* %i, align 4
  br label %for.cond428

for.end438:                                       ; preds = %for.cond428
  br label %for.inc439

for.inc439:                                       ; preds = %for.end438
  %172 = load i32, i32* %k, align 4
  %inc440 = add nsw i32 %172, 1
  store i32 %inc440, i32* %k, align 4
  br label %for.cond28

for.end441:                                       ; preds = %for.cond28
  store i32 0, i32* %i, align 4
  br label %for.cond442

for.cond442:                                      ; preds = %for.inc451, %for.end441
  %173 = load i32, i32* %i, align 4
  %cmp443 = icmp slt i32 %173, 4
  br i1 %cmp443, label %for.body445, label %for.end453

for.body445:                                      ; preds = %for.cond442
  %174 = load i32, i32* %i, align 4
  %arrayidx446 = getelementptr inbounds [4 x i8], [4 x i8]* %r, i32 0, i32 %174
  %175 = load i8, i8* %arrayidx446, align 1
  %176 = load i32, i32* %i, align 4
  %arrayidx447 = getelementptr inbounds [8 x i8], [8 x i8]* %pre_end_permutation, i32 0, i32 %176
  store i8 %175, i8* %arrayidx447, align 1
  %177 = load i32, i32* %i, align 4
  %arrayidx448 = getelementptr inbounds [4 x i8], [4 x i8]* %l, i32 0, i32 %177
  %178 = load i8, i8* %arrayidx448, align 1
  %179 = load i32, i32* %i, align 4
  %add449 = add nsw i32 4, %179
  %arrayidx450 = getelementptr inbounds [8 x i8], [8 x i8]* %pre_end_permutation, i32 0, i32 %add449
  store i8 %178, i8* %arrayidx450, align 1
  br label %for.inc451

for.inc451:                                       ; preds = %for.body445
  %180 = load i32, i32* %i, align 4
  %inc452 = add nsw i32 %180, 1
  store i32 %inc452, i32* %i, align 4
  br label %for.cond442

for.end453:                                       ; preds = %for.cond442
  store i32 0, i32* %i, align 4
  br label %for.cond454

for.cond454:                                      ; preds = %for.inc483, %for.end453
  %181 = load i32, i32* %i, align 4
  %cmp455 = icmp slt i32 %181, 64
  br i1 %cmp455, label %for.body457, label %for.end485

for.body457:                                      ; preds = %for.cond454
  %182 = load i32, i32* %i, align 4
  %arrayidx458 = getelementptr inbounds [64 x i32], [64 x i32]* @final_message_permutation, i32 0, i32 %182
  %183 = load i32, i32* %arrayidx458, align 4
  store i32 %183, i32* %shift_size, align 4
  %184 = load i32, i32* %shift_size, align 4
  %sub459 = sub nsw i32 %184, 1
  %rem460 = srem i32 %sub459, 8
  %shr461 = ashr i32 128, %rem460
  %conv462 = trunc i32 %shr461 to i8
  store i8 %conv462, i8* %shift_byte, align 1
  %185 = load i32, i32* %shift_size, align 4
  %sub463 = sub nsw i32 %185, 1
  %div464 = sdiv i32 %sub463, 8
  %arrayidx465 = getelementptr inbounds [8 x i8], [8 x i8]* %pre_end_permutation, i32 0, i32 %div464
  %186 = load i8, i8* %arrayidx465, align 1
  %conv466 = zext i8 %186 to i32
  %187 = load i8, i8* %shift_byte, align 1
  %conv467 = zext i8 %187 to i32
  %and468 = and i32 %conv467, %conv466
  %conv469 = trunc i32 %and468 to i8
  store i8 %conv469, i8* %shift_byte, align 1
  %188 = load i32, i32* %shift_size, align 4
  %sub470 = sub nsw i32 %188, 1
  %rem471 = srem i32 %sub470, 8
  %189 = load i8, i8* %shift_byte, align 1
  %conv472 = zext i8 %189 to i32
  %shl473 = shl i32 %conv472, %rem471
  %conv474 = trunc i32 %shl473 to i8
  store i8 %conv474, i8* %shift_byte, align 1
  %190 = load i8, i8* %shift_byte, align 1
  %conv475 = zext i8 %190 to i32
  %191 = load i32, i32* %i, align 4
  %rem476 = srem i32 %191, 8
  %shr477 = ashr i32 %conv475, %rem476
  %192 = load i8*, i8** %processed_piece.addr, align 4
  %193 = load i32, i32* %i, align 4
  %div478 = sdiv i32 %193, 8
  %arrayidx479 = getelementptr inbounds i8, i8* %192, i32 %div478
  %194 = load i8, i8* %arrayidx479, align 1
  %conv480 = zext i8 %194 to i32
  %or481 = or i32 %conv480, %shr477
  %conv482 = trunc i32 %or481 to i8
  store i8 %conv482, i8* %arrayidx479, align 1
  br label %for.inc483

for.inc483:                                       ; preds = %for.body457
  %195 = load i32, i32* %i, align 4
  %inc484 = add nsw i32 %195, 1
  store i32 %inc484, i32* %i, align 4
  br label %for.cond454

for.end485:                                       ; preds = %for.cond454
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i32(i8* nocapture writeonly, i8, i32, i1) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i1) #3

; Function Attrs: noinline optnone sspstrong
define dso_local i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %retval = alloca i32, align 4
  %argv.addr = alloca i8**, align 4
  %argc.addr = alloca i32, align 4
  %start = alloca i32, align 4
  %finish = alloca i32, align 4
  %time_taken = alloca double, align 8
  %file_size = alloca i32, align 4
  %padding = alloca i16, align 2
  %iseed = alloca i32, align 4
  %bytes_written = alloca i16, align 2
  %des_key = alloca i8*, align 4
  %bytes_read = alloca i16, align 2
  %des_key45 = alloca i8*, align 4
  %bytes_written69 = alloca i16, align 2
  %process_mode = alloca i16, align 2
  %block_count = alloca i32, align 4
  %number_of_blocks = alloca i32, align 4
  %data_block = alloca i8*, align 4
  %processed_block = alloca i8*, align 4
  %key_sets = alloca %struct.key_set*, align 4
  store i32 0, i32* %retval, align 4
  store i8** %argv, i8*** %argv.addr, align 4
  store i32 %argc, i32* %argc.addr, align 4
  %0 = load i32, i32* %argc.addr, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @"??_C@_0EF@LEAOBOIJ@You?5must?5provide?5at?5least?51?5para@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8**, i8*** %argv.addr, align 4
  %arrayidx = getelementptr inbounds i8*, i8** %1, i32 1
  %2 = load i8*, i8** %arrayidx, align 4
  %call1 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02BKJHAODO@?9g?$AA@", i32 0, i32 0))
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %3 = load i32, i32* %argc.addr, align 4
  %cmp4 = icmp ne i32 %3, 3
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.then3
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @"??_C@_0EA@BFJPECMN@Invalid?5?$CD?5of?5parameter?5specified@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.then3
  %4 = load i8**, i8*** %argv.addr, align 4
  %arrayidx8 = getelementptr inbounds i8*, i8** %4, i32 2
  %5 = load i8*, i8** %arrayidx8, align 4
  %call9 = call %struct._iobuf* @fopen(i8* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02GMLFBBN@wb?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call9, %struct._iobuf** @key_file, align 4
  %6 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %tobool = icmp ne %struct._iobuf* %6, null
  br i1 %tobool, label %if.end12, label %if.then10

if.then10:                                        ; preds = %if.end7
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@HHNBFEDG@Could?5not?5open?5file?5to?5write?5key@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end7
  %call13 = call i64 @time(i64* null)
  %conv = trunc i64 %call13 to i32
  store i32 %conv, i32* %iseed, align 4
  %7 = load i32, i32* %iseed, align 4
  call void @srand(i32 %7)
  %call14 = call noalias i8* @malloc(i32 8) #3
  store i8* %call14, i8** %des_key, align 4
  %8 = load i8*, i8** %des_key, align 4
  call void @generate_key(i8* %8)
  %9 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %10 = load i8*, i8** %des_key, align 4
  %call15 = call i32 @fwrite(i8* %10, i32 1, i32 8, %struct._iobuf* %9)
  %conv16 = trunc i32 %call15 to i16
  store i16 %conv16, i16* %bytes_written, align 2
  %11 = load i16, i16* %bytes_written, align 2
  %conv17 = sext i16 %11 to i32
  %cmp18 = icmp ne i32 %conv17, 8
  br i1 %cmp18, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end12
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @"??_C@_0CC@FJNHMKJL@Error?5writing?5key?5to?5output?5file@", i32 0, i32 0))
  %12 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %call22 = call i32 @fclose(%struct._iobuf* %12)
  %13 = load i8*, i8** %des_key, align 4
  call void @free(i8* %13) #3
  store i32 1, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.end12
  %14 = load i8*, i8** %des_key, align 4
  call void @free(i8* %14) #3
  %15 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %call24 = call i32 @fclose(%struct._iobuf* %15)
  br label %if.end156

if.else:                                          ; preds = %if.end
  %16 = load i8**, i8*** %argv.addr, align 4
  %arrayidx25 = getelementptr inbounds i8*, i8** %16, i32 1
  %17 = load i8*, i8** %arrayidx25, align 4
  %call26 = call i32 @strcmp(i8* %17, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02CIKBGMLM@?9e?$AA@", i32 0, i32 0))
  %cmp27 = icmp eq i32 %call26, 0
  br i1 %cmp27, label %if.then33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %18 = load i8**, i8*** %argv.addr, align 4
  %arrayidx29 = getelementptr inbounds i8*, i8** %18, i32 1
  %19 = load i8*, i8** %arrayidx29, align 4
  %call30 = call i32 @strcmp(i8* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02DBLKFNPN@?9d?$AA@", i32 0, i32 0))
  %cmp31 = icmp eq i32 %call30, 0
  br i1 %cmp31, label %if.then33, label %if.else153

if.then33:                                        ; preds = %lor.lhs.false, %if.else
  %20 = load i32, i32* %argc.addr, align 4
  %cmp34 = icmp ne i32 %20, 5
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %if.then33
  %21 = load i32, i32* %argc.addr, align 4
  %call37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([98 x i8], [98 x i8]* @"??_C@_0GC@CNACNKJO@Invalid?5?$CD?5of?5parameters?5?$CI?$CFd?$CJ?5spe@", i32 0, i32 0), i32 %21)
  store i32 1, i32* %retval, align 4
  br label %return

if.end38:                                         ; preds = %if.then33
  %22 = load i8**, i8*** %argv.addr, align 4
  %arrayidx39 = getelementptr inbounds i8*, i8** %22, i32 2
  %23 = load i8*, i8** %arrayidx39, align 4
  %call40 = call %struct._iobuf* @fopen(i8* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02JDPG@rb?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call40, %struct._iobuf** @key_file, align 4
  %24 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %tobool41 = icmp ne %struct._iobuf* %24, null
  br i1 %tobool41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %if.end38
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"??_C@_0CF@FHLEAPML@Could?5not?5open?5key?5file?5to?5read?5@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end44:                                         ; preds = %if.end38
  %call46 = call noalias i8* @malloc(i32 8) #3
  store i8* %call46, i8** %des_key45, align 4
  %25 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %26 = load i8*, i8** %des_key45, align 4
  %call47 = call i32 @fread(i8* %26, i32 1, i32 8, %struct._iobuf* %25)
  %conv48 = trunc i32 %call47 to i16
  store i16 %conv48, i16* %bytes_read, align 2
  %27 = load i16, i16* %bytes_read, align 2
  %conv49 = sext i16 %27 to i32
  %cmp50 = icmp ne i32 %conv49, 8
  br i1 %cmp50, label %if.then52, label %if.end55

if.then52:                                        ; preds = %if.end44
  %call53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @"??_C@_0DF@KDDFFPFJ@Key?5read?5from?5key?5file?5does?5nto?5@", i32 0, i32 0))
  %28 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %call54 = call i32 @fclose(%struct._iobuf* %28)
  store i32 1, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end44
  %29 = load %struct._iobuf*, %struct._iobuf** @key_file, align 4
  %call56 = call i32 @fclose(%struct._iobuf* %29)
  %30 = load i8**, i8*** %argv.addr, align 4
  %arrayidx57 = getelementptr inbounds i8*, i8** %30, i32 3
  %31 = load i8*, i8** %arrayidx57, align 4
  %call58 = call %struct._iobuf* @fopen(i8* %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02JDPG@rb?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call58, %struct._iobuf** @input_file, align 4
  %32 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %tobool59 = icmp ne %struct._iobuf* %32, null
  br i1 %tobool59, label %if.end62, label %if.then60

if.then60:                                        ; preds = %if.end55
  %call61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @"??_C@_0CI@BKMPCFLJ@Could?5not?5open?5input?5file?5to?5rea@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end62:                                         ; preds = %if.end55
  %33 = load i8**, i8*** %argv.addr, align 4
  %arrayidx63 = getelementptr inbounds i8*, i8** %33, i32 4
  %34 = load i8*, i8** %arrayidx63, align 4
  %call64 = call %struct._iobuf* @fopen(i8* %34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02GMLFBBN@wb?$AA@", i32 0, i32 0))
  store %struct._iobuf* %call64, %struct._iobuf** @output_file, align 4
  %35 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %tobool65 = icmp ne %struct._iobuf* %35, null
  br i1 %tobool65, label %if.end68, label %if.then66

if.then66:                                        ; preds = %if.end62
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @"??_C@_0CK@FHHBJFFD@Could?5not?5open?5output?5file?5to?5wr@", i32 0, i32 0))
  store i32 1, i32* %retval, align 4
  br label %return

if.end68:                                         ; preds = %if.end62
  store i32 0, i32* %block_count, align 4
  %call70 = call noalias i8* @malloc(i32 8) #3
  store i8* %call70, i8** %data_block, align 4
  %call71 = call noalias i8* @malloc(i32 8) #3
  store i8* %call71, i8** %processed_block, align 4
  %call72 = call noalias i8* @malloc(i32 272) #3
  %36 = bitcast i8* %call72 to %struct.key_set*
  store %struct.key_set* %36, %struct.key_set** %key_sets, align 4
  %call73 = call i32 @clock()
  store i32 %call73, i32* %start, align 4
  %37 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %38 = load i8*, i8** %des_key45, align 4
  call void @generate_sub_keys(i8* %38, %struct.key_set* %37)
  %call74 = call i32 @clock()
  store i32 %call74, i32* %finish, align 4
  %39 = load i32, i32* %finish, align 4
  %40 = load i32, i32* %start, align 4
  %sub = sub nsw i32 %39, %40
  %conv75 = sitofp i32 %sub to double
  %div = fdiv double %conv75, 1.000000e+03
  store double %div, double* %time_taken, align 8
  %41 = load i8**, i8*** %argv.addr, align 4
  %arrayidx76 = getelementptr inbounds i8*, i8** %41, i32 1
  %42 = load i8*, i8** %arrayidx76, align 4
  %call77 = call i32 @strcmp(i8* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"??_C@_02CIKBGMLM@?9e?$AA@", i32 0, i32 0))
  %cmp78 = icmp eq i32 %call77, 0
  br i1 %cmp78, label %if.then80, label %if.else82

if.then80:                                        ; preds = %if.end68
  store i16 1, i16* %process_mode, align 2
  %call81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"??_C@_0O@LLDPPJEB@Encrypting?4?4?6?$AA@", i32 0, i32 0))
  br label %if.end84

if.else82:                                        ; preds = %if.end68
  store i16 0, i16* %process_mode, align 2
  %call83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"??_C@_0O@MBPJKHJE@Decrypting?4?4?6?$AA@", i32 0, i32 0))
  br label %if.end84

if.end84:                                         ; preds = %if.else82, %if.then80
  %43 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %call85 = call i32 @fseek(%struct._iobuf* %43, i32 0, i32 2)
  %44 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %call86 = call i32 @ftell(%struct._iobuf* %44)
  store i32 %call86, i32* %file_size, align 4
  %45 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %call87 = call i32 @fseek(%struct._iobuf* %45, i32 0, i32 0)
  %46 = load i32, i32* %file_size, align 4
  %div88 = udiv i32 %46, 8
  %47 = load i32, i32* %file_size, align 4
  %rem = urem i32 %47, 8
  %tobool89 = icmp ne i32 %rem, 0
  %48 = zext i1 %tobool89 to i64
  %cond = select i1 %tobool89, i32 1, i32 0
  %add = add i32 %div88, %cond
  store i32 %add, i32* %number_of_blocks, align 4
  %call90 = call i32 @clock()
  store i32 %call90, i32* %start, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end144, %if.end84
  %49 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %50 = load i8*, i8** %data_block, align 4
  %call91 = call i32 @fread(i8* %50, i32 1, i32 8, %struct._iobuf* %49)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %51 = load i32, i32* %block_count, align 4
  %inc = add i32 %51, 1
  store i32 %inc, i32* %block_count, align 4
  %52 = load i32, i32* %block_count, align 4
  %53 = load i32, i32* %number_of_blocks, align 4
  %cmp93 = icmp eq i32 %52, %53
  br i1 %cmp93, label %if.then95, label %if.else140

if.then95:                                        ; preds = %while.body
  %54 = load i16, i16* %process_mode, align 2
  %conv96 = sext i16 %54 to i32
  %cmp97 = icmp eq i32 %conv96, 1
  br i1 %cmp97, label %if.then99, label %if.else126

if.then99:                                        ; preds = %if.then95
  %55 = load i32, i32* %file_size, align 4
  %rem100 = urem i32 %55, 8
  %sub101 = sub i32 8, %rem100
  %conv102 = trunc i32 %sub101 to i16
  store i16 %conv102, i16* %padding, align 2
  %56 = load i16, i16* %padding, align 2
  %conv103 = zext i16 %56 to i32
  %cmp104 = icmp slt i32 %conv103, 8
  br i1 %cmp104, label %if.then106, label %if.end112

if.then106:                                       ; preds = %if.then99
  %57 = load i8*, i8** %data_block, align 4
  %add.ptr = getelementptr inbounds i8, i8* %57, i32 8
  %58 = load i16, i16* %padding, align 2
  %conv107 = zext i16 %58 to i32
  %idx.neg = sub i32 0, %conv107
  %add.ptr108 = getelementptr inbounds i8, i8* %add.ptr, i32 %idx.neg
  %59 = load i16, i16* %padding, align 2
  %conv109 = trunc i16 %59 to i8
  %conv110 = zext i8 %conv109 to i32
  %60 = trunc i32 %conv110 to i8
  %61 = load i16, i16* %padding, align 2
  %conv111 = zext i16 %61 to i32
  call void @llvm.memset.p0i8.i32(i8* align 1 %add.ptr108, i8 %60, i32 %conv111, i1 false)
  br label %if.end112

if.end112:                                        ; preds = %if.then106, %if.then99
  %62 = load i16, i16* %process_mode, align 2
  %conv113 = sext i16 %62 to i32
  %63 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %64 = load i8*, i8** %processed_block, align 4
  %65 = load i8*, i8** %data_block, align 4
  call void @process_message(i8* %65, i8* %64, %struct.key_set* %63, i32 %conv113)
  %66 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %67 = load i8*, i8** %processed_block, align 4
  %call114 = call i32 @fwrite(i8* %67, i32 1, i32 8, %struct._iobuf* %66)
  %conv115 = trunc i32 %call114 to i16
  store i16 %conv115, i16* %bytes_written69, align 2
  %68 = load i16, i16* %padding, align 2
  %conv116 = zext i16 %68 to i32
  %cmp117 = icmp eq i32 %conv116, 8
  br i1 %cmp117, label %if.then119, label %if.end125

if.then119:                                       ; preds = %if.end112
  %69 = load i8*, i8** %data_block, align 4
  %70 = load i16, i16* %padding, align 2
  %conv120 = trunc i16 %70 to i8
  %conv121 = zext i8 %conv120 to i32
  %71 = trunc i32 %conv121 to i8
  call void @llvm.memset.p0i8.i32(i8* align 1 %69, i8 %71, i32 8, i1 false)
  %72 = load i16, i16* %process_mode, align 2
  %conv122 = sext i16 %72 to i32
  %73 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %74 = load i8*, i8** %processed_block, align 4
  %75 = load i8*, i8** %data_block, align 4
  call void @process_message(i8* %75, i8* %74, %struct.key_set* %73, i32 %conv122)
  %76 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %77 = load i8*, i8** %processed_block, align 4
  %call123 = call i32 @fwrite(i8* %77, i32 1, i32 8, %struct._iobuf* %76)
  %conv124 = trunc i32 %call123 to i16
  store i16 %conv124, i16* %bytes_written69, align 2
  br label %if.end125

if.end125:                                        ; preds = %if.then119, %if.end112
  br label %if.end139

if.else126:                                       ; preds = %if.then95
  %78 = load i16, i16* %process_mode, align 2
  %conv127 = sext i16 %78 to i32
  %79 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %80 = load i8*, i8** %processed_block, align 4
  %81 = load i8*, i8** %data_block, align 4
  call void @process_message(i8* %81, i8* %80, %struct.key_set* %79, i32 %conv127)
  %82 = load i8*, i8** %processed_block, align 4
  %arrayidx128 = getelementptr inbounds i8, i8* %82, i32 7
  %83 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %83 to i16
  store i16 %conv129, i16* %padding, align 2
  %84 = load i16, i16* %padding, align 2
  %conv130 = zext i16 %84 to i32
  %cmp131 = icmp slt i32 %conv130, 8
  br i1 %cmp131, label %if.then133, label %if.end138

if.then133:                                       ; preds = %if.else126
  %85 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %86 = load i16, i16* %padding, align 2
  %conv134 = zext i16 %86 to i32
  %sub135 = sub nsw i32 8, %conv134
  %87 = load i8*, i8** %processed_block, align 4
  %call136 = call i32 @fwrite(i8* %87, i32 1, i32 %sub135, %struct._iobuf* %85)
  %conv137 = trunc i32 %call136 to i16
  store i16 %conv137, i16* %bytes_written69, align 2
  br label %if.end138

if.end138:                                        ; preds = %if.then133, %if.else126
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.end125
  br label %if.end144

if.else140:                                       ; preds = %while.body
  %88 = load i16, i16* %process_mode, align 2
  %conv141 = sext i16 %88 to i32
  %89 = load %struct.key_set*, %struct.key_set** %key_sets, align 4
  %90 = load i8*, i8** %processed_block, align 4
  %91 = load i8*, i8** %data_block, align 4
  call void @process_message(i8* %91, i8* %90, %struct.key_set* %89, i32 %conv141)
  %92 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %93 = load i8*, i8** %processed_block, align 4
  %call142 = call i32 @fwrite(i8* %93, i32 1, i32 8, %struct._iobuf* %92)
  %conv143 = trunc i32 %call142 to i16
  store i16 %conv143, i16* %bytes_written69, align 2
  br label %if.end144

if.end144:                                        ; preds = %if.else140, %if.end139
  %94 = load i8*, i8** %data_block, align 4
  call void @llvm.memset.p0i8.i32(i8* align 1 %94, i8 0, i32 8, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call145 = call i32 @clock()
  store i32 %call145, i32* %finish, align 4
  %95 = load i8*, i8** %des_key45, align 4
  call void @free(i8* %95) #3
  %96 = load i8*, i8** %data_block, align 4
  call void @free(i8* %96) #3
  %97 = load i8*, i8** %processed_block, align 4
  call void @free(i8* %97) #3
  %98 = load %struct._iobuf*, %struct._iobuf** @input_file, align 4
  %call146 = call i32 @fclose(%struct._iobuf* %98)
  %99 = load %struct._iobuf*, %struct._iobuf** @output_file, align 4
  %call147 = call i32 @fclose(%struct._iobuf* %99)
  %100 = load i32, i32* %finish, align 4
  %101 = load i32, i32* %start, align 4
  %sub148 = sub nsw i32 %100, %101
  %conv149 = sitofp i32 %sub148 to double
  %div150 = fdiv double %conv149, 1.000000e+03
  store double %div150, double* %time_taken, align 8
  %102 = load double, double* %time_taken, align 8
  %103 = load i8**, i8*** %argv.addr, align 4
  %arrayidx151 = getelementptr inbounds i8*, i8** %103, i32 3
  %104 = load i8*, i8** %arrayidx151, align 4
  %call152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @"??_C@_0DC@MHEFLGGM@Finished?5processing?5?$CFs?4?5Time?5tak@", i32 0, i32 0), i8* %104, double %102)
  store i32 0, i32* %retval, align 4
  br label %return

if.else153:                                       ; preds = %lor.lhs.false
  %105 = load i8**, i8*** %argv.addr, align 4
  %arrayidx154 = getelementptr inbounds i8*, i8** %105, i32 1
  %106 = load i8*, i8** %arrayidx154, align 4
  %call155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @"??_C@_0DO@PBDDNJFP@Invalid?5action?3?5?$CFs?4?5First?5parame@", i32 0, i32 0), i8* %106)
  store i32 1, i32* %retval, align 4
  br label %return

if.end156:                                        ; preds = %if.end23
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end156, %if.else153, %while.end, %if.then66, %if.then60, %if.then52, %if.then42, %if.then36, %if.then20, %if.then10, %if.then5, %if.then
  %107 = load i32, i32* %retval, align 4
  ret i32 %107
}

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dllimport %struct._iobuf* @fopen(i8*, i8*) #1

; Function Attrs: noinline optnone sspstrong
define internal i64 @time(i64* %_Time) #0 {
entry:
  %_Time.addr = alloca i64*, align 4
  store i64* %_Time, i64** %_Time.addr, align 4
  %0 = load i64*, i64** %_Time.addr, align 4
  %call = call i64 @_time64(i64* %0)
  ret i64 %call
}

declare dllimport void @srand(i32) #1

; Function Attrs: argmemonly nounwind
declare dllimport noalias i8* @malloc(i32) #4

declare dllimport i32 @fwrite(i8*, i32, i32, %struct._iobuf*) #1

declare dllimport i32 @fclose(%struct._iobuf*) #1

; Function Attrs: argmemonly nounwind
declare dllimport void @free(i8*) #4

declare dllimport i32 @fread(i8*, i32, i32, %struct._iobuf*) #1

declare dllimport i32 @clock() #1

declare dllimport i32 @fseek(%struct._iobuf*, i32, i32) #1

declare dllimport i32 @ftell(%struct._iobuf*) #1

declare dllimport i64 @_time64(i64*) #1

attributes #0 = { noinline optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline nounwind optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { argmemonly nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="pentium4" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.linker.options = !{!0, !1, !0, !1}
!llvm.ident = !{!2, !2}
!llvm.module.flags = !{!3, !4}

!0 = !{!"/DEFAULTLIB:msvcrtd.lib"}
!1 = !{!"/DEFAULTLIB:oldnames.lib"}
!2 = !{!"Obfuscator-LLVM clang version 8.0.1 (tags/RELEASE_801/final) (based on Obfuscator-LLVM 8.0.1)"}
!3 = !{i32 1, !"NumRegisterParameters", i32 0}
!4 = !{i32 1, !"wchar_size", i32 2}
